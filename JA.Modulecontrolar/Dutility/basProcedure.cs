using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Dutility
{
    public class basProcedure
    {
        public static string gCreateAdavanceSP()
        {
            string strSQL;
            strSQL = CreateBalanceSheet();
            strSQL = CreateBalanceSheetH();
            strSQL = CreateBalanceSheetManufactureH();
            strSQL = CreateBalanceSheetManufactureV();
            strSQL = CreateBalanceSheetManufactureBranchH();
            strSQL = CreateBalanceSheetVertical();
            strSQL = CreateBalanceSheetBranchH();
            //strSQL=CreateProfitLossH();
            strSQL = CreateProfitLossV();
            strSQL = CreateTrailBalanceGroup();
            strSQL = CreateTrailBalanceLedger();
            strSQL = CreateTrailBalanceGroupNI();
            strSQL = CreateTrailBalanceLedgerNI();
            strSQL = CreateTrailBalanceBranchGroup();
            strSQL = CreateTrailBalanceBranchLedger();
            strSQL = CreateTrailBalanceNIBranchGroup();
            strSQL = CreateTrailBalanceNIBranchLedger();
            strSQL = CreateBalanceSheetBranchV();
            strSQL = CreateProfitLossBranch();
            strSQL = CreateReceiptPayment();
            strSQL = CreateReceiptPaymentBranch();
            strSQL = CreateManufactureCosting();
            strSQL = CreateInsertUserConfig();
            strSQL = CreateInsertUserConfig();
            strSQL = CreateUpdateUserConfig();
            strSQL = CreateTrading();
            strSQL = CreateProfitLossH1();
            strSQL = CreateReceiptPaymentNew();
            strSQL = CreateBranchProcedure();
            strSQL = CreateInsertProcedure();
            return strSQL;
        }
        private static string CreateInsertProcedure()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gInsertPurInvTran') ";
                    strSQL = strSQL + "Drop PROCEDURE gInsertPurInvTran ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    strSQL = "CREATE PROCEDURE gInsertPurInvTran @BranchID varchar(4),@TranKey varchar(50),@RefNo varchar(30),@VoucherPosition INTEGER,@ItemName varchar(50),@VoucherType INTEGER,@VoucherDate Datetime,@Qty numeric(12,2),@Rate numeric(12,2),@Location varchar(50),@Amount numeric(12,2),@IOFlag char(1),@AgVoucherType INTEGER,@InQty numeric(12,2),@InAmt numeric(12,2),@UOM varchar(10),@Per varchar(10),@InvLog varchar(50) AS DECLARE @InvRunningQty float BEGIN SELECT @InvRunningQty = INV_TRAN_RUNNING_QTY FROM INV_TRAN WHERE INV_DATE <= @VoucherDate AND STOCKITEM_NAME = @ItemName ORDER BY INV_DATE SET @InvRunningQty = @InvRunningQty + @Qty END BEGIN INSERT INTO INV_TRAN(BRANCH_ID,INV_TRAN_KEY,INV_REF_NO,INV_TRAN_POSITION,STOCKITEM_NAME,INV_VOUCHER_TYPE,INV_DATE,INV_TRAN_QUANTITY,INV_TRAN_RATE,GODOWNS_NAME,INV_TRAN_AMOUNT,INV_INOUT_FLAG,BILL_TRAN_AGST_VOUCHER_TYPE,INWARD_QUANTITY,INWARD_AMOUNT,INV_PER,INV_UOM,INV_LOG_NO) VALUES(@BranchID,@TranKey,@RefNo,@VoucherPosition,@ItemName,@VoucherType,@VoucherDate,@Qty,@Rate,@Location,@Amount,@IOFlag,@AgVoucherType,@InQty,@InAmt,@UOM,@Per,@InvLog) END UPDATE INV_TRAN SET INV_TRAN_RUNNING_QTY = @InvRunningQty WHERE INV_DATE = @VoucherDate AND STOCKITEM_NAME = @ItemName ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gInsertSalInvTran') ";
                    strSQL = strSQL + "Drop PROCEDURE gInsertSalInvTran ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    strSQL = "CREATE PROCEDURE gInsertSalInvTran @BranchID varchar(4),@TranKey varchar(50),@RefNo varchar(30),@VoucherPosition INTEGER,@ItemName varchar(50),@VoucherType INTEGER,@VoucherDate Datetime,@Qty numeric(12,2),@Rate numeric(12,2),@Location varchar(50),@Amount numeric(12,2),@IOFlag char(1),@AgVoucherType INTEGER,@OutQty numeric(12,2),@OutCostAmt numeric(12,2),@OutSalesAmt numeric(12,2),@UOM varchar(10),@Per varchar(10),@InvLog varchar(50) AS DECLARE @InvRunningQty float DECLARE @InvStartDate DATETIME DECLARE @InvQty float DECLARE @InvAmt float DECLARE @InvCostRate float  BEGIN SELECT @InvRunningQty = INV_TRAN_RUNNING_QTY FROM INV_TRAN WHERE INV_DATE <= @VoucherDate AND STOCKITEM_NAME = @ItemName ORDER BY INV_DATE SET @InvRunningQty = @InvRunningQty + @Qty SET @InvStartDate = '01-01-1899' SELECT @InvStartDate = INV_DATE FROM INV_TRAN WHERE STOCKITEM_NAME = @ItemName AND INV_DATE < convert(datetime,@VoucherDate,103)  AND INV_TRAN_RUNNING_QTY = 0 ORDER BY INV_DATE SELECT @InvQty = SUM(INV_TRAN_QUANTITY),@InvAmt = SUM(INV_TRAN_AMOUNT) FROM INV_TRAN WHERE STOCKITEM_NAME = @ItemName AND (INV_DATE > convert(datetime,@InvStartDate,103) AND INV_DATE <= convert(datetime,@VoucherDate,103)) IF @InvQty <> 0 SET @InvCostRate = @InvAmt/@InvQty SET @OutCostAmt = (@InvCostRate * @Qty) IF @OutCostAmt IS NULL SET @OutCostAmt = 0 END BEGIN INSERT INTO INV_TRAN(BRANCH_ID,INV_TRAN_KEY,INV_REF_NO,INV_TRAN_POSITION,STOCKITEM_NAME,INV_VOUCHER_TYPE,INV_DATE,INV_TRAN_QUANTITY,INV_TRAN_RATE,GODOWNS_NAME,INV_TRAN_AMOUNT,INV_INOUT_FLAG,BILL_TRAN_AGST_VOUCHER_TYPE,OUTWARD_QUANTITY,OUTWARD_COST_AMOUNT,OUTWARD_SALES_AMOUNT,INV_PER,INV_UOM,INV_LOG_NO) VALUES(@BranchID,@TranKey,@RefNo,@VoucherPosition,@ItemName,@VoucherType,@VoucherDate,@Qty,@Rate,@Location,@Amount,@IOFlag,@AgVoucherType,@OutQty,@OutCostAmt,@OutSalesAmt,@UOM,@Per,@InvLog) END UPDATE INV_TRAN SET INV_TRAN_RUNNING_QTY = @InvRunningQty WHERE INV_DATE = @VoucherDate AND STOCKITEM_NAME = @ItemName ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gInsertVoucher') ";
                    strSQL = strSQL + "Drop PROCEDURE gInsertVoucher ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    strSQL = "CREATE PROCEDURE gInsertVoucher @RefNo varchar(50),@RefNoKey varchar(50),@BranchID varchar(4),@VoucherType INTEGER,@VoucherDate Datetime,@Ledger varchar(50),@ChequeNo varchar(30),@ChequeDate Datetime,@ChequeDrawn varchar(30),@Debit numeric(12,2),@Credit numeric(12,2),@AddAmount numeric(12,2),@LessAmount numeric(12,2),@ToBy char(2),@RevLedger varchar(50),@FCDebit numeric(12,2),@FCCredit numeric(12,2),@CurSymbol varchar(5),@AddLessSign varchar(10),@FCRate numeric(12,2),@CashFlow INTEGER,@AgRefNo varchar(30) AS BEGIN INSERT INTO ACC_VOUCHER(COMP_REF_NO,VOUCHER_REF_KEY,BRANCH_ID,COMP_VOUCHER_TYPE,COMP_VOUCHER_DATE,LEDGER_NAME,VOUCHER_CHEQUE_NUMBER,VOUCHER_CHEQUE_DATE,VOUCHER_CHEQUE_DRAWN_ON,VOUCHER_DEBIT_AMOUNT,VOUCHER_CREDIT_AMOUNT,VOUCHER_ADD_AMOUNT,VOUCHER_LESS_AMOUNT,VOUCHER_TOBY,VOUCHER_REVERSE_LEDGER,VOUCHER_FC_DEBIT_AMOUNT,VOUCHER_FC_CREDIT_AMOUNT,VOUCHER_CURRENCY_SYMBOL,VOUCHER_ADD_LESS_SIGN,FC_CONVERSION_RATE,VOUCHER_CASHFLOW,AGNST_COMP_REF_NO) VALUES(@RefNo,@RefNoKey,@BranchID,@VoucherType,@VoucherDate,@Ledger,@ChequeNo,@ChequeDate,@ChequeDrawn,@Debit,@Credit,@AddAmount,@LessAmount,@ToBy,@RevLedger,@FCDebit,@FCCredit,@CurSymbol,@AddLessSign,@FCRate,@CashFlow,@AgRefNo) END ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gTradingAndPL') ";
                    strSQL = strSQL + "Drop PROCEDURE gTradingAndPL ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    strSQL = "CREATE PROCEDURE gTradingAndPL @frDate DATETIME,@toDate DATETIME, @BusinessType INT, @ManuCost float,@dblSalesCost numeric(18,2) WITH ENCRYPTION AS BEGIN TRANSACTION DELETE FROM ACC_TRADING_PROFIT_LOSS IF @BusinessType = 4 BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_TRADING_PROFIT_LOSS(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_GROUP,GR_PRIMARY_TYPE,GR_AMOUNT) VALUES('Cost of Goods Manufactured','Cost of Goods Manufactured',1,2,2,4,@ManuCost) ";
                    strSQL = strSQL + "INSERT INTO ACC_TRADING_PROFIT_LOSS(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_GROUP,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT STOCKITEM_PRIMARY_GROUP,'Opening Stock of Finish Goods',1,2,2,3.5,SUM(INV_TRAN_AMOUNT) AS OPENING FROM INV_STOCK_QRY WHERE INV_DATE < @frDate AND STOCKGROUP_PRIMARY_TYPE = 3 ";
                    strSQL = strSQL + "GROUP BY STOCKITEM_PRIMARY_GROUP INSERT INTO ACC_TRADING_PROFIT_LOSS(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_GROUP,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT STOCKITEM_PRIMARY_GROUP,'Closing Stock of Finish Goods',1,2,2,5,(SUM(INV_TRAN_AMOUNT) * -1) AS OPENING FROM INV_STOCK_QRY WHERE INV_DATE <= @toDate AND STOCKGROUP_PRIMARY_TYPE = 3 ";
                    strSQL = strSQL + "GROUP BY STOCKITEM_PRIMARY_GROUP END IF @BusinessType <> 4 BEGIN INSERT INTO ACC_TRADING_PROFIT_LOSS(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_GROUP,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT STOCKITEM_PRIMARY_GROUP,'Opening Stock',1,2,2,3.5,SUM(INV_TRAN_AMOUNT) AS OPENING FROM INV_STOCK_QRY WHERE INV_DATE < @frDate GROUP BY STOCKITEM_PRIMARY_GROUP ";
                    strSQL = strSQL + "INSERT INTO ACC_TRADING_PROFIT_LOSS(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_GROUP,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT STOCKITEM_PRIMARY_GROUP,'Less: Closing Stock',1,2,2,5,(SUM(INV_TRAN_AMOUNT) * -1) AS OPENING FROM INV_STOCK_QRY WHERE INV_DATE <= @toDate GROUP BY STOCKITEM_PRIMARY_GROUP END ";
                    strSQL = strSQL + "INSERT INTO ACC_TRADING_PROFIT_LOSS SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,1,1,1,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, ";

                    strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 3) AND ACC_LEDGER_GROUP_QRY.GR_GROUP = 211 AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_TRADING_PROFIT_LOSS ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,1,1,1,LEDGER_PRIMARY_TYPE,@dblSalesCost FROM ACC_MAIN_LEDGER ";
                    strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP = 211 AND LEDGER_PRIMARY_TYPE = 3 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,";
                    //strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,1,1,1,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL FROM ACC_MAIN_LEDGER ";
                    //strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP = 211 AND LEDGER_PRIMARY_TYPE = 3 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,";

                    strSQL = strSQL + "LEDGER_PRIMARY_TYPE DECLARE @LedgerType INT IF @BusinessType = 4 SET @LedgerType = 216 ELSE SET @LedgerType = 212 INSERT INTO ACC_TRADING_PROFIT_LOSS SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,1,2,2,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS DEBIT_TOTAL FROM ";
                    strSQL = strSQL + "ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 4) ";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_GROUP = @LedgerType AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE INSERT INTO ACC_TRADING_PROFIT_LOSS ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,1,2,2,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS TOTAL FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) ";
                    strSQL = strSQL + "AND LEDGER_GROUP = @LedgerType AND LEDGER_PRIMARY_TYPE = 4 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE IF @BusinessType <> 4 BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_TRADING_PROFIT_LOSS SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,1,2,3,6, ";
                    strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS DEBIT_TOTAL FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 4) AND ACC_LEDGER_GROUP_QRY.GR_GROUP = 213 AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE INSERT INTO ACC_TRADING_PROFIT_LOSS ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,1,2,3,6,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS TOTAL FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP = 213 ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 4 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE END ";
                    strSQL = strSQL + "INSERT INTO ACC_TRADING_PROFIT_LOSS(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_GROUP,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,2,0,3,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) ";
                    strSQL = strSQL + "AS DEBIT_TOTAL FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 3) AND ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_GROUP <> '211' AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";
                    strSQL = strSQL + "INSERT INTO ACC_TRADING_PROFIT_LOSS(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_GROUP,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,2,0,3,LEDGER_PRIMARY_TYPE,";
                    strSQL = strSQL + "SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP <> '211' AND LEDGER_PRIMARY_TYPE = 3 ";
                    strSQL = strSQL + "AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE INSERT INTO ACC_TRADING_PROFIT_LOSS(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_GROUP,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,2,0,3,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) ";
                    strSQL = strSQL + "AS DEBIT_TOTAL FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 4) ";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_GROUP NOT LIKE '21%' AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE INSERT INTO ACC_TRADING_PROFIT_LOSS(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_GROUP,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,2,0,3,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) ";
                    strSQL = strSQL + "AND LEDGER_GROUP NOT LIKE '21%' AND LEDGER_PRIMARY_TYPE = 4 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE COMMIT ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }

        private static string CreateBranchProcedure()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gTrialBalanceLedgerBranch') ";
                    strSQL = strSQL + "Drop PROCEDURE gTrialBalanceLedgerBranch ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    strSQL = "CREATE PROCEDURE gTrialBalanceLedgerBranch @branchID char(4),@frDate DATETIME,@toDate DATETIME, @OpenOrClose INT WITH ENCRYPTION AS BEGIN TRANSACTION DELETE FROM ACC_TRIAL_BALANCE DECLARE @strPLledger varchar(50),@strPLGroup varchar(50),@strCurrentAssets varchar(50) DECLARE @dblPL numeric(12,2),@dblLedgerPL numeric(12,2),@dblAsOnPL numeric(12,2) DECLARE @dblOpeningStock numeric(12,2),@dblOpening numeric(12,2) DECLARE @dblClosingStock numeric(12,2) SELECT @strPLledger = LEDGER_NAME,@strPLGroup = LEDGER_PARENT_GROUP FROM ACC_LEDGER WHERE LEDGER_GROUP = 301 AND LEDGER_DEFAULT = 1 SELECT @strCurrentAssets = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Current Assets' SELECT @dblOpeningStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_STOCKITEM_TRAN_QRY WHERE BRANCH_ID = @branchID AND INV_INOUT_FLAG IS NULL SELECT @dblClosingStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_STOCKITEM_TRAN_QRY WHERE BRANCH_ID = @branchID AND INV_DATE < @frDate SELECT @dblLedgerPL = ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0) FROM ACC_LEDGER_VIEW_BRANCH WHERE BRANCH_ID = @branchID AND (LEDGER_PRIMARY_TYPE = 3 OR LEDGER_PRIMARY_TYPE = 4) SELECT @dblAsOnPL = ISNULL(SUM(A.VOUCHER_CREDIT_AMOUNT - A.VOUCHER_DEBIT_AMOUNT),0) FROM ACC_VOUCHER A,ACC_LEDGER B WHERE A.LEDGER_NAME = B.LEDGER_NAME AND B.LEDGER_PRIMARY_TYPE > 2 AND COMP_VOUCHER_DATE < @frDate AND A.BRANCH_ID = @branchID SET @dblPL = @dblLedgerPL + @dblAsOnPL SET @dblPL = @dblPL - (@dblOpeningStock - @dblClosingStock) INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) VALUES(@strPLledger,@strPLGroup,@dblPL) INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) SELECT LEDGER_NAME,LEDGER_PRIMARY_GROUP,BRANCH_LEDGER_OPENING_BALANCE FROM ACC_LEDGER_VIEW_BRANCH WHERE BRANCH_ID = @branchID AND (LEDGER_PRIMARY_TYPE = 1 OR LEDGER_PRIMARY_TYPE = 2) SELECT @dblOpeningStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_STOCKITEM_TRAN_QRY WHERE BRANCH_ID = @branchID AND INV_DATE < @frDate INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) VALUES('Opening Stock',@strCurrentAssets,@dblOpeningStock * -1) INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) SELECT LEDGER_NAME,LEDGER_PRIMARY_GROUP,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS AMT FROM ACC_LEDGER_VOUCHER WHERE BRANCH_ID = @branchID AND COMP_VOUCHER_DATE < @frDate AND LEDGER_PRIMARY_TYPE < 3 GROUP BY LEDGER_NAME,LEDGER_PRIMARY_GROUP INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) SELECT LEDGER_NAME,LEDGER_PRIMARY_GROUP,(SUM(VOUCHER_DEBIT_AMOUNT)* -1) AS DEBIT_TOTAL,SUM(VOUCHER_CREDIT_AMOUNT) AS CREDIT_TOTAL FROM ACC_LEDGER_VOUCHER WHERE BRANCH_ID = @branchID AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) GROUP BY LEDGER_NAME,LEDGER_PRIMARY_GROUP IF @OpenOrClose = 1 BEGIN SELECT @dblOpening = (ISNULL(SUM(GR_OPENING),0) * -1) FROM ACC_TRIAL_BALANCE INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) VALUES('Diff in Opening Balances','Diff in Opening Balances',@dblOpening) END DELETE FROM ACC_TRIAL_BALANCE WHERE (GR_OPENING = 0) AND (GR_DEBIT = 0) AND (GR_CREDIT = 0) COMMIT ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();

                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gReceiptAndPaymentBranch') ";
                    strSQL = strSQL + "Drop PROCEDURE gReceiptAndPaymentBranch ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    strSQL = "CREATE PROCEDURE gReceiptAndPaymentBranch @BranID char(4),@frDate DATETIME,@toDate DATETIME WITH ENCRYPTION AS DELETE FROM ACC_RECEIPT_AND_PAYMENT INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_AMOUNT) SELECT LEDGER_NAME AS GR_NAME,LEDGER_PARENT_GROUP AS GR_PARENT,SUM(VOUCHER_CREDIT_AMOUNT + VOUCHER_DEBIT_AMOUNT) AS OPENING FROM ACC_LEDGER_VOUCHER WHERE BRANCH_ID = @BranID AND VOUCHER_CASHFLOW = 1 AND VOUCHER_TOBY = 'Cr' AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP UPDATE ACC_RECEIPT_AND_PAYMENT SET GR_RECEIPT_PAYMENT = 1 ,GR_PRIMARY_TYPE = 1 WHERE GR_PRIMARY_TYPE = 0 INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_AMOUNT) SELECT LEDGER_NAME AS GR_NAME,LEDGER_PARENT_GROUP AS GR_PARENT,SUM(VOUCHER_CREDIT_AMOUNT + VOUCHER_DEBIT_AMOUNT) AS OPENING FROM ACC_LEDGER_VOUCHER WHERE BRANCH_ID = @BranID AND VOUCHER_CASHFLOW = 1 AND VOUCHER_TOBY = 'Dr' AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP UPDATE ACC_RECEIPT_AND_PAYMENT SET GR_RECEIPT_PAYMENT = 2 ,GR_PRIMARY_TYPE = 2 WHERE GR_PRIMARY_TYPE = 0 INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,0,(BRANCH_LEDGER_OPENING_BALANCE * -1) AS LEDGER_OPENING_BALANCE FROM ACC_LEDGER_VIEW_BRANCH WHERE BRANCH_ID = @BranID AND (LEDGER_GROUP = 101 OR LEDGER_GROUP = 100) INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,0,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS OPENING FROM ACC_LEDGER_VOUCHER WHERE BRANCH_ID = @BranID AND (LEDGER_GROUP = 101 OR LEDGER_GROUP = 100) AND COMP_VOUCHER_DATE <  @frDate GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,3,(BRANCH_LEDGER_OPENING_BALANCE * -1) AS LEDGER_OPENING_BALANCE FROM ACC_LEDGER_VIEW_BRANCH WHERE BRANCH_ID = @BranID AND (LEDGER_GROUP = 101 OR LEDGER_GROUP = 100) INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT LEDGER_NAME AS LEDGER_NAME,LEDGER_PARENT_GROUP AS LEDGER_PARENT_GROUP,3,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS OPENING FROM ACC_LEDGER_VOUCHER WHERE BRANCH_ID = @BranID AND (LEDGER_GROUP = 101 OR LEDGER_GROUP = 100) AND COMP_VOUCHER_DATE <=  @toDate GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP UPDATE ACC_RECEIPT_AND_PAYMENT SET GR_RECEIPT_PAYMENT = 1 WHERE (GR_PRIMARY_TYPE = 0 OR GR_PRIMARY_TYPE = 1) UPDATE ACC_RECEIPT_AND_PAYMENT SET GR_RECEIPT_PAYMENT = 2 WHERE (GR_PRIMARY_TYPE = 2 OR GR_PRIMARY_TYPE = 3)";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();

                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gProfitAndLossBranch') ";
                    strSQL = strSQL + "Drop PROCEDURE gProfitAndLossBranch ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    strSQL = "CREATE PROCEDURE gProfitAndLossBranch @BranID char(4),@frDate DATETIME,@toDate DATETIME WITH ENCRYPTION AS BEGIN TRANSACTION DELETE FROM ACC_PROFIT_AND_LOSS INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT STOCKITEM_PRIMARY_GROUP,' Opening Stock',4,SUM(INV_TRAN_AMOUNT) AS OPENING FROM INV_STOCK_QRY WHERE BRANCH_ID = @BranID AND INV_DATE < @frDate GROUP BY STOCKITEM_PRIMARY_GROUP INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT STOCKITEM_PRIMARY_GROUP,' Closing Stock',3,SUM(INV_TRAN_AMOUNT) AS OPENING FROM INV_STOCK_QRY WHERE BRANCH_ID = @BranID AND INV_DATE <= @toDate GROUP BY STOCKITEM_PRIMARY_GROUP HAVING SUM(INV_TRAN_QUANTITY) <> 0 INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) As DEBIT_TOTAL FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME WHERE ACC_VOUCHER.BRANCH_ID = @BranID AND (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 3) AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS DEBIT_TOTAL FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME WHERE ACC_VOUCHER.BRANCH_ID = @BranID AND (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 4) AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL FROM ACC_MAIN_LEDGER WHERE BRANCH_ID = @BranID AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_PRIMARY_TYPE = 3 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS TOTAL FROM ACC_MAIN_LEDGER WHERE BRANCH_ID = @BranID AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_PRIMARY_TYPE = 4 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE DECLARE @dblIncome numeric(16,2),@dblExpenses Numeric(16,2) SELECT @dblIncome = ISNULL(SUM(GR_AMOUNT),0) FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 3 SELECT @dblExpenses = ISNULL(SUM(GR_AMOUNT),0) FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 4 If @dblIncome > @dblExpenses INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT)  VALUES('Profit and Loss A/c','Profit And Loss',4,@dblIncome - @dblExpenses) If @dblExpenses > @dblIncome INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT)  VALUES('Profit and Loss A/c','Profit And Loss',3,@dblExpenses - @dblIncome) COMMIT ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();

                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gIncomeAndExpensesBranch') ";
                    strSQL = strSQL + "Drop PROCEDURE gIncomeAndExpensesBranch ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    strSQL = "CREATE PROCEDURE gIncomeAndExpensesBranch @compID char(4),@frDate DATETIME,@toDate DATETIME WITH ENCRYPTION AS BEGIN TRANSACTION DELETE FROM ACC_PROFIT_AND_LOSS DECLARE @strIncome VARCHAR(50),@strExpenses VARCHAR(50) SELECT @strIncome = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Indirect Income' SELECT @strExpenses = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME =  'Indirect Expenses' INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) As DEBIT_TOTAL FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME WHERE ACC_VOUCHER.BRANCH_ID = @compID AND ACC_LEDGER_GROUP_QRY.GR_PARENT = @strIncome AND (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 3) AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS DEBIT_TOTAL FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME WHERE ACC_VOUCHER.BRANCH_ID = @compID AND ACC_LEDGER_GROUP_QRY.GR_PARENT =  @strExpenses AND (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 4) AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL FROM ACC_MAIN_LEDGER WHERE BRANCH_ID = @compID AND LEDGER_PARENT_GROUP = @strIncome AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_PRIMARY_TYPE = 3 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS TOTAL FROM ACC_MAIN_LEDGER WHERE BRANCH_ID = @compID AND LEDGER_PARENT_GROUP = @strExpenses AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_PRIMARY_TYPE = 4 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE DECLARE @dblIncome numeric(16,2),@dblExpenses Numeric(16,2) SELECT @dblIncome = ISNULL(SUM(GR_AMOUNT),0) FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 3 SELECT @dblExpenses = ISNULL(SUM(GR_AMOUNT),0) FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 4 If @dblIncome > @dblExpenses INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT)  VALUES('Excess of Income over Expenditure','Excess of Income over Expenditure',4,@dblIncome - @dblExpenses) If @dblExpenses > @dblIncome INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT)  VALUES('Excess of Expenditure over Income','Excess of Expenditure over Income',3,@dblExpenses - @dblIncome) COMMIT ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();

                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gBalanceSheetBranch') ";
                    strSQL = strSQL + "Drop PROCEDURE gBalanceSheetBranch ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    strSQL = "CREATE PROCEDURE gBalanceSheetBranch @branchID char(4),@frDate DATETIME,@toDate  DATETIME WITH ENCRYPTION AS DELETE FROM ACC_BALANCE_SHEET_TEMP DELETE FROM ACC_BALANCE_SHEET DECLARE @PLGroup  VARCHAR(50) DECLARE @PLLedger VARCHAR(50) SELECT @PLLedger = LEDGER_NAME,@PLGroup = LEDGER_PARENT_GROUP FROM ACC_LEDGER WHERE LEDGER_GROUP = 301 AND LEDGER_DEFAULT = 1 INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,SUM(-BRANCH_LEDGER_OPENING_BALANCE) FROM ACC_BRANCH_GROUP_OPENING WHERE BRANCH_ID = @branchID AND GR_LEVEL = 2 AND GR_PRIMARY_TYPE = 1 GROUP BY GR_NAME,GR_PARENT,GR_PRIMARY_TYPE INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,SUM(BRANCH_LEDGER_OPENING_BALANCE) FROM ACC_BRANCH_GROUP_OPENING WHERE BRANCH_ID = @branchID AND GR_LEVEL = 2 AND GR_PRIMARY_TYPE = 2 GROUP BY GR_NAME,GR_PARENT,GR_PRIMARY_TYPE INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(BRANCH_LEDGER_OPENING_BALANCE  * -1) AS YY FROM ACC_LEDGER_VIEW_BRANCH WHERE BRANCH_ID = @branchID AND LEDGER_LEVEL = 2 AND LEDGER_PRIMARY_TYPE = 1  GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(BRANCH_LEDGER_OPENING_BALANCE) AS YY FROM ACC_LEDGER_VIEW_BRANCH WHERE BRANCH_ID = @branchID AND LEDGER_LEVEL = 2 AND LEDGER_PRIMARY_TYPE = 2  GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE DECLARE @dblOpeningPL numeric(16,2),@dblJournal numeric(16,2) DECLARE @dblPL1 numeric(16,2),@dblPL2 numeric(16,2),@dblopnIncome numeric(16,2)  DECLARE @opnStock numeric(16,2),@clsStock numeric(16,2) SELECT @dblPL1 = ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0) FROM ACC_BRANCH_GROUP_OPENING WHERE BRANCH_ID = @branchID AND GR_PRIMARY_TYPE > 2 AND GR_LEVEL = 2 SELECT @dblPL2 = ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0) FROM ACC_LEDGER_VIEW_BRANCH WHERE BRANCH_ID = @branchID AND LEDGER_PRIMARY_TYPE > 2 AND LEDGER_LEVEL = 2 SELECT @dblopnIncome = ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0) FROM ACC_VOUCHER INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME WHERE ACC_VOUCHER.BRANCH_ID = @branchID AND COMP_VOUCHER_DATE <= @toDate AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE > 2) SELECT @opnStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_STOCKITEM_TRAN_QRY WHERE BRANCH_ID = @branchID AND INV_INOUT_FLAG IS NULL SELECT @clsStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE < @frDate AND BRANCH_ID = @branchID SELECT @dblJournal = ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) FROM ACC_MAIN_LEDGER WHERE BRANCH_ID = @branchID AND COMP_VOUCHER_DATE < @frDate AND LEDGER_PRIMARY_TYPE = 2 AND LEDGER_LEVEL = 2 SET @dblOpeningPL = (@dblPL1 + @dblPL2 + @dblopnIncome + @dblJournal) - (@opnStock - @clsStock) UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = ' Opening Balance' ,GR_AMOUNT = GR_AMOUNT + @dblOpeningPL WHERE GR_NAME = @PLLedger INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS DEBIT_TOTAL FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME WHERE ACC_VOUCHER.BRANCH_ID = @branchID AND (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 1) AND COMP_VOUCHER_DATE <=  @toDate AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS DEBIT_TOTAL FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME WHERE ACC_VOUCHER.BRANCH_ID = @branchID AND (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 2) AND COMP_VOUCHER_DATE <=  @toDate AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS TOTAL FROM ACC_MAIN_LEDGER WHERE BRANCH_ID = @branchID AND COMP_VOUCHER_DATE <= @toDate AND LEDGER_PRIMARY_TYPE = 1 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL FROM ACC_MAIN_LEDGER WHERE BRANCH_ID = @branchID AND COMP_VOUCHER_DATE <= @toDate AND LEDGER_PRIMARY_TYPE = 2 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = 'Transferred' ,GR_AMOUNT = GR_AMOUNT - @dblJournal WHERE GR_NAME = @PLLedger DECLARE @CurrentAsset VARCHAR(50),@StockInHand VARCHAR(50) DECLARE @ClosingStock numeric(16,2) DECLARE @dblCurrentIncome numeric(16,2) SELECT @CurrentAsset = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Current Assets' SELECT @StockInHand = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Stock-in-hand' SELECT @ClosingStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_STOCKITEM_TRAN_QRY WHERE BRANCH_ID = @branchID AND INV_DATE <= @toDate INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) VALUES('Closing Stock',@CurrentAsset,1,@ClosingStock) SELECT @dblCurrentIncome = ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0)  FROM ACC_VOUCHER INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE > 2) AND ACC_VOUCHER.BRANCH_ID = @branchID DECLARE @dblInc numeric(16,2) SET @dblInc = (@dblCurrentIncome - (@clsStock - @ClosingStock)) IF @dblInc IS NULL SET @dblInc = 0 INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) VALUES(@PLLedger,@PLGroup,2,@dblInc) DECLARE @dblAsset numeric(16,2),@dblLiabilities numeric(16,2) SELECT @dblAsset = SUM(GR_AMOUNT) FROM ACC_BALANCE_SHEET_TEMP WHERE GR_PRIMARY_TYPE = 1 SELECT @dblLiabilities = SUM(GR_AMOUNT) FROM ACC_BALANCE_SHEET_TEMP WHERE GR_PRIMARY_TYPE = 2 UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = 'Closing Stock' WHERE GR_NAME = @StockInHand DELETE FROM ACC_BALANCE_SHEET_TEMP WHERE GR_AMOUNT = 0 INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,SUM(GR_AMOUNT) AS AMOUNT FROM  ACC_BALANCE_SHEET_TEMP GROUP BY GR_NAME, GR_PARENT,GR_PRIMARY_TYPE ORDER BY GR_PARENT UPDATE ACC_BALANCE_SHEET SET GR_PRIMARY_TYPE = 2,GR_AMOUNT = -GR_AMOUNT WHERE GR_PARENT IN(SELECT GR_PARENT FROM ACC_BAL_QRY WHERE GR_PRIMARY_TYPE = 1 AND  SUMOFGR_AMOUNT < 0) UPDATE ACC_BALANCE_SHEET SET GR_PRIMARY_TYPE = 1,GR_AMOUNT = -GR_AMOUNT WHERE GR_PARENT IN(SELECT GR_PARENT FROM ACC_BAL_QRY WHERE GR_PRIMARY_TYPE = 2 AND  SUMOFGR_AMOUNT < 0) If @dblAsset > @dblLiabilities INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT)  VALUES('Diff in Opening Bal.','Diff in Opening Bal.',2,@dblAsset - @dblLiabilities) If @dblAsset < @dblLiabilities INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT)  VALUES('Diff in Opening Bal.','Diff in Opening Bal.',1,@dblLiabilities - @dblAsset) ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }


        private static string CreateBalanceSheetH()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gBalanceSheet') ";
                    strSQL = strSQL + "Drop PROCEDURE gBalanceSheet ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();


                    strSQL = "CREATE PROCEDURE gBalanceSheet @frDate DATETIME,@toDate  DATETIME,@dblClsDebtors numeric(18,2) WITH ENCRYPTION AS ";
                    strSQL = strSQL + "DELETE FROM ACC_BALANCE_SHEET_TEMP ";
                    strSQL = strSQL + "DELETE FROM ACC_BALANCE_SHEET ";
                    strSQL = strSQL + "DECLARE @PLGroup  VARCHAR(50) DECLARE @PLLedger VARCHAR(50) ";

                    strSQL = strSQL + "SELECT @PLLedger = LEDGER_NAME,@PLGroup = LEDGER_PARENT_GROUP FROM ACC_LEDGER WHERE LEDGER_GROUP = 301 AND LEDGER_DEFAULT = 1 ";
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,ISNULL(SUM(GR_OPENING_DEBIT),0)*-1 AS TOTAL_OPENING FROM ACC_LEDGERGROUP WHERE GR_LEVEL = 2 AND GR_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + "AND GR_NAME NOT IN ('Sundry Debtors') ";
                    strSQL = strSQL + "GROUP BY GR_NAME,GR_PARENT,GR_PRIMARY_TYPE ";

                    

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,ISNULL(SUM(GR_OPENING_CREDIT + GR_OPENING_DEBIT),0) AS TOTAL_OPENING FROM ACC_LEDGERGROUP WHERE GR_LEVEL = 2 AND GR_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + "GROUP BY GR_NAME,GR_PARENT,GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,ISNULL(SUM(LEDGER_OPENING_BALANCE  * -1),0) AS YY ";
                    strSQL = strSQL + "FROM ACC_LEDGER WHERE LEDGER_LEVEL = 2 AND LEDGER_PRIMARY_TYPE = 1 GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,ISNULL(SUM(LEDGER_OPENING_BALANCE),0) AS YY FROM ACC_LEDGER ";
                    strSQL = strSQL + "WHERE LEDGER_LEVEL = 2 AND LEDGER_PRIMARY_TYPE = 2 GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";


                    strSQL = strSQL + "DECLARE @dblOpeningPL numeric(16,2),@dblJournal numeric(16,2) DECLARE @dblPL1 numeric(16,2),@dblPL2 numeric(16,2),@dblopnIncome numeric(16,2)  ";
                    strSQL = strSQL + "DECLARE @opnStock numeric(16,2),@clsStock numeric(16,2) ";
                    strSQL = strSQL + "SELECT @dblPL1 = ISNULL(SUM(GR_OPENING_CREDIT + GR_OPENING_DEBIT),0) FROM ACC_LEDGERGROUP ";
                    strSQL = strSQL + "WHERE GR_PRIMARY_TYPE > 2 AND GR_LEVEL = 2 SELECT @dblPL2 = ISNULL(SUM(LEDGER_OPENING_BALANCE),0) FROM ACC_LEDGER ";
                    strSQL = strSQL + "WHERE (LEDGER_PRIMARY_TYPE = 3 OR LEDGER_PRIMARY_TYPE = 4) AND LEDGER_LEVEL = 2 ";


                    strSQL = strSQL + "SELECT @dblopnIncome = ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0)  ";
                    strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE > 2) ";

                    strSQL = strSQL + "SELECT @opnStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE INV_INOUT_FLAG IS NULL ";
                    strSQL = strSQL + "SELECT @clsStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE INV_DATE < @frDate ";

                    strSQL = strSQL + "SELECT @dblJournal = ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) FROM ACC_MAIN_LEDGER ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate AND LEDGER_PRIMARY_TYPE = 2 AND LEDGER_LEVEL = 2 AND LEDGER_DEFAULT = 1 AND LEDGER_GROUP = 301 ";
                    strSQL = strSQL + "SET @dblOpeningPL = (@dblPL1 + @dblPL2 + @dblopnIncome + @dblJournal) - (@opnStock - @clsStock) ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = ' Opening Balance' ,";
                    strSQL = strSQL + "GR_AMOUNT = GR_AMOUNT + @dblOpeningPL WHERE GR_NAME = @PLLedger ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + " SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PRIMARY AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, ";
                    strSQL = strSQL + "ISNULL(SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0) AS DEBIT_TOTAL FROM ACC_VOUCHER LEFT OUTER JOIN ";
                    strSQL = strSQL + " ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 1) AND COMP_VOUCHER_DATE <=  @toDate ";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "AND GR_NAME <> 'Sundry Debtors' ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PRIMARY,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, ";
                    strSQL = strSQL + "ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0) AS DEBIT_TOTAL FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ";
                    strSQL = strSQL + "ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 2) ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE <=  @toDate AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "AND GR_NAME <> 'Sundry Debtors' ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";
                    //*******nEW
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT 'Sundry Debtors','Current Assets',1,abs(@dblClsDebtors) ";
                    //strSQL = strSQL + "SELECT 'Sundry Debtors','Current Assets',1, ";
                    //strSQL = strSQL + "ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0)*-1 AS DEBIT_TOTAL ";
                    //strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    //strSQL = strSQL + "WHERE COMP_VOUCHER_DATE <  @frDate ";
                    //strSQL = strSQL + "AND GR_PARENT IN (SELECT GR_NAME FROM ACC_LEDGERGROUP WHERE GR_NAME = 'Sundry Debtors')  ";

                    //strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    //strSQL = strSQL + "SELECT 'Sundry Debtors','Current Assets',1, ";
                    //strSQL = strSQL + "ISNULL(SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT-ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0) AS CREDIT_TOTAL ";
                    //strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ";
                    //strSQL = strSQL + "ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    //strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND  @toDate) ";
                    ////strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE <=  @toDate) ";
                    //strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_PARENT = 'Sundry Debtors' ";


                   // **********
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,ISNULL(SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT),0) AS TOTAL FROM ACC_MAIN_LEDGER ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE <= @toDate AND LEDGER_PRIMARY_TYPE = 1 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) AS TOTAL FROM ACC_MAIN_LEDGER ";
                    strSQL = strSQL + " WHERE COMP_VOUCHER_DATE <= @toDate AND LEDGER_PRIMARY_TYPE = 2 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + " UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = 'Transferred' ,GR_AMOUNT = GR_AMOUNT - @dblJournal WHERE GR_NAME = @PLLedger ";
                    strSQL = strSQL + "DECLARE @CurrentAsset VARCHAR(50),@StockInHand VARCHAR(50) DECLARE @ClosingStock numeric(16,2) DECLARE @dblCurrentIncome numeric(16,2) ";
                    strSQL = strSQL + "SELECT @CurrentAsset = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Current Assets' ";
                    strSQL = strSQL + "SELECT @StockInHand = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Stock-in-hand' SELECT @ClosingStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + " FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE <= @toDate ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Closing Stock',@CurrentAsset,1,@ClosingStock) ";
                    strSQL = strSQL + "SELECT @dblCurrentIncome = ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0)  ";
                    strSQL = strSQL + " FROM ACC_VOUCHER INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ";
                    strSQL = strSQL + "(ACC_LEDGER.LEDGER_PRIMARY_TYPE > 2) ";

                    strSQL = strSQL + "DECLARE @dblInc numeric(16,2) SET @dblInc = (@dblCurrentIncome - (@clsStock - @ClosingStock)) ";
                    strSQL = strSQL + "IF @dblInc IS NULL SET @dblInc = 0 INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Current Period',@PLGroup,2,@dblInc) DECLARE @dblAsset numeric(16,2),@dblLiabilities numeric(16,2) SELECT @dblAsset = SUM(GR_AMOUNT) ";
                    strSQL = strSQL + "FROM ACC_BALANCE_SHEET_TEMP WHERE GR_PRIMARY_TYPE = 1 ";

                    strSQL = strSQL + "SELECT @dblLiabilities = SUM(GR_AMOUNT) FROM ACC_BALANCE_SHEET_TEMP WHERE GR_PRIMARY_TYPE = 2 UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = 'Closing Stock'";
                    strSQL = strSQL + "WHERE GR_NAME = @StockInHand DELETE FROM ACC_BALANCE_SHEET_TEMP WHERE GR_AMOUNT = 0 ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,ISNULL(SUM(GR_AMOUNT),0) AS AMOUNT FROM ";
                    strSQL = strSQL + "ACC_BALANCE_SHEET_TEMP GROUP BY GR_NAME, GR_PARENT,GR_PRIMARY_TYPE ORDER BY GR_PARENT ";

                    strSQL = strSQL + " UPDATE ACC_BALANCE_SHEET SET GR_PRIMARY_TYPE = 2,GR_AMOUNT = -GR_AMOUNT WHERE GR_PARENT IN(SELECT GR_PARENT FROM ACC_BAL_QRY WHERE GR_PRIMARY_TYPE = 1 AND ";
                    strSQL = strSQL + "SUMOFGR_AMOUNT < 0) UPDATE ACC_BALANCE_SHEET SET GR_PRIMARY_TYPE = 1,GR_AMOUNT = -GR_AMOUNT ";
                    strSQL = strSQL + " WHERE GR_PARENT IN(SELECT GR_PARENT FROM ACC_BAL_QRY WHERE GR_PRIMARY_TYPE = 2 AND  SUMOFGR_AMOUNT < 0) ";

                    //strSQL = strSQL + " UPDATE ACC_BALANCE_SHEET SET GR_PRIMARY_TYPE = 1,GR_AMOUNT = GR_AMOUNT WHERE GR_PARENT IN(SELECT GR_PARENT FROM ACC_BAL_QRY WHERE GR_PRIMARY_TYPE = 1 AND ";
                    //strSQL = strSQL + "SUMOFGR_AMOUNT < 0) UPDATE ACC_BALANCE_SHEET SET GR_PRIMARY_TYPE = 1,GR_AMOUNT = -GR_AMOUNT ";
                    //strSQL = strSQL + " WHERE GR_PARENT IN(SELECT GR_PARENT FROM ACC_BAL_QRY WHERE GR_PRIMARY_TYPE = 2 AND  SUMOFGR_AMOUNT < 0) ";

                    strSQL =strSQL +  "If @dblAsset > @dblLiabilities ";
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT)  VALUES('Diff in Opening Bal.','Diff in Opening Bal.',2,";
                    strSQL = strSQL + " @dblAsset - @dblLiabilities) If @dblAsset < @dblLiabilities INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT)  ";
                    strSQL = strSQL + "VALUES('Diff in Opening Bal.','Diff in Opening Bal.',1,@dblLiabilities - @dblAsset) ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }
        private static string CreateProfitLossH1()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gProfitAndLossH') ";
                    strSQL = strSQL + "Drop PROCEDURE gProfitAndLossH ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();

                    strSQL = "CREATE PROCEDURE gProfitAndLossH @frDate DATETIME,@toDate DATETIME, @dblGP float WITH ENCRYPTION AS BEGIN TRANSACTION ";
                    strSQL = strSQL + "DELETE FROM ACC_PROFIT_AND_LOSS If @dblGP > 0 BEGIN INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Profit b/d',' Gross Profit b/d',3,@dblGP) END If @dblGP < 0 BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Loss b/d',' Gross Loss b/d',4,ABS(@dblGP)) END ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, ";
                    strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL FROM ";
                    strSQL = strSQL + "ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 3) AND ACC_LEDGER_GROUP_QRY.GR_GROUP <> '211' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP <> '211' ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 3 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) ";
                    strSQL = strSQL + "AS DEBIT_TOTAL FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 4) AND ACC_LEDGER_GROUP_QRY.GR_GROUP NOT LIKE '21%' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP NOT LIKE '21%' ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 4 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";
                    strSQL = strSQL + "DECLARE @dblIncome numeric(16,2),@dblExpenses Numeric(16,2) SELECT @dblIncome = ISNULL(SUM(GR_AMOUNT),0) ";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 3 SELECT @dblExpenses = ISNULL(SUM(GR_AMOUNT),0) ";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 4 If @dblIncome > @dblExpenses BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) VALUES('Net Profit','Net Profit',4,";
                    strSQL = strSQL + "@dblIncome - @dblExpenses) END If @dblIncome < @dblExpenses BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Net Loss','Net Loss',3,@dblExpenses - @dblIncome) END COMMIT";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }

        private static string CreateTrading()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gTrading') ";
                    strSQL = strSQL + "Drop PROCEDURE gTrading ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    strSQL = "CREATE PROCEDURE gTrading @frDate DATETIME,@toDate DATETIME WITH ENCRYPTION AS BEGIN TRANSACTION DELETE FROM ACC_TRADING_REPORT ";
                    strSQL = strSQL + "INSERT INTO ACC_TRADING_REPORT(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT STOCKITEM_PRIMARY_GROUP,'Opening Stock',3.5,SUM(INV_TRAN_AMOUNT) AS OPENING FROM INV_STOCK_QRY ";
                    strSQL = strSQL + "WHERE INV_DATE < @frDate GROUP BY STOCKITEM_PRIMARY_GROUP ";
                    strSQL = strSQL + "INSERT INTO ACC_TRADING_REPORT(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT STOCKITEM_PRIMARY_GROUP,'Closing Stock',5,(SUM(INV_TRAN_AMOUNT) * -1) AS OPENING FROM INV_STOCK_QRY ";
                    strSQL = strSQL + "WHERE INV_DATE <= @toDate GROUP BY STOCKITEM_PRIMARY_GROUP INSERT INTO ACC_TRADING_REPORT ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, ";
                    strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 3) AND ACC_LEDGER_GROUP_QRY.GR_GROUP LIKE '21%' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";
                    strSQL = strSQL + "INSERT INTO ACC_TRADING_REPORT SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 4) AND ACC_LEDGER_GROUP_QRY.GR_GROUP LIKE '21%' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";
                    strSQL = strSQL + "INSERT INTO ACC_TRADING_REPORT SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,";
                    strSQL = strSQL + "SUM( VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL FROM ACC_MAIN_LEDGER ";
                    strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP LIKE '21%' AND LEDGER_PRIMARY_TYPE = 3 ";
                    strSQL = strSQL + "AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE INSERT INTO ACC_TRADING_REPORT ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP LIKE '21%' ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 4 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE COMMIT";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }
        private static string CreateUpdateUserConfig()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'UpdateUserConfig') ";
                    strSQL = strSQL + "Drop PROCEDURE UpdateUserConfig ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    strSQL = "create proc UpdateUserConfig  @mstrKey varchar(60), @loginName varchar(60),@fullName varchar(60),@pass varchar(30),@intUserLevel int,";
                    strSQL = strSQL + "@userlevel char(2),@commmets varchar(100), @img image,@department varchar(100),@designation varchar(100) as ";
                    strSQL = strSQL + "update USER_CONFIG set USER_LOGIN_NAME=@loginName ";
                    strSQL = strSQL + ",USER_FULL_NAME=@fullName";
                    strSQL = strSQL + ",USER_PASS=@pass ";
                    strSQL = strSQL + ",USER_LEBEL=@intUserLevel ";
                    strSQL = strSQL + ",USER_STATUS=@userlevel ";
                    strSQL = strSQL + ",IMAGE=@img ";
                    strSQL = strSQL + ",USER_COMMENTS=@commmets ";
                    strSQL = strSQL + ",DEPARTMENT=@department ";
                    strSQL = strSQL + ",DESIGNATION=@designation ";
                    strSQL = strSQL + "where USER_LOGIN_NAME=@mstrKey";

                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }
        private static string CreateInsertUserConfig()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'InsertUserConfig') ";
                    strSQL = strSQL + "Drop PROCEDURE InsertUserConfig ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();

                    strSQL = "CREATE proc InsertUserConfig  @loginName varchar(60),@fullName varchar(60),@pass varchar(30),@intUserLevel int, ";
                    strSQL = strSQL + "@userlevel char(2),@commmets varchar(100), @img image,@department varchar(100),@designation varchar(100)  as ";
                    strSQL = strSQL + "INSERT INTO USER_CONFIG(USER_LOGIN_NAME,USER_FULL_NAME,USER_PASS,USER_LEBEL,USER_STATUS,IMAGE,USER_COMMENTS,DEPARTMENT,DESIGNATION) ";
                    strSQL = strSQL + "VALUES (@loginName,@fullName,@pass,@intUserLevel,@userlevel,@img,@commmets,@department,@designation) ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }
        private static string CreateManufactureCosting()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gdblManuCost') ";
                    strSQL = strSQL + "Drop PROCEDURE gdblManuCost ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();

                    strSQL = "CREATE procedure gdblManuCost @frDate DATETIME,@toDate DATETIME WITH ENCRYPTION AS ";
                    strSQL = strSQL + "DELETE FROM INV_MANUFACTURING_COST ";
                    strSQL = strSQL + " DECLARE @MANUCOST numeric(18,2) DECLARE @OPNRAWDIR numeric(18,2) DECLARE @PURRAWDIR numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @RETRAWDIR numeric(18,2) DECLARE @CLSRAWDIR numeric(18,2) DECLARE @DIREXPGRP numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @DIREXPLED numeric(18,2) ";

                    strSQL = strSQL + "SELECT @OPNRAWDIR = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_MANUFACTURE_STOCK_QRY ";
                    strSQL = strSQL + "WHERE STOCKGROUP_PRIMARY_TYPE = 1 AND INV_DATE < @frDate ";
                    strSQL = strSQL + "SELECT @PURRAWDIR = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_MANUFACTURE_STOCK_QRY ";
                    strSQL = strSQL + "WHERE STOCKGROUP_PRIMARY_TYPE = 1 AND INV_VOUCHER_TYPE = 33 AND (INV_DATE BETWEEN @frDate AND @toDate) ";
                    strSQL = strSQL + "SELECT @RETRAWDIR = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_MANUFACTURE_STOCK_QRY ";
                    strSQL = strSQL + "WHERE STOCKGROUP_PRIMARY_TYPE = 1 AND INV_VOUCHER_TYPE = 32 AND (INV_DATE BETWEEN @frDate AND @toDate) ";
                    strSQL = strSQL + "SELECT @CLSRAWDIR = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_MANUFACTURE_STOCK_QRY WHERE STOCKGROUP_PRIMARY_TYPE = 1 AND INV_DATE <= @toDate ";

                    strSQL = strSQL + "SELECT @DIREXPGRP = ISNULL(SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0) ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 4) AND ACC_LEDGER_GROUP_QRY.GR_GROUP = 213 AND ";
                    strSQL = strSQL + "(COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";

                    strSQL = strSQL + "SELECT @DIREXPLED = ISNULL(SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT),0) FROM ACC_MAIN_LEDGER ";
                    strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP = 213 AND LEDGER_PRIMARY_TYPE = 4 AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "SET @MANUCOST = ((@OPNRAWDIR + @PURRAWDIR + @RETRAWDIR + @DIREXPGRP + @DIREXPLED) - @CLSRAWDIR) ";
                    strSQL = strSQL + "INSERT INTO INV_MANUFACTURING_COST(ManuCost) VALUES(@MANUCOST) ";

                    //strSQL ="CREATE FUNCTION ManuCost(@frDate DATETIME,@toDate DATETIME) RETURNS NUMERIC(12,2) AS BEGIN DECLARE @MANUCOST numeric(12,2) DECLARE @OPNRAWDIR numeric(12,2) ";
                    //strSQL = strSQL + "DECLARE @PURRAWDIR numeric(12,2) DECLARE @RETRAWDIR numeric(12,2) DECLARE @CLSRAWDIR numeric(12,2) DECLARE @DIREXPGRP numeric(12,2) DECLARE @DIREXPLED numeric(12,2) ";
                    //strSQL = strSQL + "SELECT @OPNRAWDIR = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_MANUFACTURE_STOCK_QRY WHERE STOCKGROUP_PRIMARY_TYPE = 1 AND INV_DATE < @frDate ";
                    //strSQL = strSQL + "SELECT @PURRAWDIR = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_MANUFACTURE_STOCK_QRY WHERE STOCKGROUP_PRIMARY_TYPE = 1 AND INV_VOUCHER_TYPE = 33 AND (INV_DATE BETWEEN @frDate AND @toDate) ";
                    //strSQL = strSQL + "SELECT @RETRAWDIR = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_MANUFACTURE_STOCK_QRY WHERE STOCKGROUP_PRIMARY_TYPE = 1 AND INV_VOUCHER_TYPE = 32 AND (INV_DATE BETWEEN @frDate AND @toDate) ";
                    //strSQL = strSQL + "SELECT @CLSRAWDIR = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_MANUFACTURE_STOCK_QRY WHERE STOCKGROUP_PRIMARY_TYPE = 1 AND INV_DATE <= @toDate ";
                    //strSQL = strSQL + "SELECT @DIREXPGRP = ISNULL(SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0) FROM ACC_VOUCHER LEFT OUTER JOIN ";
                    //strSQL = strSQL + "ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 4) ";
                    //strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_GROUP = 213 AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    //strSQL = strSQL + "SELECT @DIREXPLED = ISNULL(SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT),0) FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) ";
                    //strSQL = strSQL + "AND LEDGER_GROUP = 213 AND LEDGER_PRIMARY_TYPE = 4 AND LEDGER_LEVEL = 2 ";
                    //strSQL = strSQL + "SET @MANUCOST = (@OPNRAWDIR + @PURRAWDIR + @RETRAWDIR + @DIREXPGRP + @DIREXPLED) - @CLSRAWDIR RETURN(@MANUCOST) End   ";                                     
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }
        private static string CreateReceiptPaymentNew()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gReceiptAndPayment') ";
                    strSQL = strSQL + "Drop PROCEDURE gReceiptAndPayment ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();

                    strSQL = "CREATE PROCEDURE gReceiptAndPayment @frDate DATETIME,@toDate DATETIME WITH ENCRYPTION AS DELETE FROM ACC_RECEIPT_AND_PAYMENT INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_AMOUNT) SELECT LEDGER_NAME AS GR_NAME,LEDGER_PARENT_GROUP AS GR_PARENT,SUM(VOUCHER_CREDIT_AMOUNT + VOUCHER_DEBIT_AMOUNT) AS OPENING FROM ACC_LEDGER_VOUCHER WHERE VOUCHER_CASHFLOW = 1 AND VOUCHER_TOBY = 'Cr' AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP UPDATE ACC_RECEIPT_AND_PAYMENT SET GR_RECEIPT_PAYMENT = 1 ,GR_PRIMARY_TYPE = 1 WHERE GR_PRIMARY_TYPE = 0 INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_AMOUNT) SELECT LEDGER_NAME AS GR_NAME,LEDGER_PARENT_GROUP AS GR_PARENT,SUM(VOUCHER_CREDIT_AMOUNT + VOUCHER_DEBIT_AMOUNT) AS OPENING FROM ACC_LEDGER_VOUCHER WHERE VOUCHER_CASHFLOW = 1 AND VOUCHER_TOBY = 'Dr' AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP UPDATE ACC_RECEIPT_AND_PAYMENT SET GR_RECEIPT_PAYMENT = 2 ,GR_PRIMARY_TYPE = 2 WHERE GR_PRIMARY_TYPE = 0 INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,0,(LEDGER_OPENING_BALANCE * -1) AS LEDGER_OPENING_BALANCE FROM ACC_LEDGER WHERE (LEDGER_GROUP = 101 OR LEDGER_GROUP = 100) INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,0,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS OPENING FROM ACC_LEDGER_VOUCHER WHERE (LEDGER_GROUP = 101 OR LEDGER_GROUP = 100) AND COMP_VOUCHER_DATE <  @frDate GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,3,(LEDGER_OPENING_BALANCE * -1) AS LEDGER_OPENING_BALANCE FROM ACC_LEDGER WHERE (LEDGER_GROUP = 101 OR LEDGER_GROUP = 100) INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT LEDGER_NAME AS LEDGER_NAME,LEDGER_PARENT_GROUP AS LEDGER_PARENT_GROUP,3,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS OPENING FROM ACC_LEDGER_VOUCHER WHERE (LEDGER_GROUP = 101 OR LEDGER_GROUP = 100) AND COMP_VOUCHER_DATE <=  @toDate GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP UPDATE ACC_RECEIPT_AND_PAYMENT SET GR_RECEIPT_PAYMENT = 1 WHERE (GR_PRIMARY_TYPE = 0 OR GR_PRIMARY_TYPE = 1) UPDATE ACC_RECEIPT_AND_PAYMENT SET GR_RECEIPT_PAYMENT = 2 WHERE (GR_PRIMARY_TYPE = 2 OR GR_PRIMARY_TYPE = 3) ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }
        
        private static string CreateReceiptPayment()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gJagReceiptAndPayment') ";
                    strSQL = strSQL + "Drop PROCEDURE gJagReceiptAndPayment ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();

                    strSQL = "CREATE PROCEDURE gJagReceiptAndPayment ";
                    strSQL = strSQL + "@frDate DATETIME,@toDate DATETIME WITH ENCRYPTION AS ";
                    strSQL = strSQL + "DELETE FROM ACC_RECEIPT_AND_PAYMENT ";
                    strSQL = strSQL + "INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME AS GR_NAME,LEDGER_PARENT_GROUP AS GR_PARENT,";
                    strSQL = strSQL + "SUM(VOUCHER_CREDIT_AMOUNT + VOUCHER_DEBIT_AMOUNT) ";
                    strSQL = strSQL + "AS OPENING FROM ACC_LEDGER_VOUCHER WHERE VOUCHER_CASHFLOW = 1 AND VOUCHER_TOBY = 'Cr' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP ";
                    strSQL = strSQL + "UPDATE ACC_RECEIPT_AND_PAYMENT SET GR_RECEIPT_PAYMENT = 1 ,GR_PRIMARY_TYPE = 1 WHERE GR_PRIMARY_TYPE = 0 ";
                    strSQL = strSQL + "INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME AS GR_NAME,LEDGER_PARENT_GROUP AS GR_PARENT,SUM(VOUCHER_CREDIT_AMOUNT + VOUCHER_DEBIT_AMOUNT) AS ";
                    strSQL = strSQL + "OPENING FROM ACC_LEDGER_VOUCHER WHERE VOUCHER_CASHFLOW = 1 AND VOUCHER_TOBY = 'Dr' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP ";
                    strSQL = strSQL + "UPDATE ACC_RECEIPT_AND_PAYMENT SET GR_RECEIPT_PAYMENT = 2 ,GR_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + "WHERE GR_PRIMARY_TYPE = 0 INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,0,(LEDGER_OPENING_BALANCE * -1) AS LEDGER_OPENING_BALANCE FROM ACC_LEDGER ";
                    strSQL = strSQL + "Where (LEDGER_GROUP = 101 Or LEDGER_GROUP = 100) ";
                    strSQL = strSQL + "INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,0,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS OPENING ";
                    strSQL = strSQL + "FROM ACC_LEDGER_VOUCHER WHERE (LEDGER_GROUP = 101 OR LEDGER_GROUP = 100) AND COMP_VOUCHER_DATE <  @frDate ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE, ";
                    strSQL = strSQL + "GR_AMOUNT) SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,3,(LEDGER_OPENING_BALANCE * -1) AS LEDGER_OPENING_BALANCE ";
                    strSQL = strSQL + "FROM ACC_LEDGER WHERE (LEDGER_GROUP = 101 OR LEDGER_GROUP = 100) ";
                    strSQL = strSQL + "INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME AS LEDGER_NAME,LEDGER_PARENT_GROUP AS LEDGER_PARENT_GROUP,3, ";
                    strSQL = strSQL + "SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS OPENING FROM ACC_LEDGER_VOUCHER WHERE (LEDGER_GROUP = 101 OR LEDGER_GROUP = 100) ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE <=  @toDate GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP UPDATE ACC_RECEIPT_AND_PAYMENT ";
                    strSQL = strSQL + "SET GR_RECEIPT_PAYMENT = 1 WHERE (GR_PRIMARY_TYPE = 0 OR GR_PRIMARY_TYPE = 1) ";
                    strSQL = strSQL + "UPDATE ACC_RECEIPT_AND_PAYMENT SET GR_RECEIPT_PAYMENT = 2 WHERE (GR_PRIMARY_TYPE = 2 OR GR_PRIMARY_TYPE = 3) ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }

        private static string CreateReceiptPaymentBranch()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gJagReceiptAndPaymentBranch') ";
                    strSQL = strSQL + "Drop PROCEDURE gJagReceiptAndPaymentBranch ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();


                    strSQL = "CREATE PROCEDURE gJagReceiptAndPaymentBranch ";
                    strSQL = strSQL + "@BranID char(4),@frDate DATETIME,@toDate DATETIME WITH ENCRYPTION AS ";
                    strSQL = strSQL + "DELETE FROM ACC_RECEIPT_AND_PAYMENT ";
                    strSQL = strSQL + "INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME AS GR_NAME,LEDGER_PARENT_GROUP AS GR_PARENT,SUM(VOUCHER_CREDIT_AMOUNT + VOUCHER_DEBIT_AMOUNT) ";
                    strSQL = strSQL + "AS OPENING FROM ACC_LEDGER_VOUCHER WHERE BRANCH_ID = @BranID AND VOUCHER_CASHFLOW = 1 ";
                    strSQL = strSQL + "AND VOUCHER_TOBY = 'Cr' AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP ";
                    strSQL = strSQL + "UPDATE ACC_RECEIPT_AND_PAYMENT SET GR_RECEIPT_PAYMENT = 1 ,GR_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + "WHERE GR_PRIMARY_TYPE = 0 INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME AS GR_NAME,LEDGER_PARENT_GROUP AS GR_PARENT,SUM(VOUCHER_CREDIT_AMOUNT + VOUCHER_DEBIT_AMOUNT) AS ";
                    strSQL = strSQL + "OPENING FROM ACC_LEDGER_VOUCHER WHERE BRANCH_ID = @BranID AND VOUCHER_CASHFLOW = 1 ";
                    strSQL = strSQL + "AND VOUCHER_TOBY = 'Dr' AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP UPDATE  ";
                    strSQL = strSQL + "ACC_RECEIPT_AND_PAYMENT SET GR_RECEIPT_PAYMENT = 2 ,GR_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + "WHERE GR_PRIMARY_TYPE = 0 INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,0,(BRANCH_LEDGER_OPENING_BALANCE * -1) AS LEDGER_OPENING_BALANCE ";
                    strSQL = strSQL + "FROM ACC_LEDGER_VIEW_BRANCH WHERE BRANCH_ID = @BranID AND (LEDGER_GROUP = 101 OR LEDGER_GROUP = 100) ";
                    strSQL = strSQL + "INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,0,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS OPENING ";
                    strSQL = strSQL + "FROM ACC_LEDGER_VOUCHER WHERE BRANCH_ID = @BranID AND (LEDGER_GROUP = 101 OR LEDGER_GROUP = 100) ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE <  @frDate GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP ";
                    strSQL = strSQL + "INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,3,(BRANCH_LEDGER_OPENING_BALANCE * -1) AS LEDGER_OPENING_BALANCE ";
                    strSQL = strSQL + "FROM ACC_LEDGER_VIEW_BRANCH WHERE BRANCH_ID = @BranID AND (LEDGER_GROUP = 101 OR LEDGER_GROUP = 100) ";
                    strSQL = strSQL + "INSERT INTO ACC_RECEIPT_AND_PAYMENT(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT LEDGER_NAME AS LEDGER_NAME, ";
                    strSQL = strSQL + "LEDGER_PARENT_GROUP AS LEDGER_PARENT_GROUP,3,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS OPENING ";
                    strSQL = strSQL + "FROM ACC_LEDGER_VOUCHER WHERE BRANCH_ID = @BranID AND (LEDGER_GROUP = 101 OR LEDGER_GROUP = 100) ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE <=  @toDate GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP ";
                    strSQL = strSQL + "UPDATE ACC_RECEIPT_AND_PAYMENT SET GR_RECEIPT_PAYMENT = 1 WHERE (GR_PRIMARY_TYPE = 0 OR GR_PRIMARY_TYPE = 1) ";
                    strSQL = strSQL + "UPDATE ACC_RECEIPT_AND_PAYMENT SET GR_RECEIPT_PAYMENT = 2 WHERE (GR_PRIMARY_TYPE = 2 OR GR_PRIMARY_TYPE = 3) ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }


        private static string CreateProfitLossBranch()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;

                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gJagProfitAndLossBranch') ";
                    strSQL = strSQL + "Drop PROCEDURE gJagProfitAndLossBranch ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();

                    strSQL = "CREATE PROCEDURE gJagProfitAndLossBranch ";

                    strSQL = strSQL + "@BranID char(4),  @frDate DATETIME,@toDate DATETIME, ";
                    strSQL = strSQL + "@dblGP numeric(18,2) WITH ENCRYPTION AS BEGIN TRANSACTION ";
                    strSQL = strSQL + "DELETE FROM ACC_PROFIT_AND_LOSS If @dblGP > 0 BEGIN ";
                    strSQL = strSQL + "DECLARE @dblIncome numeric(18,2),@dblExpenses Numeric(18,2) ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Profit b/d',' Gross Profit b/d',3,@dblGP) END ";
                    strSQL = strSQL + "If @dblGP < 0 BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Loss b/d',' Gross Loss b/d',4,ABS(@dblGP)) END ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 3) AND ACC_LEDGER_GROUP_QRY.GR_GROUP <> '211' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) ";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID = @BranID ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT, ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER ";
                    strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP <> '211' ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 3 AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "AND BRANCH_ID = @BranID ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "Where (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 4) And ACC_LEDGER_GROUP_QRY.GR_GROUP NOT LIKE '21%' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID = @BranID ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT , ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP NOT LIKE '21%' ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 4 AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "AND BRANCH_ID = @BranID ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";


                    strSQL = strSQL + "SELECT @dblIncome = ISNULL(SUM(GR_AMOUNT),0)";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 3 ";
                    strSQL = strSQL + "SELECT @dblExpenses = ISNULL(SUM(GR_AMOUNT),0) ";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 4 ";
                    strSQL = strSQL + "If @dblIncome > @dblExpenses BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) VALUES('Net ";
                    strSQL = strSQL + "Profit ','Net Profit',4,@dblIncome - @dblExpenses) END If @dblIncome < @dblExpenses BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Net Loss','Net Loss',3,@dblExpenses - @dblIncome) END COMMIT ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }
        private static string CreateBalanceSheetBranchV()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gJagBalanceSheetBranchV') ";
                    strSQL = strSQL + "Drop PROCEDURE gJagBalanceSheetBranchV ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();

                    strSQL = "CREATE PROCEDURE gJagBalanceSheetBranchV ";
                    strSQL = strSQL + "@branchID char(4),";
                    strSQL = strSQL + "@frDate DATETIME,";
                    strSQL = strSQL + "@toDate  DATETIME,@dblGP numeric(18,2) ,@dblClsStock numeric(18,2),@fPreDate DATETIME  WITH ENCRYPTION AS ";
                    strSQL = strSQL + "DECLARE @PLGroup  VARCHAR(100)  ";
                    strSQL = strSQL + "DELETE FROM ACC_PROFIT_AND_LOSS If @dblGP > 0 BEGIN ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Profit b/d',' Gross Profit b/d',3,@dblGP) END ";
                    strSQL = strSQL + "If @dblGP < 0 BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Loss b/d',' Gross Loss b/d',4,ABS(@dblGP)) END ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";

                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) ";
                    strSQL = strSQL + "AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ";
                    strSQL = strSQL + "ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 3) AND ACC_LEDGER_GROUP_QRY.GR_GROUP <> '211' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT, ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP <> '211' ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 3 AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "AND BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "Where (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 4) And ACC_LEDGER_GROUP_QRY.GR_GROUP NOT LIKE '21%' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT , ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER ";
                    strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP NOT LIKE '21%' ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 4 AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "AND BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "DECLARE @dblIncome numeric(18,2),@dblExpenses Numeric(18,2) ";
                    strSQL = strSQL + "SELECT @dblIncome = ISNULL(SUM(GR_AMOUNT),0)";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 3 ";
                    strSQL = strSQL + "SELECT @dblExpenses = ISNULL(SUM(GR_AMOUNT),0) ";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 4 ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Net ','Net',4,@dblIncome - @dblExpenses) ";

                    //''************Variable**********
                    strSQL = strSQL + "DECLARE @PLLedger VARCHAR(100) ";
                    strSQL = strSQL + "DECLARE @dblOpeningPL numeric(18,2),";
                    strSQL = strSQL + "@dblJournal numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblPL1 numeric(18,2),";
                    strSQL = strSQL + "@dblPL2 numeric(18,2),";
                    strSQL = strSQL + "@dblopnIncome numeric(18,2)  ";
                    strSQL = strSQL + "DECLARE @opnStock numeric(18,2),";
                    strSQL = strSQL + "@dblPL3 numeric(18,2),";
                    strSQL = strSQL + "@clsStock numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @CurrentAsset VARCHAR(100),";
                    strSQL = strSQL + "@StockInHand VARCHAR(100) ";
                    strSQL = strSQL + "DECLARE @ClosingStock numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblCurrentIncome numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblInc numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblAsset numeric(18,2),";
                    strSQL = strSQL + "@dblLiabilities numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblOpeningPL1 numeric(18,2),@dblOpeningExpenses numeric(18,2)  ";
                    //''*******************************
                    strSQL = strSQL + "SELECT @PLLedger = LEDGER_NAME, @PLGroup = LEDGER_PARENT_GROUP FROM ACC_LEDGER  ";
                    strSQL = strSQL + "WHERE  LEDGER_GROUP = 301 AND LEDGER_DEFAULT = 1 ";
                    // ''Opening Assets Group
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0)*-1 ";
                    strSQL = strSQL + "FROM ACC_BRANCH_GROUP_OPENING ";
                    strSQL = strSQL + "WHERE GR_LEVEL = 2 AND GR_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + "AND GR_GROUP <> 401 ";
                    strSQL = strSQL + " AND BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY GR_NAME,GR_PARENT,GR_PRIMARY_TYPE ";

                    // 'Opening Liabilities Group
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0) ";
                    strSQL = strSQL + "FROM ACC_BRANCH_GROUP_OPENING ";
                    strSQL = strSQL + "WHERE GR_LEVEL = 2 AND GR_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + " AND BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY GR_NAME,GR_PARENT,GR_PRIMARY_TYPE ";

                    //'Opening Assets Ledger
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0)*-1 AS YY ";
                    strSQL = strSQL + "FROM ACC_LEDGER_VIEW_BRANCH ";
                    strSQL = strSQL + "WHERE LEDGER_LEVEL = 2 AND LEDGER_PRIMARY_TYPE = 1  ";
                    strSQL = strSQL + " AND BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    //'Opening Liabilities Ledger
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0) AS YY ";
                    strSQL = strSQL + "FROM ACC_LEDGER_VIEW_BRANCH ";
                    strSQL = strSQL + "WHERE LEDGER_LEVEL = 2 AND LEDGER_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + " AND BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    //'*********************Transaction************************************
                    // '    'Assets
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, ";
                    strSQL = strSQL + "ISNULL(SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT-ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 1) ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE <=  @toDate ";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + " AND ACC_VOUCHER.BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    // ''Liabilities
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, ";
                    strSQL = strSQL + "ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 2) ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE <=  @toDate ";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + " AND ACC_VOUCHER.BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    //'Assets Main Ledger
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,ISNULL(SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT),0) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE <=  @toDate ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + "AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + " AND BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    //'Liabilities Main Ledger
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE <=  @toDate ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + "AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + " AND BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    // '*********************End************************************
                    strSQL = strSQL + "SELECT @dblPL1 = ISNULL(SUM(GR_OPENING_CREDIT + GR_OPENING_DEBIT),0) ";
                    strSQL = strSQL + "FROM ACC_LEDGERGROUP WHERE GR_PRIMARY_TYPE > 2 ";
                    strSQL = strSQL + "AND GR_LEVEL = 2 ";
                    strSQL = strSQL + "SELECT @dblPL2 = ISNULL(SUM(LEDGER_OPENING_BALANCE),0) ";
                    strSQL = strSQL + "FROM ACC_LEDGER WHERE (LEDGER_PRIMARY_TYPE = 3 OR LEDGER_PRIMARY_TYPE = 4) AND LEDGER_LEVEL = 2 ";

                    strSQL = strSQL + "SELECT @dblopnIncome = ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0)";
                    strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                    //''strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE = 3) "
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE > 2) ";
                    strSQL = strSQL + " AND ACC_VOUCHER.BRANCH_ID=@branchID ";
                    //'Opening Expenses
                    strSQL = strSQL + "SELECT  @dblOpeningExpenses=ISNULL(SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0)  ";
                    strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                    // 'strSQL = strSQL + "WHERE COMP_VOUCHER_DATE <= " + cvtSQLDate(vdteToDate) + " "
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate ";
                    strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE = 4) ";

                    strSQL = strSQL + "SELECT @opnStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_INOUT_FLAG IS NULL ";
                    strSQL = strSQL + "SELECT @clsStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE < @frDate ";
                    // ''strSQL = strSQL + " SET @clsStock= @dblClsStock "

                    strSQL = strSQL + "SELECT @dblJournal = ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) FROM ACC_MAIN_LEDGER WHERE COMP_VOUCHER_DATE < @frDate ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 2 AND LEDGER_LEVEL = 2 AND LEDGER_DEFAULT = 1 AND LEDGER_GROUP = 301 ";
                    strSQL = strSQL + "SET @dblOpeningPL = (@dblPL1 + @dblPL2 + @dblopnIncome + @dblJournal) - (@opnStock - @clsStock) ";
                    // '    strSQL = strSQL + "SET @dblOpeningPL1 = (@dblOpeningExpenses + @dblJournal) - @clsStock "
                    //'    strSQL = strSQL + "SET @dblOpeningPL = @dblopnIncome -@dblOpeningPL1 "

                    strSQL = strSQL + " IF @dblPL3 > 0 ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = ' Opening Balance' ,GR_AMOUNT = @dblPL3 "; ;
                    strSQL = strSQL + "WHERE GR_NAME = @PLLedger ";
                    strSQL = strSQL + "IF @dblPL3 = 0 ";
                    strSQL = strSQL + "SET @dblOpeningPL = (@dblPL1 + @dblPL2 + @dblPL3 + @dblopnIncome + @dblJournal) - (@opnStock - @clsStock) ";
                    strSQL = strSQL + "IF @dblOpeningPL IS NULL SET @dblOpeningPL = 0 ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = ' Opening Balance' ,GR_AMOUNT = GR_AMOUNT + @dblOpeningPL ";
                    strSQL = strSQL + "WHERE GR_NAME = @PLLedger ";

                    strSQL = strSQL + "SELECT @CurrentAsset = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Current Assets'";
                    strSQL = strSQL + "SELECT @StockInHand = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Stock-in-hand' ";
                    // ''strSQL = strSQL + "SET @ClosingStock= @dblClsStock "
                    strSQL = strSQL + "SELECT @ClosingStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE <= @toDate ";
                    strSQL = strSQL + " AND BRANCH_ID=@branchID ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Closing Stock',@CurrentAsset,1,@ClosingStock) ";

                    strSQL = strSQL + "SELECT @dblCurrentIncome=ISNULL(SUM(GR_AMOUNT),0) FROM ACC_PROFIT_AND_lOSS WHERE GR_NAME='Net' ";
                    strSQL = strSQL + "SET @dblInc =@dblCurrentIncome ";
                    strSQL = strSQL + "IF @dblInc IS NULL SET @dblInc = 0 ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) VALUES";
                    strSQL = strSQL + "('Current Period',@PLGroup,2,@dblInc) ";

                    strSQL = strSQL + "SELECT @dblAsset = ISNULL(SUM(GR_AMOUNT),0) FROM ";
                    strSQL = strSQL + "ACC_BALANCE_SHEET_TEMP WHERE GR_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + "SELECT @dblLiabilities = SUM(GR_AMOUNT) FROM ACC_BALANCE_SHEET_TEMP WHERE GR_PRIMARY_TYPE = 2 ";
                    //'    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = 'Closing Stock' WHERE GR_NAME = @StockInHand "
                    strSQL = strSQL + "SELECT @dblOpeningPL1=ISNULL(SUM(GR_AMOUNT),0) FROM ACC_BALANCE_SHEET_TEMP WHERE GR_PARENT='Profit & Loss Accounts'";

                    strSQL = strSQL + "DELETE FROM ACC_BALANCE_SHEET_TEMP WHERE GR_AMOUNT = 0 ";
                    strSQL = strSQL + "DELETE FROM ACC_BALANCE_SHEET_COMPARISON WHERE ASON_DATE between  @frDate and @toDate ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,ISNULL(SUM(GR_AMOUNT),0) AS AMOUNT FROM  ACC_BALANCE_SHEET_TEMP ";
                    strSQL = strSQL + "GROUP BY GR_NAME, GR_PARENT,GR_PRIMARY_TYPE ORDER BY GR_PARENT ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_COMPARISON(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT,ASON_DATE) ";
                    strSQL = strSQL + "SELECT 'Net','Net',GR_PRIMARY_TYPE,ISNULL(SUM(GR_AMOUNT),0) AS AMOUNT,@toDate FROM  ACC_BALANCE_SHEET ";
                    strSQL = strSQL + "WHERE GR_PARENT='Profit & Loss Accounts' ";
                    strSQL = strSQL + "GROUP BY GR_PRIMARY_TYPE  ";

                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET SET GR_PRIMARY_TYPE = 2,GR_AMOUNT = -GR_AMOUNT WHERE GR_PARENT IN(SELECT GR_PARENT ";
                    strSQL = strSQL + "FROM ACC_BAL_QRY ";
                    strSQL = strSQL + "WHERE GR_PRIMARY_TYPE = 1 AND  SUMOFGR_AMOUNT < 0) ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET SET GR_PRIMARY_TYPE = 1,GR_AMOUNT = -GR_AMOUNT ";
                    strSQL = strSQL + "WHERE GR_PARENT IN(SELECT GR_PARENT FROM ACC_BAL_QRY WHERE GR_PRIMARY_TYPE = 2 AND  SUMOFGR_AMOUNT < 0)  ";

                    strSQL = strSQL + "If @dblAsset > @dblLiabilities INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Diff in Opening Bal.','Diff in Opening Bal.',2,@dblAsset - @dblLiabilities) ";
                    strSQL = strSQL + "If @dblAsset < @dblLiabilities INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Diff in Opening Bal.','Diff in Opening Bal.',1,@dblLiabilities - @dblAsset) ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }

        private static string CreateBalanceSheetBranchH()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;

                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gJagBalanceSheetBranchH') ";
                    strSQL = strSQL + "Drop PROCEDURE gJagBalanceSheetBranchH ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();

                    strSQL = "CREATE PROCEDURE gJagBalanceSheetBranchH ";
                    strSQL = strSQL + "@branchID char(4),";
                    strSQL = strSQL + "@frDate DATETIME,";
                    strSQL = strSQL + "@toDate  DATETIME,@dblGP numeric(18,2) ,@dblClsStock numeric(18,2),@fPreDate DATETIME  WITH ENCRYPTION AS ";
                    strSQL = strSQL + "DECLARE @PLGroup  VARCHAR(100)  ";
                    strSQL = strSQL + "DELETE FROM ACC_PROFIT_AND_LOSS If @dblGP > 0 BEGIN ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Profit b/d',' Gross Profit b/d',3,@dblGP) END ";
                    strSQL = strSQL + "If @dblGP < 0 BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Loss b/d',' Gross Loss b/d',4,ABS(@dblGP)) END ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";

                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) ";
                    strSQL = strSQL + "AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ";
                    strSQL = strSQL + "ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 3) AND ACC_LEDGER_GROUP_QRY.GR_GROUP <> '211' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT, ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP <> '211' ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 3 AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "AND BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "Where (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 4) And ACC_LEDGER_GROUP_QRY.GR_GROUP NOT LIKE '21%' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT , ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER ";
                    strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP NOT LIKE '21%' ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 4 AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "AND BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "DECLARE @dblIncome numeric(18,2),@dblExpenses Numeric(18,2) ";
                    strSQL = strSQL + "SELECT @dblIncome = ISNULL(SUM(GR_AMOUNT),0)";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 3 ";
                    strSQL = strSQL + "SELECT @dblExpenses = ISNULL(SUM(GR_AMOUNT),0) ";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 4 ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Net ','Net',4,@dblIncome - @dblExpenses) ";

                    //''************Variable**********
                    strSQL = strSQL + "DECLARE @PLLedger VARCHAR(100) ";
                    strSQL = strSQL + "DECLARE @dblOpeningPL numeric(18,2),";
                    strSQL = strSQL + "@dblJournal numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblPL1 numeric(18,2),";
                    strSQL = strSQL + "@dblPL2 numeric(18,2),";
                    strSQL = strSQL + "@dblopnIncome numeric(18,2)  ";
                    strSQL = strSQL + "DECLARE @opnStock numeric(18,2),";
                    strSQL = strSQL + "@dblPL3 numeric(18,2),";
                    strSQL = strSQL + "@clsStock numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @CurrentAsset VARCHAR(100),";
                    strSQL = strSQL + "@StockInHand VARCHAR(100) ";
                    strSQL = strSQL + "DECLARE @ClosingStock numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblCurrentIncome numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblInc numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblAsset numeric(18,2),";
                    strSQL = strSQL + "@dblLiabilities numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblOpeningPL1 numeric(18,2),@dblOpeningExpenses numeric(18,2)  ";
                    // ''*******************************
                    strSQL = strSQL + "SELECT @PLLedger = LEDGER_NAME, @PLGroup = LEDGER_PARENT_GROUP FROM ACC_LEDGER  ";
                    strSQL = strSQL + "WHERE  LEDGER_GROUP = 301 AND LEDGER_DEFAULT = 1 ";
                    //''Opening Assets Group
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0)*-1 ";
                    strSQL = strSQL + "FROM ACC_BRANCH_GROUP_OPENING ";
                    strSQL = strSQL + "WHERE GR_LEVEL = 2 AND GR_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + "AND GR_GROUP <> 401 ";
                    strSQL = strSQL + " AND BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY GR_NAME,GR_PARENT,GR_PRIMARY_TYPE ";

                    //'Opening Liabilities Group
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0) ";
                    strSQL = strSQL + "FROM ACC_BRANCH_GROUP_OPENING ";
                    strSQL = strSQL + "WHERE GR_LEVEL = 2 AND GR_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + " AND BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY GR_NAME,GR_PARENT,GR_PRIMARY_TYPE ";

                    // 'Opening Assets Ledger
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0)*-1 AS YY ";
                    strSQL = strSQL + "FROM ACC_LEDGER_VIEW_BRANCH ";
                    strSQL = strSQL + "WHERE LEDGER_LEVEL = 2 AND LEDGER_PRIMARY_TYPE = 1  ";
                    strSQL = strSQL + " AND BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    //'Opening Liabilities Ledger
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0) AS YY ";
                    strSQL = strSQL + "FROM ACC_LEDGER_VIEW_BRANCH ";
                    strSQL = strSQL + "WHERE LEDGER_LEVEL = 2 AND LEDGER_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + " AND BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    // '*********************Transaction************************************
                    // '    'Assets
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, ";
                    strSQL = strSQL + "ISNULL(SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT-ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 1) ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE <=  @toDate ";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + " AND ACC_VOUCHER.BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    // ''Liabilities
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, ";
                    strSQL = strSQL + "ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 2) ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE <=  @toDate ";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + " AND ACC_VOUCHER.BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    //'Assets Main Ledger
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,ISNULL(SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT),0) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE <=  @toDate ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + "AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + " AND BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    //'Liabilities Main Ledger
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE <=  @toDate ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + "AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + " AND BRANCH_ID= @branchID ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    //'*********************End************************************
                    strSQL = strSQL + "SELECT @dblPL1 = ISNULL(SUM(GR_OPENING_CREDIT + GR_OPENING_DEBIT),0) ";
                    strSQL = strSQL + "FROM ACC_LEDGERGROUP WHERE GR_PRIMARY_TYPE > 2 ";
                    strSQL = strSQL + "AND GR_LEVEL = 2 ";
                    strSQL = strSQL + "SELECT @dblPL2 = ISNULL(SUM(LEDGER_OPENING_BALANCE),0) ";
                    strSQL = strSQL + "FROM ACC_LEDGER WHERE (LEDGER_PRIMARY_TYPE = 3 OR LEDGER_PRIMARY_TYPE = 4) AND LEDGER_LEVEL = 2 ";


                    strSQL = strSQL + "SELECT @dblopnIncome = ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0)";
                    strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                    //''strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE = 3) "
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE > 2) ";
                    strSQL = strSQL + " AND ACC_VOUCHER.BRANCH_ID=@branchID ";
                    //'Opening Expenses
                    strSQL = strSQL + "SELECT  @dblOpeningExpenses=ISNULL(SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0)  ";
                    strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                    //'strSQL = strSQL + "WHERE COMP_VOUCHER_DATE <= " + cvtSQLDate(vdteToDate) + " "
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate ";
                    strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE = 4) ";

                    strSQL = strSQL + "SELECT @opnStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_INOUT_FLAG IS NULL ";
                    strSQL = strSQL + " AND BRANCH_ID=@branchID ";
                    strSQL = strSQL + "SELECT @clsStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE < @frDate ";
                    strSQL = strSQL + " AND BRANCH_ID=@branchID ";
                    // ''strSQL = strSQL + " SET @clsStock= @dblClsStock "

                    strSQL = strSQL + "SELECT @dblJournal = ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) FROM ACC_MAIN_LEDGER WHERE COMP_VOUCHER_DATE < @frDate ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 2 AND LEDGER_LEVEL = 2 AND LEDGER_DEFAULT = 1 AND LEDGER_GROUP = 301 ";
                    strSQL = strSQL + "SET @dblOpeningPL = (@dblPL1 + @dblPL2 + @dblopnIncome + @dblJournal) - (@opnStock - @clsStock) ";
                    //'    strSQL = strSQL + "SET @dblOpeningPL1 = (@dblOpeningExpenses + @dblJournal) - @clsStock "
                    // '    strSQL = strSQL + "SET @dblOpeningPL = @dblopnIncome -@dblOpeningPL1 "

                    strSQL = strSQL + " IF @dblPL3 > 0 ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = ' Opening Balance' ,GR_AMOUNT = @dblPL3 ";
                    strSQL = strSQL + "WHERE GR_NAME = @PLLedger ";
                    strSQL = strSQL + "IF @dblPL3 = 0 ";
                    strSQL = strSQL + "SET @dblOpeningPL = (@dblPL1 + @dblPL2 + @dblPL3 + @dblopnIncome + @dblJournal) - (@opnStock - @clsStock) ";
                    strSQL = strSQL + "IF @dblOpeningPL IS NULL SET @dblOpeningPL = 0 ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = ' Opening Balance' ,GR_AMOUNT = GR_AMOUNT + @dblOpeningPL ";
                    strSQL = strSQL + "WHERE GR_NAME = @PLLedger ";

                    strSQL = strSQL + "SELECT @CurrentAsset = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Current Assets'";
                    strSQL = strSQL + "SELECT @StockInHand = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Stock-in-hand' ";
                    //''strSQL = strSQL + "SET @ClosingStock= @dblClsStock "
                    strSQL = strSQL + "SELECT @ClosingStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE <= @toDate ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Closing Stock',@CurrentAsset,1,@ClosingStock) ";

                    strSQL = strSQL + "SELECT @dblCurrentIncome=ISNULL(SUM(GR_AMOUNT),0) FROM ACC_PROFIT_AND_lOSS WHERE GR_NAME='Net' ";
                    strSQL = strSQL + "SET @dblInc =@dblCurrentIncome ";
                    strSQL = strSQL + "IF @dblInc IS NULL SET @dblInc = 0 ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) VALUES";
                    strSQL = strSQL + "('Current Period',@PLGroup,2,@dblInc) ";

                    strSQL = strSQL + "SELECT @dblAsset = ISNULL(SUM(GR_AMOUNT),0) FROM ";
                    strSQL = strSQL + "ACC_BALANCE_SHEET_TEMP WHERE GR_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + "SELECT @dblLiabilities = SUM(GR_AMOUNT) FROM ACC_BALANCE_SHEET_TEMP WHERE GR_PRIMARY_TYPE = 2 ";
                    //'    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = 'Closing Stock' WHERE GR_NAME = @StockInHand "
                    strSQL = strSQL + "SELECT @dblOpeningPL1=ISNULL(SUM(GR_AMOUNT),0) FROM ACC_BALANCE_SHEET_TEMP WHERE GR_PARENT='Profit & Loss Accounts'";

                    strSQL = strSQL + "DELETE FROM ACC_BALANCE_SHEET_TEMP WHERE GR_AMOUNT = 0 ";
                    strSQL = strSQL + "DELETE FROM ACC_BALANCE_SHEET_COMPARISON WHERE ASON_DATE between  @frDate and @toDate ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,ISNULL(SUM(GR_AMOUNT),0) AS AMOUNT FROM  ACC_BALANCE_SHEET_TEMP ";
                    strSQL = strSQL + "GROUP BY GR_NAME, GR_PARENT,GR_PRIMARY_TYPE ORDER BY GR_PARENT ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_COMPARISON(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT,ASON_DATE) ";
                    strSQL = strSQL + "SELECT 'Net','Net',GR_PRIMARY_TYPE,ISNULL(SUM(GR_AMOUNT),0) AS AMOUNT,@toDate FROM  ACC_BALANCE_SHEET ";
                    strSQL = strSQL + "WHERE GR_PARENT='Profit & Loss Accounts' ";
                    strSQL = strSQL + "GROUP BY GR_PRIMARY_TYPE  ";

                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET SET GR_PRIMARY_TYPE = 2,GR_AMOUNT = -GR_AMOUNT WHERE GR_PARENT IN(SELECT GR_PARENT ";
                    strSQL = strSQL + "FROM ACC_BAL_QRY ";
                    strSQL = strSQL + "WHERE GR_PRIMARY_TYPE = 1 AND  SUMOFGR_AMOUNT < 0) ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET SET GR_PRIMARY_TYPE = 1,GR_AMOUNT = -GR_AMOUNT ";
                    strSQL = strSQL + "WHERE GR_PARENT IN(SELECT GR_PARENT FROM ACC_BAL_QRY WHERE GR_PRIMARY_TYPE = 2 AND  SUMOFGR_AMOUNT < 0)  ";

                    strSQL = strSQL + "If @dblAsset > @dblLiabilities INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Diff in Opening Bal.','Diff in Opening Bal.',2,@dblAsset - @dblLiabilities) ";
                    strSQL = strSQL + "If @dblAsset < @dblLiabilities INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Diff in Opening Bal.','Diff in Opening Bal.',1,@dblLiabilities - @dblAsset) ";

                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }

        private static string CreateTrailBalanceNIBranchLedger()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gJagTrialBalanceNIBranchLedger') ";
                    strSQL = strSQL + "Drop PROCEDURE gJagTrialBalanceNIBranchLedger ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();


                    strSQL = "CREATE PROCEDURE gJagTrialBalanceNIBranchLedger @branchID char(4),@frDate DATETIME,@toDate DATETIME,";
                    strSQL = strSQL + "@OpenOrClose INT, @dblOnlyOpening numeric(18,2), @dblTotalOpening numeric(18,2) WITH ENCRYPTION AS BEGIN TRANSACTION  ";
                    strSQL = strSQL + "DELETE FROM ACC_TRIAL_BALANCE DECLARE @strPLledger varchar(100),@strPLGroup varchar(100),@strCurrentAssets varchar(100) ";
                    strSQL = strSQL + "DECLARE @dblPL numeric(18,2),@dblLedgerPL numeric(18,2),@dblAsOnPL numeric(18,2) DECLARE @dblOpeningStock numeric(18,2), ";
                    strSQL = strSQL + "@dblOpening numeric(18,2) DECLARE @dblClosingStock numeric(18,2) SELECT @strPLledger = LEDGER_NAME, ";
                    strSQL = strSQL + "@strPLGroup = LEDGER_PARENT_GROUP FROM ACC_LEDGER WHERE LEDGER_GROUP = 301 AND LEDGER_DEFAULT = 1 ";
                    strSQL = strSQL + "SELECT @strCurrentAssets = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Current Assets' ";
                    strSQL = strSQL + "SELECT @dblLedgerPL = ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0)  FROM ACC_LEDGER_VIEW_BRANCH ";
                    strSQL = strSQL + "WHERE BRANCH_ID = @branchid AND (LEDGER_PRIMARY_TYPE = 3 OR LEDGER_PRIMARY_TYPE = 4) ";
                    strSQL = strSQL + "SELECT @dblAsOnPL = ISNULL(SUM(A.VOUCHER_CREDIT_AMOUNT - A.VOUCHER_DEBIT_AMOUNT),0) ";
                    strSQL = strSQL + "FROM ACC_VOUCHER A,ACC_LEDGER B WHERE A.LEDGER_NAME = B.LEDGER_NAME AND ";
                    strSQL = strSQL + "(B.LEDGER_PRIMARY_TYPE = 3 OR B.LEDGER_PRIMARY_TYPE = 4) AND COMP_VOUCHER_DATE < @frDate ";
                    strSQL = strSQL + "AND A.BRANCH_ID = @branchid SET @dblPL = @dblLedgerPL + @dblAsOnPL ";
                    strSQL = strSQL + "SET @dblPL = @dblPL + (@dblOnlyOpening  - @dblTotalOpening) IF @dblPL IS NULL SET @dblPL = 0 ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) VALUES(@strPLledger,@strPLGroup,@dblPL) ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PRIMARY_GROUP,BRANCH_LEDGER_OPENING_BALANCE FROM ACC_LEDGER_VIEW_BRANCH ";
                    strSQL = strSQL + "WHERE BRANCH_ID = @branchid AND (LEDGER_PRIMARY_TYPE < 3 ) IF @dblOpeningStock IS NULL SET @dblOpeningStock = 0 ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) VALUES('Opening Stock',@strCurrentAssets,@dblOpeningStock * -1) ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PRIMARY_GROUP,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS AMT FROM ACC_LEDGER_VOUCHER ";
                    strSQL = strSQL + "WHERE BRANCH_ID = @branchID AND  ";
                    strSQL = strSQL + "COMP_VOUCHER_DATE < @frDate AND LEDGER_PRIMARY_TYPE < 3 GROUP BY LEDGER_NAME, LEDGER_PRIMARY_GROUP ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PRIMARY_GROUP,(SUM(VOUCHER_DEBIT_AMOUNT)* -1) AS DEBIT_TOTAL, ";
                    strSQL = strSQL + "SUM(VOUCHER_CREDIT_AMOUNT) AS CREDIT_TOTAL FROM ACC_LEDGER_VOUCHER ";
                    strSQL = strSQL + "WHERE BRANCH_ID = @branchid AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME,LEDGER_PRIMARY_GROUP IF @OpenOrClose = 1 BEGIN ";
                    strSQL = strSQL + "SELECT @dblOpening = (ISNULL(SUM(GR_OPENING),0) * -1) FROM ACC_TRIAL_BALANCE ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "VALUES('Diff in Opening Balances','Diff in Opening Balances',@dblOpening) END ";
                    strSQL = strSQL + "DELETE FROM ACC_TRIAL_BALANCE WHERE (GR_OPENING = 0) AND (GR_DEBIT = 0) AND (GR_CREDIT = 0) COMMIT ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }


        private static string CreateTrailBalanceNIBranchGroup()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gJagTrialBalanceNIBranch') ";
                    strSQL = strSQL + "Drop PROCEDURE gJagTrialBalanceNIBranch ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();

                    strSQL = "CREATE PROCEDURE gJagTrialBalanceNIBranch @branchID char(4),@frDate DATETIME,@toDate DATETIME, @OpenOrClose INT, ";
                    strSQL = strSQL + "@dblOnlyOpening numeric(18,2), @dblTotalOpening numeric(18,2) WITH ENCRYPTION AS BEGIN TRANSACTION ";
                    strSQL = strSQL + "DELETE FROM ACC_TRIAL_BALANCE DECLARE @strPLledger varchar(100),@strPLGroup varchar(100),@strCurrentAssets varchar(100) ";
                    strSQL = strSQL + "DECLARE @dblPL numeric(18,2),@dblGroupPL numeric(18,2),@dblLedgerPL numeric(18,2),@dblAsOnPL numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblOpeningStock numeric(18,2),@dblOpening numeric(18,2) DECLARE @dblClosingStock numeric(18,2) ";
                    strSQL = strSQL + "SELECT @strPLledger = LEDGER_NAME,@strPLGroup = LEDGER_PARENT_GROUP FROM ACC_LEDGER WHERE LEDGER_GROUP = 301 AND ";
                    strSQL = strSQL + "LEDGER_DEFAULT = 1 SELECT @strCurrentAssets = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Current Assets' ";
                    strSQL = strSQL + "SELECT @dblLedgerPL = ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0)  FROM ACC_LEDGER_VIEW_BRANCH ";
                    strSQL = strSQL + "WHERE BRANCH_ID = @branchid AND (LEDGER_PRIMARY_TYPE = 3 OR LEDGER_PRIMARY_TYPE = 4) AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "SELECT @dblGroupPL = ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0) FROM ACC_BRANCH_GROUP_OPENING ";
                    strSQL = strSQL + "WHERE BRANCH_ID = @branchid AND GR_PRIMARY_TYPE > 2 AND GR_LEVEL = 2 ";
                    strSQL = strSQL + "SELECT @dblAsOnPL = ISNULL(SUM(A.VOUCHER_CREDIT_AMOUNT - A.VOUCHER_DEBIT_AMOUNT),0) FROM ACC_VOUCHER A,ACC_LEDGER B ";
                    strSQL = strSQL + "Where A.LEDGER_NAME = B.LEDGER_NAME And (B.LEDGER_PRIMARY_TYPE = 3 Or B.LEDGER_PRIMARY_TYPE = 4) ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE < @frDate AND A.BRANCH_ID = @branchid ";
                    strSQL = strSQL + "SET @dblPL = @dblGroupPL + @dblLedgerPL + @dblAsOnPL SET @dblPL = @dblPL + (@dblOnlyOpening  - @dblTotalOpening) ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) VALUES(@strPLledger,@strPLGroup,@dblPL) ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,BRANCH_LEDGER_OPENING_BALANCE FROM ACC_LEDGER_VIEW_BRANCH ";
                    strSQL = strSQL + "WHERE BRANCH_ID = @branchid AND (LEDGER_PRIMARY_TYPE < 3 ) AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) SELECT GR_NAME,GR_PARENT,BRANCH_LEDGER_OPENING_BALANCE ";
                    strSQL = strSQL + "FROM ACC_BRANCH_GROUP_OPENING WHERE BRANCH_ID = @branchid AND GR_PRIMARY_TYPE < 3 AND GR_LEVEL = 2 ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT, ";
                    strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) As DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE ACC_VOUCHER.BRANCH_ID = @branchid AND ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE < 3 AND ";
                    strSQL = strSQL + "COMP_VOUCHER_DATE <  @frDate  AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT IF @dblOpeningStock IS NULL SET @dblOpeningStock = 0 ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "VALUES('Opening Stock',@strCurrentAssets,@dblOpeningStock * -1) ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS AMT FROM ACC_MAIN_LEDGER ";
                    strSQL = strSQL + "WHERE BRANCH_ID = @branchID AND COMP_VOUCHER_DATE < @frDate AND LEDGER_PRIMARY_TYPE < ";
                    strSQL = strSQL + "3 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT, ";
                    strSQL = strSQL + "(SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) * -1) AS DEBIT_TOTAL,SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS CREDIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE ACC_VOUCHER.BRANCH_ID = @branchid AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) SELECT ACC_MAIN_LEDGER.LEDGER_NAME, ";
                    strSQL = strSQL + "ACC_MAIN_LEDGER.LEDGER_PARENT_GROUP,(SUM(VOUCHER_DEBIT_AMOUNT)* -1) AS DEBIT_TOTAL, ";
                    strSQL = strSQL + "SUM(VOUCHER_CREDIT_AMOUNT) AS CREDIT_TOTAL FROM ACC_MAIN_LEDGER WHERE BRANCH_ID = @branchid ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_MAIN_LEDGER.LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_MAIN_LEDGER.LEDGER_NAME,LEDGER_PARENT_GROUP IF @OpenOrClose = 1 BEGIN ";
                    strSQL = strSQL + "SELECT @dblOpening = (ISNULL(SUM(GR_OPENING),0) * -1) FROM ACC_TRIAL_BALANCE ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "VALUES('Diff in Opening Balances','Diff in Opening Balances',@dblOpening) END DELETE FROM ACC_TRIAL_BALANCE ";
                    strSQL = strSQL + "WHERE (GR_OPENING = 0) AND (GR_DEBIT = 0) AND (GR_CREDIT = 0) COMMIT ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }




        private static string CreateTrailBalanceBranchLedger()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gTrialBalanceBranchLedger') ";
                    strSQL = strSQL + "Drop PROCEDURE gTrialBalanceBranchLedger ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();

                    strSQL = "CREATE PROCEDURE gTrialBalanceBranchLedger @branchID char(4),@frDate DATETIME,@toDate DATETIME, ";
                    strSQL = strSQL + "@OpenOrClose INT WITH ENCRYPTION AS BEGIN TRANSACTION DELETE FROM ACC_TRIAL_BALANCE ";
                    strSQL = strSQL + "DECLARE @strPLledger varchar(100),@strPLGroup varchar(100),@strCurrentAssets varchar(100) ";
                    strSQL = strSQL + "DECLARE @dblPL numeric(18,2),@dblLedgerPL numeric(18,2),@dblAsOnPL numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblOpeningStock numeric(18,2),@dblOpening numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblClosingStock numeric(18,2) ";
                    strSQL = strSQL + "SELECT @strPLledger = LEDGER_NAME,@strPLGroup = LEDGER_PARENT_GROUP FROM ACC_LEDGER ";
                    strSQL = strSQL + "Where LEDGER_GROUP = 301 And LEDGER_DEFAULT = 1 ";
                    strSQL = strSQL + "SELECT @strCurrentAssets = GR_NAME FROM ACC_LEDGERGROUP ";
                    strSQL = strSQL + "WHERE GR_DEFAULT_NAME = 'Current Assets' SELECT @dblOpeningStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM ";
                    strSQL = strSQL + "INV_STOCKITEM_TRAN_QRY WHERE BRANCH_ID = @branchID AND INV_INOUT_FLAG IS NULL ";
                    strSQL = strSQL + "SELECT @dblClosingStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_STOCKITEM_TRAN_QRY WHERE BRANCH_ID = @branchID AND ";
                    strSQL = strSQL + "INV_DATE < @frDate SELECT @dblLedgerPL = ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0) ";
                    strSQL = strSQL + "FROM ACC_LEDGER_VIEW_BRANCH WHERE BRANCH_ID = @branchID AND (LEDGER_PRIMARY_TYPE = 3 OR LEDGER_PRIMARY_TYPE = 4) ";
                    strSQL = strSQL + "SELECT @dblAsOnPL = ISNULL(SUM(A.VOUCHER_CREDIT_AMOUNT - A.VOUCHER_DEBIT_AMOUNT),0) FROM ACC_VOUCHER A,ACC_LEDGER B ";
                    strSQL = strSQL + "WHERE A.LEDGER_NAME = B.LEDGER_NAME AND B.LEDGER_PRIMARY_TYPE > 2 AND COMP_VOUCHER_DATE < @frDate AND A.BRANCH_ID = @branchID ";
                    strSQL = strSQL + "SET @dblPL = @dblLedgerPL + @dblAsOnPL SET @dblPL = @dblPL - (@dblOpeningStock - @dblClosingStock) ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) VALUES(@strPLledger,@strPLGroup,@dblPL) ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) SELECT LEDGER_NAME,LEDGER_PRIMARY_GROUP,BRANCH_LEDGER_OPENING_BALANCE ";
                    strSQL = strSQL + "FROM ACC_LEDGER_VIEW_BRANCH WHERE BRANCH_ID = @branchID AND (LEDGER_PRIMARY_TYPE = 1 OR LEDGER_PRIMARY_TYPE = 2) ";
                    strSQL = strSQL + "SELECT @dblOpeningStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_STOCKITEM_TRAN_QRY WHERE BRANCH_ID = @branchID AND ";
                    strSQL = strSQL + "INV_DATE < @frDate INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "VALUES('Opening Stock',@strCurrentAssets,@dblOpeningStock * -1) ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PRIMARY_GROUP,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS AMT FROM ACC_LEDGER_VOUCHER ";
                    strSQL = strSQL + "WHERE BRANCH_ID = @branchID AND COMP_VOUCHER_DATE < @frDate AND LEDGER_PRIMARY_TYPE < 3 GROUP BY LEDGER_NAME,LEDGER_PRIMARY_GROUP ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) SELECT LEDGER_NAME,LEDGER_PRIMARY_GROUP, ";
                    strSQL = strSQL + "(SUM(VOUCHER_DEBIT_AMOUNT)* -1) AS DEBIT_TOTAL,SUM(VOUCHER_CREDIT_AMOUNT) AS CREDIT_TOTAL FROM ACC_LEDGER_VOUCHER ";
                    strSQL = strSQL + "WHERE BRANCH_ID = @branchID AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) GROUP BY LEDGER_NAME,LEDGER_PRIMARY_GROUP ";
                    strSQL = strSQL + "IF @OpenOrClose = 1 BEGIN SELECT @dblOpening = (ISNULL(SUM(GR_OPENING),0) * -1) FROM ACC_TRIAL_BALANCE ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) VALUES('Diff in Opening Balances', ";
                    strSQL = strSQL + "'Diff in Opening Balances',@dblOpening) END DELETE FROM ACC_TRIAL_BALANCE WHERE (GR_OPENING = 0) AND (GR_DEBIT = 0) ";
                    strSQL = strSQL + "AND (GR_CREDIT = 0) ";
                    strSQL = strSQL + "COMMIT ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }



        private static string CreateTrailBalanceBranchGroup()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gTrialBalanceBranchGroup') ";
                    strSQL = strSQL + "Drop PROCEDURE gTrialBalanceBranchGroup ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    strSQL = "CREATE PROCEDURE gTrialBalanceBranchGroup ";
                    strSQL = strSQL + "@branchID char(4),@frDate DATETIME,@toDate DATETIME,";
                    strSQL = strSQL + "@OpenOrClose INT WITH ENCRYPTION AS BEGIN TRANSACTION DELETE FROM ACC_TRIAL_BALANCE ";
                    strSQL = strSQL + "DECLARE @strPLledger varchar(100),@strPLGroup varchar(100),@strCurrentAssets varchar(100) ";
                    strSQL = strSQL + "DECLARE @dblPL numeric(18,2),@dblGroupPL numeric(18,2),@dblLedgerPL numeric(18,2),@dblAsOnPL numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblOpeningStock numeric(18,2),@dblOpening numeric(18,2) DECLARE @dblClosingStock numeric(18,2) ";
                    strSQL = strSQL + "SELECT @strPLledger = LEDGER_NAME,@strPLGroup = LEDGER_PARENT_GROUP FROM ACC_LEDGER WHERE LEDGER_GROUP = 301 AND LEDGER_DEFAULT = 1 ";
                    strSQL = strSQL + "SELECT @strCurrentAssets = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Current Assets' ";
                    strSQL = strSQL + "SELECT @dblOpeningStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_STOCKITEM_TRAN_QRY WHERE BRANCH_ID = @branchID ";
                    strSQL = strSQL + "AND INV_INOUT_FLAG IS NULL ";
                    strSQL = strSQL + "SELECT @dblClosingStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_STOCKITEM_TRAN_QRY WHERE BRANCH_ID = @branchID ";
                    strSQL = strSQL + "AND INV_DATE < @frDate SELECT @dblLedgerPL = ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0)  ";
                    strSQL = strSQL + "FROM ACC_LEDGER_VIEW_BRANCH WHERE BRANCH_ID = @branchid ";
                    strSQL = strSQL + "AND (LEDGER_PRIMARY_TYPE = 3 OR LEDGER_PRIMARY_TYPE = 4) AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "SELECT @dblGroupPL = ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0) FROM ACC_BRANCH_GROUP_OPENING WHERE BRANCH_ID = @branchid AND ";
                    strSQL = strSQL + "GR_PRIMARY_TYPE > 2 AND GR_LEVEL = 2 SELECT @dblAsOnPL = ISNULL(SUM(A.VOUCHER_CREDIT_AMOUNT - A.VOUCHER_DEBIT_AMOUNT),0) FROM ";
                    strSQL = strSQL + "ACC_VOUCHER A,ACC_LEDGER B WHERE A.LEDGER_NAME = B.LEDGER_NAME AND (B.LEDGER_PRIMARY_TYPE = 3 OR B.LEDGER_PRIMARY_TYPE = 4) ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE < @frDate AND A.BRANCH_ID = @branchid SET @dblPL = @dblGroupPL + @dblLedgerPL + @dblAsOnPL ";
                    strSQL = strSQL + "SET @dblPL = @dblPL - (@dblOpeningStock - @dblClosingStock) INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "VALUES(@strPLledger,@strPLGroup,@dblPL) INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,BRANCH_LEDGER_OPENING_BALANCE FROM ACC_LEDGER_VIEW_BRANCH ";
                    strSQL = strSQL + "WHERE BRANCH_ID = @branchid AND (LEDGER_PRIMARY_TYPE < 3 ) ";
                    strSQL = strSQL + "AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,BRANCH_LEDGER_OPENING_BALANCE FROM ACC_BRANCH_GROUP_OPENING ";
                    strSQL = strSQL + "WHERE BRANCH_ID = @branchid AND GR_PRIMARY_TYPE < 3 AND GR_LEVEL = 2 ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT, ";
                    strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL FROM ";
                    strSQL = strSQL + "ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE ACC_VOUCHER.BRANCH_ID = @branchid AND ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE < 3 AND ";
                    strSQL = strSQL + "COMP_VOUCHER_DATE <  @frDate  AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT ";
                    strSQL = strSQL + "SELECT @dblOpeningStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE BRANCH_ID = @branchID AND INV_DATE < @frDate ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) VALUES('Opening Stock',@strCurrentAssets,@dblOpeningStock * -1) ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS AMT FROM ";
                    strSQL = strSQL + "ACC_MAIN_LEDGER WHERE BRANCH_ID = @branchID AND COMP_VOUCHER_DATE < @frDate AND LEDGER_PRIMARY_TYPE < 3 ";
                    strSQL = strSQL + "AND LEDGER_LEVEL < 3 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT, ";
                    strSQL = strSQL + "(SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) * -1) AS DEBIT_TOTAL,SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS CREDIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE ACC_VOUCHER.BRANCH_ID = @branchid AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) ";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) SELECT ";
                    strSQL = strSQL + "ACC_MAIN_LEDGER.LEDGER_NAME,ACC_MAIN_LEDGER.LEDGER_PARENT_GROUP,(SUM(VOUCHER_DEBIT_AMOUNT)* -1) AS DEBIT_TOTAL, ";
                    strSQL = strSQL + "SUM(VOUCHER_CREDIT_AMOUNT) AS CREDIT_TOTAL FROM ACC_MAIN_LEDGER WHERE BRANCH_ID = @branchid ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_MAIN_LEDGER.LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_MAIN_LEDGER.LEDGER_NAME,LEDGER_PARENT_GROUP IF @OpenOrClose = 1 BEGIN ";
                    strSQL = strSQL + "SELECT @dblOpening = (ISNULL(SUM(GR_OPENING),0) * -1) FROM ACC_TRIAL_BALANCE ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "VALUES('Diff in Opening Balances','Diff in Opening Balances',@dblOpening) END DELETE FROM ACC_TRIAL_BALANCE ";
                    strSQL = strSQL + "WHERE (GR_OPENING = 0) AND (GR_DEBIT = 0) AND (GR_CREDIT = 0) COMMIT ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }



        private static string CreateTrailBalanceLedgerNI()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gJagTrialBalanceNILedger') ";
                    strSQL = strSQL + "Drop PROCEDURE gJagTrialBalanceNILedger ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();



                    strSQL = "CREATE PROCEDURE gJagTrialBalanceNILedger @frDate DATETIME,@toDate DATETIME, ";
                    strSQL = strSQL + "@OpenOrClose INT,@dblOnlyOpening numeric(18,2), @dblTotalOpening numeric(18,2) ";
                    strSQL = strSQL + "WITH ENCRYPTION AS BEGIN TRANSACTION DELETE FROM ACC_TRIAL_BALANCE ";
                    strSQL = strSQL + "DECLARE @strStockInHand  varchar(100) DECLARE @strPLledger varchar(100),";
                    strSQL = strSQL + "@strPLGroup varchar(100),@strCurrentAssets varchar(100) ";
                    strSQL = strSQL + "DECLARE @dblPL numeric(18,2),@dblLedgerPL numeric(18,2),@dblAsOnPL numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblOpeningStock numeric(18,2),@dblOpening numeric(18,2) DECLARE @dblClosingStock numeric(18,2) ";
                    strSQL = strSQL + "SELECT @strPLledger = LEDGER_NAME,@strPLGroup = LEDGER_PARENT_GROUP FROM ACC_LEDGER WHERE LEDGER_GROUP = 301 AND LEDGER_DEFAULT = 1 ";
                    strSQL = strSQL + "SELECT @strCurrentAssets = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Current Assets' ";
                    strSQL = strSQL + "SELECT @strStockInHand = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Stock-in-hand' ";
                    strSQL = strSQL + "SELECT @dblLedgerPL = ISNULL(SUM(LEDGER_OPENING_BALANCE),0) FROM ACC_LEDGER WHERE (LEDGER_PRIMARY_TYPE = 3 OR LEDGER_PRIMARY_TYPE = 4) ";
                    strSQL = strSQL + "SELECT @dblAsOnPL = ISNULL(SUM(A.VOUCHER_CREDIT_AMOUNT - A.VOUCHER_DEBIT_AMOUNT),0) FROM ACC_VOUCHER A,ACC_LEDGER B ";
                    strSQL = strSQL + "Where A.LEDGER_NAME = B.LEDGER_NAME And (B.LEDGER_PRIMARY_TYPE = 3 Or B.LEDGER_PRIMARY_TYPE = 4) ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE < @frDate SET @dblPL = @dblLedgerPL + @dblAsOnPL SET @dblPL = @dblPL + (@dblOnlyOpening - @dblTotalOpening) ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) VALUES(@strPLledger,@strPLGroup,@dblPL) ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) SELECT LEDGER_NAME,LEDGER_PRIMARY_GROUP,LEDGER_OPENING_BALANCE ";
                    strSQL = strSQL + "FROM ACC_LEDGER WHERE (LEDGER_PRIMARY_TYPE = 1 OR LEDGER_PRIMARY_TYPE = 2) ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PRIMARY_GROUP,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS AMT FROM ACC_LEDGER_VOUCHER ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate AND LEDGER_PRIMARY_TYPE < 3 GROUP BY LEDGER_NAME,LEDGER_PRIMARY_GROUP ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PRIMARY_GROUP,(SUM(VOUCHER_DEBIT_AMOUNT)* -1) AS DEBIT_TOTAL, ";
                    strSQL = strSQL + "SUM(VOUCHER_CREDIT_AMOUNT) AS CREDIT_TOTAL FROM ACC_LEDGER_VOUCHER ";
                    strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME,LEDGER_PRIMARY_GROUP UPDATE ACC_TRIAL_BALANCE SET GR_NAME = 'Opening Stock',GR_OPENING = @dblTotalOpening ";
                    strSQL = strSQL + "WHERE GR_NAME = @strStockInHand  IF @OpenOrClose = 1 BEGIN ";
                    strSQL = strSQL + "SELECT @dblOpening = (ISNULL(SUM(GR_OPENING),0) * -1) FROM ACC_TRIAL_BALANCE ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "VALUES('Diff in Opening Balances','Diff in Opening Balances',@dblOpening) END ";
                    strSQL = strSQL + "DELETE FROM ACC_TRIAL_BALANCE WHERE (GR_OPENING = 0) AND (GR_DEBIT = 0) AND (GR_CREDIT = 0) COMMIT ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }



        private static string CreateTrailBalanceGroupNI()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gJagTrialBalanceNILedger') "; ;
                    strSQL = strSQL + "Drop PROCEDURE gJagTrialBalanceNILedger ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gJagTrialBalanceNIGroup') ";
                    strSQL = strSQL + "Drop PROCEDURE gJagTrialBalanceNIGroup ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();


                    strSQL = "CREATE PROCEDURE gJagTrialBalanceNIGroup @frDate DATETIME,@toDate DATETIME, @OpenOrClose INT, ";
                    strSQL = strSQL + "@dblOnlyOpening numeric(18,2), @dblTotalOpening numeric(18,2) WITH ENCRYPTION AS BEGIN TRANSACTION ";
                    strSQL = strSQL + "DELETE FROM ACC_TRIAL_BALANCE ";
                    strSQL = strSQL + "DECLARE @strStockInHand  varchar(100) DECLARE @strPLledger varchar(100),";
                    strSQL = strSQL + "@strPLGroup varchar(100),@strCurrentAssets varchar(100) ";
                    strSQL = strSQL + "DECLARE @dblPL numeric(18,2),@dblGroupPL numeric(18,2),";
                    strSQL = strSQL + "@dblLedgerPL numeric(18,2),@dblAsOnPL numeric(18,2) DECLARE @dblOpeningStock numeric(18,2),";
                    strSQL = strSQL + "@dblOpening numeric(18,2) DECLARE @dblClosingStock numeric(18,2) SELECT @strPLledger = LEDGER_NAME,";
                    strSQL = strSQL + "@strPLGroup = LEDGER_PARENT_GROUP FROM ACC_LEDGER WHERE LEDGER_GROUP = 301 AND LEDGER_DEFAULT = 1 ";
                    strSQL = strSQL + "SELECT @strCurrentAssets = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Current Assets' ";
                    strSQL = strSQL + "SELECT @strStockInHand = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Stock-in-hand' ";
                    strSQL = strSQL + "SELECT @dblLedgerPL = ISNULL(SUM(LEDGER_OPENING_BALANCE),0) FROM ";
                    strSQL = strSQL + "ACC_LEDGER Where(LEDGER_PRIMARY_TYPE = 3 Or LEDGER_PRIMARY_TYPE = 4) ";
                    strSQL = strSQL + "And LEDGER_LEVEL = 2 SELECT @dblGroupPL = ISNULL(SUM(GR_OPENING_CREDIT + GR_OPENING_DEBIT),0) ";
                    strSQL = strSQL + "FROM ACC_LEDGERGROUP WHERE GR_PRIMARY_TYPE > 2 AND GR_LEVEL = 2 ";
                    strSQL = strSQL + "SELECT @dblAsOnPL = ISNULL(SUM(A.VOUCHER_CREDIT_AMOUNT - A.VOUCHER_DEBIT_AMOUNT),0) FROM ";
                    strSQL = strSQL + "ACC_VOUCHER A,ACC_LEDGER B WHERE A.LEDGER_NAME = B.LEDGER_NAME AND ";
                    strSQL = strSQL + "(B.LEDGER_PRIMARY_TYPE = 3 OR B.LEDGER_PRIMARY_TYPE = 4) AND ";
                    strSQL = strSQL + "COMP_VOUCHER_DATE < @frDate SET @dblPL = @dblGroupPL + @dblLedgerPL + @dblAsOnPL ";
                    strSQL = strSQL + "SET @dblPL = @dblPL + (@dblOnlyOpening - @dblTotalOpening) ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) VALUES(@strPLledger,@strPLGroup,@dblPL) ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_OPENING_BALANCE FROM ACC_LEDGER ";
                    strSQL = strSQL + "Where (LEDGER_PRIMARY_TYPE = 1 Or LEDGER_PRIMARY_TYPE = 2) And LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) SELECT GR_NAME,GR_PARENT, ";
                    strSQL = strSQL + "(GR_OPENING_CREDIT + GR_OPENING_DEBIT) AS AMT FROM ACC_LEDGERGROUP ";
                    strSQL = strSQL + "Where (GR_PRIMARY_TYPE = 1 Or GR_PRIMARY_TYPE = 2) And GR_LEVEL = 2 ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT, ";
                    strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL FROM ";
                    strSQL = strSQL + "ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE < 3  AND COMP_VOUCHER_DATE < @frDate AND ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS AMT FROM ACC_MAIN_LEDGER ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate AND LEDGER_PRIMARY_TYPE = 1 AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS AMT FROM ACC_MAIN_LEDGER ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate AND LEDGER_PRIMARY_TYPE = 2 AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT, ";
                    strSQL = strSQL + "(SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) * -1) AS DEBIT_TOTAL,SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS CREDIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) ";
                    strSQL = strSQL + "SELECT ACC_MAIN_LEDGER.LEDGER_NAME,ACC_MAIN_LEDGER.LEDGER_PARENT_GROUP,(SUM(VOUCHER_DEBIT_AMOUNT)* -1) AS DEBIT_TOTAL, ";
                    strSQL = strSQL + "SUM(VOUCHER_CREDIT_AMOUNT) AS CREDIT_TOTAL FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) ";
                    strSQL = strSQL + "AND ACC_MAIN_LEDGER.LEDGER_LEVEL = 2  ";
                    strSQL = strSQL + "GROUP BY ACC_MAIN_LEDGER.LEDGER_NAME,LEDGER_PARENT_GROUP ";
                    strSQL = strSQL + "UPDATE ACC_TRIAL_BALANCE SET GR_NAME = 'Opening Stock',GR_OPENING = @dblTotalOpening ";
                    strSQL = strSQL + "WHERE GR_NAME = @strStockInHand  IF @OpenOrClose = 1 BEGIN ";
                    strSQL = strSQL + "SELECT @dblOpening = (ISNULL(SUM(GR_OPENING),0) * -1) FROM ACC_TRIAL_BALANCE ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "VALUES('Diff in Opening Balances','Diff in Opening Balances',@dblOpening) END ";
                    strSQL = strSQL + "DELETE FROM ACC_TRIAL_BALANCE WHERE (GR_OPENING = 0) AND (GR_DEBIT = 0) AND (GR_CREDIT = 0) COMMIT";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }



        private static string CreateTrailBalanceGroup()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gJagTrialBalanceGroup') ";
                    strSQL = strSQL + "Drop PROCEDURE gJagTrialBalanceGroup ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();

                    strSQL = "CREATE PROCEDURE gJagTrialBalanceGroup @frDate DATETIME,@toDate DATETIME, @OpenOrClose INT ";
                    strSQL = strSQL + "WITH ENCRYPTION AS BEGIN TRANSACTION DELETE FROM ACC_TRIAL_BALANCE ";
                    strSQL = strSQL + "DECLARE @strPLledger varchar(100),@strPLGroup varchar(100),@strCurrentAssets varchar(100) ";
                    strSQL = strSQL + "DECLARE @dblPL numeric(18,2),@dblGroupPL numeric(18,2),@dblLedgerPL numeric(18,2),@dblAsOnPL numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblOpeningStock numeric(18,2),@dblOpening numeric(18,2) DECLARE @dblClosingStock numeric(18,2) ";
                    strSQL = strSQL + "SELECT @strPLledger = LEDGER_NAME,@strPLGroup = LEDGER_PARENT_GROUP FROM ACC_LEDGER WHERE LEDGER_GROUP = 301 ";
                    strSQL = strSQL + "AND LEDGER_DEFAULT = 1 SELECT @strCurrentAssets = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Current Assets' ";
                    strSQL = strSQL + "SELECT @dblOpeningStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_STOCKITEM_TRAN_QRY WHERE INV_INOUT_FLAG IS NULL ";
                    strSQL = strSQL + "SELECT @dblClosingStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE < @frDate ";
                    strSQL = strSQL + "SELECT @dblLedgerPL = ISNULL(SUM(LEDGER_OPENING_BALANCE),0) FROM ACC_LEDGER WHERE (LEDGER_PRIMARY_TYPE = 3 OR LEDGER_PRIMARY_TYPE = 4) ";
                    strSQL = strSQL + "SELECT @dblAsOnPL = ISNULL(SUM(A.VOUCHER_CREDIT_AMOUNT - A.VOUCHER_DEBIT_AMOUNT),0) ";
                    strSQL = strSQL + "FROM ACC_VOUCHER A,ACC_LEDGER B WHERE A.LEDGER_NAME = B.LEDGER_NAME AND (B.LEDGER_PRIMARY_TYPE = 3 OR ";
                    strSQL = strSQL + "B.LEDGER_PRIMARY_TYPE = 4) AND COMP_VOUCHER_DATE < @frDate SET @dblPL = @dblLedgerPL + @dblAsOnPL ";
                    strSQL = strSQL + "SET @dblPL = @dblPL - (@dblOpeningStock - @dblClosingStock) ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) VALUES(@strPLledger,@strPLGroup,@dblPL) ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PRIMARY_GROUP,LEDGER_OPENING_BALANCE FROM ACC_LEDGER ";
                    strSQL = strSQL + "Where (LEDGER_PRIMARY_TYPE = 1 Or LEDGER_PRIMARY_TYPE = 2) And LEDGER_GROUP <> 401 ";
                    strSQL = strSQL + "SELECT @dblOpeningStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE < @frDate ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) VALUES('Opening Stock',@strCurrentAssets,@dblOpeningStock * -1) ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) SELECT LEDGER_NAME,LEDGER_PRIMARY_GROUP,SUM( ";
                    strSQL = strSQL + "VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS AMT FROM ACC_LEDGER_VOUCHER ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate AND LEDGER_PRIMARY_TYPE < 3 GROUP BY LEDGER_NAME,LEDGER_PRIMARY_GROUP ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) SELECT LEDGER_NAME,LEDGER_PRIMARY_GROUP, ";
                    strSQL = strSQL + "(SUM(VOUCHER_DEBIT_AMOUNT)* -1) AS DEBIT_TOTAL,SUM(VOUCHER_CREDIT_AMOUNT) AS CREDIT_TOTAL FROM ACC_LEDGER_VOUCHER ";
                    strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) GROUP BY LEDGER_NAME,LEDGER_PRIMARY_GROUP IF @OpenOrClose = 1 ";
                    strSQL = strSQL + "BEGIN SELECT @dblOpening = (ISNULL(SUM(GR_OPENING),0) * -1) FROM ACC_TRIAL_BALANCE ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) VALUES('Diff in Opening Balances','Diff in Opening Balances',@dblOpening) ";
                    strSQL = strSQL + "END DELETE FROM ACC_TRIAL_BALANCE WHERE (GR_OPENING = 0) AND (GR_DEBIT = 0) AND (GR_CREDIT = 0) COMMIT ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }

        private static string CreateTrailBalanceLedger()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gJagTrialBalanceLedger') ";
                    strSQL = strSQL + "Drop PROCEDURE gJagTrialBalanceLedger ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    strSQL = "CREATE PROCEDURE gJagTrialBalanceLedger @frDate DATETIME,@toDate DATETIME, ";
                    strSQL = strSQL + "@OpenOrClose INT WITH ENCRYPTION AS BEGIN TRANSACTION ";
                    strSQL = strSQL + "DELETE FROM ACC_TRIAL_BALANCE DECLARE @strPLledger varchar(100),@strPLGroup varchar(100),";
                    strSQL = strSQL + "@strCurrentAssets varchar(100) DECLARE @dblPL numeric(18,2),@dblGroupPL numeric(18,2),";
                    strSQL = strSQL + "@dblLedgerPL numeric(18,2),@dblAsOnPL numeric(18,2) DECLARE @dblOpeningStock numeric(18,2),  ";
                    strSQL = strSQL + "@dblOpening numeric(18,2) DECLARE @dblClosingStock numeric(18,2) ";
                    strSQL = strSQL + "SELECT @strPLledger = LEDGER_NAME,";
                    strSQL = strSQL + "@strPLGroup = LEDGER_PARENT_GROUP FROM ACC_LEDGER WHERE LEDGER_GROUP = 301 AND LEDGER_DEFAULT = 1 ";
                    strSQL = strSQL + "SELECT @strCurrentAssets = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Current Assets' ";
                    strSQL = strSQL + "SELECT @dblOpeningStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_STOCKITEM_TRAN_QRY WHERE INV_INOUT_FLAG IS NULL ";
                    strSQL = strSQL + "SELECT @dblClosingStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE < @frDate ";
                    strSQL = strSQL + "SELECT @dblLedgerPL = ISNULL(SUM(LEDGER_OPENING_BALANCE),0) FROM ACC_LEDGER ";
                    strSQL = strSQL + "WHERE (LEDGER_PRIMARY_TYPE = 3 OR LEDGER_PRIMARY_TYPE = 4) AND LEDGER_LEVEL = 2 SELECT @dblGroupPL = ISNULL(SUM(GR_OPENING_CREDIT + GR_OPENING_DEBIT),0) ";
                    strSQL = strSQL + "FROM ACC_LEDGERGROUP WHERE GR_PRIMARY_TYPE > 2 AND GR_LEVEL = 2 ";

                    strSQL = strSQL + "SELECT @dblAsOnPL = ISNULL(SUM(A.VOUCHER_CREDIT_AMOUNT - A.VOUCHER_DEBIT_AMOUNT),0) ";
                    strSQL = strSQL + "FROM ACC_VOUCHER A,ACC_LEDGER B ";
                    strSQL = strSQL + "Where A.LEDGER_NAME = B.LEDGER_NAME And (B.LEDGER_PRIMARY_TYPE = 3 Or B.LEDGER_PRIMARY_TYPE = 4) ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE < @frDate SET @dblPL = @dblGroupPL + @dblLedgerPL + @dblAsOnPL ";
                    strSQL = strSQL + "SET @dblPL = @dblPL - (@dblOpeningStock - @dblClosingStock) ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) VALUES(@strPLledger,@strPLGroup,@dblPL) ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_OPENING_BALANCE FROM ACC_LEDGER ";
                    strSQL = strSQL + "Where (LEDGER_PRIMARY_TYPE = 1 Or LEDGER_PRIMARY_TYPE = 2) And LEDGER_LEVEL = 2 And LEDGER_GROUP <> 401 ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,(GR_OPENING_CREDIT + GR_OPENING_DEBIT) AS AMT FROM ACC_LEDGERGROUP ";
                    strSQL = strSQL + "Where (GR_PRIMARY_TYPE = 1 Or GR_PRIMARY_TYPE = 2) And GR_LEVEL = 2 And GR_GROUP <> 401 ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT,";
                    strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL FROM ";
                    strSQL = strSQL + "ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE < 3  AND COMP_VOUCHER_DATE < @frDate ";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT ";
                    strSQL = strSQL + "SELECT @dblOpeningStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE < @frDate ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "VALUES('Opening Stock',@strCurrentAssets,@dblOpeningStock * -1) ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS AMT FROM ";
                    strSQL = strSQL + "ACC_MAIN_LEDGER WHERE COMP_VOUCHER_DATE < @frDate AND LEDGER_PRIMARY_TYPE = 1 AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS AMT FROM ACC_MAIN_LEDGER ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate AND LEDGER_PRIMARY_TYPE = 2 AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT, ";
                    strSQL = strSQL + "(SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) * -1) AS DEBIT_TOTAL,SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS CREDIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT ";
                    strSQL = strSQL + "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT, ";
                    strSQL = strSQL + "GR_DEBIT,GR_CREDIT) SELECT ACC_MAIN_LEDGER.LEDGER_NAME,ACC_MAIN_LEDGER.LEDGER_PARENT_GROUP,(SUM(VOUCHER_DEBIT_AMOUNT)* -1) AS DEBIT_TOTAL, ";
                    strSQL = strSQL + "SUM(VOUCHER_CREDIT_AMOUNT) AS CREDIT_TOTAL FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) ";
                    strSQL = strSQL + "AND ACC_MAIN_LEDGER.LEDGER_LEVEL = 2 GROUP BY ACC_MAIN_LEDGER.LEDGER_NAME,LEDGER_PARENT_GROUP IF @OpenOrClose = 1 BEGIN ";
                    strSQL = strSQL + "SELECT @dblOpening = (ISNULL(SUM(GR_OPENING),0) * -1) FROM ACC_TRIAL_BALANCE INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "VALUES('Diff in Opening Balances','Diff in Opening Balances',@dblOpening) END DELETE FROM ACC_TRIAL_BALANCE WHERE (GR_OPENING = 0) AND ";
                    strSQL = strSQL + "(GR_DEBIT = 0) AND (GR_CREDIT = 0) COMMIT ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }

        private static string CreateBalanceSheetVertical()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gJagBalanceSheetVertical') ";
                    strSQL = strSQL + "Drop PROCEDURE gJagBalanceSheetVertical ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    strSQL = "CREATE PROCEDURE gJagBalanceSheetVertical ";
                    strSQL = strSQL + "@frDate DATETIME,";
                    strSQL = strSQL + "@toDate  DATETIME,@dblGP numeric(18,2) ,@dblClsStock numeric(18,2),@fPreDate DATETIME  WITH ENCRYPTION AS ";

                    strSQL = strSQL + "DECLARE @PLGroup  VARCHAR(100)  ";
                    strSQL = strSQL + "DELETE FROM ACC_PROFIT_AND_LOSS If @dblGP > 0 BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Profit b/d',' Gross Profit b/d',3,@dblGP) END ";
                    strSQL = strSQL + "If @dblGP < 0 BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Loss b/d',' Gross Loss b/d',4,ABS(@dblGP)) END ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";

                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 3) AND ACC_LEDGER_GROUP_QRY.GR_GROUP <> '211' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT, ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";

                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP <> '211' ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 3 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "Where (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 4) And ACC_LEDGER_GROUP_QRY.GR_GROUP NOT LIKE '21%' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT , ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP NOT LIKE '21%' ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 4 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "DECLARE @dblIncome numeric(18,2),@dblExpenses Numeric(18,2) ";
                    strSQL = strSQL + "SELECT @dblIncome = ISNULL(SUM(GR_AMOUNT),0)";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 3 ";
                    strSQL = strSQL + "SELECT @dblExpenses = ISNULL(SUM(GR_AMOUNT),0) ";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 4 ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Net ','Net',4,@dblIncome - @dblExpenses) ";

                    //''************Variable**********
                    strSQL = strSQL + "DECLARE @PLLedger VARCHAR(100) ";
                    strSQL = strSQL + "DECLARE @dblOpeningPL numeric(18,2),";
                    strSQL = strSQL + "@dblJournal numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblPL1 numeric(18,2),";
                    strSQL = strSQL + "@dblPL2 numeric(18,2),";
                    strSQL = strSQL + "@dblopnIncome numeric(18,2)  ";
                    strSQL = strSQL + "DECLARE @opnStock numeric(18,2),";
                    strSQL = strSQL + "@dblPL3 numeric(18,2),";
                    strSQL = strSQL + "@clsStock numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @CurrentAsset VARCHAR(100),";
                    strSQL = strSQL + "@StockInHand VARCHAR(100) ";
                    strSQL = strSQL + "DECLARE @ClosingStock numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblCurrentIncome numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblInc numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblAsset numeric(18,2),";
                    strSQL = strSQL + "@dblLiabilities numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblOpeningPL1 numeric(18,2),@dblOpeningExpenses numeric(18,2)  ";
                    //''*******************************
                    strSQL = strSQL + "SELECT @PLLedger = LEDGER_NAME, @PLGroup = LEDGER_PARENT_GROUP FROM ACC_LEDGER  ";
                    strSQL = strSQL + "WHERE  LEDGER_GROUP = 301 AND LEDGER_DEFAULT = 1 ";
                    //''Opening Assets Group
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0)*-1 ";
                    strSQL = strSQL + "FROM ACC_BRANCH_GROUP_OPENING ";
                    strSQL = strSQL + "WHERE GR_LEVEL = 2 AND GR_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + "AND GR_GROUP <> 401 ";
                    strSQL = strSQL + "GROUP BY GR_NAME,GR_PARENT,GR_PRIMARY_TYPE ";

                    //'Opening Liabilities Group
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0) ";
                    strSQL = strSQL + "FROM ACC_BRANCH_GROUP_OPENING ";
                    strSQL = strSQL + "WHERE GR_LEVEL = 2 AND GR_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + "GROUP BY GR_NAME,GR_PARENT,GR_PRIMARY_TYPE ";

                    //'Opening Assets Ledger
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0)*-1 AS YY ";
                    strSQL = strSQL + "FROM ACC_LEDGER_VIEW_BRANCH ";
                    strSQL = strSQL + "WHERE LEDGER_LEVEL = 2 AND LEDGER_PRIMARY_TYPE = 1  ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    //'Opening Liabilities Ledger
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0) AS YY ";
                    strSQL = strSQL + "FROM ACC_LEDGER_VIEW_BRANCH ";
                    strSQL = strSQL + "WHERE LEDGER_LEVEL = 2 AND LEDGER_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    //'*********************Transaction************************************
                    //'    'Assets
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, ";
                    strSQL = strSQL + "ISNULL(SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT-ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 1) ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE <=  @toDate ";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    //''Liabilities
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, ";
                    strSQL = strSQL + "ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 2) ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE <=  @toDate ";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    // 'Assets Main Ledger
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,ISNULL(SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT),0) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE <=  @toDate ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + "AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    //'Liabilities Main Ledger
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE <=  @toDate ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + "AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    //'*********************End************************************
                    strSQL = strSQL + "SELECT @dblPL1 = ISNULL(SUM(GR_OPENING_CREDIT + GR_OPENING_DEBIT),0) ";
                    strSQL = strSQL + "FROM ACC_LEDGERGROUP WHERE GR_PRIMARY_TYPE > 2 ";
                    strSQL = strSQL + "AND GR_LEVEL = 2 ";
                    strSQL = strSQL + "SELECT @dblPL2 = ISNULL(SUM(LEDGER_OPENING_BALANCE),0) ";
                    strSQL = strSQL + "FROM ACC_LEDGER WHERE (LEDGER_PRIMARY_TYPE = 3 OR LEDGER_PRIMARY_TYPE = 4) AND LEDGER_LEVEL = 2 ";


                    strSQL = strSQL + "SELECT @dblopnIncome = ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0)";
                    strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                    //''strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE = 3) "
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE > 2) ";

                    //'Opening Expenses
                    strSQL = strSQL + "SELECT  @dblOpeningExpenses=ISNULL(SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0)  ";
                    strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                    // 'strSQL = strSQL + "WHERE COMP_VOUCHER_DATE <= " + cvtSQLDate(vdteToDate) + " "
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate ";
                    strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE = 4) ";

                    strSQL = strSQL + "SELECT @opnStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_INOUT_FLAG IS NULL ";
                    strSQL = strSQL + "SELECT @clsStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE < @frDate ";
                    // ''strSQL = strSQL + " SET @clsStock= @dblClsStock "

                    strSQL = strSQL + "SELECT @dblJournal = ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) FROM ACC_MAIN_LEDGER WHERE COMP_VOUCHER_DATE < @frDate ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 2 AND LEDGER_LEVEL = 2 AND LEDGER_DEFAULT = 1 AND LEDGER_GROUP = 301 ";
                    strSQL = strSQL + "SET @dblOpeningPL = (@dblPL1 + @dblPL2 + @dblopnIncome + @dblJournal) - (@opnStock - @clsStock) ";
                    // '    strSQL = strSQL + "SET @dblOpeningPL1 = (@dblOpeningExpenses + @dblJournal) - @clsStock "
                    //'    strSQL = strSQL + "SET @dblOpeningPL = @dblopnIncome -@dblOpeningPL1 "

                    strSQL = strSQL + " IF @dblPL3 > 0 ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = ' Opening Balance' ,GR_AMOUNT = @dblPL3 ";
                    strSQL = strSQL + "WHERE GR_NAME = @PLLedger ";
                    strSQL = strSQL + "IF @dblPL3 = 0 ";
                    strSQL = strSQL + "SET @dblOpeningPL = (@dblPL1 + @dblPL2 + @dblPL3 + @dblopnIncome + @dblJournal) - (@opnStock - @clsStock) ";
                    strSQL = strSQL + "IF @dblOpeningPL IS NULL SET @dblOpeningPL = 0 ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = ' Opening Balance' ,GR_AMOUNT = GR_AMOUNT + @dblOpeningPL ";
                    strSQL = strSQL + "WHERE GR_NAME = @PLLedger ";

                    strSQL = strSQL + "SELECT @CurrentAsset = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Current Assets'";
                    strSQL = strSQL + "SELECT @StockInHand = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Stock-in-hand' ";
                    //''strSQL = strSQL + "SET @ClosingStock= @dblClsStock "
                    strSQL = strSQL + "SELECT @ClosingStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE <= @toDate ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Closing Stock',@CurrentAsset,1,@ClosingStock) ";

                    strSQL = strSQL + "SELECT @dblCurrentIncome=ISNULL(SUM(GR_AMOUNT),0) FROM ACC_PROFIT_AND_lOSS WHERE GR_NAME='Net' ";
                    strSQL = strSQL + "SET @dblInc =@dblCurrentIncome ";
                    strSQL = strSQL + "IF @dblInc IS NULL SET @dblInc = 0 ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) VALUES";
                    strSQL = strSQL + "('Current Period',@PLGroup,2,@dblInc) ";

                    strSQL = strSQL + "SELECT @dblAsset = ISNULL(SUM(GR_AMOUNT),0) FROM ";
                    strSQL = strSQL + "ACC_BALANCE_SHEET_TEMP WHERE GR_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + "SELECT @dblLiabilities = SUM(GR_AMOUNT) FROM ACC_BALANCE_SHEET_TEMP WHERE GR_PRIMARY_TYPE = 2 ";
                    //'    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = 'Closing Stock' WHERE GR_NAME = @StockInHand "
                    strSQL = strSQL + "SELECT @dblOpeningPL1=ISNULL(SUM(GR_AMOUNT),0) FROM ACC_BALANCE_SHEET_TEMP WHERE GR_PARENT='Profit & Loss Accounts'";

                    strSQL = strSQL + "DELETE FROM ACC_BALANCE_SHEET_TEMP WHERE GR_AMOUNT = 0 ";
                    strSQL = strSQL + "DELETE FROM ACC_BALANCE_SHEET_COMPARISON WHERE ASON_DATE between  @frDate and @toDate ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,ISNULL(SUM(GR_AMOUNT),0) AS AMOUNT FROM  ACC_BALANCE_SHEET_TEMP ";
                    strSQL = strSQL + "GROUP BY GR_NAME, GR_PARENT,GR_PRIMARY_TYPE ORDER BY GR_PARENT ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_COMPARISON(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT,ASON_DATE) ";
                    strSQL = strSQL + "SELECT 'Net','Net',GR_PRIMARY_TYPE,ISNULL(SUM(GR_AMOUNT),0) AS AMOUNT,@toDate FROM  ACC_BALANCE_SHEET ";
                    strSQL = strSQL + "WHERE GR_PARENT='Profit & Loss Accounts' ";
                    strSQL = strSQL + "GROUP BY GR_PRIMARY_TYPE  ";

                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET SET GR_PRIMARY_TYPE = 2,GR_AMOUNT = -GR_AMOUNT WHERE GR_PARENT IN(SELECT GR_PARENT ";
                    strSQL = strSQL + "FROM ACC_BAL_QRY ";
                    strSQL = strSQL + "WHERE GR_PRIMARY_TYPE = 1 AND  SUMOFGR_AMOUNT < 0) ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET SET GR_PRIMARY_TYPE = 1,GR_AMOUNT = -GR_AMOUNT ";
                    strSQL = strSQL + "WHERE GR_PARENT IN(SELECT GR_PARENT FROM ACC_BAL_QRY WHERE GR_PRIMARY_TYPE = 2 AND  SUMOFGR_AMOUNT < 0)  ";

                    strSQL = strSQL + "If @dblAsset > @dblLiabilities INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Diff in Opening Bal.','Diff in Opening Bal.',2,@dblAsset - @dblLiabilities) ";
                    strSQL = strSQL + "If @dblAsset < @dblLiabilities INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Diff in Opening Bal.','Diff in Opening Bal.',1,@dblLiabilities - @dblAsset) ";

                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }
        private static string CreateProfitLossV()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;


                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gJagProfitAndLossV')";
                    strSQL = strSQL + "Drop PROCEDURE gJagProfitAndLossV ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    strSQL = "CREATE PROCEDURE gJagProfitAndLossV @frDate DATETIME,@toDate DATETIME, ";
                    strSQL = strSQL + "@dblGP numeric(18,2) WITH ENCRYPTION AS BEGIN TRANSACTION ";
                    strSQL = strSQL + "DELETE FROM ACC_PROFIT_AND_LOSS_V If @dblGP > 0 BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS_V(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Profit b/d',' Gross Profit b/d',3,@dblGP) END If @dblGP < 0 BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS_V(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT)";
                    strSQL = strSQL + "VALUES('Gross Loss b/d',' Gross Loss b/d',4,Abs(@dblGP)) END ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS_V(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 3) AND ACC_LEDGER_GROUP_QRY.GR_GROUP <> '211' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE INSERT INTO ACC_PROFIT_AND_LOSS_V(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";

                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL FROM ";
                    strSQL = strSQL + "ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP <>'211' AND LEDGER_PRIMARY_TYPE = 3 ";
                    strSQL = strSQL + "AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS_V(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, ";
                    strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) As DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 4) AND ACC_LEDGER_GROUP_QRY.GR_GROUP NOT LIKE '21%' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) ";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS_V(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP NOT LIKE '21%' ";

                    strSQL = strSQL + " AND LEDGER_PRIMARY_TYPE = 4 AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";
                    strSQL = strSQL + "DECLARE @dblIncome numeric(18,2),@dblExpenses Numeric(18,2) ";
                    strSQL = strSQL + "SELECT @dblIncome = ISNULL(SUM(GR_AMOUNT),0) ";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS_V WHERE GR_PRIMARY_TYPE = 3 ";
                    strSQL = strSQL + "SELECT @dblExpenses = ISNULL(SUM(GR_AMOUNT),0) ";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS_V WHERE GR_PRIMARY_TYPE = 4 If @dblIncome > @dblExpenses BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS_V (GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Net Profit','Net Profit',4,@dblIncome - @dblExpenses) END ";
                    strSQL = strSQL + "If @dblIncome < @dblExpenses BEGIN INSERT INTO ACC_PROFIT_AND_LOSS_V(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + " VALUES('Net Loss','Net Loss',3,@dblExpenses - @dblIncome) END COMMIT ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }

        private static string CreateProfitLossH()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gJagProfitAndLossH')";
                    strSQL = strSQL + "Drop PROCEDURE gJagProfitAndLossH ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    strSQL = "CREATE PROCEDURE gJagProfitAndLossH @frDate DATETIME,@toDate DATETIME, ";
                    strSQL = strSQL + "@dblGP numeric(18,2) WITH ENCRYPTION AS BEGIN TRANSACTION ";
                    strSQL = strSQL + "DELETE FROM ACC_PROFIT_AND_LOSS If @dblGP > 0 BEGIN ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Profit b/d',' Gross Profit b/d',3,@dblGP) END ";
                    strSQL = strSQL + "If @dblGP < 0 BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Loss b/d',' Gross Loss b/d',4,ABS(@dblGP)) END ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";

                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 3) AND ACC_LEDGER_GROUP_QRY.GR_GROUP <> '211' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT, ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";

                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP <> '211' ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 3 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "Where (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 4) And ACC_LEDGER_GROUP_QRY.GR_GROUP NOT LIKE '21%' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT , ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP NOT LIKE '21%' ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 4 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "DECLARE @dblIncome numeric(18,2),@dblExpenses Numeric(18,2) ";
                    strSQL = strSQL + "SELECT @dblIncome = ISNULL(SUM(GR_AMOUNT),0)";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 3 ";
                    strSQL = strSQL + "SELECT @dblExpenses = ISNULL(SUM(GR_AMOUNT),0) ";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 4 ";
                    strSQL = strSQL + "If @dblIncome > @dblExpenses BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) VALUES('Net ";
                    strSQL = strSQL + "Profit ','Net Profit',4,@dblIncome - @dblExpenses) END If @dblIncome < @dblExpenses BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Net Loss','Net Loss',3,@dblExpenses - @dblIncome) END COMMIT ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }
        private static string CreateBalanceSheetManufactureV()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;

                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gJagBalanceSheetManuV')";
                    strSQL = strSQL + "Drop PROCEDURE gJagBalanceSheetManuV ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();

                    strSQL = "CREATE PROCEDURE gJagBalanceSheetManuV ";

                    strSQL = strSQL + "@frDate DATETIME,";
                    strSQL = strSQL + "@toDate  DATETIME,@dblGP numeric(18,2) ,@dblClsStock numeric(18,2),@fPreDate DATETIME  WITH ENCRYPTION AS ";
                    strSQL = strSQL + "DELETE FROM ACC_PROFIT_AND_LOSS If @dblGP > 0 BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Profit b/d',' Gross Profit b/d',3,@dblGP) END ";
                    strSQL = strSQL + "If @dblGP < 0 BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Loss b/d',' Gross Loss b/d',4,ABS(@dblGP)) END ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 3) ";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_GROUP <> '211' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT, ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP <> '211' ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 3 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "Where (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 4) And ACC_LEDGER_GROUP_QRY.GR_GROUP NOT LIKE '21%' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT , ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP NOT LIKE '21%' ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 4 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "DECLARE @dblIncome numeric(18,2),@dblExpenses Numeric(18,2) ";
                    strSQL = strSQL + "SELECT @dblIncome = ISNULL(SUM(GR_AMOUNT),0)";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 3 ";
                    strSQL = strSQL + "SELECT @dblExpenses = ISNULL(SUM(GR_AMOUNT),0) ";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 4 ";
                    strSQL = strSQL + " INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) VALUES('Net ','Net',4,@dblIncome - @dblExpenses) ";

                    strSQL = strSQL + "DELETE FROM  ACC_BALANCE_SHEET_TEMP ";
                    strSQL = strSQL + "DELETE FROM ACC_BALANCE_SHEET DECLARE @PLGroup  VARCHAR(100)  ";
                    strSQL = strSQL + "DECLARE @PLLedger VARCHAR(100) ";
                    strSQL = strSQL + "SELECT @PLLedger = LEDGER_NAME, @PLGroup = LEDGER_PARENT_GROUP FROM ACC_LEDGER  ";
                    strSQL = strSQL + "WHERE  LEDGER_GROUP = 301 AND LEDGER_DEFAULT = 1 ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,";
                    strSQL = strSQL + "SUM(-GR_OPENING_DEBIT - GR_OPENING_CREDIT) As TOTAL_OPENING ";
                    strSQL = strSQL + "FROM ACC_LEDGERGROUP WHERE GR_LEVEL = 2 AND GR_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + "GROUP BY GR_NAME,GR_PARENT,GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,SUM(GR_OPENING_CREDIT + GR_OPENING_DEBIT) ";
                    strSQL = strSQL + "AS TOTAL_OPENING FROM ACC_LEDGERGROUP ";
                    strSQL = strSQL + "WHERE GR_LEVEL = 2 AND GR_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + "GROUP BY GR_NAME,GR_PARENT,GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(LEDGER_OPENING_BALANCE  * -1) AS YY ";
                    strSQL = strSQL + "FROM ACC_LEDGER WHERE LEDGER_LEVEL = 2 AND LEDGER_PRIMARY_TYPE = 1 GROUP BY ";
                    strSQL = strSQL + "LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE  ";
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";

                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,";
                    strSQL = strSQL + "SUM(LEDGER_OPENING_BALANCE) AS YY FROM ACC_LEDGER WHERE LEDGER_LEVEL = 2 AND LEDGER_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    //''****************Variable************
                    strSQL = strSQL + "DECLARE @dblOpeningPL numeric(18,2),@dblOpeningPL1 numeric(18,2),";
                    strSQL = strSQL + "@dblJournal numeric(18,2) DECLARE @dblPL1 numeric(18,2),@dblPL2 numeric(18,2),";
                    strSQL = strSQL + "@dblopnIncome numeric(18,2) ,@dblOpeningExpenses numeric(18,2) DECLARE @opnStock numeric(18,2),";
                    strSQL = strSQL + "@clsStock numeric(18,2),";
                    strSQL = strSQL + "@dblPL3 numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @CurrentAsset VARCHAR(100),";
                    strSQL = strSQL + "@StockInHand VARCHAR(100) ";
                    strSQL = strSQL + "DECLARE @ClosingStock numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblCurrentIncome numeric(18,2)";
                    strSQL = strSQL + "DECLARE @dblAsset numeric(18,2),";
                    strSQL = strSQL + "@dblLiabilities numeric(18,2) ";

                    // ''************Variable

                    strSQL = strSQL + "SELECT @dblPL1 = ISNULL(SUM(GR_OPENING_CREDIT + GR_OPENING_DEBIT),0) ";
                    strSQL = strSQL + "FROM ACC_LEDGERGROUP WHERE GR_PRIMARY_TYPE > 2 ";
                    strSQL = strSQL + "AND GR_LEVEL = 2 ";

                    strSQL = strSQL + "SELECT @dblPL2 = ISNULL(SUM(LEDGER_OPENING_BALANCE),0) ";
                    strSQL = strSQL + "FROM ACC_LEDGER WHERE (LEDGER_PRIMARY_TYPE = 3 OR LEDGER_PRIMARY_TYPE = 4) AND LEDGER_LEVEL = 2 ";

                    strSQL = strSQL + "SELECT @dblopnIncome = ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0) ";
                    strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME  ";
                    // '    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE = 3) "
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE > 2) ";
                    //'Opening Expenses
                    strSQL = strSQL + "SELECT  @dblOpeningExpenses=ISNULL(SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0)  ";
                    strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                    // 'strSQL = strSQL + "WHERE COMP_VOUCHER_DATE <= " + cvtSQLDate(vdteToDate) + " "
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate ";
                    strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE = 4) ";

                    //'        strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID = @branchID "

                    strSQL = strSQL + "SELECT @opnStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_INOUT_FLAG IS NULL ";
                    strSQL = strSQL + "SELECT @clsStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE < @frDate ";
                    //''strSQL = strSQL + " SET @opnStock=@dblOpnStock "
                    //''strSQL = strSQL + " SET @clsStock= @dblClsStock "

                    strSQL = strSQL + "SELECT @dblJournal = ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) FROM ACC_MAIN_LEDGER WHERE COMP_VOUCHER_DATE < @frDate ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 2 AND LEDGER_LEVEL = 2 AND LEDGER_DEFAULT = 1 AND LEDGER_GROUP = 301 ";
                    strSQL = strSQL + "SET @dblOpeningPL = (@dblPL1 + @dblPL2 + @dblopnIncome + @dblJournal) - (@opnStock - @clsStock) ";
                    //'    strSQL = strSQL + "SET @dblOpeningPL1 = (@dblOpeningExpenses + @dblJournal) - @clsStock "
                    ///'    strSQL = strSQL + "SET @dblOpeningPL = @dblopnIncome -@dblOpeningPL1 "

                    strSQL = strSQL + " IF @dblPL3 > 0 ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = ' Opening Balance' ,GR_AMOUNT = @dblPL3 ";
                    strSQL = strSQL + "WHERE GR_NAME = @PLLedger ";
                    strSQL = strSQL + "IF @dblPL3 = 0 ";
                    strSQL = strSQL + "SET @dblOpeningPL = (@dblPL1 + @dblPL2 + @dblPL3 + @dblopnIncome + @dblOpeningExpenses+ @dblJournal) - (@opnStock - @clsStock) ";
                    strSQL = strSQL + "IF @dblOpeningPL IS NULL SET @dblOpeningPL = 0 ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = ' Opening Balance' ,GR_AMOUNT = GR_AMOUNT + @dblOpeningPL ";
                    strSQL = strSQL + "WHERE GR_NAME = @PLLedger ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, ";
                    strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 1) AND COMP_VOUCHER_DATE <=  @toDate ";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, ";
                    strSQL = strSQL + " SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) As DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 2) AND COMP_VOUCHER_DATE <=  @toDate AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE COMP_VOUCHER_DATE <= @toDate AND LEDGER_PRIMARY_TYPE = 1 AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE COMP_VOUCHER_DATE <= @toDate AND LEDGER_PRIMARY_TYPE = 2 AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE UPDATE ACC_BALANCE_SHEET_TEMP ";
                    strSQL = strSQL + "SET GR_NAME = 'Transferred' ,GR_AMOUNT = GR_AMOUNT - @dblJournal ";
                    strSQL = strSQL + "WHERE GR_NAME = @PLLedger ";


                    strSQL = strSQL + "SELECT @CurrentAsset = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Current Assets'";
                    strSQL = strSQL + "SELECT @StockInHand = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Stock-in-hand' ";

                    // '    strSQL = strSQL + "SELECT @ClosingStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) "
                    // '    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE <= @toDate "
                    strSQL = strSQL + "SELECT @ClosingStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE <= @toDate ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Closing Stock',@CurrentAsset,1,@ClosingStock) ";

                    //'    strSQL = strSQL + "SELECT @dblCurrentIncome = ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0)  "
                    //'    strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME "
                    //'    strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE > 2) "
                    strSQL = strSQL + "SELECT @dblCurrentIncome=ISNULL(SUM(GR_AMOUNT),0) FROM ACC_PROFIT_AND_lOSS WHERE GR_NAME='Net' ";
                    //''strSQL = strSQL + "DECLARE @dblInc numeric(18,2) SET @dblInc = (@dblCurrentIncome - (@clsStock - @ClosingStock)) "
                    //'strSQL = strSQL + "set @dblCurrentIncome =@dblcurre "
                    strSQL = strSQL + "DECLARE @dblInc numeric(18,2) SET @dblInc =@dblCurrentIncome ";
                    strSQL = strSQL + "IF @dblInc IS NULL SET @dblInc = 0 ";
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) VALUES";
                    strSQL = strSQL + "('Current Period',@PLGroup,2,@dblInc) ";

                    strSQL = strSQL + "SELECT @dblAsset = SUM(GR_AMOUNT) FROM ";
                    strSQL = strSQL + "ACC_BALANCE_SHEET_TEMP WHERE GR_PRIMARY_TYPE = 1 ";

                    strSQL = strSQL + "SELECT @dblLiabilities = SUM(GR_AMOUNT) FROM ACC_BALANCE_SHEET_TEMP WHERE GR_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = 'Closing Stock' WHERE GR_NAME = @StockInHand ";
                    strSQL = strSQL + "DELETE FROM ACC_BALANCE_SHEET_TEMP WHERE GR_AMOUNT = 0 ";
                    strSQL = strSQL + "DELETE FROM ACC_BALANCE_SHEET_COMPARISON WHERE ASON_DATE between  @frDate and @toDate ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,SUM(GR_AMOUNT) AS AMOUNT FROM  ACC_BALANCE_SHEET_TEMP ";
                    strSQL = strSQL + "GROUP BY GR_NAME, GR_PARENT,GR_PRIMARY_TYPE ORDER BY GR_PARENT ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET SET GR_PRIMARY_TYPE = 2,GR_AMOUNT = -GR_AMOUNT WHERE GR_PARENT IN(SELECT GR_PARENT ";
                    strSQL = strSQL + "FROM ACC_BAL_QRY ";
                    strSQL = strSQL + "WHERE GR_PRIMARY_TYPE = 1 AND  SUMOFGR_AMOUNT < 0) ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET SET GR_PRIMARY_TYPE = 1,GR_AMOUNT = -GR_AMOUNT ";
                    strSQL = strSQL + "WHERE GR_PARENT IN(SELECT GR_PARENT FROM ACC_BAL_QRY WHERE GR_PRIMARY_TYPE = 2 AND  SUMOFGR_AMOUNT < 0)  ";
                    strSQL = strSQL + "If @dblAsset > @dblLiabilities INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Diff in Opening Bal.','Diff in Opening Bal.',2,@dblAsset - @dblLiabilities) ";
                    strSQL = strSQL + "If @dblAsset < @dblLiabilities INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Diff in Opening Bal.','Diff in Opening Bal.',1,@dblLiabilities - @dblAsset) ";

                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }

        private static string CreateBalanceSheetManufactureH()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;
                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gJagBalanceSheetManuH')";
                    strSQL = strSQL + "Drop PROCEDURE gJagBalanceSheetManuH ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();

                    strSQL = "CREATE PROCEDURE gJagBalanceSheetManuH ";
                    strSQL = strSQL + "@frDate DATETIME,";
                    strSQL = strSQL + "@toDate  DATETIME,@dblGP numeric(18,2) ,@dblClsStock numeric(18,2),@fPreDate DATETIME  WITH ENCRYPTION AS ";
                    strSQL = strSQL + "DELETE FROM ACC_PROFIT_AND_LOSS If @dblGP > 0 BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Profit b/d',' Gross Profit b/d',3,@dblGP) END ";
                    strSQL = strSQL + "If @dblGP < 0 BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Loss b/d',' Gross Loss b/d',4,ABS(@dblGP)) END ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 3) ";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_GROUP <> '211' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT, ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP <> '211' ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 3 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "Where (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 4) And ACC_LEDGER_GROUP_QRY.GR_GROUP NOT LIKE '21%' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT , ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP NOT LIKE '21%' ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 4 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "DECLARE @dblIncome numeric(18,2),@dblExpenses Numeric(18,2) ";
                    strSQL = strSQL + "SELECT @dblIncome = ISNULL(SUM(GR_AMOUNT),0) ";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 3 ";
                    strSQL = strSQL + "SELECT @dblExpenses = ISNULL(SUM(GR_AMOUNT),0) ";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 4 ";
                    strSQL = strSQL + " INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) VALUES('Net ','Net',4,@dblIncome - @dblExpenses) ";

                    strSQL = strSQL + "DELETE FROM  ACC_BALANCE_SHEET_TEMP ";
                    strSQL = strSQL + "DELETE FROM ACC_BALANCE_SHEET DECLARE @PLGroup  VARCHAR(100)  ";
                    strSQL = strSQL + "DECLARE @PLLedger VARCHAR(100) ";
                    strSQL = strSQL + "SELECT @PLLedger = LEDGER_NAME, @PLGroup = LEDGER_PARENT_GROUP FROM ACC_LEDGER  ";
                    strSQL = strSQL + "WHERE  LEDGER_GROUP = 301 AND LEDGER_DEFAULT = 1 ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,";
                    strSQL = strSQL + "SUM(-GR_OPENING_DEBIT - GR_OPENING_CREDIT) As TOTAL_OPENING ";
                    strSQL = strSQL + "FROM ACC_LEDGERGROUP WHERE GR_LEVEL = 2 AND GR_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + "GROUP BY GR_NAME,GR_PARENT,GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,SUM(GR_OPENING_CREDIT + GR_OPENING_DEBIT)";
                    strSQL = strSQL + "AS TOTAL_OPENING FROM ACC_LEDGERGROUP ";
                    strSQL = strSQL + "WHERE GR_LEVEL = 2 AND GR_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + "GROUP BY GR_NAME,GR_PARENT,GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT)";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(LEDGER_OPENING_BALANCE  * -1) AS YY ";
                    strSQL = strSQL + "FROM ACC_LEDGER WHERE LEDGER_LEVEL = 2 AND LEDGER_PRIMARY_TYPE = 1 GROUP BY ";
                    strSQL = strSQL + "LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE  ";
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";

                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,";
                    strSQL = strSQL + "SUM(LEDGER_OPENING_BALANCE) AS YY FROM ACC_LEDGER WHERE LEDGER_LEVEL = 2 AND LEDGER_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    //''****************Variable************
                    strSQL = strSQL + "DECLARE @dblOpeningPL numeric(18,2),@dblOpeningPL1 numeric(18,2),";
                    strSQL = strSQL + "@dblJournal numeric(18,2) DECLARE @dblPL1 numeric(18,2),@dblPL2 numeric(18,2),";
                    strSQL = strSQL + "@dblopnIncome numeric(18,2) ,@dblOpeningExpenses numeric(18,2) DECLARE @opnStock numeric(18,2),";
                    strSQL = strSQL + "@clsStock numeric(18,2),";
                    strSQL = strSQL + "@dblPL3 numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @CurrentAsset VARCHAR(100),";
                    strSQL = strSQL + "@StockInHand VARCHAR(100) ";
                    strSQL = strSQL + "DECLARE @ClosingStock numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblCurrentIncome numeric(18,2)";
                    strSQL = strSQL + "DECLARE @dblAsset numeric(18,2),";
                    strSQL = strSQL + "@dblLiabilities numeric(18,2) ";

                    // ''************Variable

                    strSQL = strSQL + "SELECT @dblPL1 = ISNULL(SUM(GR_OPENING_CREDIT + GR_OPENING_DEBIT),0) ";
                    strSQL = strSQL + "FROM ACC_LEDGERGROUP WHERE GR_PRIMARY_TYPE > 2 ";
                    strSQL = strSQL + "AND GR_LEVEL = 2 ";

                    strSQL = strSQL + "SELECT @dblPL2 = ISNULL(SUM(LEDGER_OPENING_BALANCE),0) ";
                    strSQL = strSQL + "FROM ACC_LEDGER WHERE (LEDGER_PRIMARY_TYPE = 3 OR LEDGER_PRIMARY_TYPE = 4) AND LEDGER_LEVEL = 2 ";

                    strSQL = strSQL + "SELECT @dblopnIncome = ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0) ";
                    strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME  ";
                    ///'    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE = 3) "
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE > 2) ";
                    //'Opening Expenses
                    strSQL = strSQL + "SELECT  @dblOpeningExpenses=ISNULL(SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0)  ";
                    strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                    //'strSQL = strSQL + "WHERE COMP_VOUCHER_DATE <= " + cvtSQLDate(vdteToDate) + " "
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate ";
                    strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE = 4) ";

                    //'        strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID = @branchID "

                    strSQL = strSQL + "SELECT @opnStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_INOUT_FLAG IS NULL ";
                    strSQL = strSQL + "SELECT @clsStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE < @frDate ";
                    //''strSQL = strSQL + " SET @opnStock=@dblOpnStock "
                    //''strSQL = strSQL + " SET @clsStock= @dblClsStock "

                    strSQL = strSQL + "SELECT @dblJournal = ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) FROM ACC_MAIN_LEDGER WHERE COMP_VOUCHER_DATE < @frDate ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 2 AND LEDGER_LEVEL = 2 AND LEDGER_DEFAULT = 1 AND LEDGER_GROUP = 301 ";
                    strSQL = strSQL + "SET @dblOpeningPL = (@dblPL1 + @dblPL2 + @dblopnIncome + @dblJournal) - (@opnStock - @clsStock) ";
                    //'    strSQL = strSQL + "SET @dblOpeningPL1 = (@dblOpeningExpenses + @dblJournal) - @clsStock "
                    //'    strSQL = strSQL + "SET @dblOpeningPL = @dblopnIncome -@dblOpeningPL1 "

                    strSQL = strSQL + " IF @dblPL3 > 0 ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = ' Opening Balance' ,GR_AMOUNT = @dblPL3 ";
                    strSQL = strSQL + "WHERE GR_NAME = @PLLedger ";
                    strSQL = strSQL + "IF @dblPL3 = 0 ";
                    strSQL = strSQL + "SET @dblOpeningPL = (@dblPL1 + @dblPL2 + @dblPL3 + @dblopnIncome + @dblOpeningExpenses+ @dblJournal) - (@opnStock - @clsStock) ";
                    strSQL = strSQL + "IF @dblOpeningPL IS NULL SET @dblOpeningPL = 0 ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = ' Opening Balance' ,GR_AMOUNT = GR_AMOUNT + @dblOpeningPL ";
                    strSQL = strSQL + "WHERE GR_NAME = @PLLedger ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, ";
                    strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 1) AND COMP_VOUCHER_DATE <=  @toDate ";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, ";
                    strSQL = strSQL + " SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) As DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 2) AND COMP_VOUCHER_DATE <=  @toDate AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE COMP_VOUCHER_DATE <= @toDate AND LEDGER_PRIMARY_TYPE = 1 AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE COMP_VOUCHER_DATE <= @toDate AND LEDGER_PRIMARY_TYPE = 2 AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE UPDATE ACC_BALANCE_SHEET_TEMP ";
                    strSQL = strSQL + "SET GR_NAME = 'Transferred' ,GR_AMOUNT = GR_AMOUNT - @dblJournal ";
                    strSQL = strSQL + "WHERE GR_NAME = @PLLedger ";

                    strSQL = strSQL + "SELECT @CurrentAsset = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Current Assets'";
                    strSQL = strSQL + "SELECT @StockInHand = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Stock-in-hand' ";

                    // '    strSQL = strSQL + "SELECT @ClosingStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) "
                    //'    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE <= @toDate "
                    strSQL = strSQL + "SELECT @ClosingStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE <= @toDate ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Closing Stock',@CurrentAsset,1,@ClosingStock) ";

                    // '    strSQL = strSQL + "SELECT @dblCurrentIncome = ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0)  "
                    //'    strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME "
                    //'    strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE > 2) "
                    strSQL = strSQL + "SELECT @dblCurrentIncome=ISNULL(SUM(GR_AMOUNT),0) FROM ACC_PROFIT_AND_lOSS WHERE GR_NAME='Net' ";
                    // ''strSQL = strSQL + "DECLARE @dblInc numeric(18,2) SET @dblInc = (@dblCurrentIncome - (@clsStock - @ClosingStock)) "
                    //'strSQL = strSQL + "set @dblCurrentIncome =@dblcurre "
                    strSQL = strSQL + "DECLARE @dblInc numeric(18,2) SET @dblInc =@dblCurrentIncome ";
                    strSQL = strSQL + "IF @dblInc IS NULL SET @dblInc = 0 ";
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) VALUES";
                    strSQL = strSQL + "('Current Period',@PLGroup,2,@dblInc) ";

                    strSQL = strSQL + "SELECT @dblAsset = SUM(GR_AMOUNT) FROM ";
                    strSQL = strSQL + "ACC_BALANCE_SHEET_TEMP WHERE GR_PRIMARY_TYPE = 1 ";

                    strSQL = strSQL + "SELECT @dblLiabilities = SUM(GR_AMOUNT) FROM ACC_BALANCE_SHEET_TEMP WHERE GR_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = 'Closing Stock' WHERE GR_NAME = @StockInHand ";
                    strSQL = strSQL + "DELETE FROM ACC_BALANCE_SHEET_TEMP WHERE GR_AMOUNT = 0 ";
                    strSQL = strSQL + "DELETE FROM ACC_BALANCE_SHEET_COMPARISON WHERE ASON_DATE between  @frDate and @toDate ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,SUM(GR_AMOUNT) AS AMOUNT FROM  ACC_BALANCE_SHEET_TEMP ";
                    strSQL = strSQL + "GROUP BY GR_NAME, GR_PARENT,GR_PRIMARY_TYPE ORDER BY GR_PARENT ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET SET GR_PRIMARY_TYPE = 2,GR_AMOUNT = -GR_AMOUNT WHERE GR_PARENT IN(SELECT GR_PARENT ";
                    strSQL = strSQL + "FROM ACC_BAL_QRY ";
                    strSQL = strSQL + "WHERE GR_PRIMARY_TYPE = 1 AND  SUMOFGR_AMOUNT < 0) ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET SET GR_PRIMARY_TYPE = 1,GR_AMOUNT = -GR_AMOUNT ";
                    strSQL = strSQL + "WHERE GR_PARENT IN(SELECT GR_PARENT FROM ACC_BAL_QRY WHERE GR_PRIMARY_TYPE = 2 AND  SUMOFGR_AMOUNT < 0)  ";
                    strSQL = strSQL + "If @dblAsset > @dblLiabilities INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Diff in Opening Bal.','Diff in Opening Bal.',2,@dblAsset - @dblLiabilities) ";
                    strSQL = strSQL + "If @dblAsset < @dblLiabilities INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Diff in Opening Bal.','Diff in Opening Bal.',1,@dblLiabilities - @dblAsset) ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }

        private static string CreateBalanceSheetManufactureBranchH()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;

                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gJagBalanceSheetManuBranchH')";
                    strSQL = strSQL + "Drop PROCEDURE gJagBalanceSheetManuBranchH ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();

                    strSQL = "CREATE PROCEDURE gJagBalanceSheetManuBranchH ";
                    strSQL = strSQL + "@branchID char(4),";
                    strSQL = strSQL + "@frDate DATETIME,";
                    strSQL = strSQL + "@toDate  DATETIME,@dblGP numeric(18,2) ,@dblClsStock numeric(18,2),@fPreDate DATETIME  WITH ENCRYPTION AS ";
                    strSQL = strSQL + "DELETE FROM ACC_PROFIT_AND_LOSS If @dblGP > 0 BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Profit b/d',' Gross Profit b/d',3,@dblGP) END ";
                    strSQL = strSQL + "If @dblGP < 0 BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Loss b/d',' Gross Loss b/d',4,ABS(@dblGP)) END ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 3) ";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_GROUP <> '211' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + " AND ACC_VOUCHER.BRANCH_ID=@branchID ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT, ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP <> '211' ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 3 AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + " AND BRANCH_ID=@branchID ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "Where (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 4) And ACC_LEDGER_GROUP_QRY.GR_GROUP NOT LIKE '21%' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + " AND ACC_VOUCHER.BRANCH_ID=@branchID ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT , ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP NOT LIKE '21%' ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 4 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "DECLARE @dblIncome numeric(18,2),@dblExpenses Numeric(18,2) ";
                    strSQL = strSQL + "SELECT @dblIncome = ISNULL(SUM(GR_AMOUNT),0)";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 3 ";
                    strSQL = strSQL + "SELECT @dblExpenses = ISNULL(SUM(GR_AMOUNT),0) ";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 4 ";
                    strSQL = strSQL + " INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) VALUES('Net ','Net',4,@dblIncome - @dblExpenses) ";

                    strSQL = strSQL + "DELETE FROM  ACC_BALANCE_SHEET_TEMP ";
                    strSQL = strSQL + "DELETE FROM ACC_BALANCE_SHEET DECLARE @PLGroup  VARCHAR(100)  ";
                    strSQL = strSQL + "DECLARE @PLLedger VARCHAR(100) ";
                    strSQL = strSQL + "SELECT @PLLedger = LEDGER_NAME, @PLGroup = LEDGER_PARENT_GROUP FROM ACC_LEDGER  ";
                    strSQL = strSQL + "WHERE  LEDGER_GROUP = 301 AND LEDGER_DEFAULT = 1 ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,";
                    strSQL = strSQL + "SUM(-GR_OPENING_DEBIT - GR_OPENING_CREDIT) As TOTAL_OPENING ";
                    strSQL = strSQL + "FROM ACC_LEDGERGROUP WHERE GR_LEVEL = 2 AND GR_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + "GROUP BY GR_NAME,GR_PARENT,GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,SUM(GR_OPENING_CREDIT + GR_OPENING_DEBIT)";
                    strSQL = strSQL + "AS TOTAL_OPENING FROM ACC_LEDGERGROUP ";
                    strSQL = strSQL + "WHERE GR_LEVEL = 2 AND GR_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + "GROUP BY GR_NAME,GR_PARENT,GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT)";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(LEDGER_OPENING_BALANCE  * -1) AS YY ";
                    strSQL = strSQL + "FROM ACC_LEDGER WHERE LEDGER_LEVEL = 2 AND LEDGER_PRIMARY_TYPE = 1 GROUP BY ";
                    strSQL = strSQL + "LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE  ";
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";

                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,";
                    strSQL = strSQL + "SUM(LEDGER_OPENING_BALANCE) AS YY FROM ACC_LEDGER WHERE LEDGER_LEVEL = 2 AND LEDGER_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    //''****************Variable************
                    strSQL = strSQL + "DECLARE @dblOpeningPL numeric(18,2),@dblOpeningPL1 numeric(18,2),";
                    strSQL = strSQL + "@dblJournal numeric(18,2) DECLARE @dblPL1 numeric(18,2),@dblPL2 numeric(18,2),";
                    strSQL = strSQL + "@dblopnIncome numeric(18,2) ,@dblOpeningExpenses numeric(18,2) DECLARE @opnStock numeric(18,2),";
                    strSQL = strSQL + "@clsStock numeric(18,2),";
                    strSQL = strSQL + "@dblPL3 numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @CurrentAsset VARCHAR(100),";
                    strSQL = strSQL + "@StockInHand VARCHAR(100) ";
                    strSQL = strSQL + "DECLARE @ClosingStock numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblCurrentIncome numeric(18,2)";
                    strSQL = strSQL + "DECLARE @dblAsset numeric(18,2),";
                    strSQL = strSQL + "@dblLiabilities numeric(18,2) ";

                    //''************Variable

                    strSQL = strSQL + "SELECT @dblPL1 = ISNULL(SUM(GR_OPENING_CREDIT + GR_OPENING_DEBIT),0) ";
                    strSQL = strSQL + "FROM ACC_LEDGERGROUP WHERE GR_PRIMARY_TYPE > 2 ";
                    strSQL = strSQL + "AND GR_LEVEL = 2 ";

                    strSQL = strSQL + "SELECT @dblPL2 = ISNULL(SUM(LEDGER_OPENING_BALANCE),0) ";
                    strSQL = strSQL + "FROM ACC_LEDGER WHERE (LEDGER_PRIMARY_TYPE = 3 OR LEDGER_PRIMARY_TYPE = 4) AND LEDGER_LEVEL = 2 ";

                    strSQL = strSQL + "SELECT @dblopnIncome = ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0) ";
                    strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME  ";
                    //'    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE = 3) "
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE > 2) ";
                    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID = @branchID ";
                    //'Opening Expenses
                    strSQL = strSQL + "SELECT  @dblOpeningExpenses=ISNULL(SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0)  ";
                    strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate ";
                    strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE = 4) ";
                    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID = @branchID ";

                    strSQL = strSQL + "SELECT @opnStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE INV_INOUT_FLAG IS NULL ";
                    strSQL = strSQL + "AND BRANCH_ID = @branchID ";
                    strSQL = strSQL + "SELECT @clsStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE INV_DATE < @frDate ";
                    strSQL = strSQL + "AND BRANCH_ID = @branchID ";
                    //''strSQL = strSQL + " SET @opnStock=@dblOpnStock "
                    //''strSQL = strSQL + " SET @clsStock= @dblClsStock "

                    strSQL = strSQL + "SELECT @dblJournal = ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) FROM ACC_MAIN_LEDGER WHERE COMP_VOUCHER_DATE < @frDate ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 2 AND LEDGER_LEVEL = 2 AND LEDGER_DEFAULT = 1 AND LEDGER_GROUP = 301 ";
                    //''strSQL = strSQL + "SET @dblOpeningPL = (@dblPL1 + @dblPL2 + @dblopnIncome + @dblJournal) - (@opnStock - @clsStock) "
                    strSQL = strSQL + "SET @dblOpeningPL1 = (@dblOpeningExpenses + @dblJournal) - @clsStock ";
                    strSQL = strSQL + "SET @dblOpeningPL = @dblopnIncome -@dblOpeningPL1 ";

                    //'        strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = ' Opening Balance' ,GR_AMOUNT =  @dblOpeningPL "
                    //'        strSQL = strSQL + "WHERE GR_NAME = @PLLedger "
                    //''strSQL = strSQL + "SET @ClosingStock= @clsStock "
                    strSQL = strSQL + " IF @dblPL3 > 0 ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = ' Opening Balance' ,GR_AMOUNT = @dblPL3 ";
                    strSQL = strSQL + "WHERE GR_NAME = @PLLedger ";
                    strSQL = strSQL + "IF @dblPL3 = 0 ";
                    strSQL = strSQL + "SET @dblOpeningPL = (@dblPL1 + @dblPL2 + @dblPL3 + @dblopnIncome + @dblOpeningExpenses+ @dblJournal) - (@opnStock - @clsStock) ";
                    strSQL = strSQL + "IF @dblOpeningPL IS NULL SET @dblOpeningPL = 0 ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = ' Opening Balance' ,GR_AMOUNT = GR_AMOUNT + 0 ";
                    strSQL = strSQL + "WHERE GR_NAME = @PLLedger ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, ";
                    strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 1) AND COMP_VOUCHER_DATE <=  @toDate ";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID=@branchID ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, ";
                    strSQL = strSQL + " SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) As DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 2) AND COMP_VOUCHER_DATE <=  @toDate AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + " AND ACC_VOUCHER.BRANCH_ID=@branchID ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE COMP_VOUCHER_DATE <= @toDate AND LEDGER_PRIMARY_TYPE = 1 AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + " AND BRANCH_ID=@branchID ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE COMP_VOUCHER_DATE <= @toDate AND LEDGER_PRIMARY_TYPE = 2 AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + " AND BRANCH_ID=@branchID ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE UPDATE ACC_BALANCE_SHEET_TEMP ";
                    strSQL = strSQL + "SET GR_NAME = 'Transferred' ,GR_AMOUNT = GR_AMOUNT - @dblJournal ";
                    strSQL = strSQL + "WHERE GR_NAME = @PLLedger ";

                    strSQL = strSQL + "SELECT @CurrentAsset = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Current Assets'";
                    strSQL = strSQL + "SELECT @StockInHand = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Stock-in-hand' ";

                    //'    strSQL = strSQL + "SELECT @ClosingStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) "
                    //'    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE <= @toDate "
                    strSQL = strSQL + "SELECT @ClosingStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE <= @toDate ";
                    strSQL = strSQL + "AND BRANCH_ID = @branchID ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Closing Stock',@CurrentAsset,1,@ClosingStock) ";

                    //'    strSQL = strSQL + "SELECT @dblCurrentIncome = ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0)  "
                    //'    strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME "
                    //'    strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE > 2) "
                    strSQL = strSQL + "SELECT @dblCurrentIncome=ISNULL(SUM(GR_AMOUNT),0) FROM ACC_PROFIT_AND_lOSS WHERE GR_NAME='Net' ";
                    //''strSQL = strSQL + "DECLARE @dblInc numeric(18,2) SET @dblInc = (@dblCurrentIncome - (@clsStock - @ClosingStock)) "
                    //'strSQL = strSQL + "set @dblCurrentIncome =@dblcurre "
                    strSQL = strSQL + "DECLARE @dblInc numeric(18,2) SET @dblInc =@dblCurrentIncome ";
                    strSQL = strSQL + "IF @dblInc IS NULL SET @dblInc = 0 ";
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) VALUES";
                    strSQL = strSQL + "('Current Period',@PLGroup,2,@dblInc) ";

                    strSQL = strSQL + "SELECT @dblAsset = SUM(GR_AMOUNT) FROM ";
                    strSQL = strSQL + "ACC_BALANCE_SHEET_TEMP WHERE GR_PRIMARY_TYPE = 1 ";

                    strSQL = strSQL + "SELECT @dblLiabilities = SUM(GR_AMOUNT) FROM ACC_BALANCE_SHEET_TEMP WHERE GR_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = 'Closing Stock' WHERE GR_NAME = @StockInHand ";
                    strSQL = strSQL + "DELETE FROM ACC_BALANCE_SHEET_TEMP WHERE GR_AMOUNT = 0 ";
                    strSQL = strSQL + "DELETE FROM ACC_BALANCE_SHEET_COMPARISON WHERE ASON_DATE between  @frDate and @toDate ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,SUM(GR_AMOUNT) AS AMOUNT FROM  ACC_BALANCE_SHEET_TEMP ";
                    strSQL = strSQL + "GROUP BY GR_NAME, GR_PARENT,GR_PRIMARY_TYPE ORDER BY GR_PARENT ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET SET GR_PRIMARY_TYPE = 2,GR_AMOUNT = -GR_AMOUNT WHERE GR_PARENT IN(SELECT GR_PARENT ";
                    strSQL = strSQL + "FROM ACC_BAL_QRY ";
                    strSQL = strSQL + "WHERE GR_PRIMARY_TYPE = 1 AND  SUMOFGR_AMOUNT < 0) ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET SET GR_PRIMARY_TYPE = 1,GR_AMOUNT = -GR_AMOUNT ";
                    strSQL = strSQL + "WHERE GR_PARENT IN(SELECT GR_PARENT FROM ACC_BAL_QRY WHERE GR_PRIMARY_TYPE = 2 AND  SUMOFGR_AMOUNT < 0)  ";
                    strSQL = strSQL + "If @dblAsset > @dblLiabilities INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Diff in Opening Bal.','Diff in Opening Bal.',2,@dblAsset - @dblLiabilities) ";
                    strSQL = strSQL + "If @dblAsset < @dblLiabilities INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Diff in Opening Bal.','Diff in Opening Bal.',1,@dblLiabilities - @dblAsset) ";

                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }

        private static string CreateBalanceSheet()
        {
            using (SqlConnection gcnmain = new SqlConnection(Utility.SQLConnstring()))
            {
                if (gcnmain.State == System.Data.ConnectionState.Open)
                {
                    gcnmain.Close();
                }
                try
                {
                    gcnmain.Open();
                    string strSQL;
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = gcnmain;

                    strSQL = "IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'gJagBalanceSheet')";
                    strSQL = strSQL + "Drop PROCEDURE gJagBalanceSheet ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();

                    strSQL = "CREATE PROCEDURE gJagBalanceSheet ";
                    strSQL = strSQL + "@frDate DATETIME,";
                    strSQL = strSQL + "@toDate  DATETIME,@dblGP numeric(18,2) ,@dblClsStock numeric(18,2),@fPreDate DATETIME  WITH ENCRYPTION AS ";

                    strSQL = strSQL + "DECLARE @PLGroup  VARCHAR(100)  ";
                    strSQL = strSQL + "DELETE FROM ACC_PROFIT_AND_LOSS ";
                    strSQL = strSQL + "If @dblGP > 0 BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Profit b/d',' Gross Profit b/d',3,@dblGP) END ";
                    strSQL = strSQL + "If @dblGP < 0 BEGIN ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Loss b/d',' Gross Loss b/d',4,ABS(@dblGP)) END ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 3) AND ACC_LEDGER_GROUP_QRY.GR_GROUP <> '211' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT, ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP <> '211' ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 3 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "Where (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 4) And ACC_LEDGER_GROUP_QRY.GR_GROUP NOT LIKE '21%' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT , ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN @frDate AND @toDate) AND LEDGER_GROUP NOT LIKE '21%' ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 4 AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    strSQL = strSQL + "DECLARE @dblIncome numeric(18,2),@dblExpenses Numeric(18,2) ";
                    strSQL = strSQL + "SELECT @dblIncome = ISNULL(SUM(GR_AMOUNT),0)";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 3 ";
                    strSQL = strSQL + "SELECT @dblExpenses = ISNULL(SUM(GR_AMOUNT),0) ";
                    strSQL = strSQL + "FROM ACC_PROFIT_AND_LOSS WHERE GR_PRIMARY_TYPE = 4 ";
                    strSQL = strSQL + "INSERT INTO ACC_PROFIT_AND_LOSS(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Net ','Net',4,@dblIncome - @dblExpenses) ";

                    //''************Variable**********
                    strSQL = strSQL + "DECLARE @PLLedger VARCHAR(100) ";
                    strSQL = strSQL + "DECLARE @dblOpeningPL numeric(18,2),";
                    strSQL = strSQL + "@dblJournal numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblPL1 numeric(18,2),";
                    strSQL = strSQL + "@dblPL2 numeric(18,2),";
                    strSQL = strSQL + "@dblopnIncome numeric(18,2)  ";
                    strSQL = strSQL + "DECLARE @opnStock numeric(18,2),";
                    strSQL = strSQL + "@dblPL3 numeric(18,2),";
                    strSQL = strSQL + "@clsStock numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @CurrentAsset VARCHAR(100),";
                    strSQL = strSQL + "@StockInHand VARCHAR(100) ";
                    strSQL = strSQL + "DECLARE @ClosingStock numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblCurrentIncome numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblInc numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblAsset numeric(18,2),";
                    strSQL = strSQL + "@dblLiabilities numeric(18,2) ";
                    strSQL = strSQL + "DECLARE @dblOpeningPL1 numeric(18,2),@dblOpeningExpenses numeric(18,2) ";
                    //''*******************************
                    strSQL = strSQL + "SELECT @PLLedger = LEDGER_NAME, @PLGroup = LEDGER_PARENT_GROUP FROM ACC_LEDGER  ";
                    strSQL = strSQL + "WHERE  LEDGER_GROUP = 301 AND LEDGER_DEFAULT = 1 ";
                    //''Opening Assets Group
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0)*-1 ";
                    strSQL = strSQL + "FROM ACC_BRANCH_GROUP_OPENING ";
                    strSQL = strSQL + "WHERE GR_LEVEL = 2 AND GR_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + "AND GR_GROUP <> 401";
                    strSQL = strSQL + "GROUP BY GR_NAME,GR_PARENT,GR_PRIMARY_TYPE ";

                    //'Opening Liabilities Group
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0) ";
                    strSQL = strSQL + "FROM ACC_BRANCH_GROUP_OPENING ";
                    strSQL = strSQL + "WHERE GR_LEVEL = 2 AND GR_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + "GROUP BY GR_NAME,GR_PARENT,GR_PRIMARY_TYPE ";

                    //'Opening Assets Ledger
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0)*-1 AS YY ";
                    strSQL = strSQL + "FROM ACC_LEDGER_VIEW_BRANCH ";
                    strSQL = strSQL + "WHERE LEDGER_LEVEL = 2 AND LEDGER_PRIMARY_TYPE = 1  ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    //'Opening Liabilities Ledger
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,ISNULL(SUM(BRANCH_LEDGER_OPENING_BALANCE),0) AS YY ";
                    strSQL = strSQL + "FROM ACC_LEDGER_VIEW_BRANCH ";
                    strSQL = strSQL + "WHERE LEDGER_LEVEL = 2 AND LEDGER_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    //'*********************Transaction************************************
                    //''Assets
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, ";
                    strSQL = strSQL + "ISNULL(SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT-ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 1) ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE <=  @toDate ";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    //''Liabilities
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE, ";
                    strSQL = strSQL + "ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 2) ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE <=  @toDate ";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";

                    // 'Assets Main Ledger
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,ISNULL(SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT),0) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE <=  @toDate ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + "AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    //'Liabilities Main Ledger
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE,ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE <=  @toDate ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + "AND LEDGER_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";

                    //'*********************End************************************
                    strSQL = strSQL + "SELECT @dblPL1 = ISNULL(SUM(GR_OPENING_CREDIT + GR_OPENING_DEBIT),0) ";
                    strSQL = strSQL + "FROM ACC_LEDGERGROUP WHERE GR_PRIMARY_TYPE > 2 ";
                    strSQL = strSQL + "AND GR_LEVEL = 2 ";
                    strSQL = strSQL + "SELECT @dblPL2 = ISNULL(SUM(LEDGER_OPENING_BALANCE),0) ";
                    strSQL = strSQL + "FROM ACC_LEDGER WHERE (LEDGER_PRIMARY_TYPE = 3 OR LEDGER_PRIMARY_TYPE = 4) AND LEDGER_LEVEL = 2 ";


                    strSQL = strSQL + "SELECT @dblopnIncome = ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0)";
                    strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE > 2) ";
                    ///''strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE = 3) "

                    //'Opening Expenses
                    strSQL = strSQL + "SELECT  @dblOpeningExpenses=ISNULL(SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0)  ";
                    strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < @frDate ";
                    strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE = 4) ";

                    strSQL = strSQL + "SELECT @opnStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_INOUT_FLAG IS NULL ";
                    strSQL = strSQL + "SELECT @clsStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE < @frDate ";
                    //''strSQL = strSQL + " SET @clsStock= @dblClsStock "

                    strSQL = strSQL + "SELECT @dblJournal = ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) FROM ACC_MAIN_LEDGER WHERE COMP_VOUCHER_DATE < @frDate ";
                    strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 2 AND LEDGER_LEVEL = 2 AND LEDGER_DEFAULT = 1 AND LEDGER_GROUP = 301 ";
                    strSQL = strSQL + "SET @dblOpeningPL = (@dblPL1 + @dblPL2 + @dblopnIncome + @dblJournal) - (@opnStock - @clsStock) ";
                    //'    strSQL = strSQL + "SET @dblOpeningPL1 = (@dblOpeningExpenses + @dblJournal) - @clsStock "
                    //'    strSQL = strSQL + "SET @dblOpeningPL = @dblopnIncome -@dblOpeningPL1 "

                    strSQL = strSQL + " IF @dblPL3 > 0 ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = ' Opening Balance' ,GR_AMOUNT = @dblPL3 ";
                    strSQL = strSQL + "WHERE GR_NAME = @PLLedger ";
                    strSQL = strSQL + "IF @dblPL3 = 0 ";
                    strSQL = strSQL + "SET @dblOpeningPL = (@dblPL1 + @dblPL2 + @dblPL3 + @dblopnIncome + @dblJournal) - (@opnStock - @clsStock) ";
                    strSQL = strSQL + "IF @dblOpeningPL IS NULL SET @dblOpeningPL = 0 ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = ' Opening Balance' ,GR_AMOUNT = GR_AMOUNT + @dblOpeningPL ";
                    strSQL = strSQL + "WHERE GR_NAME = @PLLedger ";

                    strSQL = strSQL + "SELECT @CurrentAsset = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Current Assets'";
                    strSQL = strSQL + "SELECT @StockInHand = GR_NAME FROM ACC_LEDGERGROUP WHERE GR_DEFAULT_NAME = 'Stock-in-hand' ";
                    //''strSQL = strSQL + "SET @ClosingStock= @dblClsStock "
                    strSQL = strSQL + "SELECT @ClosingStock = ISNULL(SUM(INV_TRAN_AMOUNT),0) ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY WHERE INV_DATE <= @toDate ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Closing Stock',@CurrentAsset,1,@ClosingStock) ";

                    strSQL = strSQL + "SELECT @dblCurrentIncome=ISNULL(SUM(GR_AMOUNT),0) FROM ACC_PROFIT_AND_lOSS WHERE GR_NAME like 'Net%' ";
                    strSQL = strSQL + "SET @dblInc =@dblCurrentIncome ";
                    strSQL = strSQL + "IF @dblInc IS NULL SET @dblInc = 0 ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET_TEMP(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) VALUES";
                    strSQL = strSQL + "('Current Period',@PLGroup,2,@dblInc) ";

                    strSQL = strSQL + "SELECT @dblAsset = ISNULL(SUM(GR_AMOUNT),0) FROM ";
                    strSQL = strSQL + "ACC_BALANCE_SHEET_TEMP WHERE GR_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + "SELECT @dblLiabilities = SUM(GR_AMOUNT) FROM ACC_BALANCE_SHEET_TEMP WHERE GR_PRIMARY_TYPE = 2 ";
                    //'    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET_TEMP SET GR_NAME = 'Closing Stock' WHERE GR_NAME = @StockInHand "
                    strSQL = strSQL + "SELECT @dblOpeningPL1=ISNULL(SUM(GR_AMOUNT),0) FROM ACC_BALANCE_SHEET_TEMP WHERE GR_PARENT='Profit & Loss Accounts'";

                    strSQL = strSQL + "DELETE FROM ACC_BALANCE_SHEET_TEMP WHERE GR_AMOUNT = 0 ";
                    strSQL = strSQL + "DELETE FROM ACC_BALANCE_SHEET_COMPARISON WHERE ASON_DATE between  @frDate and @toDate ";

                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,ISNULL(SUM(GR_AMOUNT),0) AS AMOUNT FROM  ACC_BALANCE_SHEET_TEMP ";
                    strSQL = strSQL + "GROUP BY GR_NAME, GR_PARENT,GR_PRIMARY_TYPE ORDER BY GR_PARENT ";

                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET SET GR_PRIMARY_TYPE = 2,GR_AMOUNT = -GR_AMOUNT WHERE GR_PARENT IN(SELECT GR_PARENT ";
                    strSQL = strSQL + "FROM ACC_BAL_QRY ";
                    strSQL = strSQL + "WHERE GR_PRIMARY_TYPE = 1 AND  SUMOFGR_AMOUNT < 0) ";
                    strSQL = strSQL + "UPDATE ACC_BALANCE_SHEET SET GR_PRIMARY_TYPE = 1,GR_AMOUNT = -GR_AMOUNT ";
                    strSQL = strSQL + "WHERE GR_PARENT IN(SELECT GR_PARENT FROM ACC_BAL_QRY WHERE GR_PRIMARY_TYPE = 2 AND  SUMOFGR_AMOUNT < 0)  ";

                    strSQL = strSQL + "If @dblAsset > @dblLiabilities ";
                    strSQL = strSQL + "INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Diff in Opening Bal.','Diff in Opening Bal.',2,@dblAsset - @dblLiabilities) ";
                    strSQL = strSQL + "If @dblAsset < @dblLiabilities INSERT INTO ACC_BALANCE_SHEET(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Diff in Opening Bal.','Diff in Opening Bal.',1,@dblLiabilities - @dblAsset) ";
                    cmd.CommandText = strSQL;
                    cmd.ExecuteNonQuery();
                    return strSQL;
                }
                finally
                {
                    gcnmain.Close();
                }
            }
        }



    }
}
