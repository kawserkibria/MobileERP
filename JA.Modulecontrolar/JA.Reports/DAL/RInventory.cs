using Dutility;
using JA.Reports.Model;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text;

namespace JA.Reports.DAL
{
    public class RInventory
    {
        private string connstring;
        //= Utility.SQLConnstring();
        private string strSQL = "";
        public string gOpenComID(string strID)
        {
            Utility.Modules.Clear();
            Utility.ModuleAdd(strID);
            return strID;
        }
        #region "Sample"
        public List<RStockInformation> mGetindividualSalpmle(string strDeComID, string strRefNo)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RStockInformation> oooSamplePrint = new List<RStockInformation>();

                strSQL = "SELECT  ACC_BILL_TRAN.BILL_TRAN_KEY, ACC_BILL_TRAN.STOCKGROUP_NAME, ACC_BILL_TRAN.STOCKITEM_NAME, ACC_BILL_TRAN.GODOWNS_NAME, ACC_BILL_TRAN.BILL_QUANTITY, ACC_BILL_TRAN.BILL_RATE, ";
                strSQL = strSQL + "ACC_LEDGER.LEDGER_ADDRESS1, ACC_LEDGER.LEDGER_ADDRESS2, ACC_BILL_TRAN.BILL_UOM, ACC_BILL_TRAN.BILL_NET_AMOUNT, ACC_BILL_TRAN.INV_LOG_NO, SUBSTRING(ACC_BILL_TRAN.COMP_REF_NO, 7, 30) ";
                strSQL = strSQL + "AS COMP_REF_NO, ACC_BILL_TRAN.COMP_VOUCHER_DATE, ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION, ACC_LEDGER.LEDGER_NAME_MERZE, ACC_BRANCH.BRANCH_NAME ";
                strSQL = strSQL + "FROM  ACC_BILL_TRAN INNER JOIN ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER ON ACC_BILL_TRAN.COMP_REF_NO = ACC_COMPANY_VOUCHER.COMP_REF_NO INNER JOIN ";
                strSQL = strSQL + "ACC_LEDGER ON ACC_COMPANY_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME INNER JOIN ";
                strSQL = strSQL + "ACC_BRANCH ON ACC_BILL_TRAN.BRANCH_ID = ACC_BRANCH.BRANCH_ID ";
                strSQL = strSQL + "WHERE (ACC_BILL_TRAN.COMP_REF_NO = '" + strRefNo + "') ";
                strSQL = strSQL + "ORDER BY ACC_BILL_TRAN.STOCKITEM_NAME ";

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {

                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strRefNo = dr["COMP_REF_NO"].ToString();
                    oLedg.strInvDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.strNarration = dr["COMP_VOUCHER_NARRATION"].ToString();
                    oLedg.strLedgerName = dr["LEDGER_NAME_MERZE"].ToString();
                    oLedg.strGroupParent = dr["LEDGER_ADDRESS1"].ToString();
                    oLedg.strGroupPrimary = dr["LEDGER_ADDRESS2"].ToString();
                    oLedg.dblInwQty = Convert.ToDouble(dr["BILL_QUANTITY"].ToString());
                    oLedg.dblInwRate = Convert.ToDouble(dr["BILL_RATE"].ToString());
                    oLedg.dblOpnAmnt = Convert.ToDouble(dr["BILL_NET_AMOUNT"].ToString());
                    oLedg.strItemAlias = dr["BILL_UOM"].ToString();
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.strLocationName = dr["GODOWNS_NAME"].ToString();
                    oLedg.strBatchNo = "Branch Name :" + dr["BRANCH_NAME"].ToString();
                    oooSamplePrint.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strRefNo = "";
                    oLedg.strInvDate = "";
                    oLedg.strNarration = "";
                    oLedg.strLedgerName = "";
                    oLedg.strGroupParent = "";
                    oLedg.strGroupPrimary = "";
                    oLedg.dblInwQty = 0;
                    oLedg.dblInwRate = 0;
                    oLedg.dblOpnAmnt = 0;
                    oLedg.strItemName = "";
                    oLedg.strLocationName = "";
                    oooSamplePrint.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return oooSamplePrint;
            }
        }

        #endregion
        #region "Inventory"

        public List<RStockInformation> mGetLocationQty(string strDeComID, string strFdate, string strTDate, string strString, string strSelction,
                                                    int intZeroQntySuppress)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;
                if (strSelction == "L")
                {
                    strSQL = "ALTER VIEW INV_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME,SUM(INV_TRAN_QUANTITY) AS OPN_QUANTITY,";
                    strSQL = strSQL + "SUM(INV_TRAN_AMOUNT) AS OPN_AMOUNT,0 AS INWARD_QUANTITY, 0 AS INWARD_AMOUNT,";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY,0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT  ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE < " + Utility.cvtSQLDateString(strFdate) + ")  ";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    if (strString != "")
                    {
                        strSQL = strSQL + " AND GODOWNS_NAME  IN(" + strString + ") ";
                    }
                    strSQL = strSQL + "GROUP BY GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT, SUM(INV_TRAN_QUANTITY) AS INWARD_QUANTITY, SUM(INV_TRAN_AMOUNT) AS INWARD_AMOUNT, ";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY, 0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    if (strString != "")
                    {
                        strSQL = strSQL + " AND GODOWNS_NAME  IN(" + strString + ") ";
                    }
                    strSQL = strSQL + "AND INV_INOUT_FLAG='I' GROUP BY GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME ";

                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT,0 INWARD_QUANTITY,0 INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(INV_TRAN_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ") ";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    if (strString != "")
                    {
                        strSQL = strSQL + " AND GODOWNS_NAME  IN(" + strString + ") ";
                    }
                    strSQL = strSQL + "AND INV_INOUT_FLAG='O' GROUP BY GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "ALTER VIEW INV_OPENING_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME,SUM(OPN_QUANTITY) AS INV_TRAN_QUANTITY, SUM(OPN_AMOUNT) AS INV_TRAN_AMOUNT,";
                    strSQL = strSQL + "SUM(INWARD_QUANTITY) AS INWARD_QUANTITY, SUM(INWARD_AMOUNT) AS INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT,SUM(OPN_QUANTITY+INWARD_QUANTITY+OUTWARD_QUANTITY) CLS , ";
                    strSQL = strSQL + "SUM(OPN_AMOUNT+INWARD_AMOUNT+OUTWARD_COST_AMOUNT) CLSAMNT  ";
                    strSQL = strSQL + "FROM INV_TRAN_QRY ";
                    strSQL = strSQL + "GROUP BY GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();
                    List<RStockInformation> ooAccLedger = new List<RStockInformation>();

                    strSQL = "SELECT INV_OPENING_TRAN_QRY.GODOWNS_NAME,INV_OPENING_TRAN_QRY.STOCKGROUP_NAME,INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY, INV_OPENING_TRAN_QRY.INV_TRAN_AMOUNT, INV_OPENING_TRAN_QRY.INWARD_QUANTITY,";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.INWARD_AMOUNT, INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY,INV_OPENING_TRAN_QRY.OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.OUTWARD_COST_AMOUNT,INV_OPENING_TRAN_QRY.CLS,INV_OPENING_TRAN_QRY.CLSAMNT, ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKITEM_NAME, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2,";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4,";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5 , INV_STOCKITEM.STOCKITEM_BASEUNITS ";
                    strSQL = strSQL + "FROM INV_OPENING_TRAN_QRY INV_OPENING_TRAN_QRY INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM INV_STOCKITEM ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL INV_STOCKITEM_LEVEL ON ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM_LEVEL.STOCKITEM_NAME ";
                    // strSQL = strSQL + " WHERE INV_OPENING_TRAN_QRY.STOCKGROUP_NAME in( select STOCKGROUP_NAME from USER_PRIVILEGES_STOCKGROUP WHERE USER_LOGIN_NAME ='" + strUserName + "')";
                    if (strString != "")
                    {
                        strSQL = strSQL + " WHERE INV_OPENING_TRAN_QRY.GODOWNS_NAME  IN(" + strString + ")";
                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }
                    else
                    {
                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " WHERE (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }

                    strSQL = strSQL + " ORDER BY INV_OPENING_TRAN_QRY.GODOWNS_NAME,INV_STOCKITEM_LEVEL.STOCKITEM_NAME ASC ";

                    cmdInsert.CommandText = strSQL;
                    cmdInsert.Connection = gcnMain;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strLocationName = dr["GODOWNS_NAME"].ToString();
                        oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                        oLedg.strGroupParent = dr["STOCKGROUP_LEVEL_1"].ToString();
                        oLedg.strGroupPrimary = dr["STOCKGROUP_LEVEL_2"].ToString();
                        oLedg.strAltUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                        oLedg.strGroupName = dr["STOCKGROUP_LEVEL_3"].ToString();
                        oLedg.dblOpnQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                        oLedg.dblOpnAmnt = Convert.ToDouble(dr["INV_TRAN_AMOUNT"].ToString());
                        oLedg.dblInwQty = Convert.ToDouble(dr["INWARD_QUANTITY"].ToString());
                        oLedg.dblInwAmount = Convert.ToDouble(dr["INWARD_AMOUNT"].ToString());
                        oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString()));
                        oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_SALES_AMOUNT"].ToString()));
                        oLedg.dblclsQty = Convert.ToDouble(dr["CLS"].ToString());
                        oLedg.dblclsAmnt = Convert.ToDouble(dr["CLSAMNT"].ToString());
                        ooAccLedger.Add(oLedg);
                    }
                    if (!dr.HasRows)
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strLocationName = "";
                        oLedg.strItemName = "";
                        oLedg.strGroupParent = "";
                        oLedg.strGroupPrimary = "";
                        oLedg.strAltUnit = "";
                        oLedg.strGroupName = "";
                        oLedg.dblOpnQty = 0;
                        oLedg.dblOpnAmnt = 0;
                        oLedg.dblInwQty = 0;
                        oLedg.dblInwAmount = 0;
                        oLedg.dblOutWardQty = 0;
                        oLedg.dblOutwardAmnt = 0;
                        oLedg.dblclsQty = 0;
                        oLedg.dblclsAmnt = 0;
                        ooAccLedger.Add(oLedg);
                    }

                    dr.Close();
                    gcnMain.Close();
                    return ooAccLedger;
                }
                else if (strSelction == "LC")
                {
                    strSQL = "ALTER VIEW INV_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME,SUM(INV_TRAN_QUANTITY) AS OPN_QUANTITY,";
                    strSQL = strSQL + "SUM(INV_TRAN_AMOUNT) AS OPN_AMOUNT,0 AS INWARD_QUANTITY, 0 AS INWARD_AMOUNT,";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY,0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT  ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE < " + Utility.cvtSQLDateString(strFdate) + ")  ";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    //if (strString != "")
                    //{
                    //    strSQL = strSQL + " AND GODOWNS_NAME  IN(" + strString + ") ";
                    //}
                    strSQL = strSQL + "GROUP BY GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT, SUM(INV_TRAN_QUANTITY) AS INWARD_QUANTITY, SUM(INV_TRAN_AMOUNT) AS INWARD_AMOUNT, ";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY, 0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    //if (strString != "")
                    //{
                    //    strSQL = strSQL + " AND GODOWNS_NAME  IN(" + strString + ") ";
                    //}
                    strSQL = strSQL + "AND INV_INOUT_FLAG='I' GROUP BY GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME ";

                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT,0 INWARD_QUANTITY,0 INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(INV_TRAN_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ") ";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    //if (strString != "")
                    //{
                    //    strSQL = strSQL + " AND GODOWNS_NAME  IN(" + strString + ") ";
                    //}
                    strSQL = strSQL + "AND INV_INOUT_FLAG='O' GROUP BY GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "ALTER VIEW INV_OPENING_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME,SUM(OPN_QUANTITY) AS INV_TRAN_QUANTITY, SUM(OPN_AMOUNT) AS INV_TRAN_AMOUNT,";
                    strSQL = strSQL + "SUM(INWARD_QUANTITY) AS INWARD_QUANTITY, SUM(INWARD_AMOUNT) AS INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT,SUM(OPN_QUANTITY+INWARD_QUANTITY+OUTWARD_QUANTITY) CLS , ";
                    strSQL = strSQL + "SUM(OPN_AMOUNT+INWARD_AMOUNT+OUTWARD_COST_AMOUNT) CLSAMNT  ";
                    strSQL = strSQL + "FROM INV_TRAN_QRY ";
                    strSQL = strSQL + "GROUP BY GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();
                    List<RStockInformation> ooAccLedger = new List<RStockInformation>();

                    strSQL = "SELECT INV_OPENING_TRAN_QRY.GODOWNS_NAME,INV_OPENING_TRAN_QRY.STOCKGROUP_NAME,INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY, INV_OPENING_TRAN_QRY.INV_TRAN_AMOUNT, INV_OPENING_TRAN_QRY.INWARD_QUANTITY,";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.INWARD_AMOUNT, INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY,INV_OPENING_TRAN_QRY.OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.OUTWARD_COST_AMOUNT,INV_OPENING_TRAN_QRY.CLS,INV_OPENING_TRAN_QRY.CLSAMNT, ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKITEM_NAME, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2,";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4,";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5 , INV_STOCKITEM.STOCKITEM_BASEUNITS ";
                    strSQL = strSQL + "FROM INV_OPENING_TRAN_QRY INV_OPENING_TRAN_QRY INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM INV_STOCKITEM ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL INV_STOCKITEM_LEVEL ON ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM_LEVEL.STOCKITEM_NAME ";
                    // strSQL = strSQL + " WHERE INV_OPENING_TRAN_QRY.STOCKGROUP_NAME in( select STOCKGROUP_NAME from USER_PRIVILEGES_STOCKGROUP WHERE USER_LOGIN_NAME ='" + strUserName + "')";
                    if (strString != "")
                    {
                        strSQL = strSQL + " WHERE INV_STOCKITEM_LEVEL.STOCKITEM_NAME  IN(" + strString + ")";
                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }
                    else
                    {
                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " WHERE (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }

                    strSQL = strSQL + " ORDER BY INV_OPENING_TRAN_QRY.GODOWNS_NAME,INV_STOCKITEM_LEVEL.STOCKITEM_NAME ASC ";

                    cmdInsert.CommandText = strSQL;
                    cmdInsert.Connection = gcnMain;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strLocationName = dr["GODOWNS_NAME"].ToString();
                        oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                        oLedg.strGroupParent = dr["STOCKGROUP_LEVEL_1"].ToString();
                        oLedg.strGroupPrimary = dr["STOCKGROUP_LEVEL_2"].ToString();
                        oLedg.strAltUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                        oLedg.strGroupName = dr["STOCKGROUP_LEVEL_3"].ToString();
                        oLedg.dblOpnQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                        oLedg.dblOpnAmnt = Convert.ToDouble(dr["INV_TRAN_AMOUNT"].ToString());
                        oLedg.dblInwQty = Convert.ToDouble(dr["INWARD_QUANTITY"].ToString());
                        oLedg.dblInwAmount = Convert.ToDouble(dr["INWARD_AMOUNT"].ToString());
                        oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString()));
                        oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_SALES_AMOUNT"].ToString()));
                        oLedg.dblclsQty = Convert.ToDouble(dr["CLS"].ToString());
                        oLedg.dblclsAmnt = Convert.ToDouble(dr["CLSAMNT"].ToString());
                        ooAccLedger.Add(oLedg);
                    }
                    if (!dr.HasRows)
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strLocationName = "";
                        oLedg.strItemName = "";
                        oLedg.strGroupParent = "";
                        oLedg.strGroupPrimary = "";
                        oLedg.strAltUnit = "";
                        oLedg.strGroupName = "";
                        oLedg.dblOpnQty = 0;
                        oLedg.dblOpnAmnt = 0;
                        oLedg.dblInwQty = 0;
                        oLedg.dblInwAmount = 0;
                        oLedg.dblOutWardQty = 0;
                        oLedg.dblOutwardAmnt = 0;
                        oLedg.dblclsQty = 0;
                        oLedg.dblclsAmnt = 0;
                        ooAccLedger.Add(oLedg);
                    }

                    dr.Close();
                    gcnMain.Close();
                    return ooAccLedger;
                }
                else
                {
                    strSQL = "ALTER VIEW INV_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(INV_TRAN_QUANTITY) AS OPN_QUANTITY,";
                    strSQL = strSQL + "SUM(INV_TRAN_AMOUNT) AS OPN_AMOUNT,0 AS INWARD_QUANTITY, 0 AS INWARD_AMOUNT,";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY, 0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT  ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE < " + Utility.cvtSQLDateString(strFdate) + ")  ";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT, SUM(INV_TRAN_QUANTITY) AS INWARD_QUANTITY, SUM(INV_TRAN_AMOUNT) AS INWARD_AMOUNT, ";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY, 0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "AND INV_INOUT_FLAG='I' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT,0 INWARD_QUANTITY,0 INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(INV_TRAN_QUANTITY) AS OUTWARD_QUANTITY, SUM(INV_TRAN_AMOUNT) AS OUTWARD_SALES_AMOUNT,0 AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "AND INV_INOUT_FLAG='O' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "ALTER VIEW INV_OPENING_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(OPN_QUANTITY) AS INV_TRAN_QUANTITY, SUM(OPN_AMOUNT) AS INV_TRAN_AMOUNT,";
                    strSQL = strSQL + "SUM(INWARD_QUANTITY) AS INWARD_QUANTITY, SUM(INWARD_AMOUNT) AS INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT,SUM(OPN_QUANTITY+INWARD_QUANTITY+OUTWARD_QUANTITY) CLS , ";
                    strSQL = strSQL + "SUM(OPN_AMOUNT+INWARD_AMOUNT+OUTWARD_SALES_AMOUNT) CLSAMNT  ";
                    strSQL = strSQL + "FROM INV_TRAN_QRY ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();
                    List<RStockInformation> ooAccLedger = new List<RStockInformation>();
                    strSQL = "SELECT INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY, INV_OPENING_TRAN_QRY.INV_TRAN_AMOUNT, INV_OPENING_TRAN_QRY.INWARD_QUANTITY,";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.INWARD_AMOUNT, INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY, INV_OPENING_TRAN_QRY.OUTWARD_SALES_AMOUNT, ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.CLS, INV_OPENING_TRAN_QRY.CLSAMNT, INV_STOCKITEM_LEVEL.STOCKITEM_NAME, ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5, INV_STOCKITEM.STOCKITEM_BASEUNITS ";
                    strSQL = strSQL + ",INV_OPENING_TRAN_QRY.CLS,INV_OPENING_TRAN_QRY.CLSAMNT FROM INV_OPENING_TRAN_QRY INV_OPENING_TRAN_QRY INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM INV_STOCKITEM ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL INV_STOCKITEM_LEVEL ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM_LEVEL.STOCKITEM_NAME ";
                    strSQL = strSQL + "ORDER BY INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5";
                    if (strString != "")
                    {
                        strSQL = strSQL + " WHERE INV_STOCKITEM.STOCKGROUP_NAME IN(" + strString + ")";
                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }
                    else
                    {
                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " WHERE (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.Connection = gcnMain;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                        //oLedg.strUnit = dr["STOCKITEM_NAME"].ToString();
                        oLedg.dblOpnQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                        oLedg.dblOpnAmnt = Convert.ToDouble(dr["INV_TRAN_AMOUNT"].ToString());
                        oLedg.dblInwQty = Convert.ToDouble(dr["INWARD_QUANTITY"].ToString());
                        oLedg.dblInwAmount = Convert.ToDouble(dr["INWARD_AMOUNT"].ToString());
                        oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString()));
                        oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_SALES_AMOUNT"].ToString()));
                        oLedg.dblclsQty = Convert.ToDouble(dr["CLS"].ToString());
                        oLedg.dblclsAmnt = Convert.ToDouble(dr["CLSAMNT"].ToString());
                        ooAccLedger.Add(oLedg);
                    }
                    if (!dr.HasRows)
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strLocationName = "";
                        oLedg.strItemName = "";
                        oLedg.strGroupParent = "";
                        oLedg.strGroupPrimary = "";
                        oLedg.strAltUnit = "";
                        oLedg.strGroupName = "";
                        oLedg.dblOpnQty = 0;
                        oLedg.dblOpnAmnt = 0;
                        oLedg.dblInwQty = 0;
                        oLedg.dblInwAmount = 0;
                        oLedg.dblOutWardQty = 0;
                        oLedg.dblOutwardAmnt = 0;
                        oLedg.dblclsQty = 0;
                        oLedg.dblclsAmnt = 0;
                        ooAccLedger.Add(oLedg);
                    }
                    dr.Close();
                    gcnMain.Close();
                    return ooAccLedger;


                }
            }
        }


        public List<RStockInformation> mGetNegetiveStock(string strDeComID)
        {
            string strSQL = null;
            SqlDataReader dr;

            List<RStockInformation> ooAccLedger = new List<RStockInformation>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmdInsert = new SqlCommand();

                strSQL = "SELECT ";
                strSQL = strSQL + " INV_STOCKITEM_CLOSING.STOCKITEM_NAME, INV_STOCKITEM_CLOSING.GODOWNS_NAME, ";
                strSQL = strSQL + "INV_STOCKITEM_CLOSING.STOCKITEM_CLOSING_BALANCE, INV_STOCKITEM_CLOSING.STOCKITEM_SALE_BALANCE ";
                strSQL = strSQL + "FROM ";
                strSQL = strSQL + "INV_STOCKITEM_CLOSING INV_STOCKITEM_CLOSING  ";
                strSQL = strSQL + "WHERE ";
                strSQL = strSQL + "INV_STOCKITEM_CLOSING.STOCKITEM_SALE_BALANCE < 0  ";
                strSQL = strSQL + "ORDER BY ";
                strSQL = strSQL + "INV_STOCKITEM_CLOSING.GODOWNS_NAME ASC,INV_STOCKITEM_CLOSING.STOCKITEM_NAME ASC ";
                cmdInsert.Connection = gcnMain;
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strLocationName = dr["GODOWNS_NAME"].ToString();
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.dblclsQty = Math.Abs(Convert.ToDouble(dr["STOCKITEM_CLOSING_BALANCE"]));
                    oLedg.dblConvertQty = Math.Abs(Convert.ToDouble(dr["STOCKITEM_SALE_BALANCE"]));
                    ooAccLedger.Add(oLedg);
                }



                if (!dr.HasRows)
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strLocationName = "";
                    oLedg.strItemName = "";
                    oLedg.dblclsQty = 0;
                    oLedg.dblConvertQty = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;
            }
        }

        public List<RStockInformation> mGetBOMList(string strDeComID, string strProcessname, string strType)
        {
            string strSQL = null;
            double dblQty = 0;
            int intCheck = 0;
            SqlDataReader dr;

            List<RStockInformation> ooAccLedger = new List<RStockInformation>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                string strItemName = "";
                SqlTransaction myTrans;
                SqlCommand cmdInsert = new SqlCommand();
                if (strType == "O")
                {
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;
                    strSQL = "DELETE FROM INV_BOM_COST_PRICE ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "SELECT INV_MANU_PROCESS.STOCKITEM_NAME ";
                    strSQL = strSQL + "FROM ";
                    strSQL = strSQL + "INV_MENU_PROCESS_MAIN INV_MENU_PROCESS_MAIN INNER JOIN INV_MANU_PROCESS INV_MANU_PROCESS ON INV_MENU_PROCESS_MAIN.PROCESS_NAME = INV_MANU_PROCESS.PROCESS_NAME INNER JOIN INV_STOCKITEM INV_STOCKITEM ON INV_MANU_PROCESS.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME ";
                    strSQL = strSQL + "WHERE INV_MENU_PROCESS_MAIN.PROCESS_NAME ='" + strProcessname + "' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.Connection = gcnMain;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        strItemName = strItemName + dr["STOCKITEM_NAME"].ToString() + "~";
                    }
                    dr.Close();
                    if (strItemName != "")
                    {
                        string[] words = strItemName.Split('~');
                        foreach (string branch in words)
                        {
                            if (branch.ToString() != "")
                            {
                                double dblRate = Utility.gdblGetCostPrice(strDeComID, branch.ToString(), DateTime.Now.ToString("dd-MM-yyyy"));
                                strSQL = "INSERT INTO INV_BOM_COST_PRICE(ITEM_NAME,INV_RATE)";
                                strSQL = strSQL + "VALUES(";
                                strSQL = strSQL + "'" + branch.ToString().Trim().Replace("'", "''") + "' ";
                                strSQL = strSQL + "," + dblRate + " ";
                                strSQL = strSQL + ") ";
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                            }
                        }
                    }
                    cmdInsert.Transaction.Commit();
                    strSQL = "SELECT INV_MANU_PROCESS.STOCKITEM_NAME, INV_MANU_PROCESS.PROCESS_QUANTITY, INV_MANU_PROCESS.PROCESS_UNIT, INV_MANU_PROCESS.INV_PER, INV_MANU_PROCESS.PROCESS_TYPE,";
                    strSQL = strSQL + "INV_STOCKITEM.STOCKITEM_ALIAS, INV_STOCKITEM.STOCKGROUP_NAME,INV_BOM_COST_PRICE.INV_RATE ";
                    strSQL = strSQL + " FROM INV_STOCKITEM,INV_MENU_PROCESS_MAIN, INV_MANU_PROCESS,INV_BOM_COST_PRICE ";
                    strSQL = strSQL + " WHERE INV_MANU_PROCESS.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME AND INV_MENU_PROCESS_MAIN.PROCESS_NAME = INV_MANU_PROCESS.PROCESS_NAME AND INV_BOM_COST_PRICE.ITEM_NAME=INV_STOCKITEM.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND INV_MENU_PROCESS_MAIN.PROCESS_NAME ='" + strProcessname + "' ";
                    strSQL = strSQL + "ORDER BY INV_STOCKITEM.STOCKGROUP_NAME,INV_MANU_PROCESS.STOCKITEM_NAME, INV_MANU_PROCESS.PROCESS_TYPE,PROCESS_POSITION ";
                    cmdInsert.CommandText = strSQL;
                }
                else
                {

                    strSQL = "SELECT INV_MANU_PROCESS.STOCKITEM_NAME, INV_MANU_PROCESS.PROCESS_QUANTITY, INV_MANU_PROCESS.PROCESS_UNIT, INV_MANU_PROCESS.INV_PER, INV_MANU_PROCESS.PROCESS_TYPE,";
                    strSQL = strSQL + "INV_STOCKITEM.STOCKITEM_ALIAS, INV_STOCKITEM.STOCKGROUP_NAME,0 INV_RATE FROM ";
                    strSQL = strSQL + "INV_MENU_PROCESS_MAIN INV_MENU_PROCESS_MAIN INNER JOIN INV_MANU_PROCESS INV_MANU_PROCESS ON INV_MENU_PROCESS_MAIN.PROCESS_NAME = INV_MANU_PROCESS.PROCESS_NAME INNER JOIN INV_STOCKITEM INV_STOCKITEM ON INV_MANU_PROCESS.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME ";
                    strSQL = strSQL + "WHERE INV_MENU_PROCESS_MAIN.PROCESS_NAME ='" + strProcessname + "' ";
                    strSQL = strSQL + "ORDER BY INV_STOCKITEM.STOCKGROUP_NAME,INV_MANU_PROCESS.STOCKITEM_NAME, INV_MANU_PROCESS.PROCESS_TYPE,PROCESS_POSITION ";
                    cmdInsert.CommandText = strSQL;
                }
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();

                    oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.strUnit = dr["PROCESS_UNIT"].ToString();
                    oLedg.dblclsRate = Convert.ToDouble(dr["INV_RATE"].ToString());
                    if (dr["PROCESS_TYPE"].ToString() != "")
                    {
                        oLedg.intVtype = Convert.ToInt32(dr["PROCESS_TYPE"].ToString());
                        if (oLedg.intVtype == 2)
                        {
                            oLedg.strBatchNo = "Finished Goods";
                        }
                        else
                        {
                            oLedg.strBatchNo = "Consumption";
                        }

                    }
                    if (dr["STOCKITEM_ALIAS"].ToString() != "")
                    {
                        oLedg.strItemAlias = dr["STOCKITEM_ALIAS"].ToString();
                    }
                    else
                    {
                        oLedg.strItemAlias = "";
                    }

                    oLedg.dblclsQty = 0;
                    oLedg.dblConvertQty = Math.Abs(Convert.ToDouble(dr["PROCESS_QUANTITY"]) * 1);
                    intCheck += 1;
                    ooAccLedger.Add(oLedg);
                }



                if (!dr.HasRows)
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strGroupName = "";
                    oLedg.strItemAlias = "";
                    oLedg.strItemName = "";
                    oLedg.dblclsQty = 0;
                    oLedg.dblConvertQty = 0;
                    oLedg.strBatchNo = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;
            }
        }

        public List<RStockInformation> mGetMFGProcessReport(string strDeComID, string strProcessname, int intSelection)
        {
            string strSQL = null, strUpdateCls = "";
            double dblQty = 0;
            int intCheck = 0;
            SqlDataReader dr;

            List<RStockInformation> ooAccLedger = new List<RStockInformation>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                if (intSelection == 1)
                {
                    SqlTransaction myTrans;
                    SqlCommand cmdInsert = new SqlCommand();
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    strSQL = "DELETE FROM INV_PROCESS_DEMAND_TEMP ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    if (strProcessname != "")
                    {
                        string[] words = strProcessname.Split('|');
                        foreach (string branch in words)
                        {
                            string[] ooProcess = branch.Split('~');
                            if (ooProcess[0].ToString() != "")
                            {
                                dblQty = Utility.Val(ooProcess[1].ToString());
                                strSQL = "INSERT INTO INV_PROCESS_DEMAND_TEMP ";
                                strSQL = strSQL + "SELECT m.PROCESS_TYPE,s.STOCKGROUP_NAME,s.STOCKITEM_BASEUNITS,s.STOCKITEM_NAME,0 cls, ";
                                strSQL = strSQL + "isnull(sum(m.PROCESS_QUANTITY),0) * " + dblQty + " as ProcessQTY from INV_MANU_PROCESS m, ";
                                strSQL = strSQL + " INV_STOCKITEM ";
                                strSQL = strSQL + " s where  m.STOCKITEM_NAME=s.STOCKITEM_NAME ";
                                strSQL = strSQL + "and m.PROCESS_NAME ='" + ooProcess[0].ToString() + "' and m.PROCESS_TYPE <> 2  ";
                                strSQL = strSQL + "group by s.STOCKGROUP_NAME, s.STOCKITEM_NAME ,m.PROCESS_TYPE,s.STOCKITEM_BASEUNITS ";
                                strSQL = strSQL + "union all ";
                                strSQL = strSQL + "SELECT m.PROCESS_TYPE, s.STOCKGROUP_NAME, s.STOCKITEM_BASEUNITS, s.STOCKITEM_NAME, 0 cls, 0 AS ProcessQTY ";
                                strSQL = strSQL + "FROM INV_MANU_PROCESS AS m INNER JOIN ";
                                strSQL = strSQL + "INV_STOCKITEM AS s ON m.STOCKITEM_NAME = s.STOCKITEM_NAME INNER JOIN ";
                                strSQL = strSQL + "INV_STOCKITEM_CLOSING_MFG ON m.STOCKITEM_NAME = INV_STOCKITEM_CLOSING_MFG.STOCKITEM_NAME ";
                                strSQL = strSQL + "WHERE (m.PROCESS_NAME ='" + ooProcess[0].ToString() + "') AND (m.PROCESS_TYPE <> 2) ";
                                strSQL = strSQL + "GROUP BY s.STOCKGROUP_NAME, s.STOCKITEM_NAME, m.PROCESS_TYPE, s.STOCKITEM_BASEUNITS, INV_STOCKITEM_CLOSING_MFG.STOCKITEM_CLOSING_BALANCE ";
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                            }
                        }

                        strSQL = "SELECT DISTINCT STOCKITEM_NAME FROM INV_PROCESS_DEMAND_TEMP ";
                        cmdInsert.CommandText = strSQL;
                        dr = cmdInsert.ExecuteReader();
                        while (dr.Read())
                        {
                            strUpdateCls = strUpdateCls + dr["STOCKITEM_NAME"].ToString() + "~";
                        }
                        dr.Close();
                        if (strUpdateCls != "")
                        {
                            string[] wordsCLS = strUpdateCls.Split('~');
                            foreach (string objcls in wordsCLS)
                            {
                                if (objcls != "")
                                {
                                    strSQL = " insert into INV_PROCESS_DEMAND_TEMP ";
                                    strSQL = strSQL + "SELECT 1,INV_STOCKITEM.STOCKGROUP_NAME,INV_STOCKITEM.STOCKITEM_BASEUNITS,INV_STOCKITEM.STOCKITEM_NAME, INV_STOCKITEM_CLOSING_MFG.STOCKITEM_CLOSING_BALANCE,0 from INV_STOCKITEM_CLOSING_MFG,INV_STOCKITEM  ";
                                    strSQL = strSQL + " where INV_STOCKITEM.STOCKITEM_NAME=INV_STOCKITEM_CLOSING_MFG.STOCKITEM_NAME AND  INV_STOCKITEM.STOCKITEM_NAME ='" + objcls.ToString().Replace("'", "''") + "' ";
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                }
                            }
                        }

                        cmdInsert.Transaction.Commit();

                        strSQL = "select PROCESS_TYPE,STOCKGROUP_NAME,STOCKITEM_NAME,STOCKITEM_BASEUNITS,sum(cls) cls, sum(PROCESS_QUANTITY) ProcessQTY ";
                        strSQL = strSQL + "from INV_PROCESS_DEMAND_TEMP ";
                        //strSQL = strSQL + "WHERE PROCESS_NAME ='" + ooProcess[0].ToString() + "' ";
                        strSQL = strSQL + "group by PROCESS_TYPE,STOCKGROUP_NAME,STOCKITEM_NAME,STOCKITEM_BASEUNITS ";
                        cmdInsert.CommandText = strSQL;
                        dr = cmdInsert.ExecuteReader();
                        while (dr.Read())
                        {
                            RStockInformation oLedg = new RStockInformation();
                            oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();
                            oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                            oLedg.dblclsQty = Math.Abs(Convert.ToDouble(dr["cls"]));
                            oLedg.dblConvertQty = Math.Abs(Convert.ToDouble(dr["ProcessQTY"]));
                            oLedg.strUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                            oLedg.strKey = dr["PROCESS_TYPE"].ToString();
                            intCheck += 1;
                            ooAccLedger.Add(oLedg);
                        }

                    }
                }
                else
                {
                    SqlCommand cmdInsert = new SqlCommand();
                    cmdInsert.Connection = gcnMain;
                    strSQL = "SELECT m.PROCESS_TYPE,s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_BASEUNITS, 0 cls, m.PROCESS_QUANTITY ProcessQTY  from INV_MANU_PROCESS m,INV_STOCKITEM s where m.STOCKITEM_NAME =s.STOCKITEM_NAME ";
                    strSQL = strSQL + "and m.PROCESS_NAME ='" + strProcessname + "' ";
                    //strSQL = strSQL + "and m.PROCESS_TYPE <> 2 ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();
                        oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                        oLedg.dblclsQty = Math.Abs(Convert.ToDouble(dr["cls"]));
                        oLedg.dblConvertQty = Math.Abs(Convert.ToDouble(dr["ProcessQTY"]));
                        oLedg.strUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                        oLedg.strKey = dr["PROCESS_TYPE"].ToString();
                        intCheck += 1;
                        ooAccLedger.Add(oLedg);
                    }
                    dr.Close();
                }
                if (intCheck == 0)
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strGroupName = "";
                    oLedg.strItemName = "";
                    oLedg.dblclsQty = 0;
                    oLedg.dblConvertQty = 0;
                    ooAccLedger.Add(oLedg);
                }

                gcnMain.Close();
                return ooAccLedger;
            }


        }


        public List<RStockInformation> mGetProductTopSheetSalesPrice(string strDeComID, string strFdate, string strTDate)
        {
            string strSQL = null;
            SqlDataReader dr;

            List<RStockInformation> ooAccLedger = new List<RStockInformation>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmdInsert = new SqlCommand();


                string striItemName = "", strItemNameNew = "";
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;

                strSQL = "DELETE FROM INV_SALES_PRICE_RPT ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "DELETE FROM INV_FINISHED_ITEM_STATEMENT ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "SELECT STOCKITEM_NAME FROM INV_STOCKITEM  ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    striItemName = striItemName + dr["STOCKITEM_NAME"].ToString().Replace("'", "''") + "|" + 0 + "~";
                }
                dr.Close();


                string[] words = striItemName.Split('~');
                foreach (string branch in words)
                {
                    string[] words1 = branch.Split('|');
                    if (words1[0].ToString() != "")
                    {
                        strSQL = "SELECT STOCKITEM_NAME,SALES_PRICE_EFFECTIVE_DATE,SALES_PRICE_AMOUNT  from INV_SALES_PRICE ";
                        strSQL = strSQL + " WHERE STOCKITEM_NAME ='" + words1[0] + "' ";
                        strSQL = strSQL + "and SALES_PRICE_EFFECTIVE_DATE < " + Utility.cvtSQLDateString(strTDate) + " ";
                        strSQL = strSQL + "ORDER by SALES_PRICE_EFFECTIVE_DATE DESC ";
                        cmdInsert.CommandText = strSQL;
                        dr = cmdInsert.ExecuteReader();
                        if (dr.Read())
                        {
                            strItemNameNew = strItemNameNew + dr["STOCKITEM_NAME"].ToString().Replace("'", "''") + "|" + "" + "|" + dr["SALES_PRICE_AMOUNT"] + "|" + 0 + "~";
                        }
                        dr.Close();
                    }
                }

                if (strItemNameNew != "")
                {
                    string[] wordsnew = strItemNameNew.Split('~');
                    foreach (string branch in wordsnew)
                    {
                        string[] words1 = branch.Split('|');
                        if (words1[0].ToString() != "")
                        {
                            strSQL = "INSERT INTO INV_SALES_PRICE_RPT(STOCKITEM_NAME,SALES_PRICE_EFFECTIVE_DATE,SALES_PRICE_AMOUNT)";
                            strSQL = strSQL + "VALUES(";
                            strSQL = strSQL + "'" + words1[0] + "' ";
                            if (words1[1].ToString() != "")
                            {
                                strSQL = strSQL + "," + Utility.cvtSQLDateString(words1[1]) + "";
                            }
                            else
                            {
                                strSQL = strSQL + ",NULL";
                            }
                            if (words1[2].ToString() != "0")
                            {
                                strSQL = strSQL + "," + words1[2] + "";
                            }
                            else
                            {
                                strSQL = strSQL + "," + words1[3] + "";
                            }
                            strSQL = strSQL + ")";
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();
                        }
                    }
                }




                //strSQL = "INSERT INTO INV_SALES_PRICE_RPT(STOCKITEM_NAME,SALES_PRICE_EFFECTIVE_DATE,SALES_PRICE_AMOUNT) ";
                //strSQL = strSQL + "SELECT  tb1.STOCKITEM_NAME,tb1.SALES_PRICE_EFFECTIVE_DATE, tb2.SALES_PRICE_AMOUNT ";
                //strSQL = strSQL + "FROM (SELECT TOP (100) PERCENT MAX(SALES_PRICE_EFFECTIVE_DATE) AS SALES_PRICE_EFFECTIVE_DATE, STOCKITEM_NAME ";
                //strSQL = strSQL + "FROM INV_SALES_PRICE ";
                //strSQL = strSQL + "WHERE SALES_PRICE_EFFECTIVE_DATE  between  " + Utility.cvtSQLDateString(strFdate) + " ";
                //strSQL = strSQL + "AND " + Utility.cvtSQLDateString(strTDate) + " ";
                //strSQL = strSQL + "GROUP BY STOCKITEM_NAME ";
                //strSQL = strSQL + "ORDER BY STOCKITEM_NAME) AS tb1 INNER JOIN ";
                //strSQL = strSQL + "(SELECT SALES_PRICE_EFFECTIVE_DATE, STOCKITEM_NAME, SALES_PRICE_AMOUNT ";
                //strSQL = strSQL + "FROM  INV_SALES_PRICE AS INV_SALES_PRICE_1) AS tb2 ON tb1.SALES_PRICE_EFFECTIVE_DATE = tb2.SALES_PRICE_EFFECTIVE_DATE AND tb1.STOCKITEM_NAME = tb2.STOCKITEM_NAME ";
                //strSQL = strSQL + "ORDER BY tb1.STOCKITEM_NAME";
                //cmdInsert.CommandText = strSQL;
                //cmdInsert.ExecuteNonQuery();

                //strSQL = "INSERT INTO INV_SALES_PRICE_RPT(STOCKITEM_NAME,SALES_PRICE_EFFECTIVE_DATE,SALES_PRICE_AMOUNT) ";
                //strSQL = strSQL + "SELECT  tb1.STOCKITEM_NAME,tb1.SALES_PRICE_EFFECTIVE_DATE, tb2.SALES_PRICE_AMOUNT ";
                //strSQL = strSQL + "FROM (SELECT TOP (100) PERCENT MAX(SALES_PRICE_EFFECTIVE_DATE) AS SALES_PRICE_EFFECTIVE_DATE, STOCKITEM_NAME ";
                //strSQL = strSQL + "FROM INV_SALES_PRICE ";
                //strSQL = strSQL + "WHERE SALES_PRICE_EFFECTIVE_DATE  between  " + Utility.cvtSQLDateString(strFdate) + " ";
                //strSQL = strSQL + "AND " + Utility.cvtSQLDateString(strTDate) + " ";
                //strSQL = strSQL + "GROUP BY STOCKITEM_NAME ";
                //strSQL = strSQL + "ORDER BY STOCKITEM_NAME) AS tb1 INNER JOIN ";
                //strSQL = strSQL + "(SELECT SALES_PRICE_EFFECTIVE_DATE, STOCKITEM_NAME, SALES_PRICE_AMOUNT ";
                //strSQL = strSQL + "FROM  INV_SALES_PRICE AS INV_SALES_PRICE_1) AS tb2 ON tb1.SALES_PRICE_EFFECTIVE_DATE = tb2.SALES_PRICE_EFFECTIVE_DATE AND tb1.STOCKITEM_NAME = tb2.STOCKITEM_NAME ";
                //strSQL = strSQL + "ORDER BY tb1.STOCKITEM_NAME";
                //cmdInsert.CommandText = strSQL;
                //cmdInsert.ExecuteNonQuery();


                //---OPening

                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  isnull(sum(t.INV_TRAN_QUANTITY  * r.SALES_PRICE_AMOUNT),0) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
                strSQL = strSQL + "AND t.INV_VOUCHER_TYPE=0 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  0 opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND t.INV_VOUCHER_TYPE=0 ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME='Dilution' ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  abs(isnull(sum(t.INV_TRAN_QUANTITY * r.SALES_PRICE_AMOUNT),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.INV_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
                strSQL = strSQL + "and t.INV_VOUCHER_TYPE in (27,29) ";
                strSQL = strSQL + "and t.INV_INOUT_FLAG='I' ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                ////strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                ////strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs(isnull(sum(t.BILL_QUANTITY  * r.SALES_PRICE_AMOUNT),0)) *-1 as opn  ";
                ////strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t, INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                ////strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                ////strSQL = strSQL + "AND t.COMP_VOUCHER_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
                ////strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
                ////strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                ////cmdInsert.CommandText = strSQL;
                ////cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs(isnull(sum(t.BILL_QUANTITY  * r.SALES_PRICE_AMOUNT),0)) *-1 as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t, INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.COMP_VOUCHER_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
                strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  abs(isnull(sum(abs(BILL_ADD_LESS_AMOUNT)),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t  where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.COMP_VOUCHER_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
                strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  abs(isnull(sum(abs(BILL_ADD_LESS_AMOUNT)),0))*-1 as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t  where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.COMP_VOUCHER_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs( isnull(sum(t.INV_TRAN_QUANTITY * r.SALES_PRICE_AMOUNT),0))*-1 as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c,INV_STOCKGROUP g,INV_SALES_PRICE_RPT r  where s.STOCKITEM_NAME =t.STOCKITEM_NAME AND s.STOCKGROUP_NAME = g.STOCKGROUP_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + " AND  c.COMP_REF_NO=t.INV_REF_NO AND t.INV_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + " AND g.STOCKGROUP_PRIMARY_TYPE =3 and g.STOCKGROUP_SECONDARY_TYPE =0 ";
                strSQL = strSQL + " AND c.SAMPLE_STATUS=1 ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs(isnull(sum(t.BILL_QUANTITY_BONUS  * r.SALES_PRICE_AMOUNT),0))*-1 as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t, INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.COMP_VOUCHER_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE)  ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  (isnull(sum(t.INV_TRAN_QUANTITY * r.SALES_PRICE_AMOUNT),0)) *-1 as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t , INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.INV_DATE  <" + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "and t.INV_VOUCHER_TYPE =24  ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //***********

                //--PRODUCTION_QTY
                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,INWARD_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  abs(isnull(sum(t.INV_TRAN_QUANTITY * r.SALES_PRICE_AMOUNT),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "and t.INV_VOUCHER_TYPE in (27,29) ";
                strSQL = strSQL + "and t.INV_INOUT_FLAG='I' ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //--SALES_QTY

                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,SALES_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs(isnull(sum(t.BILL_QUANTITY  * r.SALES_PRICE_AMOUNT),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t, INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,COMMISSION_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  abs(isnull(sum(abs(BILL_ADD_LESS_AMOUNT)),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t  where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                // --SAMPLE_QTY
                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,SAMPLE_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs( isnull(sum(t.INV_TRAN_QUANTITY * r.SALES_PRICE_AMOUNT),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c,INV_STOCKGROUP g,INV_SALES_PRICE_RPT r  where s.STOCKITEM_NAME =t.STOCKITEM_NAME AND s.STOCKGROUP_NAME = g.STOCKGROUP_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + " AND  c.COMP_REF_NO=t.INV_REF_NO AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + " AND g.STOCKGROUP_PRIMARY_TYPE =3 and g.STOCKGROUP_SECONDARY_TYPE =0 ";
                strSQL = strSQL + " AND c.SAMPLE_STATUS=1 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                //bonus value
                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,BONUS_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs(isnull(sum(t.BILL_QUANTITY_BONUS  * r.SALES_PRICE_AMOUNT),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t, INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                //--BROKEN_QTY
                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,BROKEN_VALUE)  ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  (isnull(sum(t.INV_TRAN_QUANTITY * r.SALES_PRICE_AMOUNT),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t , INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "and t.INV_VOUCHER_TYPE =24  ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                cmdInsert.Transaction.Commit();



                strSQL = "SELECT  STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE,INWARD_VALUE,SALES_VALUE,COMMISSION_VALUE,";
                strSQL = strSQL + "BONUS_VALUE,BROKEN_VALUE,STAFF_VALUE,STAFF_COMMISSION,SAMPLE_VALUE from INV_FINISHED_ITEM_STATEMENT_VIEW ";
                //strSQL = strSQL + " WHERE STOCKGROUP_NAME ='Dilution' ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();
                    oLedg.strItemName = dr["ITEM_NAME"].ToString();
                    oLedg.dblOpnAmnt = Convert.ToDouble(dr["OPENING_VALUE"]);
                    oLedg.dblInwAmount = Math.Abs(Convert.ToDouble(dr["INWARD_VALUE"]));
                    oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["SALES_VALUE"]));
                    oLedg.dblCommissionValue = (Convert.ToDouble(dr["COMMISSION_VALUE"]));
                    oLedg.dblBonusValue = Math.Abs(Convert.ToDouble(dr["BONUS_VALUE"]));
                    oLedg.dblBrokenValue = (Convert.ToDouble(dr["BROKEN_VALUE"]));
                    oLedg.dblStaffvalue = Math.Abs(Convert.ToDouble(dr["STAFF_VALUE"]));
                    //oLedg.dblCommissionValue = Math.Abs(Convert.ToDouble(dr["STAFF_COMMISSION"]));
                    oLedg.dblSampleValue = Math.Abs(Convert.ToDouble(dr["SAMPLE_VALUE"]));


                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strGroupName = "";
                    oLedg.strItemName = "";
                    oLedg.dblOpnAmnt = 0;
                    oLedg.dblInwAmount = 0;
                    oLedg.dblOutwardAmnt = 0;
                    oLedg.dblCommissionValue = 0;
                    oLedg.dblBonusValue = 0;
                    oLedg.dblBrokenValue = 0;
                    oLedg.dblStaffvalue = 0;
                    //oLedg.dblCommissionValue = Math.Abs(Convert.ToDouble(dr["STAFF_COMMISSION"]));
                    oLedg.dblSampleValue = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();

                gcnMain.Close();
                return ooAccLedger;
            }
        }



        public List<RStockInformation> mGetStockRegister(string strDeComID, string strFdate, string strTDate, string strFromLocation, string strTLocation)
        {
            string strSQL = null;
            SqlDataReader dr;

            List<RStockInformation> ooAccLedger = new List<RStockInformation>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmdInsert = new SqlCommand();

                strSQL = strSQL + "SELECT ";
                strSQL = strSQL + "INV_STOCK_TRANSFER_DAY_BOOK.INV_DATE, substring(INV_STOCK_TRANSFER_DAY_BOOK.INV_REF_NO,7,30) INV_REF_NO, INV_STOCK_TRANSFER_DAY_BOOK.FROM_LOCATION, ";
                strSQL = strSQL + "INV_STOCK_TRANSFER_DAY_BOOK.TO_LOCATION, INV_STOCK_TRANSFER_DAY_BOOK.STOCKITEM_NAME, INV_STOCK_TRANSFER_DAY_BOOK.INV_TRAN_QUANTITY, ";
                strSQL = strSQL + "INV_STOCK_TRANSFER_DAY_BOOK.INV_TRAN_AMOUNT ";
                strSQL = strSQL + "FROM ";
                strSQL = strSQL + "INV_STOCK_TRANSFER_DAY_BOOK  ";
                strSQL = strSQL + "WHERE ";
                strSQL = strSQL + "INV_STOCK_TRANSFER_DAY_BOOK.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                if (strFromLocation != "")
                {
                    strSQL = strSQL + "AND INV_STOCK_TRANSFER_DAY_BOOK.FROM_LOCATION ='" + strFromLocation + "' ";
                }
                else if (strTLocation != "")
                {
                    strSQL = strSQL + "AND INV_STOCK_TRANSFER_DAY_BOOK.TO_LOCATION ='" + strTLocation + "' ";
                }
                strSQL = strSQL + " ORDER BY ";
                strSQL = strSQL + "INV_DATE, INV_REF_NO,STOCKITEM_NAME ASC ";



                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();

                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strInvDate = Convert.ToDateTime(dr["INV_DATE"]).ToString("dd/MM/yyyy");
                    oLedg.strRefNo = dr["INV_REF_NO"].ToString();
                    oLedg.strFromLocationName = dr["FROM_LOCATION"].ToString();
                    oLedg.strToLocationName = dr["TO_LOCATION"].ToString();
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.dblclsQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"]);
                    oLedg.dblclsAmnt = Convert.ToDouble(dr["INV_TRAN_AMOUNT"]);

                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strInvDate = "";
                    oLedg.strRefNo = "";
                    oLedg.strFromLocationName = "";
                    oLedg.strToLocationName = "";
                    oLedg.strItemName = "";
                    oLedg.dblclsQty = 0;
                    oLedg.dblclsAmnt = 0;
                }

                dr.Close();

                gcnMain.Close();
                return ooAccLedger;
            }
        }

        public List<RStockInformation> mGetGroupCommissionSubReport(string strDeComID, string strFdate, string strTDate)
        {
            string strSQL = null;
            SqlDataReader dr;

            List<RStockInformation> ooAccLedger = new List<RStockInformation>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmdInsert = new SqlCommand();

                strSQL = "SELECT INV_STOCKGROUP.STOCKGROUP_NAME, INV_GROUP_COMMISSION_MASTER.STOCKGROUP_NAME  from INV_STOCKGROUP ,INV_GROUP_COMMISSION_MASTER ";
                strSQL = strSQL + " WHERE INV_STOCKGROUP.GR_NAME =INV_GROUP_COMMISSION_MASTER.STOCKGROUP_NAME ";
                strSQL = strSQL + "AND INV_GROUP_COMMISSION_MASTER.EFFECTIVE_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();

                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strKey = dr["STOCKGROUP_NAME"].ToString();
                    oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strKey = "";
                    oLedg.strGroupName = "";
                    ooAccLedger.Add(oLedg);
                }

                dr.Close();

                gcnMain.Close();
                return ooAccLedger;
            }
        }

        public List<RStockInformation> mGetGroupCommission(string strDeComID, string strFdate, string strTDate, string strString)
        {
            string strSQL = null;
            SqlDataReader dr;

            List<RStockInformation> ooAccLedger = new List<RStockInformation>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmdInsert = new SqlCommand();

                strSQL = "SELECT ";
                strSQL = strSQL + "INV_GROUP_COMMISSION_MASTER.GROUP_COMMISSION_KEY, INV_GROUP_COMMISSION_MASTER.STOCKGROUP_NAME, INV_GROUP_COMMISSION_MASTER.COMM_STATUS, ";
                strSQL = strSQL + "INV_GROUP_COMMISSION_TRAN.AMOUNT_FORM, INV_GROUP_COMMISSION_TRAN.AMOUNT_TO, INV_GROUP_COMMISSION_TRAN.GROUP_PERCENTAGES ";
                strSQL = strSQL + "FROM ";
                strSQL = strSQL + "INV_GROUP_COMMISSION_MASTER INV_GROUP_COMMISSION_MASTER INNER JOIN INV_GROUP_COMMISSION_TRAN ";
                strSQL = strSQL + " INV_GROUP_COMMISSION_TRAN ON INV_GROUP_COMMISSION_MASTER.GROUP_COMMISSION_KEY = INV_GROUP_COMMISSION_TRAN.GROUP_COMMISSION_KEY ";
                strSQL = strSQL + "WHERE INV_GROUP_COMMISSION_MASTER.EFFECTIVE_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                if (strString != "")
                {
                    strSQL = strSQL + " AND INV_GROUP_COMMISSION_MASTER.STOCKGROUP_NAME in (" + strString + " )";
                }
                strSQL = strSQL + "ORDER BY ";
                strSQL = strSQL + " INV_GROUP_COMMISSION_MASTER.GROUP_COMMISSION_KEY, INV_GROUP_COMMISSION_MASTER.STOCKGROUP_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();

                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strKey = dr["GROUP_COMMISSION_KEY"].ToString();
                    oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();
                    oLedg.dblInwAmount = Math.Abs(Convert.ToDouble(dr["AMOUNT_FORM"]));
                    oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["AMOUNT_TO"]));
                    oLedg.dblCommissionValue = Math.Abs(Convert.ToDouble(dr["GROUP_PERCENTAGES"]));
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strKey = "";
                    oLedg.strGroupName = "";
                    oLedg.dblInwAmount = 0;
                    oLedg.dblOutwardAmnt = 0;
                    oLedg.dblCommissionValue = 0;
                    ooAccLedger.Add(oLedg);
                }

                dr.Close();

                gcnMain.Close();
                return ooAccLedger;
            }
        }


        public List<RStockInformation> mGetProductStatementCross(string strDeComID, string strFdate, string strTDate, int inttype)
        {
            string strSQL = null;
            SqlDataReader dr;

            List<RStockInformation> ooAccLedger = new List<RStockInformation>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;
                if (inttype == 1)
                {
                    strSQL = "DELETE FROM INV_PRODUCT_STATEMENT_RAW ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_PRODUCT_STATEMENT_RAW(STOCKGROUP_NAME,MATARIAL_TYPE,OUTWARD_VALUE) ";
                    strSQL = strSQL + "SELECT S.STOCKGROUP_NAME,S.MATERIAL_TYPE AS MATERIAL_TYPE  ,ABS(ISNULL(SUM(T.OUTWARD_SALES_AMOUNT),0)) AS INV_TRAN_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM S,INV_STOCKGROUP G,INV_TRAN T WHERE S.STOCKGROUP_NAME=G.STOCKGROUP_NAME AND S.STOCKITEM_NAME =T.STOCKITEM_NAME  ";
                    strSQL = strSQL + "AND G.STOCKGROUP_PRIMARY_TYPE IN (1, 2) AND T.INV_INOUT_FLAG ='O' ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE=26";
                    strSQL = strSQL + "AND S.MATERIAL_TYPE<>''";
                    strSQL = strSQL + "GROUP BY S.STOCKGROUP_NAME,S.MATERIAL_TYPE ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                else
                {
                    strSQL = "DELETE FROM INV_PRODUCT_STATEMENT_PRODUCTION ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_PRODUCT_STATEMENT_PRODUCTION(STOCKGROUP_NAME,MATARIAL_TYPE,OUTWARD_VALUE) ";
                    strSQL = strSQL + "SELECT S.STOCKGROUP_NAME,ISNULL(S.MATERIAL_TYPE,'') AS MATERIAL_TYPE  ,ABS(ISNULL(SUM(T.OUTWARD_SALES_AMOUNT),0)) AS INV_TRAN_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM S,INV_STOCKGROUP G,INV_TRAN T WHERE S.STOCKGROUP_NAME=G.STOCKGROUP_NAME AND S.STOCKITEM_NAME =T.STOCKITEM_NAME  ";
                    strSQL = strSQL + "AND G.STOCKGROUP_PRIMARY_TYPE IN (1, 2) AND T.INV_INOUT_FLAG ='O' ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE=26";
                    strSQL = strSQL + "AND S.MATERIAL_TYPE<>''";
                    strSQL = strSQL + "GROUP BY S.STOCKGROUP_NAME,S.MATERIAL_TYPE ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }

                cmdInsert.Transaction.Commit();

                if (inttype == 1)
                {

                    strSQL = "SELECT  STOCKGROUP_NAME,MATARIAL_TYPE,OUTWARD_VALUE";
                    strSQL = strSQL + " from INV_PRODUCT_STATEMENT_RAW ";

                    cmdInsert.CommandText = strSQL;
                    cmdInsert.Connection = gcnMain;
                    dr = cmdInsert.ExecuteReader();

                    while (dr.Read())
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();
                        oLedg.strMaterialType = dr["MATARIAL_TYPE"].ToString();
                        oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_VALUE"]));
                        ooAccLedger.Add(oLedg);
                    }
                    if (!dr.HasRows)
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strGroupName = "";
                        oLedg.strMaterialType = "";
                        oLedg.dblOutwardAmnt = 0;
                        ooAccLedger.Add(oLedg);
                    }
                }
                else
                {
                    strSQL = "SELECT  STOCKGROUP_NAME,'' MATARIAL_TYPE,Production,Expenses";
                    strSQL = strSQL + " from INV_PRODUCT_STATEMENT_PRODUCTION_VIEW ";

                    cmdInsert.CommandText = strSQL;
                    cmdInsert.Connection = gcnMain;
                    dr = cmdInsert.ExecuteReader();

                    while (dr.Read())
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();
                        oLedg.strMaterialType = dr["MATARIAL_TYPE"].ToString();
                        oLedg.dblInwAmount = Math.Abs(Convert.ToDouble(dr["Production"]));
                        oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["Expenses"]));
                        ooAccLedger.Add(oLedg);
                    }
                    if (!dr.HasRows)
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strGroupName = "";
                        oLedg.strMaterialType = "";
                        oLedg.dblOutwardAmnt = 0;
                        oLedg.dblInwAmount = 0;
                        ooAccLedger.Add(oLedg);
                    }

                }
                dr.Close();

                gcnMain.Close();
                return ooAccLedger;
            }
        }
        public List<RStockInformation> mGetProductTopSheet(string strDeComID, string strFdate, string strTDate)
        {
            string strSQL = null;
            SqlDataReader dr;

            List<RStockInformation> ooAccLedger = new List<RStockInformation>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;

                strSQL = "DELETE FROM INV_FINISHED_ITEM_STATEMENT ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //---OPening
                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  sum(t.INV_TRAN_AMOUNT) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,INV_STOCKGROUP g  where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME = g.STOCKGROUP_NAME and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + " AND g.STOCKGROUP_PRIMARY_TYPE =3 and g.STOCKGROUP_SECONDARY_TYPE =0 ";
                strSQL = strSQL + " AND t.INV_VOUCHER_TYPE =0  ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, sum(t.INV_TRAN_AMOUNT) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,INV_STOCKGROUP g  where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME = g.STOCKGROUP_NAME  ";
                strSQL = strSQL + "AND  t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + " AND g.STOCKGROUP_PRIMARY_TYPE =3 and g.STOCKGROUP_SECONDARY_TYPE =0 ";
                strSQL = strSQL + " AND  t.INV_TRAN_QUANTITY>0 ";
                strSQL = strSQL + "and t.INV_VOUCHER_TYPE in (27,29) ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                //strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  abs(isnull(sum(t.BILL_AMOUNT + abs(t.BILL_ADD_LESS_AMOUNT)),0)) as opn  ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, sum(t.BILL_AMOUNT)  *- 1 as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t,INV_STOCKGROUP g  where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME = g.STOCKGROUP_NAME  ";
                strSQL = strSQL + "AND  t.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + " AND g.STOCKGROUP_PRIMARY_TYPE =3 and g.STOCKGROUP_SECONDARY_TYPE =0 ";
                strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, ( isnull(sum(t.BILL_ADD_LESS_AMOUNT),0) *-1) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t,INV_STOCKGROUP g   where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME = g.STOCKGROUP_NAME  ";
                strSQL = strSQL + "AND  t.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + " AND g.STOCKGROUP_PRIMARY_TYPE =3 and g.STOCKGROUP_SECONDARY_TYPE =0 ";
                strSQL = strSQL + "and t.G_COMM_PER >0 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs( isnull(sum(t.BILL_ADD_LESS_AMOUNT),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t,INV_STOCKGROUP g   where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME = g.STOCKGROUP_NAME  ";
                strSQL = strSQL + "AND  t.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + " AND g.STOCKGROUP_PRIMARY_TYPE =3 and g.STOCKGROUP_SECONDARY_TYPE =0 ";
                strSQL = strSQL + "and t.G_COMM_PER >0 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs( isnull(sum(t.BILL_QUANTITY_BONUS* t.BILL_RATE),0)) *-1 as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t,INV_STOCKGROUP g   where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME = g.STOCKGROUP_NAME  ";
                strSQL = strSQL + "AND  t.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + " AND g.STOCKGROUP_PRIMARY_TYPE =3 and g.STOCKGROUP_SECONDARY_TYPE =0 ";
                strSQL = strSQL + " AND t.COMP_VOUCHER_TYPE =16 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE)  ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  isnull(sum(t.OUTWARD_SALES_AMOUNT),0) *-1 as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,INV_STOCKGROUP g  where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME = g.STOCKGROUP_NAME  ";
                strSQL = strSQL + "AND  t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + " AND g.STOCKGROUP_PRIMARY_TYPE =3 and g.STOCKGROUP_SECONDARY_TYPE =0 ";
                strSQL = strSQL + "and t.INV_VOUCHER_TYPE =24  ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //*****************Opn

                //--PRODUCTION_QTY
                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,INWARD_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, sum(t.INV_TRAN_AMOUNT) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,INV_STOCKGROUP g  where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME = g.STOCKGROUP_NAME AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + " AND g.STOCKGROUP_PRIMARY_TYPE =3 and g.STOCKGROUP_SECONDARY_TYPE =0 ";
                strSQL = strSQL + " AND  t.INV_TRAN_QUANTITY>0 ";
                strSQL = strSQL + "and t.INV_VOUCHER_TYPE in (27,29) ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                //--SALES_QTY
                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,SALES_VALUE) ";
                //strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  abs(isnull(sum(t.BILL_AMOUNT + abs(t.BILL_ADD_LESS_AMOUNT)),0)) as opn  ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, sum(t.BILL_AMOUNT) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t,INV_STOCKGROUP g  where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME = g.STOCKGROUP_NAME AND t.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + " AND g.STOCKGROUP_PRIMARY_TYPE =3 and g.STOCKGROUP_SECONDARY_TYPE =0 ";
                strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                // --SAMPLE_QTY

                //strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,SAMPLE_VALUE) ";
                //strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs( isnull(sum(t.INV_TRAN_AMOUNT),0)) as opn  ";
                //strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c,INV_STOCKGROUP g  where s.STOCKITEM_NAME =t.STOCKITEM_NAME AND s.STOCKGROUP_NAME = g.STOCKGROUP_NAME ";
                //strSQL = strSQL + " AND  c.COMP_REF_NO=t.INV_REF_NO AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                //strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                //strSQL = strSQL + " AND g.STOCKGROUP_PRIMARY_TYPE =3 and g.STOCKGROUP_SECONDARY_TYPE =0 ";
                //strSQL = strSQL + " AND c.SAMPLE_STATUS=1 ";
                //strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS ";
                //cmdInsert.CommandText = strSQL;
                //cmdInsert.ExecuteNonQuery();

                //commvalue
                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,COMMISSION_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs( isnull(sum(t.BILL_ADD_LESS_AMOUNT),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t,INV_STOCKGROUP g   where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME = g.STOCKGROUP_NAME AND t.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + " AND g.STOCKGROUP_PRIMARY_TYPE =3 and g.STOCKGROUP_SECONDARY_TYPE =0 ";
                strSQL = strSQL + "and t.G_COMM_PER >0 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                //bonus value
                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,BONUS_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs( isnull(sum(t.BILL_QUANTITY_BONUS* t.BILL_RATE),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t,INV_STOCKGROUP g   where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME = g.STOCKGROUP_NAME AND t.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + " AND g.STOCKGROUP_PRIMARY_TYPE =3 and g.STOCKGROUP_SECONDARY_TYPE =0 ";
                strSQL = strSQL + " AND t.COMP_VOUCHER_TYPE =16 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                //--BROKEN_QTY
                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,BROKEN_VALUE)  ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  isnull(sum(t.OUTWARD_SALES_AMOUNT),0) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,INV_STOCKGROUP g  where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME = g.STOCKGROUP_NAME AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + " AND g.STOCKGROUP_PRIMARY_TYPE =3 and g.STOCKGROUP_SECONDARY_TYPE =0 ";
                strSQL = strSQL + "and t.INV_VOUCHER_TYPE =24  ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                cmdInsert.Transaction.Commit();

                strSQL = "SELECT  STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE,INWARD_VALUE,SALES_VALUE,COMMISSION_VALUE,";
                strSQL = strSQL + "BONUS_VALUE,BROKEN_VALUE,STAFF_VALUE,STAFF_COMMISSION,SAMPLE_VALUE from INV_FINISHED_ITEM_STATEMENT_VIEW ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();
                    oLedg.strItemName = dr["ITEM_NAME"].ToString();
                    oLedg.dblOpnAmnt = Convert.ToDouble(dr["OPENING_VALUE"]);
                    oLedg.dblInwAmount = Convert.ToDouble(dr["INWARD_VALUE"]);
                    oLedg.dblOutwardAmnt = Convert.ToDouble(dr["SALES_VALUE"]);
                    oLedg.dblCommissionValue = Math.Abs(Convert.ToDouble(dr["COMMISSION_VALUE"]));
                    oLedg.dblBonusValue = Math.Abs(Convert.ToDouble(dr["BONUS_VALUE"]));
                    oLedg.dblBrokenValue = Convert.ToDouble(dr["BROKEN_VALUE"]);
                    oLedg.dblStaffvalue = Math.Abs(Convert.ToDouble(dr["STAFF_VALUE"]));
                    oLedg.dblSampleValue = Math.Abs(Convert.ToDouble(dr["SAMPLE_VALUE"]));


                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strGroupName = "";
                    oLedg.strItemName = "";
                    oLedg.dblOpnAmnt = 0;
                    oLedg.dblInwAmount = 0;
                    oLedg.dblOutwardAmnt = 0;
                    oLedg.dblCommissionValue = 0;
                    oLedg.dblBonusValue = 0;
                    oLedg.dblBrokenValue = 0;
                    oLedg.dblStaffvalue = 0;
                    oLedg.dblSampleValue = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();

                gcnMain.Close();
                return ooAccLedger;
            }
        }


        public List<RStockInformation> mGetProductStatement(string strDeComID, string strFdate, string strTDate, string strstring,
                                                            string strBranchID, int intMode, int intPhyType, int intAliasSorting)
        {
            string strSQL = null;
            SqlDataReader dr;
            List<RStockInformation> ooAccLedger = new List<RStockInformation>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;
                if (intMode == 1)
                {
                    strSQL = "DELETE FROM INV_STOCK_STATEMENT ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //---OPening
                    strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,STOCKITEM_ALIAS,OPENING_QTY) ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS,  (isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn  ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE not in (15) ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "AND s.STOCKITEM_STATUS =0 ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,STOCKITEM_ALIAS,OPENING_QTY) ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS,  isnull(sum(t.BILL_QUANTITY+t.BILL_QUANTITY_BONUS ),0)*-1 as opn  ";
                    strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND t.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    //strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
                    strSQL = strSQL + " and t.COMP_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSALES_INVOICE + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,STOCKITEM_ALIAS,OPENING_QTY) ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS, ( isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn  ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                    strSQL = strSQL + " AND  c.COMP_REF_NO=t.INV_REF_NO AND t.INV_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND c.SAMPLE_STATUS=1 ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,STOCKITEM_ALIAS,OPENING_QTY) ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS, ( isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn  ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                    strSQL = strSQL + " AND  c.COMP_REF_NO=t.INV_REF_NO AND t.INV_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND t.BILL_TRAN_AGST_VOUCHER_TYPE=50 ";// sample class
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //strSQL = " INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,STOCKITEM_ALIAS,CONVERT_QTY) ";
                    //strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS,  (isnull(sum(t.INV_TRAN_QUANTITY),0))  as opn   ";
                    //strSQL = strSQL + " from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                    //strSQL = strSQL + "AND t.INV_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
                    //strSQL = strSQL + "and t.INV_INOUT_FLAG ='O' ";
                    //strSQL = strSQL + "and t.CONVERSION_TYPE =1 ";
                    //strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    //if (strstring != "")
                    //{
                    //    strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    //}
                    //strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS ";
                    //cmdInsert.CommandText = strSQL;
                    //cmdInsert.ExecuteNonQuery();

                    //--PRODUCTION_QTY
                    strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,STOCKITEM_ALIAS,PRODUCTION_QTY) ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS,  (isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn  ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE in (27,29) ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,STOCKITEM_ALIAS,PRODUCTION_QTY) ";
                    //strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS,  (isnull(sum(t.INV_TRAN_QUANTITY),0)) *-1  as opn   ";
                    //strSQL = strSQL + " from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                    //strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    //strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    //strSQL = strSQL + "and t.INV_INOUT_FLAG ='O' ";
                    //strSQL = strSQL + "and t.CONVERSION_TYPE =1 ";
                    //strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    //if (strstring != "")
                    //{
                    //    strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    //}
                    //strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS ";
                    //cmdInsert.CommandText = strSQL;
                    //cmdInsert.ExecuteNonQuery();

                    //--SALES_QTY
                    strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,STOCKITEM_ALIAS,SALES_QTY) ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS,  abs(isnull(sum(t.BILL_QUANTITY+t.BILL_QUANTITY_BONUS ),0)) as opn  ";
                    strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND t.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    //strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
                    strSQL = strSQL + " and t.COMP_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSALES_INVOICE + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //--SAMPLE_QTY
                    strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,STOCKITEM_ALIAS,SAMPLE_QTY) ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS, abs( isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn  ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                    strSQL = strSQL + " AND  c.COMP_REF_NO=t.INV_REF_NO AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + " AND c.SAMPLE_STATUS=1 ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,STOCKITEM_ALIAS,SAMPLE_QTY) ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS, abs( isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn  ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                    strSQL = strSQL + " AND  c.COMP_REF_NO=t.INV_REF_NO AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + " AND t.BILL_TRAN_AGST_VOUCHER_TYPE=50 ";// sample class
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    //--RETURN_QTY
                    strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,STOCKITEM_ALIAS,RETURN_QTY) ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS,  abs(isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn  ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + " and t.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSALES_RETURN + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //--CONVERT_QTY
                    strSQL = " INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,STOCKITEM_ALIAS,CONVERT_QTY) ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS,  (isnull(sum(t.INV_TRAN_QUANTITY),0))  as opn   ";
                    strSQL = strSQL + " from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "and t.INV_INOUT_FLAG ='O' ";
                    strSQL = strSQL + "and t.CONVERSION_TYPE =1 ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //--BROKEN_QTY
                    strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,STOCKITEM_ALIAS,BROKEN_QTY)  ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS,  (isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn  ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + " and t.INV_VOUCHER_TYPE  =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //--PHY_STOCK_QTY
                    if (intPhyType == 1)
                    {
                        strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,STOCKITEM_ALIAS,PHY_STOCK_QTY)  ";
                        strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS,  (isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn   ";
                        strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                        strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                        strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                        strSQL = strSQL + " and t.INV_VOUCHER_TYPE  =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_PHYSICAL + " ";
                        strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                        if (strstring != "")
                        {
                            strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                        }
                        if (strBranchID == "0001")
                        {
                            strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                        }
                        strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS  ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();

                        //--STOCK_TRANSFER_QTY
                        strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,STOCKITEM_ALIAS,STOCK_TRANSFER_QTY)  ";
                        strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS,  abs(isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn   ";
                        strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                        strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                        strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                        //strSQL = strSQL + "and t.INV_VOUCHER_TYPE =23 ";
                        strSQL = strSQL + " and t.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                        strSQL = strSQL + "and t.INV_INOUT_FLAG ='O'  ";
                        strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                        if (strstring != "")
                        {
                            strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                        }
                        if (strBranchID == "0001")
                        {
                            strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                        }
                        strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS  ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();

                        //--STOCK_TRANSFER_QTY
                        strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,STOCKITEM_ALIAS,STOCK_TRANSFER_IN_QTY)  ";
                        strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS,  abs(isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn   ";
                        strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                        strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                        strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                        //strSQL = strSQL + "and t.INV_VOUCHER_TYPE =23 ";
                        strSQL = strSQL + " and t.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                        strSQL = strSQL + "and t.INV_INOUT_FLAG ='I'  ";
                        strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                        if (strstring != "")
                        {
                            strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                        }
                        if (strBranchID == "0001")
                        {
                            strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                        }
                        strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS  ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }

                    //--CONSUMPTION_QTY
                    strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,STOCKITEM_ALIAS,CONSUMPTION_QTY)  ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS,  (isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn  ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    //strSQL = strSQL + "and t.INV_VOUCHER_TYPE =26  ";
                    strSQL = strSQL + " and t.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "AND  t.CONVERSION_TYPE =0 ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                }
                else if (intMode == 2)
                {
                    strSQL = "DELETE FROM INV_STOCK_PACK_SIZE ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //--opn
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,OPENING_QTY) ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME,  isnull(sum(t.INV_TRAN_QUANTITY),0) as opn   ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "AND s.STOCKCATEGORY_NAME is not null ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE =0 ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }

                    strSQL = strSQL + "AND s.STOCKITEM_STATUS =0 ";
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,OPENING_QTY) ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME,  (isnull(sum(t.INV_TRAN_QUANTITY),0) )as opn   ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE IN (27,29) ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "AND s.STOCKCATEGORY_NAME is not null ";
                    strSQL = strSQL + " AND t.INV_INOUT_FLAG ='I' ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,OPENING_QTY) ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME,  isnull(sum(t.INV_TRAN_QUANTITY),0) as opn ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                    strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " and t.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + " and t.INV_INOUT_FLAG ='I' ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "and t.CONVERSION_TYPE =0 ";
                    strSQL = strSQL + "AND s.STOCKCATEGORY_NAME is not null ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();


                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,OPENING_QTY) ";
                    strSQL = strSQL + "select  s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME,isnull(sum(t.INV_TRAN_QUANTITY),0) as opn  from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "and t.CONVERSION_TYPE =0 ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,OPENING_QTY) ";
                    strSQL = strSQL + "select  s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME,abs( isnull(sum(t.INV_TRAN_QUANTITY),0)) *-1 as opn  from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c ";
                    strSQL = strSQL + "where s.STOCKITEM_NAME =t.STOCKITEM_NAME   AND  c.COMP_REF_NO=t.INV_REF_NO ";
                    strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND c.SAMPLE_STATUS=1 ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "and s.STOCKCATEGORY_NAME is not null ";
                    strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                  
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,OPENING_QTY) ";
                    strSQL = strSQL + "select   s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME, isnull(sum(t.BILL_QUANTITY+t.BILL_QUANTITY_BONUS ),0) *-1as opn   from INV_STOCKITEM s,ACC_BILL_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME   ";
                    strSQL = strSQL + "AND t.COMP_VOUCHER_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "and t.COMP_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSALES_INVOICE + " ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + " and s.STOCKCATEGORY_NAME is not null ";
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME  ";

                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,OPENING_QTY) ";
                    strSQL = strSQL + " select  s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME, (isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn   from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " "; ;
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "and t.CONVERSION_TYPE =0 ";
                    strSQL = strSQL + "and t.INV_INOUT_FLAG ='O' ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "and s.STOCKCATEGORY_NAME is not null ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,OPENING_QTY) ";
                    strSQL = strSQL + " select  s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME, (isnull(sum(t.INV_TRAN_QUANTITY),0))  as opn   from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "and t.CONVERSION_TYPE =1 ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "and s.STOCKCATEGORY_NAME is not null ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,OPENING_QTY) ";
                    strSQL = strSQL + " select  s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME, (isnull(sum(t.INV_TRAN_QUANTITY),0))  as opn   from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "and t.CONVERSION_TYPE =0 ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "and s.STOCKCATEGORY_NAME is not null ";
                    strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();



                    //--Received
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,RECIVED_QTY) ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME,  (isnull(sum(t.INV_TRAN_QUANTITY),0) )as opn   ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE IN (27,29) ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "AND s.STOCKCATEGORY_NAME is not null ";
                    strSQL = strSQL + " AND t.INV_INOUT_FLAG ='I' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,RECIVED_QTY) ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME,  abs(isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + " and t.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + " and t.INV_INOUT_FLAG ='I' ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "AND s.STOCKCATEGORY_NAME is not null ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //Convert

                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,CONVERT_QTY) ";
                    strSQL = strSQL + "select  s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME,isnull(sum(t.INV_TRAN_QUANTITY),0)*-1 as opn  from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "and t.CONVERSION_TYPE =0 ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                   
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,CONVERT_QTY) ";
                    strSQL = strSQL + "select  s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME,abs( isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn  from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c ";
                    strSQL = strSQL + "where s.STOCKITEM_NAME =t.STOCKITEM_NAME   AND  c.COMP_REF_NO=t.INV_REF_NO ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "AND c.SAMPLE_STATUS=1 ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "and s.STOCKCATEGORY_NAME is not null ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                  
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,CONVERT_QTY) ";
                    strSQL = strSQL + "select   s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME, isnull(sum(t.BILL_QUANTITY+t.BILL_QUANTITY_BONUS ),0) as opn   from INV_STOCKITEM s,ACC_BILL_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME   ";
                    strSQL = strSQL + "AND t.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "and t.COMP_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSALES_INVOICE + " ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + " and s.STOCKCATEGORY_NAME is not null ";
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME  ";

                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,CONVERT_QTY) ";
                    strSQL = strSQL + " select  s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME, (isnull(sum(t.INV_TRAN_QUANTITY),0)) *-1 as opn   from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "and t.CONVERSION_TYPE =0 ";
                    strSQL = strSQL + "and t.INV_INOUT_FLAG ='O' ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                   
                    strSQL = strSQL + "and s.STOCKCATEGORY_NAME is not null ";
                    strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,CONVERT_QTY) ";
                    strSQL = strSQL + " select  s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME, (isnull(sum(t.INV_TRAN_QUANTITY),0)) *-1 as opn   from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "and t.CONVERSION_TYPE =1 ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "and s.STOCKCATEGORY_NAME is not null ";
                  
                    strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,CONVERT_QTY) ";
                    strSQL = strSQL + " select  s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME, (isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn   from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "and t.CONVERSION_TYPE =0 ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                   
                    strSQL = strSQL + "and s.STOCKCATEGORY_NAME is not null ";
                    strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();



                }
                else
                {
                    strSQL = "DELETE FROM INV_STOCK_PACK_SIZE ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //--opn
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,OPENING_QTY) ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.POWER_CLASS,  abs(isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn   ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE =0 ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "AND s.STOCKITEM_STATUS =0 ";
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.POWER_CLASS,s.STOCKITEM_ALIAS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,OPENING_QTY) ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.POWER_CLASS,  (isnull(sum(t.INV_TRAN_QUANTITY),0) )as opn   ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE IN (27,29) ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    strSQL = strSQL + " AND t.INV_INOUT_FLAG ='I' ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                   
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.POWER_CLASS,s.STOCKITEM_ALIAS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,OPENING_QTY) ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.POWER_CLASS,  abs(isnull(sum(t.INV_TRAN_QUANTITY),0)) *-1 as opn ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                    strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " and t.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + " and t.INV_INOUT_FLAG ='I' ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.POWER_CLASS,s.STOCKITEM_ALIAS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //Convert
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,OPENING_QTY) ";
                    strSQL = strSQL + "select  s.STOCKGROUP_NAME,s.POWER_CLASS,abs(isnull(sum(t.INV_TRAN_QUANTITY),0)) *-1 as opn ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                    strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    //strSQL = strSQL + "and t.INV_VOUCHER_TYPE = 23  ";
                    strSQL = strSQL + " and t.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "and t.INV_INOUT_FLAG ='O' ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.POWER_CLASS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,OPENING_QTY) ";
                    strSQL = strSQL + "select  s.STOCKGROUP_NAME,s.POWER_CLASS,isnull(sum(t.INV_TRAN_QUANTITY),0) as opn ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                    strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " and t.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + " and t.INV_INOUT_FLAG ='I' ";
                    strSQL = strSQL + "and t.CONVERSION_TYPE =1 ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                   
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    //--and t.CONVERSION_TYPE =1
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.POWER_CLASS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,OPENING_QTY) ";
                    strSQL = strSQL + "select  s.STOCKGROUP_NAME,s.POWER_CLASS,isnull(sum(t.INV_TRAN_QUANTITY),0)  as opn  ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                    strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE in (27,29)  ";
                    strSQL = strSQL + "and t.INV_INOUT_FLAG ='O' ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    strSQL = strSQL + "and t.CONVERSION_TYPE =1 ";
                   
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.POWER_CLASS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,OPENING_QTY) ";
                    strSQL = strSQL + "select  s.STOCKGROUP_NAME,s.POWER_CLASS,isnull(sum(t.INV_TRAN_QUANTITY),0) as opn  from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                   
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.POWER_CLASS  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,OPENING_QTY) ";
                    strSQL = strSQL + "select  s.STOCKGROUP_NAME,s.POWER_CLASS,abs( isnull(sum(t.INV_TRAN_QUANTITY),0)) *-1 as opn  from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c ";
                    strSQL = strSQL + "where s.STOCKITEM_NAME =t.STOCKITEM_NAME   AND  c.COMP_REF_NO=t.INV_REF_NO ";
                    strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND c.SAMPLE_STATUS=1 ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                   
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.POWER_CLASS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,OPENING_QTY) ";
                    strSQL = strSQL + "select  s.STOCKGROUP_NAME,s.POWER_CLASS,abs( isnull(sum(t.INV_TRAN_QUANTITY),0)) *-1 as opn  from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c  ";
                    strSQL = strSQL + "where s.STOCKITEM_NAME =t.STOCKITEM_NAME   ";
                    strSQL = strSQL + "AND  c.COMP_REF_NO=t.INV_REF_NO ";
                    strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND t.BILL_TRAN_AGST_VOUCHER_TYPE=" + (int)Utility.VOUCHER_TYPE.vt_SAMPLE_CLASS + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.POWER_CLASS  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,OPENING_QTY) ";
                    strSQL = strSQL + "select   s.STOCKGROUP_NAME,s.POWER_CLASS, isnull(sum(t.BILL_QUANTITY+t.BILL_QUANTITY_BONUS ),0) *-1 as opn   from INV_STOCKITEM s,ACC_BILL_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME   ";
                    strSQL = strSQL + "AND t.COMP_VOUCHER_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "and t.COMP_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSALES_INVOICE + " ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + " and s.POWER_CLASS is not null ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.POWER_CLASS  ";

                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,OPENING_QTY) ";
                    strSQL = strSQL + " select  s.STOCKGROUP_NAME,s.POWER_CLASS, (isnull(sum(t.INV_TRAN_QUANTITY),0)) *-1as opn   from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION + " ";
                    strSQL = strSQL + "and t.INV_INOUT_FLAG ='O' ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE = 26 ";
                    strSQL = strSQL + "and t.CONVERSION_TYPE =0 ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.POWER_CLASS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,OPENING_QTY) ";
                    strSQL = strSQL + " select  s.STOCKGROUP_NAME,s.POWER_CLASS, (isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn   from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION + " ";
                    strSQL = strSQL + "and t.INV_INOUT_FLAG ='O' ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE = 26 ";
                    strSQL = strSQL + "and t.CONVERSION_TYPE =1 ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.POWER_CLASS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();


                    //--Received
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,RECIVED_QTY) ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.POWER_CLASS,  (isnull(sum(t.INV_TRAN_QUANTITY),0) )as opn   ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE IN (27,29) ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    strSQL = strSQL + " AND t.INV_INOUT_FLAG ='I' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.POWER_CLASS,s.STOCKITEM_ALIAS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,RECIVED_QTY) ";
                    strSQL = strSQL + "select s.STOCKGROUP_NAME,s.POWER_CLASS,  abs(isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + " and t.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + " and t.INV_INOUT_FLAG ='I' ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                   if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.POWER_CLASS,s.STOCKITEM_ALIAS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //Convert
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,CONVERT_QTY) ";
                    strSQL = strSQL + "select  s.STOCKGROUP_NAME,s.POWER_CLASS,abs(isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    //strSQL = strSQL + "and t.INV_VOUCHER_TYPE = 23  ";
                    strSQL = strSQL + " and t.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "and t.INV_INOUT_FLAG ='O' ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.POWER_CLASS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,CONVERT_QTY) ";
                    strSQL = strSQL + "select  s.STOCKGROUP_NAME,s.POWER_CLASS,isnull(sum(t.INV_TRAN_QUANTITY),0)*-1 as opn ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + " and t.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + " and t.INV_INOUT_FLAG ='I' ";
                    strSQL = strSQL + "and t.CONVERSION_TYPE =1 ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    //--and t.CONVERSION_TYPE =1
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.POWER_CLASS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,CONVERT_QTY) ";
                    strSQL = strSQL + "select  s.STOCKGROUP_NAME,s.POWER_CLASS,isnull(sum(t.INV_TRAN_QUANTITY),0) *-1 as opn  ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE in (27,29)  ";
                    strSQL = strSQL + "and t.INV_INOUT_FLAG ='O' ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    strSQL = strSQL + "and t.CONVERSION_TYPE =1 ";
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.POWER_CLASS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,CONVERT_QTY) ";
                    strSQL = strSQL + "select  s.STOCKGROUP_NAME,s.POWER_CLASS,isnull(sum(t.INV_TRAN_QUANTITY),0)*-1 as opn  from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.POWER_CLASS  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,CONVERT_QTY) ";
                    strSQL = strSQL + "select  s.STOCKGROUP_NAME,s.POWER_CLASS,abs( isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn  from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c ";
                    strSQL = strSQL + "where s.STOCKITEM_NAME =t.STOCKITEM_NAME   AND  c.COMP_REF_NO=t.INV_REF_NO ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "AND c.SAMPLE_STATUS=1 ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.POWER_CLASS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,CONVERT_QTY) ";
                    strSQL = strSQL + "select  s.STOCKGROUP_NAME,s.POWER_CLASS,abs( isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn  from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c  ";
                    strSQL = strSQL + "where s.STOCKITEM_NAME =t.STOCKITEM_NAME   ";
                    strSQL = strSQL + "AND  c.COMP_REF_NO=t.INV_REF_NO ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "AND t.BILL_TRAN_AGST_VOUCHER_TYPE=" + (int)Utility.VOUCHER_TYPE.vt_SAMPLE_CLASS + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.POWER_CLASS  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,CONVERT_QTY) ";
                    strSQL = strSQL + "select   s.STOCKGROUP_NAME,s.POWER_CLASS, isnull(sum(t.BILL_QUANTITY+t.BILL_QUANTITY_BONUS ),0) as opn   from INV_STOCKITEM s,ACC_BILL_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME   ";
                    strSQL = strSQL + "AND t.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "and t.COMP_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSALES_INVOICE + " ";
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + " and s.POWER_CLASS is not null ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.POWER_CLASS  ";

                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,CONVERT_QTY) ";
                    strSQL = strSQL + " select  s.STOCKGROUP_NAME,s.POWER_CLASS, (isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn   from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION + " ";
                    strSQL = strSQL + "and t.INV_INOUT_FLAG ='O' ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE = 26 ";
                    strSQL = strSQL + "and t.CONVERSION_TYPE =0 ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.POWER_CLASS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_PACK_SIZE(STOCKGROUP_NAME,PACK_SIZE_NAME,CONVERT_QTY) ";
                    strSQL = strSQL + " select  s.STOCKGROUP_NAME,s.POWER_CLASS, (isnull(sum(t.INV_TRAN_QUANTITY),0))*-1 as opn   from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION + " ";
                    strSQL = strSQL + "and t.INV_INOUT_FLAG ='O' ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE = 26 ";
                    strSQL = strSQL + "and t.CONVERSION_TYPE =1 ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strstring != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                    }
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.POWER_CLASS ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }


                cmdInsert.Transaction.Commit();
                if (intMode == 1)
                {

                    strSQL = "SELECT  STOCKGROUP_NAME,ITEM_NAME,STOCKITEM_ALIAS,OPENING_QTY,PRODUCTION_QTY,SALES_QTY,SAMPLE_QTY,";
                    strSQL = strSQL + "RETURN_QTY,CONVERT_QTY,BROKEN_QTY,PHY_STOCK_QTY,STOCK_TRANSFER_QTY,STOCK_TRANSFER_IN_QTY,CONSUMPTION_QTY from INV_STOCK_STATEMENT_VIEW";
                    if (intAliasSorting == 0)
                    {
                        strSQL = strSQL + " ORDER by ITEM_NAME ";
                    }
                    else
                    {
                        strSQL = strSQL + " ORDER by STOCKITEM_ALIAS ";
                    }

                    cmdInsert.CommandText = strSQL;
                    cmdInsert.Connection = gcnMain;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();
                        oLedg.strItemName = dr["ITEM_NAME"].ToString();
                        oLedg.strItemAlias = dr["STOCKITEM_ALIAS"].ToString();
                        oLedg.dblOpnQty = Math.Abs(Convert.ToDouble(dr["OPENING_QTY"]));
                        oLedg.dblInwQty = Math.Abs(Convert.ToDouble(dr["PRODUCTION_QTY"]));
                        oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["SALES_QTY"]));
                        oLedg.dblSampleQty = Math.Abs(Convert.ToDouble(dr["SAMPLE_QTY"]));
                        oLedg.dblReturnQty = Math.Abs(Convert.ToDouble(dr["RETURN_QTY"]));
                        oLedg.dblConvertQty = (Convert.ToDouble(dr["CONVERT_QTY"]));
                        oLedg.dblBroken = (Convert.ToDouble(dr["BROKEN_QTY"]));
                        oLedg.dblPhyStockQty = (Convert.ToDouble(dr["PHY_STOCK_QTY"]));
                        oLedg.dblTranserOutQty = Math.Abs(Convert.ToDouble(dr["STOCK_TRANSFER_QTY"]));
                        oLedg.dblStockTranserQty = Math.Abs(Convert.ToDouble(dr["STOCK_TRANSFER_IN_QTY"]));
                        oLedg.dblConsumptionQty = Math.Abs(Convert.ToDouble(dr["CONSUMPTION_QTY"]));

                        ooAccLedger.Add(oLedg);
                    }
                    if (!dr.HasRows)
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strGroupName = "";
                        oLedg.strItemName = "";
                        oLedg.strItemAlias = "";
                        oLedg.dblOpnQty = 0;
                        oLedg.dblInwQty = 0;
                        oLedg.dblOutWardQty = 0;
                        oLedg.dblSampleQty = 0;
                        oLedg.dblReturnQty = 0;
                        oLedg.dblConvertQty = 0;
                        oLedg.dblBroken = 0;
                        oLedg.dblPhyStockQty = 0;
                        oLedg.dblStockTranserQty = 0;
                        oLedg.dblConsumptionQty = 0;
                        ooAccLedger.Add(oLedg);
                    }
                }
                else
                {
                    strSQL = "SELECT  STOCKGROUP_NAME,PACK_SIZE_NAME,'' STOCKITEM_ALIAS,OPENING_QTY,RECIVED_QTY,CONVERT_QTY ";
                    strSQL = strSQL + " from INV_STOCK_PACK_SIZE_VIEW ";
                    strSQL = strSQL + "WHERE PACK_SIZE_NAME IS NOT NULL ";

                    cmdInsert.CommandText = strSQL;
                    cmdInsert.Connection = gcnMain;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();
                        // oLedg.strItemName = dr["PACK_SIZE_NAME"].ToString();
                        if (dr["PACK_SIZE_NAME"].ToString() != "")
                        {
                            oLedg.strItemName = dr["PACK_SIZE_NAME"].ToString();
                        }
                        else
                        {
                            oLedg.strItemName = "";
                        }
                        if (dr["STOCKITEM_ALIAS"].ToString() != "")
                        {
                            oLedg.strItemAlias = dr["STOCKITEM_ALIAS"].ToString();
                        }
                        else
                        {
                            oLedg.strItemAlias = "";
                        }
                        oLedg.dblOpnQty = Math.Abs(Convert.ToDouble(dr["OPENING_QTY"]));
                        oLedg.dblInwQty = Math.Abs(Convert.ToDouble(dr["RECIVED_QTY"]));
                        oLedg.dblConsumptionQty = Math.Abs(Convert.ToDouble(dr["CONVERT_QTY"]));
                        ooAccLedger.Add(oLedg);
                    }
                    if (!dr.HasRows)
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strGroupName = "";
                        oLedg.strItemName = "";
                        oLedg.strItemAlias = "";
                        oLedg.dblOpnQty = 0;
                        oLedg.dblInwQty = 0;
                        oLedg.dblConsumptionQty = 0;
                        ooAccLedger.Add(oLedg);
                    }
                }



                dr.Close();

                gcnMain.Close();
                return ooAccLedger;
            }
        }



        public List<RStockInformation> mGetLocationWiseConsumtion(string strDeComID, string strFdate, string strTDate, string strstring)
        {
            string strSQL = null;
            SqlDataReader dr;
            SqlCommand cmdDr = new SqlCommand();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                List<RStockInformation> ooAccLedger = new List<RStockInformation>();
                strSQL = "SELECT ";
                strSQL = strSQL + "INV_STOCKITEM.STOCKGROUP_NAME, INV_STOCKITEM.MATERIAL_TYPE,";
                strSQL = strSQL + "INV_TRAN.STOCKITEM_NAME, INV_TRAN.GODOWNS_NAME, INV_TRAN.OUTWARD_SALES_AMOUNT,INV_TRAN.INV_TRAN_AMOUNT,INV_TRAN.OUTWARD_QUANTITY ";
                strSQL = strSQL + ",INV_STOCKITEM.STOCKITEM_BASEUNITS,INV_STOCKGROUP.STOCKGROUP_PRIMARY  ";
                strSQL = strSQL + "FROM  INV_STOCKITEM AS INV_STOCKITEM INNER JOIN ";
                strSQL = strSQL + "INV_TRAN AS INV_TRAN ON INV_STOCKITEM.STOCKITEM_NAME = INV_TRAN.STOCKITEM_NAME INNER JOIN ";
                strSQL = strSQL + "INV_MASTER AS INV_MASTER ON INV_TRAN.INV_REF_NO = INV_MASTER.INV_REF_NO INNER JOIN ";
                strSQL = strSQL + "INV_STOCKGROUP ON INV_STOCKITEM.STOCKGROUP_NAME = INV_STOCKGROUP.STOCKGROUP_NAME  ";
                strSQL = strSQL + "WHERE ";
                strSQL = strSQL + "(INV_MASTER.INV_VOUCHER_TYPE = 26) AND  ";
                strSQL = strSQL + "INV_TRAN.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "and INV_STOCKITEM.MATERIAL_TYPE is not null ";
                if (strstring != "")
                {
                    // strSQL = strSQL + "AND INV_STOCKITEM.STOCKGROUP_NAME in (" + strstring + ") ";
                    strSQL = strSQL + "AND INV_TRAN.GODOWNS_NAME in (" + strstring + ") ";
                }
                strSQL = strSQL + "ORDER BY ";
                strSQL = strSQL + "INV_TRAN.GODOWNS_NAME,INV_STOCKITEM.STOCKGROUP_NAME, INV_STOCKITEM.MATERIAL_TYPE, INV_TRAN.STOCKITEM_NAME ";

                cmdDr.CommandText = strSQL;
                cmdDr.Connection = gcnMain;
                dr = cmdDr.ExecuteReader();
                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strLocationName = dr["GODOWNS_NAME"].ToString();
                    oLedg.strGroupPrimary = dr["STOCKGROUP_PRIMARY"].ToString();
                    oLedg.strUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();
                    oLedg.strMaterialType = dr["MATERIAL_TYPE"].ToString();
                    oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_SALES_AMOUNT"]));
                    oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"]));
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strLocationName = "";
                    oLedg.strItemName = "";
                    oLedg.strGroupPrimary = "";
                    oLedg.strUnit = "";
                    oLedg.strGroupName = "";
                    oLedg.strMaterialType = "";
                    oLedg.dblOutwardAmnt = 0;
                    oLedg.dblOutWardQty = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();

                gcnMain.Close();
                return ooAccLedger;
            }
        }


        public List<RStockInformation> mGetStoreLedger(string strDeComID, string strFdate, string strTDate, string strString, string strLocatiion)
        {
            string strSQL = null;
            double dblOpenQty = 0, dblOpeningAmt = 0, dblOpnRate = 0, dblInwQty = 0, dblInwAmnt = 0,
                                       dblInwardRate = 0, dblCostRate = 0, dblOutQty = 0, dblOutAmnt = 0,
                                            dblOutRate = 0, dblclsQty = 0, dblclsAmnt = 0, dblOpenValue = 0, dblSalesAmnt = 0;
            string strstringNew = "", strRefNo = "", strLedgerName = "", strDate = "";
            int intvtype;
            string strUNIT = Utility.gGetBaseUOM(strDeComID, strString);
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                

                SqlCommand cmdInsert = new SqlCommand();

                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;
                strSQL = "DELETE FROM ACC_STOCK_LEDGER_TEMP ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "SELECT  ' 'INV_REF_NO,' ' LEDGER_NAME,'' INV_DATE,0 INV_VOUCHER_TYPE, (case when ISNULL(SUM(INV_TRAN_QUANTITY),0)>0 then ISNULL(SUM(INV_TRAN_QUANTITY),0)else 0 end) OPIN ,";
                strSQL = strSQL + " (case when ISNULL(SUM(INV_TRAN_QUANTITY),0)>0 then ISNULL(SUM(INV_TRAN_AMOUNT),0)else 0 end) AS TOTALOPIN,";
                strSQL = strSQL + " 0 INWARD_QUANTITY,0 INWARD_AMOUNT,0 OUTWARD_QUANTITY,0 OUTWARD_SALES_AMOUNT,0 OUTWARD_COST_AMOUNT,ISNULL(SUM(INV_TRAN_QUANTITY),0) as RQTY,";
                strSQL = strSQL + " (case when ISNULL(SUM(INV_TRAN_QUANTITY),0)>0 then ISNULL(SUM(INV_TRAN_AMOUNT),0)else 0 end) AS Ramnt";
                strSQL = strSQL + " From INV_TRAN ";
                strSQL = strSQL + "WHERE (INV_DATE < " + Utility.cvtSQLDateString(strFdate) + ")  ";
                strSQL = strSQL + " AND INV_TRAN.STOCKITEM_NAME = '" + strString + "' ";
                if (strLocatiion != "")
                {
                    //strSQL = strSQL + " AND INV_TRAN.INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + " AND GODOWNS_NAME = '" + strLocatiion + "' ";
                }
                //strSQL = strSQL + " GROUP by INV_TRAN_SERIAL";
                strSQL = strSQL + " Union All";
                strSQL = strSQL + " SELECT INV_TRAN.INV_REF_NO,ACC_LEDGER.LEDGER_NAME_MERZE ,INV_TRAN.INV_DATE,INV_TRAN.INV_VOUCHER_TYPE, 0 OPIN,0 TOTALOPIN, INV_TRAN.INWARD_QUANTITY,";
                strSQL = strSQL + " INV_TRAN.INWARD_AMOUNT , INV_TRAN.OUTWARD_QUANTITY, INV_TRAN.OUTWARD_SALES_AMOUNT, INV_TRAN.OUTWARD_COST_AMOUNT";
                strSQL = strSQL + " ,(INV_TRAN.INWARD_QUANTITY- abs(INV_TRAN.OUTWARD_QUANTITY)) AS RQTY,ABS(INV_TRAN.INWARD_AMOUNT )-ABS(INV_TRAN.OUTWARD_COST_AMOUNT) as Ramnt";
                strSQL = strSQL + " FROM INV_TRAN AS INV_TRAN LEFT OUTER JOIN ACC_COMPANY_VOUCHER AS ACC_COMPANY_VOUCHER ON INV_TRAN.INV_REF_NO = ACC_COMPANY_VOUCHER.COMP_REF_NO LEFT OUTER JOIN ";
                strSQL = strSQL + "ACC_LEDGER ON ACC_COMPANY_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                strSQL = strSQL + " WHERE INV_TRAN.STOCKITEM_NAME = '" + strString + "' ";
                //strSQL = strSQL + " AND INV_TRAN.INV_REF_NO = 'MC0001MC#000099' ";
                if (strLocatiion != "")
                {
                    strSQL = strSQL + " AND INV_TRAN.GODOWNS_NAME = '" + strLocatiion + "' ";
                }
                strSQL = strSQL + " AND  INV_TRAN.INV_DATE >= " + Utility.cvtSQLDateString(strFdate) + " AND ";
                strSQL = strSQL + " INV_TRAN.INV_DATE <= " + Utility.cvtSQLDateString(strTDate) + " ";
                //''strSQL = strSQL + " ORDER BY INV_TRAN.INV_DATE ASC,INV_TRAN.INWARD_QUANTITY DESC,INV_TRAN.INV_REF_NO ASC";
                strSQL = strSQL + " ORDER BY INV_DATE ASC,INWARD_QUANTITY DESC,INV_REF_NO ASC ";
              
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {

                    strRefNo = dr["INV_REF_NO"].ToString();
                    //if (strRefNo == "MC0001MC#001400")
                    //{
                    //    strRefNo = strRefNo;
                    //}
                    strLedgerName = dr["LEDGER_NAME"].ToString();
                    strDate = Convert.ToDateTime(dr["INV_DATE"]).ToString("dd/MM/yyyy");
                    dblOpenQty = Math.Round( Convert.ToDouble(dr["OPIN"]),3);
                    intvtype = Convert.ToInt16(dr["INV_VOUCHER_TYPE"]);
                    dblOpeningAmt = Math.Round(Convert.ToDouble(dr["TOTALOPIN"]),2);
                    if (dblOpenQty > 0)
                    {
                        dblOpnRate = Math.Round(dblOpeningAmt / dblOpenQty, 2);
                    }
                    dblInwQty = Math.Round(Convert.ToDouble(dr["INWARD_QUANTITY"]),3);
                    dblInwAmnt = Math.Round(Convert.ToDouble(dr["INWARD_AMOUNT"]),4);
                    if (dblInwQty > 0)
                    {
                        dblInwardRate = Math.Round(dblInwAmnt / dblInwQty, 2);
                    }
                    if (dblInwQty > 0)
                    {
                        dblCostRate = Math.Round(dblInwAmnt / dblInwQty, 2);
                    }
                    else
                    {
                        if (dblOpenQty > 0)
                        {
                            dblCostRate = Math.Round(dblOpeningAmt / dblOpenQty, 2);
                        }
                    }
                    dblOutQty = Math.Round(Convert.ToDouble(dr["OUTWARD_QUANTITY"]),3);
                    dblOutAmnt  = Math.Round(Convert.ToDouble(dr["OUTWARD_COST_AMOUNT"]), 4);
                    dblSalesAmnt = Math.Round(Convert.ToDouble(dr["OUTWARD_SALES_AMOUNT"]),4);
                    if (dblOutAmnt==0)
                    {
                        dblOutAmnt = dblSalesAmnt;
                    }

                    if (Math.Abs(dblOutQty) > 0)
                    {
                        dblOutRate = Math.Round(dblSalesAmnt / dblOutQty, 2);
                    }
                    dblclsQty = Math.Round(dblclsQty + ((dblOpenQty + dblInwQty) - Math.Abs(dblOutQty)),3);

                    if (dblclsQty > 0)
                    {
                        //''dblClsAmnt = Round(dblclsQty * dblCostRate, 2);
                        if (Math.Abs(dblOutQty) > 0)
                        {
                            if (dblOutRate ==0)
                            {
                                dblOutRate = dblCostRate;
                            }
                            //dblclsAmnt = Math.Round(dblclsQty * dblCostRate, 2);
                            dblclsAmnt = Math.Abs(dblclsAmnt + (dblOpeningAmt + dblInwAmnt) - Math.Abs(dblOutAmnt));
                            dblCostRate = Math.Abs(Math.Round(dblclsAmnt / dblclsQty, 2));

                        }
                        else
                        {
                            dblclsAmnt = Math.Abs(dblclsAmnt + (dblOpeningAmt + dblInwAmnt) - Math.Abs(dblOutAmnt));
                            dblCostRate = Math.Abs(Math.Round(dblclsAmnt / dblclsQty, 2));
                        }
                    }
                   

                    if (strDate == "01/01/1900")
                    {
                        strDate = "";
                    }


                    strstringNew += strRefNo + "," + strLedgerName +
                                                "," + strDate + "," + intvtype
                                                + "," + dblOpenQty
                                                + "," + dblOpnRate
                                                + "," + dblOpeningAmt
                                                + "," + dblInwQty
                                                + "," + dblInwardRate
                                                + "," + dblInwAmnt
                                                + "," + dblOutQty
                                                + "," + dblOutRate
                                                + "," + dblSalesAmnt
                                                + "," + dblclsQty
                                                + "," + dblCostRate
                                                + "," + dblclsAmnt
                                                + "~";




                    if (dblclsQty == 0)
                    {
                        dblclsAmnt = 0;
                        dblCostRate = 0;
                    }
                    dblOpenQty = 0;
                    dblOpnRate = 0;
                    dblOpenValue = 0;
                    dblInwQty = 0;
                    dblInwardRate = 0;
                    dblInwAmnt = 0;
                    dblOutQty = 0;
                    dblOutRate = 0;
                    dblOutAmnt = 0;
                    dblSalesAmnt = 0;
                }
                dr.Close();
                if (strstringNew != "")
                {
                    string[] words = strstringNew.Split('~');
                    foreach (string costcenter in words)
                    {
                        string[] ooCost = costcenter.Split(',');
                        if (ooCost[0] != "")
                        {
                            strSQL = "INSERT INTO ACC_STOCK_LEDGER_TEMP ";
                            strSQL = strSQL + "VALUES( ";
                            strSQL = strSQL + "'" + ooCost[0] + "'";
                            strSQL = strSQL + ",'" + ooCost[1] + "'";
                            if (ooCost[2] != "")
                            {
                                strSQL = strSQL + ", " + Utility.cvtSQLDateString(ooCost[2]) + "";
                            }
                            else
                            {
                                strSQL = strSQL + ",null ";
                            }
                            strSQL = strSQL + "," + ooCost[3] + " ";
                            strSQL = strSQL + "," + ooCost[4] + " ";
                            strSQL = strSQL + "," + ooCost[5] + " ";
                            strSQL = strSQL + "," + ooCost[6] + " ";
                            strSQL = strSQL + "," + ooCost[7] + " ";
                            strSQL = strSQL + "," + ooCost[8] + " ";
                            strSQL = strSQL + "," + ooCost[9] + " ";
                            strSQL = strSQL + "," + ooCost[10] + " ";
                            strSQL = strSQL + "," + ooCost[11] + " ";
                            strSQL = strSQL + "," + ooCost[12] + " ";
                            strSQL = strSQL + "," + ooCost[13] + " ";
                            strSQL = strSQL + "," + ooCost[14] + " ";
                            strSQL = strSQL + "," + ooCost[15] + " ";
                            strSQL = strSQL + ")";
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();
                        }

                    }
                }

                cmdInsert.Transaction.Commit();
                strstringNew = "";
                List<RStockInformation> ooAccLedger = new List<RStockInformation>();
                // double dblClsQty1=0;
                strSQL = "SELECT * FROM ACC_STOCK_LEDGER_TEMP ORDER By SERIAL_NO ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    if (dr["INV_REF_NO"].ToString() != " ")
                    {
                        oLedg.strRefNo = Utility.Mid(dr["INV_REF_NO"].ToString(), 6, dr["INV_REF_NO"].ToString().Length - 6);
                    }
                    else
                    {
                        oLedg.strRefNo = "Opening";
                    }
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    if (dr["INV_DATE"].ToString() != "")
                    {
                        oLedg.strInvDate = Convert.ToDateTime(dr["INV_DATE"]).ToString("dd/MM/yyyy");
                    }
                    else
                    {
                        oLedg.strInvDate = "";
                    }
                    oLedg.strUnit = strUNIT;
                    oLedg.dblOpnQty = Convert.ToDouble(dr["OPNQTY"].ToString());
                    oLedg.dblOpnRate = Convert.ToDouble(dr["OPNRATE"].ToString());
                    oLedg.dblOpnAmnt = Convert.ToDouble(dr["OPNAMNT"].ToString());
                    oLedg.dblInwQty = Convert.ToDouble(dr["INWQTY"].ToString());
                    oLedg.dblInwRate = Convert.ToDouble(dr["INWRATE"].ToString());
                    oLedg.dblInwAmount = Convert.ToDouble(dr["INWAMNT"].ToString());
                    oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["OUTQTY"].ToString()));
                    oLedg.dblOutwardRate = Math.Abs(Convert.ToDouble(dr["OUTRATE"].ToString()));
                    oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTAMNT"].ToString()));
                    oLedg.dblclsQty = Convert.ToDouble(dr["CLSQTY"].ToString());
                    oLedg.dblclsRate = Convert.ToDouble(dr["CLSRATE"].ToString());
                    oLedg.dblclsAmnt = Convert.ToDouble(dr["CLSAMNT"].ToString());
                    oLedg.intVtype = Convert.ToInt16(dr["INV_VOUCHER_TYPE"].ToString());
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;
            }
        }


        public List<RStockInformation> mGetInventortyVoucher(string strDeComID, string strFdate, string strTDate, string strSelection, string strBranchName, string strRefNo, string strSummDet)
        {
            string strRm = "", strFG = "", strWastage = "", strToLocation = "", strRefNo1 = "";
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                string strSQL = null;
                SqlDataReader dr;
                SqlTransaction mytrans;
                SqlCommand cmdDr = new SqlCommand();
                List<RStockInformation> ooAccLedger = new List<RStockInformation>();

                mytrans = gcnMain.BeginTransaction();
                cmdDr.Connection = gcnMain;
                cmdDr.Transaction = mytrans;
                strSQL = "DELETE FROM INV_MANUFACTURING_TEMP ";
                cmdDr.CommandText = strSQL;
                cmdDr.ExecuteNonQuery();
                if (strFdate == "")
                {
                    if (strSelection != "T")
                    {
                        strSQL = "SELECT INV_REF_NO_OUT,INV_REF_NO_IN,INV_REF_NO_WASTAGE FROM INV_PRODUCTION_LOG ";
                        strSQL = strSQL + " WHERE INV_REF_NO_IN='" + strRefNo + "' ";
                        cmdDr.CommandText = strSQL;
                        dr = cmdDr.ExecuteReader();
                        if (dr.Read())
                        {
                            if (dr["INV_REF_NO_OUT"].ToString() != "")
                            {
                                strRm = dr["INV_REF_NO_OUT"].ToString();
                            }
                            else
                            {
                                strRm = "";
                            }
                            if (dr["INV_REF_NO_IN"].ToString() != "")
                            {
                                strFG = dr["INV_REF_NO_IN"].ToString();
                            }
                            else
                            {
                                strFG = "";
                            }
                            if (dr["INV_REF_NO_WASTAGE"].ToString() != "")
                            {
                                strWastage = dr["INV_REF_NO_WASTAGE"].ToString();
                            }
                            else
                            {
                                strWastage = "";
                            }
                        }
                        else
                        {
                            strFG = strRefNo;
                        }

                    }
                    else
                    {
                        strSQL = "SELECT GODOWNS_NAME FROM INV_TRAN ";
                        strSQL = strSQL + " WHERE INV_REF_NO='" + strRefNo + "' ";
                        strSQL = strSQL + "AND INV_INOUT_FLAG='O' ";
                        cmdDr.CommandText = strSQL;
                        dr = cmdDr.ExecuteReader();
                        if (dr.Read())
                        {
                            strToLocation = dr["GODOWNS_NAME"].ToString();
                        }
                        strFG = strRefNo;
                    }
                    dr.Close();
                    if (strFG != "")
                    {

                        if (strToLocation == "")
                        {
                            strSQL = "INSERT INTO INV_MANUFACTURING_TEMP(STOCKITEM_NAME,INV_REF_NO,PROCESS_NAME,GODOWNS_NAME,TO_GODOWNS_NAME,INV_NARRATIONS,INV_VOUCHER_TYPE,INV_DATE,INV_TRAN_QUANTITY,INV_TRAN_RATE,INV_TRAN_AMOUNT,STOCKITEM_BASEUNITS,INV_LOG_NO,GROUP_NAME) "; //FG
                            strSQL = strSQL + "SELECT T.STOCKITEM_NAME,'" + strFG + "',T.PROCESS_NAME,T.GODOWNS_NAME,'',M.INV_NARRATIONS,T.INV_VOUCHER_TYPE,T.INV_DATE,T.INV_TRAN_QUANTITY,T.INV_TRAN_RATE,abs((T.INV_TRAN_QUANTITY *T.INV_TRAN_RATE))INV_TRAN_AMOUNT, ";
                            strSQL = strSQL + "S.STOCKITEM_BASEUNITS,T.INV_LOG_NO,s.STOCKGROUP_NAME  ";
                            strSQL = strSQL + "FROM  INV_MASTER M, INV_TRAN  T,INV_STOCKITEM S WHERE M.INV_REF_NO=T.INV_REF_NO AND S.STOCKITEM_NAME =T.STOCKITEM_NAME  ";
                            strSQL = strSQL + "AND T.INV_REF_NO= '" + strFG + "' ";
                        }
                        else
                        {
                            strSQL = "INSERT INTO INV_MANUFACTURING_TEMP(STOCKITEM_NAME,INV_REF_NO,PROCESS_NAME,GODOWNS_NAME,TO_GODOWNS_NAME,INV_NARRATIONS,INV_VOUCHER_TYPE,INV_DATE,INV_TRAN_QUANTITY,INV_TRAN_RATE,INV_TRAN_AMOUNT,STOCKITEM_BASEUNITS,INV_LOG_NO,GROUP_NAME) "; //FG
                            strSQL = strSQL + "SELECT T.STOCKITEM_NAME,'" + strFG + "',T.PROCESS_NAME,T.GODOWNS_NAME,'" + strToLocation + "',M.INV_NARRATIONS,T.INV_VOUCHER_TYPE,T.INV_DATE,T.INV_TRAN_QUANTITY,T.INV_TRAN_RATE,abs(T.INV_TRAN_QUANTITY *T.INV_TRAN_RATE)INV_TRAN_AMOUNT, ";
                            strSQL = strSQL + "S.STOCKITEM_BASEUNITS,T.INV_LOG_NO,s.STOCKGROUP_NAME  ";
                            strSQL = strSQL + "FROM  INV_MASTER M, INV_TRAN  T,INV_STOCKITEM S WHERE M.INV_REF_NO=T.INV_REF_NO AND S.STOCKITEM_NAME =T.STOCKITEM_NAME  ";
                            strSQL = strSQL + "AND T.INV_REF_NO= '" + strFG + "' ";
                            strSQL = strSQL + "AND T.INV_INOUT_FLAG= 'I' ";
                        }
                        cmdDr.CommandText = strSQL;
                        cmdDr.ExecuteNonQuery();
                    }
                    if (strRm != "")
                    {
                        strSQL = "INSERT INTO INV_MANUFACTURING_TEMP(STOCKITEM_NAME,INV_REF_NO,PROCESS_NAME,GODOWNS_NAME,TO_GODOWNS_NAME,INV_NARRATIONS,INV_VOUCHER_TYPE,INV_DATE,INV_TRAN_QUANTITY,INV_TRAN_RATE,INV_TRAN_AMOUNT,STOCKITEM_BASEUNITS,INV_LOG_NO,GROUP_NAME) "; //Raw
                        strSQL = strSQL + "SELECT T.STOCKITEM_NAME,'" + strFG + "',T.PROCESS_NAME,T.GODOWNS_NAME,'',M.INV_NARRATIONS,T.INV_VOUCHER_TYPE,T.INV_DATE,T.INV_TRAN_QUANTITY,T.INV_TRAN_RATE,T.INV_TRAN_AMOUNT, ";
                        strSQL = strSQL + "S.STOCKITEM_BASEUNITS,T.INV_LOG_NO,s.STOCKGROUP_NAME  ";
                        strSQL = strSQL + "FROM  INV_MASTER M, INV_TRAN  T,INV_STOCKITEM S WHERE M.INV_REF_NO=T.INV_REF_NO AND S.STOCKITEM_NAME =T.STOCKITEM_NAME  ";
                        strSQL = strSQL + "AND T.INV_REF_NO ='" + strRm + "' ";
                        cmdDr.CommandText = strSQL;
                        cmdDr.ExecuteNonQuery();
                    }
                    if (strWastage != "")
                    {
                        strSQL = "INSERT INTO INV_MANUFACTURING_TEMP(STOCKITEM_NAME,INV_REF_NO,PROCESS_NAME,GODOWNS_NAME,TO_GODOWNS_NAME,INV_NARRATIONS,INV_VOUCHER_TYPE,INV_DATE,INV_TRAN_QUANTITY,INV_TRAN_RATE,INV_TRAN_AMOUNT,STOCKITEM_BASEUNITS,INV_LOG_NO,GROUP_NAME) "; //Wastage
                        strSQL = strSQL + "SELECT T.STOCKITEM_NAME,'" + strFG + "',T.PROCESS_NAME,T.GODOWNS_NAME,'',M.INV_NARRATIONS,T.INV_VOUCHER_TYPE,T.INV_DATE,T.INV_TRAN_QUANTITY,T.INV_TRAN_RATE,T.INV_TRAN_AMOUNT, ";
                        strSQL = strSQL + "S.STOCKITEM_BASEUNITS,T.INV_LOG_NO,s.STOCKGROUP_NAME  ";
                        strSQL = strSQL + "FROM  INV_MASTER M, INV_TRAN  T,INV_STOCKITEM S WHERE M.INV_REF_NO=T.INV_REF_NO AND S.STOCKITEM_NAME =T.STOCKITEM_NAME  ";
                        strSQL = strSQL + "AND T.INV_REF_NO ='" + strWastage + "' ";
                        cmdDr.CommandText = strSQL;
                        cmdDr.ExecuteNonQuery();
                    }


                }
                else
                {
                    if (strSelection == "S")
                    {
                        strSQL = "INSERT INTO INV_MANUFACTURING_TEMP(STOCKITEM_NAME,INV_REF_NO,PROCESS_NAME,GODOWNS_NAME,TO_GODOWNS_NAME,INV_NARRATIONS,INV_VOUCHER_TYPE,INV_DATE,INV_TRAN_QUANTITY,INV_TRAN_RATE,INV_TRAN_AMOUNT,STOCKITEM_BASEUNITS,INV_LOG_NO,GROUP_NAME,PREVIOUS_STOCK) "; //ALL
                        strSQL = strSQL + "SELECT T.STOCKITEM_NAME,T.INV_REF_NO,T.PROCESS_NAME,T.GODOWNS_NAME,'',M.INV_NARRATIONS,T.INV_VOUCHER_TYPE,T.INV_DATE,T.INV_TRAN_QUANTITY,T.INV_TRAN_RATE,T.INV_TRAN_AMOUNT, ";
                        strSQL = strSQL + "S.STOCKITEM_BASEUNITS,T.INV_LOG_NO, s.STOCKGROUP_NAME,t.INV_CURRENT_STOCK ";
                        strSQL = strSQL + "FROM  INV_MASTER M, INV_TRAN  T,INV_STOCKITEM S,ACC_COMPANY_VOUCHER c WHERE c.COMP_REF_NO=t.INV_REF_NO AND M.INV_REF_NO=T.INV_REF_NO AND S.STOCKITEM_NAME =T.STOCKITEM_NAME  ";
                    }
                    else
                    {
                        strSQL = "INSERT INTO INV_MANUFACTURING_TEMP(STOCKITEM_NAME,INV_REF_NO,PROCESS_NAME,GODOWNS_NAME,TO_GODOWNS_NAME,INV_NARRATIONS,INV_VOUCHER_TYPE,INV_DATE,INV_TRAN_QUANTITY,INV_TRAN_RATE,INV_TRAN_AMOUNT,STOCKITEM_BASEUNITS,INV_LOG_NO,GROUP_NAME,PREVIOUS_STOCK) "; //ALL
                        strSQL = strSQL + "SELECT T.STOCKITEM_NAME,T.INV_REF_NO,T.PROCESS_NAME,T.GODOWNS_NAME,'',M.INV_NARRATIONS,T.INV_VOUCHER_TYPE,T.INV_DATE,T.INV_TRAN_QUANTITY,T.INV_TRAN_RATE,T.INV_TRAN_AMOUNT, ";
                        strSQL = strSQL + "S.STOCKITEM_BASEUNITS,T.INV_LOG_NO, s.STOCKGROUP_NAME,t.INV_CURRENT_STOCK ";
                        strSQL = strSQL + "FROM  INV_MASTER M, INV_TRAN  T,INV_STOCKITEM S WHERE M.INV_REF_NO=T.INV_REF_NO AND S.STOCKITEM_NAME =T.STOCKITEM_NAME  ";
                    }

                    if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND(T.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE + " ) ";
                    }
                    else if (strSelection == "T")
                    {
                        strSQL = strSQL + "AND(T.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ) ";
                        strSQL = strSQL + "AND T.INV_INOUT_FLAG='I' ";
                    }
                    else if (strSelection == "P")
                    {
                        strSQL = strSQL + "AND(T.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_PHYSICAL + " ) ";
                    }
                    else if (strSelection == "C")
                    {
                        strSQL = strSQL + "AND(T.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION + " ) ";
                        strSQL = strSQL + " AND T.CONVERSION_TYPE =0 ";
                        //strSQL = strSQL + " AND  S.STOCKITEM_NAME='B6'";
                    }
                    else if (strSelection == "M")
                    {
                        //strSQL = strSQL + "AND(T.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_VOUCHER + " ) ";
                        strSQL = strSQL + "AND T.CONVERSION_TYPE=1  ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND(T.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_FINISHED_GOODS + " ) ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND(c.SAMPLE_STATUS= 1 ) ";
                    }

                    if (strFdate != "")
                    {
                        strSQL = strSQL + "AND T.INV_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                    }

                    if (strBranchName != "")
                    {
                        strSQL = strSQL + "AND T.BRANCH_ID= '" + Utility.gstrGetBranchID(strDeComID, strBranchName) + "' ";
                    }
                    cmdDr.CommandText = strSQL;
                    cmdDr.ExecuteNonQuery();
                }

                cmdDr.Transaction.Commit();
                if (strSelection == "P")
                {
                    if (strSummDet == "Details")
                    {
                        strSQL = "SELECT '' LedgerNmae,STOCKITEM_NAME,SUBSTRING(INV_REF_NO,7,30) INV_REF_NO,PROCESS_NAME,GODOWNS_NAME,TO_GODOWNS_NAME,INV_NARRATIONS,INV_VOUCHER_TYPE,INV_DATE,(INV_TRAN_QUANTITY)INV_TRAN_QUANTITY,(INV_TRAN_RATE)INV_TRAN_RATE,(INV_TRAN_AMOUNT)INV_TRAN_AMOUNT,STOCKITEM_BASEUNITS,INV_LOG_NO,GROUP_NAME,PREVIOUS_STOCK FROM INV_MANUFACTURING_TEMP ";
                        strSQL = strSQL + " ORDER by GROUP_NAME,INV_DATE,STOCKITEM_NAME ,INV_VOUCHER_TYPE";
                    }
                    else
                    {
                        strSQL = "SELECT '' LedgerNmae ,STOCKITEM_NAME,'' INV_REF_NO, '' PROCESS_NAME, '' GODOWNS_NAME,'' TO_GODOWNS_NAME,'' INV_NARRATIONS,INV_VOUCHER_TYPE,'' INV_DATE,(SUM(INV_TRAN_QUANTITY))INV_TRAN_QUANTITY, ";
                        strSQL = strSQL + "round((case when SUM(INV_TRAN_QUANTITY) <> 0 then SUM(INV_TRAN_AMOUNT)/SUM(INV_TRAN_QUANTITY) else 0 end),2)  INV_TRAN_RATE,";
                        strSQL = strSQL + "(SUM(INV_TRAN_AMOUNT))INV_TRAN_AMOUNT,STOCKITEM_BASEUNITS, '' INV_LOG_NO,'' GROUP_NAME,SUM(PREVIOUS_STOCK) PREVIOUS_STOCK FROM INV_MANUFACTURING_TEMP  ";
                        strSQL = strSQL + "GROUP by STOCKITEM_NAME,STOCKITEM_BASEUNITS,INV_VOUCHER_TYPE ";
                        strSQL = strSQL + "ORDER by INV_DATE,STOCKITEM_NAME ,INV_VOUCHER_TYPE ";
                    }
                }
                else
                {
                    if (strSummDet == "Details")
                    {
                        if (strSelection != "S")
                        {
                            strSQL = "SELECT '' LedgerNmae ,STOCKITEM_NAME,SUBSTRING(INV_REF_NO,7,30) INV_REF_NO,PROCESS_NAME,GODOWNS_NAME,TO_GODOWNS_NAME,INV_NARRATIONS,INV_VOUCHER_TYPE,INV_DATE,abs(INV_TRAN_QUANTITY)INV_TRAN_QUANTITY,abs(INV_TRAN_RATE)INV_TRAN_RATE,(INV_TRAN_AMOUNT)INV_TRAN_AMOUNT,STOCKITEM_BASEUNITS,INV_LOG_NO,GROUP_NAME,PREVIOUS_STOCK FROM INV_MANUFACTURING_TEMP ";
                            strSQL = strSQL + " ORDER by INV_DATE,STOCKITEM_NAME ,INV_VOUCHER_TYPE";
                        }
                        else
                        {
                            strSQL = "SELECT   l.LEDGER_NAME_MERZE as LedgerNmae,STOCKITEM_NAME, SUBSTRING(INV_REF_NO, 7, 30) AS INV_REF_NO, PROCESS_NAME, GODOWNS_NAME, TO_GODOWNS_NAME, INV_NARRATIONS, INV_VOUCHER_TYPE, INV_DATE, ABS(INV_TRAN_QUANTITY)  ";
                            strSQL = strSQL + "AS INV_TRAN_QUANTITY, ABS(INV_TRAN_RATE) AS INV_TRAN_RATE, INV_TRAN_AMOUNT, STOCKITEM_BASEUNITS, INV_LOG_NO, GROUP_NAME, PREVIOUS_STOCK  ";
                            strSQL = strSQL + "FROM INV_MANUFACTURING_TEMP,ACC_COMPANY_VOUCHER CV ,ACC_LEDGER L  ";
                            strSQL = strSQL + "where CV.COMP_REF_NO= INV_MANUFACTURING_TEMP.INV_REF_NO and l.LEDGER_NAME=CV.LEDGER_NAME  ";
                            strSQL = strSQL + "ORDER BY INV_DATE, GROUP_NAME,STOCKITEM_NAME, INV_VOUCHER_TYPE  ";
                        }

                    }
                    else
                    {
                        if (strSelection == "M")
                        {
                            strSQL = "SELECT '' LedgerNmae ,STOCKITEM_NAME,SUBSTRING(INV_REF_NO,7,30) INV_REF_NO,PROCESS_NAME,GODOWNS_NAME,TO_GODOWNS_NAME,INV_NARRATIONS,INV_VOUCHER_TYPE,INV_DATE,abs(INV_TRAN_QUANTITY)INV_TRAN_QUANTITY,abs(INV_TRAN_RATE)INV_TRAN_RATE,(INV_TRAN_AMOUNT)INV_TRAN_AMOUNT,STOCKITEM_BASEUNITS,INV_LOG_NO,GROUP_NAME,PREVIOUS_STOCK FROM INV_MANUFACTURING_TEMP ";
                            strSQL = strSQL + " ORDER by GROUP_NAME,INV_DATE,STOCKITEM_NAME ,INV_VOUCHER_TYPE";
                        }
                        else if (strSelection == "T")
                        {
                            strSQL = "SELECT '' LedgerNmae ,STOCKITEM_NAME,SUBSTRING(INV_REF_NO,7,30) INV_REF_NO,PROCESS_NAME,GODOWNS_NAME,TO_GODOWNS_NAME,INV_NARRATIONS,INV_VOUCHER_TYPE,INV_DATE,abs(INV_TRAN_QUANTITY)INV_TRAN_QUANTITY,abs(INV_TRAN_RATE)INV_TRAN_RATE,(INV_TRAN_AMOUNT)INV_TRAN_AMOUNT,STOCKITEM_BASEUNITS,INV_LOG_NO,GROUP_NAME,PREVIOUS_STOCK FROM INV_MANUFACTURING_TEMP ";
                            strSQL = strSQL + " ORDER by GROUP_NAME,INV_DATE,STOCKITEM_NAME ,INV_VOUCHER_TYPE";
                        }
                        else
                        {
                            strSQL = "SELECT '' LedgerNmae ,STOCKITEM_NAME,'' INV_REF_NO, '' PROCESS_NAME, '' GODOWNS_NAME,'' TO_GODOWNS_NAME,'' INV_NARRATIONS,INV_VOUCHER_TYPE,'' INV_DATE,abs(SUM(INV_TRAN_QUANTITY))INV_TRAN_QUANTITY, ";
                            strSQL = strSQL + "round((case when SUM(INV_TRAN_QUANTITY) <> 0 then SUM(INV_TRAN_AMOUNT)/SUM(INV_TRAN_QUANTITY) else 0 end),2)  INV_TRAN_RATE,";
                            strSQL = strSQL + "(SUM(INV_TRAN_AMOUNT))INV_TRAN_AMOUNT,STOCKITEM_BASEUNITS, '' INV_LOG_NO,'' GROUP_NAME,(SUM(PREVIOUS_STOCK)) PREVIOUS_STOCK FROM INV_MANUFACTURING_TEMP  ";
                            strSQL = strSQL + "GROUP by STOCKITEM_NAME,STOCKITEM_BASEUNITS,INV_VOUCHER_TYPE ";
                            strSQL = strSQL + "ORDER by INV_DATE,STOCKITEM_NAME ,INV_VOUCHER_TYPE DESC ";
                        }

                    }
                }


                cmdDr.CommandText = strSQL;
                dr = cmdDr.ExecuteReader();

                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                    if (strSelection == "M")
                    {
                        if (Convert.ToInt16(dr["INV_VOUCHER_TYPE"].ToString()) == 26)
                        {
                            oLedg.strRefNo = "Consumtion";
                        }
                        else
                        {
                            oLedg.strRefNo = "Finshed Goods";
                            strRefNo1 = dr["INV_REF_NO"].ToString();
                        }
                    }
                    else
                    {
                        if (dr["INV_REF_NO"].ToString() != "")
                        {
                            oLedg.strRefNo = dr["INV_REF_NO"].ToString();
                        }
                        else
                        {
                            oLedg.strRefNo = "";
                        }
                    }

                    if (dr["GROUP_NAME"].ToString() != "")
                    {
                        oLedg.strGroupName = dr["GROUP_NAME"].ToString();
                    }
                    else
                    {
                        oLedg.strGroupName = "";
                    }
                    oLedg.dblPhyStockQty = Convert.ToDouble(dr["PREVIOUS_STOCK"].ToString());
                    oLedg.strKey = dr["PROCESS_NAME"].ToString();
                    if (dr["GODOWNS_NAME"].ToString() != "")
                    {
                        oLedg.strLocationName = dr["GODOWNS_NAME"].ToString();
                    }
                    else
                    {
                        oLedg.strLocationName = "";
                    }
                    if (dr["TO_GODOWNS_NAME"].ToString() != "")
                    {
                        oLedg.strToLocationName = dr["TO_GODOWNS_NAME"].ToString();
                    }
                    else
                    {
                        oLedg.strToLocationName = "";
                    }
                    if (dr["INV_NARRATIONS"].ToString() != "")
                    {
                        oLedg.strNarration = dr["INV_NARRATIONS"].ToString();
                    }
                    else
                    {
                        oLedg.strNarration = "";
                    }

                    oLedg.intVtype = Convert.ToInt16(dr["INV_VOUCHER_TYPE"].ToString());
                    if (dr["INV_DATE"].ToString() != "")
                    {
                        oLedg.strInvDate = Convert.ToDateTime(dr["INV_DATE"]).ToString("dd/MM/yyyy") + "                " + strRefNo1;
                    }
                    else
                    {
                        oLedg.strInvDate = "";
                    }
                    oLedg.dblInwQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                    oLedg.dblInwRate = Math.Abs(Convert.ToDouble(dr["INV_TRAN_RATE"].ToString()));
                    if (strSummDet == "Details")
                    {
                        //oLedg.dblInwAmount = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString()) * Convert.ToDouble(dr["INV_TRAN_RATE"].ToString());
                        oLedg.dblInwAmount = Math.Abs((Convert.ToDouble(dr["INV_TRAN_AMOUNT"].ToString())));
                    }
                    else
                    {
                        oLedg.dblInwAmount = Math.Abs((Convert.ToDouble(dr["INV_TRAN_AMOUNT"].ToString())));


                    }


                    oLedg.strUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                    if (dr["INV_LOG_NO"].ToString() != "")
                    {
                        oLedg.strBatchNo = dr["INV_LOG_NO"].ToString();
                    }
                    else
                    {
                        oLedg.strBatchNo = "End of List";
                    }

                    if (dr["LedgerNmae"].ToString() != "")
                    {
                        oLedg.strLedgerName = dr["LedgerNmae"].ToString();
                    }
                    else
                    {
                        oLedg.strLedgerName = "";
                    }


                    ooAccLedger.Add(oLedg);

                }
                if (!dr.HasRows)
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strItemName = "";
                    oLedg.strRefNo = "";
                    oLedg.strKey = "";
                    oLedg.strLocationName = "";
                    oLedg.strNarration = "";
                    oLedg.strVType = "";
                    oLedg.strInvDate = "";
                    oLedg.strToLocationName = "";
                    oLedg.dblInwQty = 0;
                    oLedg.dblInwRate = 0;
                    oLedg.strBatchNo = "";
                    oLedg.dblInwAmount = 0;
                    oLedg.strUnit = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;
            }
        }

        public List<RStockInformation> mGetProfitability(string strDeComID, string strFdate, string strTDate, string strGroupName)
        {
            string strSQL = null;
            SqlDataReader dr;
            SqlCommand cmdDr = new SqlCommand();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();


                List<RStockInformation> ooAccLedger = new List<RStockInformation>();

                strSQL = "SELECT INV_STOCKITEM.STOCKITEM_NAME,INV_STOCKITEM.STOCKITEM_PRIMARY_GROUP,INV_STOCKITEM.STOCKGROUP_NAME,";
                strSQL = strSQL + "INV_TRAN.INV_DATE, INV_TRAN.INV_VOUCHER_TYPE,INV_TRAN.OUTWARD_QUANTITY,";
                strSQL = strSQL + "INV_TRAN.OUTWARD_SALES_AMOUNT , INV_TRAN.OUTWARD_COST_AMOUNT ";
                strSQL = strSQL + "FROM INV_STOCKITEM INV_STOCKITEM INNER JOIN ";
                strSQL = strSQL + "INV_TRAN INV_TRAN ON INV_STOCKITEM.STOCKITEM_NAME = INV_TRAN.STOCKITEM_NAME ";
                strSQL = strSQL + "WHERE (INV_TRAN.INV_DATE >= " + Utility.cvtSQLDateString(strFdate) + ") ";
                strSQL = strSQL + "AND (INV_TRAN.INV_DATE <= " + Utility.cvtSQLDateString(strTDate) + ") ";
                if (strGroupName != "")
                {
                    strSQL = strSQL + "AND INV_STOCKITEM.STOCKGROUP_NAME= '" + strGroupName + "' ";
                }
                strSQL = strSQL + "AND (INV_TRAN.INV_VOUCHER_TYPE = 18 OR INV_TRAN.INV_VOUCHER_TYPE = 16 OR INV_TRAN.INV_VOUCHER_TYPE = 15) ";
                strSQL = strSQL + "ORDER BY INV_STOCKITEM.STOCKGROUP_NAME,INV_STOCKITEM.STOCKITEM_NAME ";
                cmdDr.CommandText = strSQL;
                cmdDr.Connection = gcnMain;
                dr = cmdDr.ExecuteReader();
                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.strGroupPrimary = dr["STOCKGROUP_NAME"].ToString();
                    oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();
                    oLedg.strVType = dr["INV_VOUCHER_TYPE"].ToString();
                    oLedg.strInvDate = Convert.ToDateTime(dr["INV_DATE"]).ToString("dd/MM/yyyy");
                    oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString()));
                    oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_SALES_AMOUNT"].ToString()));
                    oLedg.dblclsAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_COST_AMOUNT"].ToString()));
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strItemName = "";
                    oLedg.strVType = "";
                    oLedg.dblOutWardQty = 0;
                    oLedg.dblOutwardAmnt = 0;
                    oLedg.dblclsAmnt = 0;
                    ooAccLedger.Add(oLedg);
                }

                dr.Close();

                gcnMain.Close();
                return ooAccLedger;
            }
        }

        public List<RStockInformation> mGetStockSummSalesPrice(string strDeComID, string strLevel, string strCateGory, int intType)
        {
            string strSQL = null, strEffectiveDate = "";
            SqlDataReader dr;
            SqlCommand cmdDr = new SqlCommand();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                strSQL = "SELECT SALES_PRICE_EFFECTIVE_DATE FROM INV_SALES_PRICE ";
                strSQL = strSQL + "ORDER BY SALES_PRICE_EFFECTIVE_DATE DESC ";
                cmdDr.CommandText = strSQL;
                cmdDr.Connection = gcnMain;
                dr = cmdDr.ExecuteReader();
                if (dr.Read())
                {
                    strEffectiveDate = Convert.ToDateTime(dr["SALES_PRICE_EFFECTIVE_DATE"]).ToString("dd/MM/yyyy");
                }
                dr.Close();

                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;
                strSQL = "DELETE FROM INV_SALES_PRICE_RPT ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                strSQL = "INSERT INTO INV_SALES_PRICE_RPT(STOCKITEM_NAME,SALES_PRICE_AMOUNT) ";
                strSQL = strSQL + " SELECT STOCKITEM_NAME,SALES_PRICE_AMOUNT  from INV_SALES_PRICE ";
                strSQL = strSQL + "WHERE PRICE_LEVEL_NAME='" + strLevel + "' ";
                strSQL = strSQL + "AND SALES_PRICE_EFFECTIVE_DATE  BETWEEN  " + Utility.cvtSQLDateString(strEffectiveDate) + " ";
                strSQL = strSQL + "AND " + Utility.cvtSQLDateString(strEffectiveDate) + " ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                cmdInsert.Transaction.Commit();

                //1 =level 2 cate 3 group
                List<RStockInformation> ooStock = new List<RStockInformation>();


                strSQL = "SELECT INV_TRAN_QTY_SALES_PRICE_QRY.STOCKITEM_NAME,isnull(INV_TRAN_QTY_SALES_PRICE_QRY.INV_TRAN_QUANTITY,0) as INV_TRAN_QUANTITY,INV_STOCKITEM.STOCKCATEGORY_NAME ,INV_STOCKITEM.STOCKITEM_BASEUNITS,";
                strSQL = strSQL + "INV_STOCKITEM.STOCKITEM_ALIAS,isnull(INV_SALES_PRICE_RPT.SALES_PRICE_AMOUNT,0) as SALES_PRICE_AMOUNT ";
                strSQL = strSQL + "FROM ";
                strSQL = strSQL + "INV_TRAN_QTY_SALES_PRICE_QRY INV_TRAN_QTY_SALES_PRICE_QRY INNER JOIN INV_STOCKITEM INV_STOCKITEM ON ";
                strSQL = strSQL + "INV_TRAN_QTY_SALES_PRICE_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME LEFT OUTER JOIN INV_SALES_PRICE_RPT INV_SALES_PRICE_RPT ON ";
                strSQL = strSQL + "INV_TRAN_QTY_SALES_PRICE_QRY.STOCKITEM_NAME = INV_SALES_PRICE_RPT.STOCKITEM_NAME ";
                strSQL = strSQL + "WHERE INV_STOCKITEM.STOCKCATEGORY_NAME IS NOT NULL ";
                if (intType == 1)
                {
                    strSQL = strSQL + "AND INV_STOCKITEM.STOCKCATEGORY_NAME= '" + strCateGory + "' ";
                }
                else if (intType == 3)
                {
                    strSQL = strSQL + "AND INV_STOCKITEM.STOCKGROUP_NAME= '" + strCateGory + "' ";
                }

                cmdDr.CommandText = strSQL;
                cmdDr.Connection = gcnMain;
                dr = cmdDr.ExecuteReader();
                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                    if (dr["STOCKITEM_ALIAS"].ToString() != "")
                    {
                        oLedg.strItemAlias = dr["STOCKITEM_ALIAS"].ToString();
                    }
                    else
                    {
                        oLedg.strItemAlias = "";
                    }
                    if (dr["STOCKCATEGORY_NAME"].ToString() != "")
                    {
                        oLedg.strGroupName = dr["STOCKCATEGORY_NAME"].ToString();
                    }
                    else
                    {
                        oLedg.strGroupName = "";
                    }
                    oLedg.strUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                    oLedg.dblInwQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                    oLedg.dblInwRate = Convert.ToDouble(dr["SALES_PRICE_AMOUNT"]);
                    //oLedg.dblInwAmount = Convert.ToDouble(dr["SALES_PRICE_AMOUNT"]);
                    ooStock.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strItemName = "";
                    oLedg.strItemAlias = "";
                    oLedg.strGroupName = "";
                    oLedg.strUnit = "";
                    oLedg.dblInwQty = 0;
                    oLedg.dblInwRate = 0;
                    ooStock.Add(oLedg);
                }
                dr.Close();

                gcnMain.Close();
                return ooStock;
            }
        }
        #endregion
        #region "Accounts"
        public List<RAudit> mGetMR(string strDeComID, string RefNo, int intVtype)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RAudit> oooChequePrint = new List<RAudit>();
                strSQL = "SELECT tb1.COMP_REF_NO, tb1.COMP_VOUCHER_DATE, tb1.COMP_VOUCHER_NARRATION, tb1.LEDGER_NAME_MERZE, tb2.VOUCHER_CREDIT_AMOUNT, tb2.VOUCHER_DEBIT_AMOUNT, tb2.VOUCHER_TOBY, ";
                strSQL = strSQL + "tb2.VOUCHER_CHEQUE_NUMBER, tb2.VOUCHER_CHEQUE_DATE, tb2.VOUCHER_CHEQUE_DRAWN_ON,tb1.LEDGER_ADDRESS1,tb1 .LEDGER_ADDRESS2 ";
                strSQL = strSQL + "FROM (SELECT TOP (100) PERCENT ACC_COMPANY_VOUCHER.COMP_REF_NO, ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE, ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION, ";
                strSQL = strSQL + "ACC_LEDGER.LEDGER_NAME_MERZE,ACC_LEDGER.LEDGER_ADDRESS1,ACC_LEDGER.LEDGER_ADDRESS2  ";
                strSQL = strSQL + "FROM  ACC_COMPANY_VOUCHER INNER JOIN ";
                strSQL = strSQL + "ACC_LEDGER ON ACC_COMPANY_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                strSQL = strSQL + "WHERE (ACC_COMPANY_VOUCHER.COMP_REF_NO ='" + RefNo + "') ";
                strSQL = strSQL + "ORDER BY ACC_COMPANY_VOUCHER.COMP_REF_NO) AS tb1 INNER JOIN ";
                strSQL = strSQL + "(SELECT TOP (100) PERCENT ACC_COMPANY_VOUCHER_1.COMP_REF_NO, ACC_COMPANY_VOUCHER_1.COMP_VOUCHER_DATE, ACC_COMPANY_VOUCHER_1.COMP_VOUCHER_NARRATION, ";
                strSQL = strSQL + "ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT, ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT, ACC_VOUCHER.VOUCHER_TOBY, ACC_VOUCHER.VOUCHER_CHEQUE_NUMBER, ";
                strSQL = strSQL + "ACC_VOUCHER.VOUCHER_CHEQUE_DATE, ACC_VOUCHER.VOUCHER_CHEQUE_DRAWN_ON ";
                strSQL = strSQL + "FROM  ACC_COMPANY_VOUCHER AS ACC_COMPANY_VOUCHER_1 INNER JOIN ";
                strSQL = strSQL + "ACC_VOUCHER AS ACC_VOUCHER ON ACC_COMPANY_VOUCHER_1.COMP_REF_NO = ACC_VOUCHER.COMP_REF_NO ";
                strSQL = strSQL + "WHERE (ACC_COMPANY_VOUCHER_1.COMP_VOUCHER_TYPE = " + intVtype + ") AND (ACC_COMPANY_VOUCHER_1.COMP_REF_NO = '" + RefNo + "') AND (ACC_COMPANY_VOUCHER_1.SP_JOURNAL = 0) AND  ";
                strSQL = strSQL + "(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT = 0) ";
                strSQL = strSQL + "ORDER BY ACC_VOUCHER.COMP_VOUCHER_DATE, ACC_VOUCHER.VOUCHER_TOBY, SUBSTRING(ACC_VOUCHER.COMP_REF_NO, 7, 30)) AS tb2 ON tb1.COMP_REF_NO = tb2.COMP_REF_NO ";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {

                    RAudit oLedg = new RAudit();
                    oLedg.strRefno = dr["COMP_REF_NO"].ToString();
                    oLedg.strVoucherDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.strNarration = dr["COMP_VOUCHER_NARRATION"].ToString();
                    oLedg.strLedgername = dr["LEDGER_NAME_MERZE"].ToString();
                    oLedg.strAddress1 = dr["LEDGER_ADDRESS1"].ToString();
                    oLedg.strAddress2 = dr["LEDGER_ADDRESS2"].ToString();
                    oLedg.dblAmount = Convert.ToDouble(dr["VOUCHER_DEBIT_AMOUNT"].ToString());
                    oLedg.strToBy = dr["VOUCHER_TOBY"].ToString();
                    oLedg.strChequeNo = dr["VOUCHER_CHEQUE_NUMBER"].ToString();
                    if (dr["VOUCHER_CHEQUE_DATE"].ToString() != "")
                    {
                        oLedg.strChequeDate = Convert.ToDateTime(dr["VOUCHER_CHEQUE_DATE"]).ToString("dd-MM-yyyy");
                    }
                    oLedg.strChequeDrawnNo = dr["VOUCHER_CHEQUE_DRAWN_ON"].ToString();
                    oooChequePrint.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RAudit oLedg = new RAudit();
                    oLedg.strRefno = "";
                    oLedg.strVoucherDate = "";
                    oLedg.strNarration = "";
                    oLedg.strLedgername = "";
                    oLedg.strAddress1 = "";
                    oLedg.strAddress2 = "";
                    oLedg.dblAmount = 0;
                    oLedg.strToBy = "";
                    oLedg.strChequeNo = "";
                    oLedg.strChequeDate = "";
                    oLedg.strChequeDrawnNo = "";
                    oooChequePrint.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return oooChequePrint;
            }
        }

        public List<RAudit> mGetHeader(string strDeComID, int intMode)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RAudit> oooChequePrint = new List<RAudit>();

                strSQL = "SELECT  VOUCHER_HEADER1, VOUCHER_HEADER2, VOUCHER_HEADER3, VOUCHER_HEADER4, VOUCHER_HEADER5, PRINT_MINIMIZE ";
                strSQL = strSQL + "FROM  ACC_VOUCHER_CONFIG ";
                strSQL = strSQL + "WHERE (VOUCHER_TYPE_VALUE = " + intMode + ") ";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {

                    RAudit oLedg = new RAudit();
                    oLedg.strHeader1 = dr["VOUCHER_HEADER1"].ToString();
                    oLedg.strHeader2 = dr["VOUCHER_HEADER2"].ToString();
                    oLedg.strHeader3 = dr["VOUCHER_HEADER3"].ToString();
                    oLedg.strHeader4 = dr["VOUCHER_HEADER4"].ToString();
                    oLedg.strHeader5 = dr["VOUCHER_HEADER5"].ToString();
                    oLedg.dblPazeSize = Convert.ToDouble(dr["PRINT_MINIMIZE"].ToString());
                    oooChequePrint.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RAudit oLedg = new RAudit();
                    oLedg.strHeader1 = "";
                    oLedg.strHeader2 = "";
                    oLedg.strHeader3 = "";
                    oLedg.strHeader4 = "";
                    oLedg.strHeader5 = "";
                    oLedg.dblPazeSize = 0;
                    oooChequePrint.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return oooChequePrint;
            }
        }
        public List<RAccountsGroup> mGetChequePrint(string strDeComID, int intMode, string RefNo, string strString)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RAccountsGroup> oooChequePrint = new List<RAccountsGroup>();
                strSQL = "SELECT COMP_VOUCHER_DATE, VOUCHER_REVERSE_LEDGER, ABS(ISNULL(SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT), 0)) AS AMOUNT ";
                strSQL = strSQL + "FROM ACC_VOUCHER ";
                strSQL = strSQL + "WHERE (COMP_VOUCHER_TYPE = " + intMode + ") AND (COMP_REF_NO = '" + RefNo + "') ";
                if (strString != "")
                {
                    strSQL = strSQL + "AND (VOUCHER_TOBY = '" + strString + "') ";
                }

                strSQL = strSQL + "GROUP BY COMP_VOUCHER_DATE, VOUCHER_REVERSE_LEDGER ";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.strReverseLedger = dr["VOUCHER_REVERSE_LEDGER"].ToString();
                    oLedg.dblCredit = Convert.ToDouble(dr["AMOUNT"].ToString());
                    oooChequePrint.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strDate = "";
                    oLedg.strLedgerName = "";
                    oLedg.dblAmount = 0;
                    oooChequePrint.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return oooChequePrint;
            }
        }
        public List<RAccountsGroup> mGetAccountsvoucher(string strDeComID, string strFdate, string strTDate,
                                                        int intVtype, int intSummDetails,
                                                        string strRefNo, string strBranchID, int intMpoComm)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();

                strSQL = "SELECT ACC_COMPANY_VOUCHER.COMP_REF_NO, ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE, ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION,";
                strSQL = strSQL + "ACC_LEDGER.LEDGER_NAME_MERZE LEDGER_NAME,ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT,";
                strSQL = strSQL + "ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT, ACC_VOUCHER.VOUCHER_TOBY,ACC_VOUCHER.VOUCHER_CHEQUE_NUMBER,ACC_VOUCHER.VOUCHER_CHEQUE_DATE, ACC_VOUCHER.VOUCHER_CHEQUE_DRAWN_ON ";
                strSQL = strSQL + "FROM ACC_COMPANY_VOUCHER,ACC_VOUCHER ACC_VOUCHER ,ACC_LEDGER  ";
                strSQL = strSQL + "WHERE ACC_COMPANY_VOUCHER.COMP_REF_NO = ACC_VOUCHER.COMP_REF_NO AND ACC_LEDGER.LEDGER_NAME=ACC_VOUCHER.LEDGER_NAME ";
                if (intVtype == (int)Utility.VOUCHER_TYPE.vtPAYMENT_VOUCHER)
                {
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = " + intVtype + " ";
                    if (intSummDetails == 0)
                    {
                        strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY <> 'Cr' ";
                    }
                }
                else if (intVtype == (int)Utility.VOUCHER_TYPE.vtRECEIPT_VOUCHER)
                {
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = " + intVtype + " ";
                    if (intSummDetails == 0)
                    {
                        strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY <> 'Dr' ";
                    }
                }
                else if (intVtype == (int)Utility.VOUCHER_TYPE.vtJOURNAL_VOUCHER)
                {
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = " + intVtype + " ";
                    if (intSummDetails == 0)
                    {
                        strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY <> 'Dr' ";
                    }
                }
                else if (intVtype == (int)Utility.VOUCHER_TYPE.vtCONTRA_VOUCHER)
                {
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = " + intVtype + " ";
                    if (intSummDetails == 0)
                    {
                        strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY <> 'Cr' ";
                    }
                }

                if (strFdate != "")
                {
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE >= " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE <= " + Utility.cvtSQLDateString(strTDate) + " ";
                }
                if (strRefNo != "")
                {
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_REF_NO = '" + strRefNo + "' ";
                }


                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.SP_JOURNAL =" + intMpoComm + " ";
                if (intSummDetails == 0)
                {
                    strSQL = strSQL + "Order By ";
                    strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_DATE ASC, ";
                    strSQL = strSQL + "SUBSTRING(ACC_COMPANY_VOUCHER.COMP_REF_NO,7,30) ASC, ";
                    strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_POSITION ASC ";
                }
                else
                {
                    if (intVtype == 2)
                    {
                        strSQL = strSQL + "Order By ";
                        strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_DATE ASC, ";
                        strSQL = strSQL + "ACC_VOUCHER.VOUCHER_TOBY Desc,";
                        strSQL = strSQL + "SUBSTRING(ACC_VOUCHER.COMP_REF_NO,7,30) Asc,";
                        strSQL = strSQL + "ACC_VOUCHER.LEDGER_NAME ASC";
                    }
                    else if (intVtype == 3)
                    {
                        if (intMpoComm == 0)
                        {
                            strSQL = strSQL + "Order By ";
                            strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_DATE ASC, ";
                            strSQL = strSQL + "ACC_VOUCHER.VOUCHER_TOBY Desc,";
                            strSQL = strSQL + "SUBSTRING(ACC_VOUCHER.COMP_REF_NO,7,30) Asc,";
                            strSQL = strSQL + "ACC_VOUCHER.LEDGER_NAME ASC";
                        }
                        else
                        {
                            strSQL = strSQL + "Order By ";
                            strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_DATE ASC,COMP_VOUCHER_POSITION ASC, ";
                            strSQL = strSQL + "ACC_VOUCHER.VOUCHER_TOBY Desc, ";
                            strSQL = strSQL + "SUBSTRING(ACC_VOUCHER.COMP_REF_NO,7,30) Asc,";
                            strSQL = strSQL + "ACC_VOUCHER.LEDGER_NAME ASC";
                        }
                    }
                    else
                    {
                        strSQL = strSQL + "Order By ";
                        strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_DATE ASC, ";
                        strSQL = strSQL + "ACC_VOUCHER.VOUCHER_TOBY ASC,";
                        strSQL = strSQL + "SUBSTRING(ACC_VOUCHER.COMP_REF_NO,7,30) Asc,";
                        strSQL = strSQL + "ACC_VOUCHER.LEDGER_NAME ASC";
                    }
                }


                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strRefNo = Utility.Mid(dr["COMP_REF_NO"].ToString(), 6, dr["COMP_REF_NO"].ToString().Length - 6);
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.stVouchertoby = dr["VOUCHER_TOBY"].ToString();
                    oLedg.strDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.dblDebit = Convert.ToDouble(dr["VOUCHER_DEBIT_AMOUNT"].ToString());
                    oLedg.dblCredit = Convert.ToDouble(dr["VOUCHER_CREDIT_AMOUNT"].ToString());
                    if (dr["COMP_VOUCHER_NARRATION"].ToString() != "")
                    {
                        oLedg.strNarration = dr["COMP_VOUCHER_NARRATION"].ToString();
                    }
                    else
                    {
                        oLedg.strNarration = "";
                    }
                    if (dr["VOUCHER_CHEQUE_NUMBER"].ToString() != "")
                    {
                        oLedg.strCheuqueNo = dr["VOUCHER_CHEQUE_NUMBER"].ToString();
                    }
                    else
                    {
                        oLedg.strCheuqueNo = "";
                    }
                    if (dr["VOUCHER_CHEQUE_DATE"].ToString() != "")
                    {
                        oLedg.strChequeDate = Convert.ToDateTime(dr["VOUCHER_CHEQUE_DATE"]).ToString("dd-MM-yyyy");
                    }
                    else
                    {
                        oLedg.strChequeDate = "";
                    }
                    if (dr["VOUCHER_CHEQUE_DRAWN_ON"].ToString() != "")
                    {
                        oLedg.strDrawnOn = dr["VOUCHER_CHEQUE_DRAWN_ON"].ToString();
                    }
                    else
                    {
                        oLedg.strDrawnOn = "";
                    }
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strRefNo = "";
                    oLedg.strLedgerName = "";
                    oLedg.stVouchertoby = "";
                    oLedg.strDate = "";
                    oLedg.dblDebit = 0;
                    oLedg.dblCredit = 0;
                    oLedg.strNarration = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }

        public List<RAccountsGroup> mGetAccountsvoucherSP(string strDeComID, int intVtype, int intSummDetails, string strRefNo, string strBranchID,
                                                            string strFPrevious, string strTPrevious, string strPmonthid)
        {
            string strSQL = null, strMonthID = "", strDuration = "", strLedgerName = "", strFdate = "", strTdate = "", strParttyName = "";
            DateTime dteFdate;
            double dblCommitment = 0, dblCasCollection, dblVoucherCollection, dblTotal = 0;

            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmd = new SqlCommand();
                cmd.Connection = gcnMain;
                //strSQL = "SELECT COMP_VOUCHER_DATE,LEDGER_NAME from ACC_COMPANY_VOUCHER WHERE COMP_REF_NO='" + strRefNo + "' ";
                //cmd.CommandText = strSQL;
                //dr = cmd.ExecuteReader();
                //if (dr.Read())
                //{
                //    strLedgerName = dr["LEDGER_NAME"].ToString();
                //    dteFdate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]);
                //}

                strSQL = "SELECT AGNST_COMP_REF_NO,COMP_VOUCHER_DATE,LEDGER_NAME from ACC_COMPANY_VOUCHER WHERE COMP_REF_NO='" + strRefNo + "' ";
                cmd.CommandText = strSQL;
                dr = cmd.ExecuteReader();
                if (dr.Read())
                {
                    strLedgerName = dr["LEDGER_NAME"].ToString();
                    //strMonthID =Convert.ToDateTime( dr["AGNST_COMP_REF_NO"]).ToString();
                    strMonthID = dr["AGNST_COMP_REF_NO"].ToString();
                }
                else
                {
                    dteFdate = DateTime.Now;
                }
                dr.Close();

                //strMonthID = dteFdate.ToString("MMMyy").ToUpper();
                string  dteprevius="";
                strSQL = "SELECT dateadd(day,-1,FROM_DATE ) as Pdate,FROM_DATE,TO_DATE from ACC_MONTH_SETUP WHERE MONTH_ID='" + strMonthID + "' ";
                cmd.CommandText = strSQL;
                dr = cmd.ExecuteReader();
                if (dr.Read())
                {
                    strFdate = Convert.ToDateTime(dr["FROM_DATE"]).ToString("dd/MM/yyyy");
                    strTdate = Convert.ToDateTime(dr["TO_DATE"]).ToString("dd/MM/yyyy");
                    dteprevius = Convert.ToDateTime(dr["Pdate"]).ToString("dd/MM/yyyy");
                    strDuration = "Period: " + strMonthID + " (" + Convert.ToDateTime(dr["FROM_DATE"]).ToString("dd-MM-yyyy") + " to " + Convert.ToDateTime(dr["TO_DATE"]).ToString("dd-MM-yyyy") + ")";
                }
                dr.Close();
                //strSQL = "SELECT isnull(sum(TARGET_ACHIEVE_AMOUNT),0) as TARGET_ACHIEVE_AMOUNT from SALES_TARGET_ACHIEVEMENT WHERE TARGET_ACHIEVE_MONTH_ID='" + strMonthID + "' ";
                //strSQL = strSQL + "AND LEDGER_NAME='" + strLedgerName + "' ";
                //cmd.CommandText = strSQL;
                //dr = cmd.ExecuteReader();
                //if (dr.Read())
                //{
                //    dblCommitment = Convert.ToDouble(dr["TARGET_ACHIEVE_AMOUNT"]);
                //}
                strSQL = "SELECT LEDGER_NAME, COLL_TARGET_FROM_DATE, COLL_TARGET_TO_DATE, COLL_TARGET_OPENING, MONTH_ID AS COLL_TARGET_MONTH_ID, COLL_TARGET_COLL_PER, COL_POS, ROW_POS,  ";
                strSQL = strSQL + "COLL_TARGET_COLL_AMT  ";
                strSQL = strSQL + "FROM  SALES_COLL_TARGET_TRAN  ";
                strSQL = strSQL + "WHERE (MONTH_ID ='" + strMonthID + "' ) AND (LEDGER_NAME = '" + strLedgerName + "')  ";
                strSQL = strSQL + "ORDER BY COLL_TARGET_DETAIL_SERIAL  ";
                cmd.CommandText = strSQL;
                dr = cmd.ExecuteReader();
                if (dr.Read())
                {
                    dblCommitment = Convert.ToDouble(dr["COLL_TARGET_COLL_AMT"]);
                }
                dr.Close();
                strSQL = "SELECT LEDGER_NAME_MERZE from ACC_LEDGER WHERE LEDGER_NAME='" + strLedgerName + "' ";
                cmd.CommandText = strSQL;
                dr = cmd.ExecuteReader();
                if (dr.Read())
                {
                    strParttyName = dr["LEDGER_NAME_MERZE"].ToString();
                }
                dr.Close();
                //DateTime dtePrevios = Convert.ToDateTime(dteprevius);
                //DateTime dtePreviosTdate = Utility.LastDayOfMonth(dtePrevios);
               
                dblCasCollection = Utility.gGetReceiptAmountOfParty(strDeComID, strLedgerName, 1, 0, strFdate, strTdate);
                dblVoucherCollection = Utility.gGetReceiptAmountVoucher(strDeComID, strLedgerName, 3, 1, strFPrevious, strTPrevious, strPmonthid);
                dblTotal = dblCasCollection + dblVoucherCollection;

                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                strSQL = "SELECT ACC_COMPANY_VOUCHER.COMP_REF_NO,ACC_COMPANY_VOUCHER.LEDGER_NAME AS MRNAME,ACC_COMPANY_VOUCHER.BRANCH_ID, ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE,ACC_VOUCHER.AGNST_COMP_REF_NO,";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION,";
                strSQL = strSQL + "ACC_VOUCHER.LEDGER_NAME,ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT,";
                strSQL = strSQL + "ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT, ACC_VOUCHER.VOUCHER_TOBY ";
                strSQL = strSQL + "FROM ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER ACC_COMPANY_VOUCHER ";
                strSQL = strSQL + "INNER JOIN ACC_VOUCHER ACC_VOUCHER ON ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_REF_NO = ACC_VOUCHER.COMP_REF_NO ";
                strSQL = strSQL + "WHERE ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = " + intVtype + " ";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT <> 0 ";
                if (intSummDetails == 0)
                {
                    strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY <> 'Dr' ";
                }
                strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_REF_NO = '" + strRefNo + "' ";

                if (intSummDetails == 0)
                {
                    strSQL = strSQL + "Order By ";
                    //'strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_DATE ASC, "
                    strSQL = strSQL + "SUBSTRING(ACC_COMPANY_VOUCHER.COMP_REF_NO,7,30) ASC, ";
                    strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_POSITION ASC ";
                }
                else
                {
                    strSQL = strSQL + "Order By ";
                    strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_DATE ASC, ";
                    strSQL = strSQL + "ACC_VOUCHER.VOUCHER_TOBY ASC,";
                    strSQL = strSQL + "SUBSTRING(ACC_VOUCHER.COMP_REF_NO,7,30) Asc,";
                    strSQL = strSQL + "ACC_VOUCHER.LEDGER_NAME ASC";
                }

                cmd.CommandText = strSQL;
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strRefNo = Utility.Mid(dr["COMP_REF_NO"].ToString(), 6, dr["COMP_REF_NO"].ToString().Length - 6);
                    oLedg.strGrName = strParttyName;
                    //oLedg.strBranchId = Utility.gstrGetBranchName(strDeComID, dr["BRANCH_ID"].ToString());
                    oLedg.strBranchId = "Branch : " + Utility.gstrGetBranchName(strDeComID, dr["BRANCH_ID"].ToString());
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.stVouchertoby = dr["VOUCHER_TOBY"].ToString();
                    oLedg.strDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.dblDebit = Convert.ToDouble(dr["AGNST_COMP_REF_NO"].ToString());
                    oLedg.dblCredit = Convert.ToDouble(dr["VOUCHER_DEBIT_AMOUNT"].ToString());
                    if (dr["COMP_VOUCHER_NARRATION"].ToString() != "")
                    {
                        oLedg.strNarration = dr["COMP_VOUCHER_NARRATION"].ToString();
                    }
                    else
                    {
                        oLedg.strNarration = "";
                    }
                    oLedg.strPeriod = strDuration;
                    oLedg.dblColltarget = dblCommitment;
                    oLedg.dblCashOpn = dblCasCollection;
                    oLedg.dblCollAcieve = dblVoucherCollection;
                    oLedg.dblAmount = dblTotal;
                    ooAccLedger.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strRefNo = "";
                    oLedg.strLedgerName = "";
                    oLedg.stVouchertoby = "";
                    oLedg.strDate = "";
                    oLedg.dblDebit = 0;
                    oLedg.dblCredit = 0;
                    oLedg.strNarration = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }



        public List<RAccountsGroup> mGetBalanceSheetQuery(string strDeComID, int intMode)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                //strSQL="SELECT ACC_BALANCE_SHEET.GR_NAME, ACC_BALANCE_SHEET.GR_PARENT, ACC_BALANCE_SHEET.GR_PRIMARY_TYPE, ACC_BALANCE_SHEET.GR_AMOUNT , ACC_LEDGERGROUP.GR_SEQUENCES ";
                //strSQL = strSQL + "FROM ACC_BALANCE_SHEET ,ACC_LEDGERGROUP  where ACC_BALANCE_SHEET.GR_NAME=ACC_LEDGERGROUP.GR_NAME ";
                //strSQL = strSQL + "AND  ACC_BALANCE_SHEET.GR_PRIMARY_TYPE=" + intMode + " ";
                //strSQL = strSQL + " ORDER BY ACC_BALANCE_SHEET.GR_NAME ";

                strSQL = "SELECT ACC_BALANCE_SHEET.GR_NAME, ACC_BALANCE_SHEET.GR_PARENT, ACC_BALANCE_SHEET.GR_PRIMARY_TYPE, ";
                strSQL = strSQL + "ACC_BALANCE_SHEET.GR_AMOUNT , ACC_LEDGERGROUP.GR_SEQUENCES ";
                strSQL = strSQL + "FROM ACC_BALANCE_SHEET ACC_BALANCE_SHEET LEFT OUTER JOIN ";
                strSQL = strSQL + "ACC_LEDGERGROUP ACC_LEDGERGROUP ON ACC_BALANCE_SHEET.GR_PARENT = ACC_LEDGERGROUP.GR_NAME ";
                strSQL = strSQL + "WHERE  ACC_BALANCE_SHEET.GR_PRIMARY_TYPE=" + intMode + " ";
                strSQL = strSQL + "ORDER BY ACC_BALANCE_SHEET.GR_PRIMARY_TYPE DESC, ACC_LEDGERGROUP.GR_SEQUENCES DESC ";

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strGrName = dr["GR_NAME"].ToString();
                    oLedg.strGrParent = dr["GR_PARENT"].ToString();
                    oLedg.intPrimaryType = Convert.ToInt16(dr["GR_PRIMARY_TYPE"].ToString());
                    oLedg.dblAmount = Convert.ToDouble(dr["GR_AMOUNT"].ToString());
                    if (dr["GR_SEQUENCES"].ToString() != "")
                    {
                        oLedg.intGrSequences = Convert.ToInt32(dr["GR_SEQUENCES"].ToString());
                    }
                    else
                    {
                        oLedg.intGrSequences = 2000;
                    }
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strGrName = "";
                    oLedg.strGrParent = "";
                    oLedg.intPrimaryType = 0;
                    oLedg.dblAmount = 0;
                    oLedg.intGrSequences = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }
        public int mGetBalanceSheet(string strDeComID, DateTime strFdate, DateTime strTDate, int Hor_ver,double dblClosing)
        {
         
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmdInsert = new SqlCommand();
                if (Hor_ver == 1)
                {

                    cmdInsert.CommandText = "gBalanceSheet";
                    cmdInsert.CommandType = CommandType.StoredProcedure;
                    cmdInsert.Parameters.Add("@frDate", SqlDbType.Date).Value = strFdate;
                    cmdInsert.Parameters.Add("@todate", SqlDbType.Date).Value = strTDate;
                    cmdInsert.Parameters.Add("@dblClsDebtors", SqlDbType.Decimal).Value = dblClosing;
                    //cmdInsert.Parameters.Add("@dblClsStock", SqlDbType.Decimal).Value = 0;
                    //cmdInsert.Parameters.Add("@fPredate", SqlDbType.Date).Value = strFdate;
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.ExecuteNonQuery();

                   

                }
                else
                {
                    cmdInsert.CommandText = "gJagBalanceSheetVertical";
                    cmdInsert.CommandType = CommandType.StoredProcedure;
                    cmdInsert.Parameters.Add("@frDate", SqlDbType.Date).Value = strFdate;
                    cmdInsert.Parameters.Add("@todate", SqlDbType.Date).Value = strTDate;
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.ExecuteNonQuery();

                }
                strSQL = "UPDATE ACC_BALANCE_SHEET SET GR_NAME = ' Opening Balance'  WHERE GR_NAME='Profit + Loss Account' ";
                SqlCommand cmdnew = new SqlCommand(strSQL, gcnMain);
                cmdnew.ExecuteNonQuery();
                cmdInsert.Dispose();
                gcnMain.Close();
                return 1;
            }
        }
        
        public int mGetProfitLoss(string strDeComID, DateTime dtefFdate, DateTime dteTDate, string vstrBranchID, int intHorVer)
        {
            //string strSQL = null;
            double dblGP;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                if (intHorVer == 1)
                {
                    SqlCommand cmdInsert = new SqlCommand();
                   dblGP = Convert.ToDouble(Utility.gdblGPMF(strDeComID, dtefFdate.ToString("dd/MM/yyyy"), dteTDate.ToString("dd/MM/yyyy"), vstrBranchID));
                   
                    cmdInsert.CommandText = "gProfitAndLossH";
                    cmdInsert.CommandType = CommandType.StoredProcedure;
                    cmdInsert.Parameters.Add("@frDate", SqlDbType.VarChar).Value = dtefFdate;
                    cmdInsert.Parameters.Add("@todate", SqlDbType.VarChar).Value = dteTDate;
                    cmdInsert.Parameters.Add("@dblGP", SqlDbType.VarChar).Value = dblGP;
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.ExecuteNonQuery();
                    gcnMain.Close();
                    cmdInsert.Dispose();
                }
                else
                {
                    SqlCommand cmdInsert = new SqlCommand();
                    dblGP = Convert.ToDouble(Utility.gdblGPMF(strDeComID, dtefFdate.ToString("dd/MM/yyyy"), dteTDate.ToString("dd/MM/yyyy"), vstrBranchID));
                    cmdInsert.CommandText = "gJagProfitAndLossV";
                    cmdInsert.CommandType = CommandType.StoredProcedure;
                    cmdInsert.Parameters.Add("@frDate", SqlDbType.VarChar).Value = dtefFdate;
                    cmdInsert.Parameters.Add("@todate", SqlDbType.VarChar).Value = dteTDate;
                    cmdInsert.Parameters.Add("@dblGP", SqlDbType.VarChar).Value = dblGP;
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.ExecuteNonQuery();
                    gcnMain.Close();
                    cmdInsert.Dispose();
                }

                return 1;
            }
        }

        public List<RAccountsGroup> mGetProfitLossQuerry(string strDeComID, int intType)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();

                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                strSQL = "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT FROM ACC_PROFIT_AND_LOSS ";
                if (intType > 0)
                {
                    strSQL = strSQL + " WHERE GR_PRIMARY_TYPE=" + intType + " ";
                }
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strGrName = dr["GR_NAME"].ToString();
                    oLedg.strGrParent = dr["GR_PARENT"].ToString();
                    oLedg.intPrimaryType = Convert.ToInt16(dr["GR_PRIMARY_TYPE"].ToString());
                    oLedg.dblAmount = Convert.ToDouble(dr["GR_AMOUNT"].ToString());
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strGrName = "";
                    oLedg.strGrParent = "";
                    oLedg.intPrimaryType = 0;
                    oLedg.dblAmount = 0;
                    ooAccLedger.Add(oLedg);
                }

                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }

        public List<RAccountsGroup> mGetTrailBalance(string strDeComID, DateTime strFdate, DateTime strTDate, int selection)
        {
            string strSQL = null;
            double dblTotal = 0, dblDr = 0, dblCr = 0;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                if (selection == 1)
                {
                    cmdInsert.CommandText = "gJagTrialBalanceGroup";
                }
                else
                {
                    cmdInsert.CommandText = "gJagTrialBalanceLedger";
                }
                cmdInsert.CommandType = CommandType.StoredProcedure;
                cmdInsert.Parameters.Add("@frDate", SqlDbType.Date).Value = strFdate;
                cmdInsert.Parameters.Add("@todate", SqlDbType.Date).Value = strTDate;
                cmdInsert.Parameters.Add("@OpenOrClose", SqlDbType.Decimal).Value = 0;
                cmdInsert.Connection = gcnMain;
                cmdInsert.ExecuteNonQuery();
                cmdInsert.Dispose();

                SqlCommand cmdUpdate = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdUpdate.Connection = gcnMain;
                cmdUpdate.Transaction = myTrans;
                strSQL = "INSERT INTO ACC_TRIAL_BALANCE(GR_NAME,GR_PARENT,GR_OPENING) VALUES('Diff in Opening Balances','Diff in Opening Balances'";
                strSQL = strSQL + ",(SELECT  (ISNULL(SUM(GR_OPENING),0) * -1) FROM ACC_TRIAL_BALANCE)) ";
                cmdUpdate.CommandText = strSQL;
                cmdUpdate.ExecuteNonQuery();
                strSQL = strSQL + " DELETE FROM ACC_TRIAL_BALANCE WHERE (GR_OPENING = 0) AND (GR_DEBIT = 0) AND (GR_CREDIT = 0) ";
                cmdUpdate.CommandText = strSQL;
                cmdUpdate.ExecuteNonQuery();
                strSQL = "update  t set t.GR_NAME=L.LEDGER_NAME_MERZE ";
                strSQL = strSQL + "from  ACC_TRIAL_BALANCE t, ACC_LEDGER L where L.LEDGER_NAME =t.GR_NAME  ";
                cmdUpdate.CommandText = strSQL;
                cmdUpdate.ExecuteNonQuery();
                cmdUpdate.Transaction.Commit();
                cmdUpdate.Dispose();

                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();

                strSQL = "SELECT SUM(GR_OPENING) AS GR_OPENING,SUM(GR_DEBIT) AS GR_DEBIT,SUM(GR_CREDIT) AS GR_CREDIT FROM ACC_TRIAL_BALANCE GROUP BY GR_PARENT";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    //RAccountsGroup oLedg = new RAccountsGroup();
                    dblTotal = Convert.ToDouble(dr["GR_OPENING"]) + Convert.ToDouble(dr["GR_DEBIT"]) + Convert.ToDouble(dr["GR_CREDIT"]);
                    if (dblTotal < 0)
                    {
                        dblDr = dblDr + dblTotal;
                    }
                    if (dblTotal > 0)
                    {
                        dblCr = dblCr + dblTotal;
                    }

                    dblTotal = 0;
                }
                if (dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.dblDr = dblDr;
                    oLedg.dblCr = dblCr;
                    ooAccLedger.Add(oLedg);
                }
                else
                {
                    if (!dr.HasRows)
                    {
                        RAccountsGroup oLedg = new RAccountsGroup();
                        oLedg.dblDr = 0;
                        oLedg.dblCr = 0;
                        ooAccLedger.Add(oLedg);
                    }
                }

                dr.Close();
                cmdInsert.Dispose();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }
        public List<RAccountsGroup> mGetTrailBalanceQuery(string strDeComID)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();


                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                strSQL = "SELECT ACC_TRIAL_BALANCE.GR_NAME, ACC_TRIAL_BALANCE.GR_PARENT, ACC_TRIAL_BALANCE.GR_OPENING, ACC_TRIAL_BALANCE.GR_DEBIT,";
                strSQL = strSQL + "ACC_TRIAL_BALANCE.GR_CREDIT , ACC_LEDGERGROUP.GR_SEQUENCES ";
                strSQL = strSQL + "FROM ACC_TRIAL_BALANCE ACC_TRIAL_BALANCE LEFT OUTER JOIN ";
                strSQL = strSQL + "ACC_LEDGERGROUP ACC_LEDGERGROUP ON ACC_TRIAL_BALANCE.GR_PARENT = ACC_LEDGERGROUP.GR_NAME ";
                strSQL = strSQL + "ORDER BY ACC_LEDGERGROUP.GR_SEQUENCES DESC, ACC_TRIAL_BALANCE.GR_PARENT, ACC_TRIAL_BALANCE.GR_NAME ";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strGrName = dr["GR_NAME"].ToString();
                    oLedg.strGrParent = dr["GR_PARENT"].ToString();
                    if (dr["GR_SEQUENCES"].ToString() != "")
                    {
                        oLedg.intGrSequences = Convert.ToInt32(dr["GR_SEQUENCES"].ToString());
                    }
                    else
                    {
                        oLedg.intGrSequences = 3000;
                    }
                    oLedg.dblOpening = Convert.ToDouble(dr["GR_OPENING"].ToString());
                    oLedg.dblDebit = Convert.ToDouble(dr["GR_DEBIT"].ToString());
                    oLedg.dblCredit = Convert.ToDouble(dr["GR_CREDIT"].ToString());
                    //oLedg.strGrParent = dr["GR_PARENT"].ToString();
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }

        public List<RAccountsGroup> RefreshLedger(string strDeComID, string strFdate, string strTDate,
                                                    string vstrLedgerName, string strBranchID, string strSelection)
        {
            string strSQL = null;
            double dblBackYearOpening = 0, dblOPening = 0, dblYearOpening = 0, dblOpeningDr = 0, dblOpeningCr = 0,
                                       dblTotalCredit = 0, dblTotalDebit = 0, dblclosing = 0, dblClosingDebit = 0, dblClosingCredit = 0;
            int introw = 0;
            string strstringNew = "";
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmd = new SqlCommand();
                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;
                if (strSelection != "")
                {

                    strSQL = "DELETE FROM ACC_MONTHLY_SUMMARY ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM ACC_VOUCHER_PARENT ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM ACC_VOUCHER_CHILD ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    if (strBranchID == "")
                    {
                        strSQL = "SELECT LEDGER_OPENING_BALANCE AS OPENING FROM ACC_LEDGER ";
                        strSQL = strSQL + "WHERE LEDGER_NAME = '" + vstrLedgerName + "' ";
                    }
                    else
                    {
                        strSQL = "SELECT BRANCH_LEDGER_OPENING_BALANCE AS OPENING FROM ACC_BRANCH_LEDGER_OPENING ";
                        strSQL = strSQL + "WHERE LEDGER_NAME = '" + vstrLedgerName.Replace("'", "''") + "' ";
                        if (strBranchID != "")
                        {
                            strSQL = strSQL + "AND BRANCH_ID = '" + strBranchID + "' ";
                        }
                    }

                    cmdInsert.CommandText = strSQL;
                    cmdInsert.Connection = gcnMain;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblOPening = Convert.ToDouble(dr["OPENING"].ToString());
                    }
                    dr.Close();

                    strSQL = "SELECT ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) AS OPENING ";
                    strSQL = strSQL + "FROM ACC_VOUCHER ";
                    strSQL = strSQL + "INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME= ACC_LEDGER.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE ACC_VOUCHER.LEDGER_NAME = '" + vstrLedgerName + "' ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE >= ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(Utility.gstrFinicialYearFrom) + "";
                    strSQL = strSQL + " AND  ";
                    strSQL = strSQL + " ACC_VOUCHER.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID = '" + strBranchID + "' ";
                    }
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.Connection = gcnMain;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblYearOpening = Convert.ToDouble(dr["OPENING"].ToString());
                    }
                    dr.Close();

                    strSQL = "SELECT ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) AS OPENING ";
                    strSQL = strSQL + "FROM ACC_VOUCHER ";
                    strSQL = strSQL + " INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME= ACC_LEDGER.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE ACC_VOUCHER.LEDGER_NAME = '" + vstrLedgerName + "' ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE < ";
                    strSQL = strSQL + Utility.cvtSQLDateString(Utility.gstrFinicialYearFrom) + " ";
                    strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE = " + (int)Utility.LEDGER_PRM_TYPE.lgrASSET + " OR ACC_LEDGER.LEDGER_PRIMARY_TYPE = " + (int)Utility.LEDGER_PRM_TYPE.lgrLIABILITY + " ) ";

                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID = '" + strBranchID + "' ";
                    }
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.Connection = gcnMain;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblBackYearOpening = Convert.ToDouble(dr["OPENING"].ToString());
                    }
                    dr.Close();


                    dblOPening = dblYearOpening + dblBackYearOpening + dblOPening;

                    if (dblOPening < 0)
                    {
                        dblOpeningDr = dblOPening;
                    }
                    else
                    {
                        dblOpeningCr = dblOPening;
                    }

                    strSQL = "SELECT ISNULL(SUM(VOUCHER_CREDIT_AMOUNT),0) AS TOTAL_CREDIT,";
                    strSQL = strSQL + "ISNULL(SUM(VOUCHER_DEBIT_AMOUNT),0) AS TOTAL_DEBIT ";
                    strSQL = strSQL + "FROM ACC_VOUCHER ";
                    strSQL = strSQL + "WHERE LEDGER_NAME = '" + vstrLedgerName + "' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strTDate) + ") ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND BRANCH_ID = '" + strBranchID + "' ";
                    }
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.Connection = gcnMain;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblTotalCredit = Convert.ToDouble(dr["TOTAL_CREDIT"].ToString());
                        dblTotalDebit = Convert.ToDouble(dr["TOTAL_DEBIT"].ToString());
                    }
                    dr.Close();


                    dblclosing = dblOPening + (dblTotalCredit - dblTotalDebit);

                    if (dblclosing > 0)
                    {
                        dblClosingDebit = dblclosing;
                    }
                    else
                    {
                        dblClosingCredit = dblclosing;
                    }
                    if (strSelection != "3")
                    {
                        strSQL = "INSERT INTO ACC_VOUCHER_PARENT(BRANCH_ID,COMP_REF_NO,COMP_VOUCHER_TYPE,COMP_VOUCHER_DATE,VOUCHER_TOBY,";
                        strSQL = strSQL + "LEDGER_NAME,VOUCHER_DEBIT_AMOUNT,VOUCHER_CREDIT_AMOUNT,VOUCHER_NARRATION,LEDGER_HEAD,LEDGER_NAME_MERZE) ";
                        strSQL = strSQL + "SELECT v.BRANCH_ID,v.COMP_REF_NO,v.COMP_VOUCHER_TYPE,v.COMP_VOUCHER_DATE,v.VOUCHER_TOBY,v.VOUCHER_REVERSE_LEDGER,SUM(v.VOUCHER_DEBIT_AMOUNT),";
                        strSQL = strSQL + "SUM(v.VOUCHER_CREDIT_AMOUNT),v.VOUCHER_NARRATION, '" + vstrLedgerName + "',l.LEDGER_NAME_MERZE ";
                        strSQL = strSQL + "FROM ACC_VOUCHER v,ACC_LEDGER L WHERE L.LEDGER_NAME=v.LEDGER_NAME  ";
                        strSQL = strSQL + "AND L.LEDGER_NAME = '" + vstrLedgerName + "' ";
                        strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN ";
                        strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                        strSQL = strSQL + "AND ";
                        strSQL = strSQL + " " + Utility.cvtSQLDateString(strTDate) + ") ";
                        if (strBranchID != "")
                        {
                            strSQL = strSQL + "AND v.BRANCH_ID = '" + strBranchID + "' ";
                        }
                        strSQL = strSQL + "GROUP BY v.BRANCH_ID,v.COMP_REF_NO,v.COMP_VOUCHER_TYPE,v.COMP_VOUCHER_DATE,";
                        strSQL = strSQL + "v.VOUCHER_TOBY,v.VOUCHER_REVERSE_LEDGER,v.VOUCHER_NARRATION,l.LEDGER_NAME_MERZE ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();

                        strSQL = "update  p set p.LEDGER_NAME=l.LEDGER_NAME_MERZE ";
                        strSQL = strSQL + "from ACC_VOUCHER_PARENT p,ACC_LEDGER L  where p.LEDGER_NAME =L.LEDGER_NAME  ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();


                        strSQL = "SELECT COMP_REF_NO, LEDGER_NAME,VOUCHER_CHEQUE_NUMBER,VOUCHER_CHEQUE_DATE,VOUCHER_CHEQUE_DRAWN_ON FROM ACC_VOUCHER ";
                        strSQL = strSQL + " WHERE (LEDGER_NAME ='" + vstrLedgerName + "' ";
                        strSQL = strSQL + " OR VOUCHER_REVERSE_LEDGER ='" + vstrLedgerName + "') ";
                        strSQL = strSQL + " AND  VOUCHER_CHEQUE_NUMBER is not null ";
                        cmdInsert.CommandText = strSQL;
                        dr = cmdInsert.ExecuteReader();
                        while (dr.Read())
                        {
                            string strCheckDate = "";
                            if (dr["VOUCHER_CHEQUE_DATE"].ToString() != "")
                            {
                                strCheckDate = Convert.ToDateTime(dr["VOUCHER_CHEQUE_DATE"]).ToString("dd/MM/yyyy");
                            }
                            else
                            {
                                strCheckDate = "";
                            }
                            strstringNew = strstringNew + dr["COMP_REF_NO"].ToString() + "|" + dr["VOUCHER_CHEQUE_NUMBER"].ToString() + "|" +
                                                    strCheckDate + "|" + dr["VOUCHER_CHEQUE_DRAWN_ON"].ToString() + "~";

                        }
                        dr.Close();
                        dr.Close();

                        if (strstringNew != "")
                        {

                            string[] words = strstringNew.Split('~');
                            foreach (string ooassets in words)
                            {
                                string[] oAssets = ooassets.Split('|');
                                if (oAssets[0] != "")
                                {
                                    strSQL = "UPDATE ACC_VOUCHER_PARENT SET ";
                                    strSQL = strSQL + "CHEQUE_NO='" + oAssets[1].ToString() + "' ";
                                    if (oAssets[2].ToString() != "")
                                    {
                                        strSQL = strSQL + ",CHEQUE_DATE=" + Utility.cvtSQLDateString(oAssets[2].ToString()) + " ";
                                    }
                                    else
                                    {
                                        strSQL = strSQL + ",CHEQUE_DATE= null";
                                    }
                                    if (oAssets[3].ToString() != "")
                                    {
                                        strSQL = strSQL + ",CHEQUE_DRAWN_ON= '" + oAssets[3].ToString() + "' ";
                                    }
                                    else
                                    {
                                        strSQL = strSQL + ",CHEQUE_DRAWN_ON= null";
                                    }


                                    strSQL = strSQL + " WHERE COMP_REF_NO ='" + oAssets[0].ToString() + "' ";

                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();

                                    if (strSelection == "1")
                                    {
                                        strSQL = "UPDATE ACC_VOUCHER_PARENT SET LEDGER_NAME= (SELECT DISTINCT VOUCHER_REVERSE_LEDGER  FROM ACC_VOUCHER WHERE COMP_REF_NO ='" + oAssets[0].ToString() + "' ";
                                        strSQL = strSQL + " AND COMP_VOUCHER_POSITION < 2 AND  VOUCHER_REVERSE_LEDGER <> '" + vstrLedgerName.Trim().Replace("'", "''") + "')";
                                        strSQL = strSQL + " WHERE COMP_REF_NO ='" + oAssets[0].ToString() + "' ";
                                        cmdInsert.CommandText = strSQL;
                                        cmdInsert.ExecuteNonQuery();
                                    }
                                    if (strSelection == "2")
                                    {
                                        strSQL = "UPDATE ACC_VOUCHER_PARENT SET LEDGER_NAME= (SELECT DISTINCT VOUCHER_REVERSE_LEDGER  FROM ACC_VOUCHER WHERE COMP_REF_NO ='" + oAssets[0].ToString() + "' ";
                                        strSQL = strSQL + " AND COMP_VOUCHER_POSITION < 2 AND  VOUCHER_REVERSE_LEDGER <> '" + vstrLedgerName.Trim().Replace("'", "''") + "')";
                                        strSQL = strSQL + " WHERE COMP_REF_NO ='" + oAssets[0].ToString() + "' ";
                                        cmdInsert.CommandText = strSQL;
                                        cmdInsert.ExecuteNonQuery();
                                    }


                                }
                            }
                        }

                        strSQL = "INSERT INTO ACC_VOUCHER_CHILD(COMP_REF_NO,LEDGER_NAME,CHILD_AMOUNT,CHILD_TOBY,BRANCH_ID)";
                        strSQL = strSQL + "SELECT COMP_REF_NO,LEDGER_NAME,VOUCHER_DEBIT_AMOUNT+VOUCHER_CREDIT_AMOUNT,";
                        strSQL = strSQL + "VOUCHER_TOBY,BRANCH_ID FROM ACC_VOUCHER ";
                        strSQL = strSQL + "WHERE COMP_REF_NO IN(SELECT COMP_REF_NO FROM ACC_VOUCHER WHERE LEDGER_NAME = '" + vstrLedgerName + "') ";
                        strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN ";
                        strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                        strSQL = strSQL + "AND ";
                        strSQL = strSQL + " " + Utility.cvtSQLDateString(strTDate) + ")  ";
                        strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER = '" + "As per Details' ";
                        if (strBranchID != "")
                        {
                            strSQL = strSQL + "AND BRANCH_ID = '" + strBranchID + "' ";
                        }
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();

                        strSQL = "DELETE FROM ACC_VOUCHER_CHILD WHERE LEDGER_NAME = '" + vstrLedgerName + "'";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    else
                    {
                        strSQL = "INSERT INTO ACC_MONTHLY_SUMMARY(MONTH_ID,DEBIT,CREDIT) VALUES('000000'," + Math.Abs(dblOpeningDr) + "," + Math.Abs(dblOpeningCr) + ")";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();

                        strSQL = "INSERT INTO ACC_MONTHLY_SUMMARY(MONTH_ID,DEBIT,CREDIT)";
                        strSQL = strSQL + "SELECT RIGHT( '0000'+ Convert(varchar, year(COMP_VOUCHER_DATE)), 4) + RIGHT( '00'+ Convert(varchar, month(COMP_VOUCHER_DATE)), 2),  SUM(v.VOUCHER_DEBIT_AMOUNT) VOUCHER_DEBIT_AMOUNT, ";
                        strSQL = strSQL + "SUM(v.VOUCHER_CREDIT_AMOUNT) VOUCHER_CREDIT_AMOUNT FROM ACC_VOUCHER v ";
                        strSQL = strSQL + "WHERE v.LEDGER_NAME = '" + vstrLedgerName + "'";
                        strSQL = strSQL + "AND (V.COMP_VOUCHER_DATE BETWEEN ";
                        strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                        strSQL = strSQL + "AND ";
                        strSQL = strSQL + " " + Utility.cvtSQLDateString(strTDate) + ")  ";
                        strSQL = strSQL + "group by  RIGHT( '0000'+ Convert(varchar, year(COMP_VOUCHER_DATE)), 4) + RIGHT( '00'+ Convert(varchar, month(COMP_VOUCHER_DATE)), 2) ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();

                    }
                    cmdInsert.Transaction.Commit();

                    //strstringNew = "";

                    if (strSelection != "3")
                    {

                        strSQL = "SELECT ";
                        strSQL = strSQL + "substring(ACC_VOUCHER_PARENT.COMP_REF_NO,7,30) COMP_REF_NO , ACC_VOUCHER_PARENT.COMP_VOUCHER_TYPE, ACC_VOUCHER_PARENT.COMP_VOUCHER_DATE,'1' month, ";
                        if (strSelection == "2")
                        {
                            strSQL = strSQL + "ACC_VOUCHER_PARENT.LEDGER_NAME,";
                        }
                        else if (strSelection == "4")
                        {
                            strSQL = strSQL + "ACC_VOUCHER_PARENT.LEDGER_NAME,";
                        }
                        else if (strSelection == "1")
                        {
                            strSQL = strSQL + "ACC_VOUCHER_PARENT.LEDGER_NAME,";
                        }
                        else
                        {
                            strSQL = strSQL + "ACC_VOUCHER_PARENT.LEDGER_NAME_MERZE LEDGER_NAME,";
                        }
                        strSQL = strSQL + "ACC_VOUCHER_CHILD.LEDGER_NAME CHILDLEDGER, ACC_VOUCHER_CHILD.CHILD_AMOUNT, ACC_VOUCHER_CHILD.CHILD_TOBY,";
                        strSQL = strSQL + "ACC_VOUCHER_PARENT.VOUCHER_DEBIT_AMOUNT,ACC_VOUCHER_PARENT.VOUCHER_CREDIT_AMOUNT, ACC_VOUCHER_PARENT.VOUCHER_TOBY,";
                        strSQL = strSQL + "ACC_VOUCHER_CHILD.CHILD_AMOUNT,ACC_VOUCHER_CHILD.CHILD_TOBY,ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION,ACC_COMPANY_VOUCHER.COMP_VOUCHER_MONTH_ID ";
                        strSQL = strSQL + "FROM ";
                        strSQL = strSQL + "ACC_VOUCHER_PARENT ACC_VOUCHER_PARENT INNER JOIN ACC_COMPANY_VOUCHER ACC_COMPANY_VOUCHER ON ACC_VOUCHER_PARENT.COMP_REF_NO = ACC_COMPANY_VOUCHER.COMP_REF_NO LEFT OUTER JOIN ACC_VOUCHER_CHILD ACC_VOUCHER_CHILD ON ACC_VOUCHER_PARENT.COMP_REF_NO = ACC_VOUCHER_CHILD.COMP_REF_NO ";
                        strSQL = strSQL + "WHERE ";
                        strSQL = strSQL + "ACC_VOUCHER_PARENT.LEDGER_HEAD  = '" + vstrLedgerName + "'";
                        strSQL = strSQL + "ORDER BY ";
                        strSQL = strSQL + "ACC_VOUCHER_PARENT.COMP_VOUCHER_DATE,SUBSTRING(ACC_VOUCHER_PARENT.COMP_REF_NO, 7, 30) ASC ";
                        cmdInsert.CommandText = strSQL;
                    }
                    else
                    {
                        //strSQL = "SELECT '1' COMP_REF_NO,'1' LEDGER_NAME,'' CHILDLEDGER,0 CHILD_AMOUNT,'' CHILD_TOBY,'' COMP_VOUCHER_DATE,'0' COMP_VOUCHER_TYPE, month(ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE) as month";
                        //strSQL = strSQL + ",SUM(ACC_VOUCHER_PARENT.VOUCHER_DEBIT_AMOUNT) as VOUCHER_DEBIT_AMOUNT ,sum(ACC_VOUCHER_PARENT.VOUCHER_CREDIT_AMOUNT) as VOUCHER_CREDIT_AMOUNT, ";
                        //strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION ,ACC_COMPANY_VOUCHER.COMP_VOUCHER_MONTH_ID FROM ";
                        //strSQL = strSQL + "ACC_VOUCHER_PARENT ACC_VOUCHER_PARENT INNER JOIN ACC_COMPANY_VOUCHER ACC_COMPANY_VOUCHER ON ACC_VOUCHER_PARENT.COMP_REF_NO = ACC_COMPANY_VOUCHER.COMP_REF_NO ";
                        //strSQL = strSQL + "LEFT OUTER JOIN ACC_VOUCHER_CHILD ACC_VOUCHER_CHILD ON ACC_VOUCHER_PARENT.COMP_REF_NO = ACC_VOUCHER_CHILD.COMP_REF_NO ";
                        //strSQL = strSQL + "group by month(ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE) ,ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION ,ACC_COMPANY_VOUCHER.COMP_VOUCHER_MONTH_ID ";
                        //strSQL = strSQL + " order by month(ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE) ";
                        strSQL = "SELECT '1' COMP_REF_NO,'1' LEDGER_NAME,'' CHILDLEDGER,0 CHILD_AMOUNT,'' CHILD_TOBY,'' COMP_VOUCHER_DATE,'0' COMP_VOUCHER_TYPE, ";
                        strSQL = strSQL + "MONTH_ID month,DEBIT as VOUCHER_DEBIT_AMOUNT ,";
                        strSQL = strSQL + "CREDIT as VOUCHER_CREDIT_AMOUNT, '' COMP_VOUCHER_NARRATION ,MONTH_ID COMP_VOUCHER_MONTH_ID ";
                        strSQL = strSQL + "FROM ACC_MONTHLY_SUMMARY  order by MONTH_ID ";
                        cmdInsert.CommandText = strSQL;
                    }
                    dr = cmdInsert.ExecuteReader();
                    double dblrunn = 0;
                    while (dr.Read())
                    {
                        RAccountsGroup oLedg = new RAccountsGroup();
                        if (dr["COMP_VOUCHER_MONTH_ID"].ToString() != "")
                        {
                            oLedg.strMonthID = dr["COMP_VOUCHER_MONTH_ID"].ToString().ToUpper();

                        }
                        else
                        {
                            oLedg.strMonthID = "";
                        }
                        oLedg.strRefNo = dr["COMP_REF_NO"].ToString();
                        oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                        if (dr["COMP_VOUCHER_DATE"].ToString() != "")
                        {
                            oLedg.strDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd/MM/yyyy");
                        }
                        if (dr["COMP_VOUCHER_NARRATION"].ToString() != "")
                        {
                            oLedg.strNarration = dr["COMP_VOUCHER_NARRATION"].ToString();
                        }
                        else
                        {
                            oLedg.strNarration = "";
                        }
                        oLedg.intvoucherType = Convert.ToInt16(dr["COMP_VOUCHER_TYPE"]);
                        oLedg.dblDebit = Convert.ToDouble(dr["VOUCHER_DEBIT_AMOUNT"]);
                        oLedg.dblCredit = Convert.ToDouble(dr["VOUCHER_CREDIT_AMOUNT"]);

                        if (dr["CHILDLEDGER"].ToString() != "")
                        {
                            oLedg.strReverseLedger = dr["CHILDLEDGER"].ToString();
                            oLedg.dblMnauAmount = Convert.ToDouble(dr["CHILD_AMOUNT"]);
                            oLedg.strToBy = dr["CHILD_TOBY"].ToString();

                        }
                        else
                        {
                            oLedg.strReverseLedger = "";
                            oLedg.dblMnauAmount = 0;
                            oLedg.strToBy = "";
                        }
                        if (strSelection == "4")
                        {
                            if (introw == 0)
                            {
                                dblrunn = dblOpeningDr + dblOpeningCr;
                            }
                            dblrunn = dblrunn + (Convert.ToDouble(dr["VOUCHER_CREDIT_AMOUNT"]) - Convert.ToDouble(dr["VOUCHER_DEBIT_AMOUNT"]));
                        }
                        else
                        {
                            dblrunn = dblrunn + (Convert.ToDouble(dr["VOUCHER_CREDIT_AMOUNT"]) - Convert.ToDouble(dr["VOUCHER_DEBIT_AMOUNT"]));
                        }
                        oLedg.dblRunningTotal = dblrunn;
                        oLedg.intGrSequences = Convert.ToInt32(dr["month"].ToString());
                        if (introw == 0)
                        {
                            oLedg.dblOpeningDr = Math.Abs(dblOpeningDr);
                            oLedg.dblOpeningCr = Math.Abs(dblOpeningCr);
                            oLedg.ClosingDr = Math.Abs(dblClosingDebit);
                            oLedg.ClosingCr = Math.Abs(dblClosingCredit);
                            oLedg.OpeningAndDebit = Math.Abs(dblTotalDebit);
                            oLedg.OpeningAndCredit = Math.Abs(dblTotalCredit);
                        }
                        ooAccLedger.Add(oLedg);
                        introw += 1;
                    }
                    if (!dr.Read())
                    {
                        RAccountsGroup oLedg = new RAccountsGroup();
                        oLedg.strMonthID = "";
                        oLedg.strRefNo = "";
                        oLedg.strLedgerName = "";
                        oLedg.strDate = "";
                        oLedg.intvoucherType = 0;
                        oLedg.dblDebit = 0;
                        oLedg.dblCredit = 0;
                        dblrunn = 0;
                        oLedg.dblRunningTotal = dblrunn;
                        oLedg.intGrSequences = 0;
                        oLedg.dblOpeningDr = Math.Abs(dblOpeningDr);
                        oLedg.dblOpeningCr = Math.Abs(dblOpeningCr);
                        oLedg.ClosingDr = Math.Abs(dblClosingDebit);
                        oLedg.ClosingCr = Math.Abs(dblClosingCredit);
                        oLedg.OpeningAndDebit = Math.Abs(dblTotalDebit);
                        oLedg.OpeningAndCredit = Math.Abs(dblTotalCredit);
                        oLedg.strReverseLedger = "";
                        oLedg.dblMnauAmount = 0;
                        oLedg.strToBy = "";
                        ooAccLedger.Add(oLedg);
                    }

                    dr.Close();
                    gcnMain.Close();
                }
                return ooAccLedger;

            }
        }

        public List<RAccountsGroup> mReportDayBookDetails(string strDeComID, string strFDate, string strTDate, string strSelection, string strString, string strBranchID)
        {
            string strSQL = null;
            int intVoucherType;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();


                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                strSQL = "SELECT ACC_COMPANY_VOUCHER.COMP_REF_NO, ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE, ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE,";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION, ACC_VOUCHER.COMP_VOUCHER_POSITION, ACC_LEDGER.LEDGER_NAME_MERZE LEDGER_NAME,";
                strSQL = strSQL + "ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT , ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT ";
                strSQL = strSQL + "FROM ACC_COMPANY_VOUCHER , ACC_VOUCHER , ACC_BRANCH,ACC_LEDGER  ";
                strSQL = strSQL + "WHERE ACC_COMPANY_VOUCHER.COMP_REF_NO = ACC_VOUCHER.COMP_REF_NO  AND  ACC_COMPANY_VOUCHER.BRANCH_ID = ACC_BRANCH.BRANCH_ID  AND ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME ";
                strSQL = strSQL + "AND ";
                if (strString != "")
                {
                    intVoucherType = Utility.mstrGetVoucherType(strString);
                    strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = " + intVoucherType + " AND ";
                }
                if (strBranchID != "")
                {
                    strSQL = strSQL + "ACC_COMPANY_VOUCHER.BRANCH_ID = '" + strBranchID + "' AND ";
                }
                strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_DATE >= " + Utility.cvtSQLDateString(strFDate) + " AND ";
                strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_DATE <= " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "ORDER BY ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE ASC,ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE ASC, ";
                strSQL = strSQL + "SUBSTRING(ACC_COMPANY_VOUCHER.COMP_REF_NO,7,30) ASC, ";
                strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_POSITION ASC ";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strRefNo = dr["COMP_REF_NO"].ToString();
                    oLedg.intvoucherType = Convert.ToInt32(dr["COMP_VOUCHER_TYPE"].ToString());
                    oLedg.strDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd/MM/yyyy");
                    if (dr["COMP_VOUCHER_NARRATION"].ToString() != "")
                    {
                        oLedg.strNarration = dr["COMP_VOUCHER_NARRATION"].ToString();
                    }
                    else
                    {
                        oLedg.strNarration = "";
                    }
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.dblDebit = Convert.ToDouble(dr["VOUCHER_DEBIT_AMOUNT"].ToString());
                    oLedg.dblCredit = Convert.ToDouble(dr["VOUCHER_CREDIT_AMOUNT"].ToString());

                    ooAccLedger.Add(oLedg);
                }
                if (!dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strRefNo = "";
                    oLedg.intvoucherType = 0;
                    oLedg.strDate = "";
                    oLedg.strNarration = "";
                    oLedg.strLedgerName = "";
                    oLedg.dblDebit = 0;
                    oLedg.dblCredit = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }

        public List<RAccountsGroup> GroupSummaryReport(string strDeComID, string strFDate, string strTDate, string strSelection, string strGroupName, string strBranchID, int intSuppress)
        {
            string strSQL = null, strStockInHand = "";
            int intstring;
            long lngLevel = 0, lngPrimaryType = 0;
            double dblOpeningStock = 0, dblTotalOpening = 0, dblClosing = 0; ;
            double dblopn = 0, dblDRnew, dblCRnew, dblDr = 0, dblCr = 0, dblrptOpn = 0, dblRptDr = 0, dblRptCr = 0;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();

                strSQL = "TRUNCATE TABLE ACC_GROUP_SUMMARY ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                cmdInsert.ExecuteNonQuery();
                strSQL = "SELECT GR_LEVEL,GR_PRIMARY_TYPE,GR_DEFAULT_NAME FROM ACC_LEDGERGROUP ";
                strSQL = strSQL + "WHERE GR_NAME = '" + strGroupName + "' ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    lngLevel = Convert.ToInt64(dr["GR_LEVEL"]) + 1;
                    lngPrimaryType = Convert.ToInt64(dr["GR_PRIMARY_TYPE"]);
                    if (dr["GR_DEFAULT_NAME"].ToString() == "Current Assets")
                    {
                        if (Utility.glngIntegrateInventory == 1)
                        {
                            dr.Close();
                            strSQL = "SELECT LEDGER_NAME,LEDGER_OPENING_BALANCE FROM ACC_LEDGER WHERE LEDGER_GROUP = " + (long)Utility.GR_GROUP_TYPE.grSTOCK_IN_HAND + " ";
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.Connection = gcnMain;
                            dr = cmdInsert.ExecuteReader();
                            if (dr.Read())
                            {
                                strStockInHand = dr["LEDGER_NAME"].ToString();
                                dblOpeningStock = Convert.ToDouble(dr["LEDGER_OPENING_BALANCE"].ToString());
                            }
                            dr.Close();
                            strSQL = "SELECT ISNULL(STOCK_CLOSING_AMOUNT,0) AS CLOSING FROM ACC_STOCK_IN_HAND ";
                            strSQL = strSQL + "WHERE LEDGER_NAME = '" + strStockInHand + "' ";
                            strSQL = strSQL + "AND STOCK_DATE < " + Utility.cvtSQLDateString(strFDate) + " ";
                            strSQL = strSQL + "ORDER BY STOCK_DATE DESC ";
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.Connection = gcnMain;
                            dr = cmdInsert.ExecuteReader();
                            while (dr.Read())
                            {
                                dblOpeningStock = Convert.ToDouble(dr["CLOSING"].ToString());
                                dblTotalOpening = dblTotalOpening + dblOpeningStock;
                            }
                            dr.Close();

                            strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                            strSQL = strSQL + "VALUES('Opening Stock','" + strGroupName + "'," + dblTotalOpening + ")";
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();
                        }
                        else
                        {
                            dr.Close();
                            strSQL = "SELECT ISNULL(SUM(INV_TRAN_AMOUNT),0) AS AMT FROM INV_STOCKITEM_TRAN_QRY ";
                            strSQL = strSQL + "WHERE INV_DATE < " + Utility.cvtSQLDateString(strFDate) + " ";
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.Connection = gcnMain;
                            dr = cmdInsert.ExecuteReader();
                            if (dr.Read())
                            {
                                dblOpeningStock = Convert.ToDouble(dr["AMT"]) * -1;
                                dr.Close();
                                strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                                strSQL = strSQL + "VALUES('Opening Stock','" + strGroupName + "'," + dblOpeningStock + ")";
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                            }
                        }
                    }

                }
                dr.Close();
                if (strSelection == "Group")
                {
                    intstring = gGroupSummary(strDeComID, strGroupName, lngPrimaryType, lngLevel, strFDate, strTDate);
                }
                else
                {
                    intstring = gGroupSummaryLedgerWise(strDeComID, strGroupName, lngPrimaryType, lngLevel, strFDate, strTDate);

                }

                strSQL = "SELECT ISNULL(SUM(GR_OPENING),0) AS OPN, ISNULL(SUM(GR_DEBIT),0) AS DR, ISNULL(SUM(GR_CREDIT),0) AS CR from ACC_GROUP_SUMMARY ";
                strSQL = strSQL + " GROUP BY GR_PARENT ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {

                    dblopn = Convert.ToDouble(dr["OPN"]);
                    dblDRnew = Math.Abs(Convert.ToDouble(dr["DR"]));
                    dblCRnew = Math.Abs(Convert.ToDouble(dr["CR"]));

                    if (dblopn + (dblCRnew - dblDRnew) < 0)
                    {
                        dblDr = dblDr + (dblopn) + (dblCRnew - dblDRnew);
                    }
                    else
                    {
                        dblCr = dblCr + (dblopn) - ((dblDRnew - dblCRnew));
                    }
                    dblopn = 0;
                    dblDRnew = 0;
                    dblCRnew = 0;
                }

                dr.Close();
                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                if (strSelection == "Group")
                {
                    strSQL = "SELECT '' GR_NAME,ACC_GROUP_SUMMARY.GR_PARENT, SUM(ACC_GROUP_SUMMARY.GR_OPENING) GR_OPENING ,SUM(ACC_GROUP_SUMMARY.GR_DEBIT) GR_DEBIT, SUM(ACC_GROUP_SUMMARY.GR_CREDIT) GR_CREDIT FROM ACC_GROUP_SUMMARY  ";
                    if (intSuppress > 0)
                    {
                        strSQL = strSQL + "WHERE  SUM(ACC_GROUP_SUMMARY.GR_OPENING) +SUM(ACC_GROUP_SUMMARY.GR_DEBIT) + SUM(ACC_GROUP_SUMMARY.GR_CREDIT) > 0";
                    }
                    strSQL = strSQL + "GROUP BY  ACC_GROUP_SUMMARY.GR_PARENT ";
                    strSQL = strSQL + "ORDER BY ACC_GROUP_SUMMARY.GR_PARENT  ";
                }
                else
                {
                    strSQL = "SELECT ACC_GROUP_SUMMARY.GR_NAME, ACC_GROUP_SUMMARY.GR_PARENT, SUM(ACC_GROUP_SUMMARY.GR_OPENING) GR_OPENING ,SUM(ACC_GROUP_SUMMARY.GR_DEBIT) GR_DEBIT, SUM(ACC_GROUP_SUMMARY.GR_CREDIT) GR_CREDIT FROM ACC_GROUP_SUMMARY  ";
                    if (intSuppress > 0)
                    {
                        strSQL = strSQL + "WHERE  SUM(ACC_GROUP_SUMMARY.GR_OPENING) +SUM(ACC_GROUP_SUMMARY.GR_DEBIT) + SUM(ACC_GROUP_SUMMARY.GR_CREDIT) > 0";
                    }
                    strSQL = strSQL + "GROUP BY ACC_GROUP_SUMMARY.GR_NAME, ACC_GROUP_SUMMARY.GR_PARENT ";
                    strSQL = strSQL + "ORDER BY ACC_GROUP_SUMMARY.GR_PARENT  ";
                }
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();

                    dblClosing = Convert.ToDouble(dr["GR_OPENING"].ToString()) + (Convert.ToDouble(dr["GR_DEBIT"].ToString()) * -1 + Convert.ToDouble(dr["GR_CREDIT"].ToString()));
                    //dblrptOpn = Convert.ToDouble(dr["GR_OPENING"].ToString());
                    //dblRptDr = Convert.ToDouble(dr["GR_DEBIT"].ToString());
                    //dblRptCr = Convert.ToDouble(dr["GR_CREDIT"].ToString());

                    //if (Convert.ToDouble(dr["GR_OPENING"].ToString()) <0 )
                    //{
                    //    dblClosing = (dblrptOpn + dblRptCr) - dblRptDr;
                    //}
                    //else
                    //{
                    //    //dblClosing = Convert.ToDouble(dr["GR_OPENING"].ToString()) + (Convert.ToDouble(dr["GR_CREDIT"].ToString()) * -1 + Convert.ToDouble(dr["GR_DEBIT"].ToString()));
                    //    dblClosing = (dblrptOpn + dblRptDr) - dblRptCr;
                    //}

                    //if (strSelection == "Group")
                    //{
                    //    oLedg.strGrName = dr["GR_NAME"].ToString();
                    //    oLedg.strGrParent = dr["GR_PARENT"].ToString();
                    //}
                    //else
                    //{
                    if (dr["GR_NAME"].ToString() != "")
                    {
                        oLedg.strGrName = dr["GR_NAME"].ToString();
                    }
                    else
                    {
                        oLedg.strGrName = "";
                    }
                    oLedg.strGrParent = dr["GR_PARENT"].ToString();
                    //}
                    oLedg.dblOpening = Convert.ToDouble(dr["GR_OPENING"].ToString());
                    oLedg.dblDebit = Convert.ToDouble(dr["GR_DEBIT"].ToString());
                    oLedg.dblCredit = Convert.ToDouble(dr["GR_CREDIT"].ToString());
                    if (dblClosing < 0)
                    {
                        oLedg.ClosingDr = dblClosing * -1;
                    }
                    else
                    {
                        oLedg.ClosingCr = dblClosing;
                    }
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strGrName = "";
                    oLedg.strGrParent = "";
                    oLedg.dblOpening = 0;
                    oLedg.dblDebit = 0;
                    oLedg.dblCredit = 0;
                    ooAccLedger.Add(oLedg);
                }
                gcnMain.Close();
                cmdInsert.Dispose();
                return ooAccLedger;

            }
        }

        private int gGroupSummary(string strDeComID, string vstrGroupName,
                                        long vlngPrimaryType,
                                        long vlngLevel,
                                        string vdteFromDate,
                                        string vdteTodate)
        {
            string strSQL, strString = "";
            double dblAmnt = 0;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;

                //'Opening for Group
                //strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                //strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,(GR_OPENING_CREDIT + GR_OPENING_DEBIT) AS YY ";
                //strSQL = strSQL + "FROM ACC_LEDGERGROUP ";
                //strSQL = strSQL + "WHERE GR_PARENT = '" + vstrGroupName + "'";
                //strSQL = strSQL + "AND GR_GROUP <> 401 ";
                //cmdInsert.CommandText = strSQL;
                //cmdInsert.ExecuteNonQuery();

                //strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                //strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,(GR_OPENING_CREDIT + GR_OPENING_DEBIT) AS YY ";
                //strSQL = strSQL + "FROM ACC_LEDGERGROUP ";
                //strSQL = strSQL + "WHERE GR_PARENT = '" + vstrGroupName + "'";
                //strSQL = strSQL + "AND GR_GROUP <> 401 ";
                //cmdInsert.CommandText = strSQL;
                //cmdInsert.ExecuteNonQuery();

                strSQL = "SELECT GR_NAME,GR_PARENT ";
                strSQL = strSQL + "FROM ACC_LEDGERGROUP ";
                strSQL = strSQL + "WHERE GR_PARENT = '" + vstrGroupName + "'";
                strSQL = strSQL + "AND GR_GROUP <> 401 ";
                // strSQL = "SELECT GR_PARENT FROM ACC_GROUP_SUMMARY WHERE GR_OPENING <> 0 ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    strString = strString + dr["GR_NAME"].ToString() + "|" + dr["GR_PARENT"].ToString() + "~";
                }
                dr.Close();
                if (strString != "")
                {
                    string[] words = strString.Split('~');
                    foreach (string ooValue in words)
                    {
                        string[] ooCostLedger = ooValue.Split('|');
                        if (ooCostLedger[0] != "")
                        {
                            strSQL = "select isnull(sum(LEDGER_OPENING_BALANCE),0) amnt from ACC_LEDGER_Z_D_A_GROUP_OPN  ";
                            strSQL = strSQL + "WHERE  ZONE='" + ooCostLedger[0] + "' or division ='" + ooCostLedger[0] + "' or Area ='" + ooCostLedger[0] + "'";
                            cmdInsert.CommandText = strSQL;
                            dr = cmdInsert.ExecuteReader();
                            if (dr.Read())
                            {

                                dblAmnt = Convert.ToDouble(dr["amnt"]);
                                dr.Close();
                                if (dblAmnt != 0)
                                {
                                    strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                                    strSQL = strSQL + "VALUES(";
                                    strSQL = strSQL + "'" + ooCostLedger[0].Replace("'", "''") + "'";
                                    strSQL = strSQL + ",'" + ooCostLedger[1].Replace("'", "''") + "'";
                                    strSQL = strSQL + "," + dblAmnt + " )";
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                }
                                else
                                {
                                    strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                                    strSQL = strSQL + "SELECT GR_NAME,GR_PARENT,GR_OPENING_DEBIT FROM ACC_LEDGERGROUP ";
                                    strSQL = strSQL + "WHERE GR_NAME='" + ooCostLedger[0].Replace("'", "''") + "'";
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                }
                            }
                        }
                    }
                }
                dr.Close();
                ////'Opening for Ledger
                strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                strSQL = strSQL + "SELECT LEDGER_NAME_MERZE,LEDGER_PARENT_GROUP,LEDGER_OPENING_BALANCE ";
                strSQL = strSQL + "FROM ACC_LEDGER ";
                strSQL = strSQL + "WHERE LEDGER_PARENT_GROUP = '" + vstrGroupName + "' ";
                strSQL = strSQL + "AND LEDGER_GROUP <> 401 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                if (vlngPrimaryType < 3)
                {
                    strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER.LEDGER_NAME_MERZE,ACC_MAIN_LEDGER_GR_SUMMARY.LEDGER_PARENT_GROUP,";
                    strSQL = strSQL + "SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER_GR_SUMMARY INNER JOIN ACC_LEDGER ON ACC_MAIN_LEDGER_GR_SUMMARY.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE ACC_MAIN_LEDGER_GR_SUMMARY.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                    strSQL = strSQL + "AND ACC_MAIN_LEDGER_GR_SUMMARY.LEDGER_PARENT_GROUP = '" + vstrGroupName + "' ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER.LEDGER_NAME_MERZE,ACC_MAIN_LEDGER_GR_SUMMARY.LEDGER_PARENT_GROUP ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    // 'As On Transaction Details
                    if (vstrGroupName == "Current Assets")
                    {
                        strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                        strSQL = strSQL + "SELECT ACC_LEDGER.LEDGER_NAME_MERZE,ACC_LEDGER_GROUP_QRY.GR_NAME,";
                        strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                        strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                        strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                        strSQL = strSQL + "AND GR_PARENT IN (SELECT GR_NAME FROM ACC_LEDGERGROUP WHERE GR_NAME = '" + vstrGroupName + "') ";
                        strSQL = strSQL + "and GR_NAME !='Sundry Debtors' ";
                        strSQL = strSQL + "GROUP BY ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER_GROUP_QRY.GR_NAME ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                        strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                        strSQL = strSQL + "SELECT 'Sundry Debtors','Current Assets', ";
                        strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                        strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                        strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                        strSQL = strSQL + "AND GR_PARENT IN (SELECT GR_NAME FROM ACC_LEDGERGROUP WHERE GR_NAME = 'Sundry Debtors') ";
                        //strSQL = strSQL + "GROUP BY ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER_GROUP_QRY.GR_NAME ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    else
                    {
                        strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                        strSQL = strSQL + "SELECT ACC_LEDGER.LEDGER_NAME_MERZE,ACC_LEDGER_GROUP_QRY.GR_NAME,";
                        strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                        strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                        strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                        strSQL = strSQL + "AND GR_PARENT IN (SELECT GR_NAME FROM ACC_LEDGERGROUP WHERE GR_NAME = '" + vstrGroupName + "') ";
                        strSQL = strSQL + "GROUP BY ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER_GROUP_QRY.GR_NAME ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }

                }
                else
                {
                    strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_TO_GROUP.GR_NAME, ACC_LEDGER.LEDGER_NAME_MERZE,";
                    strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_LEDGER_TO_GROUP INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER ON ACC_LEDGER_TO_GROUP.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME INNER JOIN ";
                    strSQL = strSQL + "ACC_VOUCHER ON ACC_LEDGER.LEDGER_NAME = ACC_VOUCHER.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                    strSQL = strSQL + "AND ACC_LEDGER_TO_GROUP.GR_NAME = '" + vstrGroupName + "' ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_TO_GROUP.GR_NAME,ACC_LEDGER.LEDGER_NAME_MERZE ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                // 'Insert Transaction Details
              
                if (vstrGroupName.Substring(0, 2).ToUpper() == "DH")
                {
                    strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME_MERZE ,ACC_LEDGER_Z_D_A_GROUP_OPN.AREA, ISNULL(SUM(VOUCHER_DEBIT_AMOUNT),0), ISNULL(SUM(VOUCHER_CREDIT_AMOUNT),0) AS TOTAL_CREDIT";
                    strSQL = strSQL + " FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A_GROUP_OPN  ";
                    strSQL = strSQL + "WHERE  ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME ";
                    //--and LEDGER_NAME = 'X-Saiful Islam-Mirzapur' 
                    strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A_GROUP_OPN.DIVISION IN(SELECT DISTINCT GR_PARENT FROM ACC_GROUP_SUMMARY)  OR ACC_LEDGER_Z_D_A_GROUP_OPN.area IN(SELECT DISTINCT GR_PARENT FROM ACC_GROUP_SUMMARY)   OR ACC_LEDGER_Z_D_A_GROUP_OPN.ZONE IN(SELECT DISTINCT GR_PARENT FROM ACC_GROUP_SUMMARY)   OR ";
                    strSQL = strSQL + "ACC_LEDGER_Z_D_A_GROUP_OPN.GR_ONE_DOWN IN(SELECT DISTINCT GR_PARENT FROM ACC_GROUP_SUMMARY)  ) ";
                    strSQL = strSQL + "AND (ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(vdteFromDate) + " AND " + Utility.cvtSQLDateString(vdteTodate) + ") ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME_MERZE ,ACC_LEDGER_Z_D_A_GROUP_OPN.AREA ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                else if (vstrGroupName.Substring(0, 2).ToUpper() == "AH")
                {
                    strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME_MERZE ,ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME_MERZE, ISNULL(SUM(VOUCHER_DEBIT_AMOUNT),0), ISNULL(SUM(VOUCHER_CREDIT_AMOUNT),0) AS TOTAL_CREDIT";
                    strSQL = strSQL + " FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A_GROUP_OPN  ";
                    strSQL = strSQL + "WHERE  ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME ";
                    //--and LEDGER_NAME = 'X-Saiful Islam-Mirzapur' 
                    strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A_GROUP_OPN.DIVISION IN(SELECT DISTINCT GR_PARENT FROM ACC_GROUP_SUMMARY)  OR ACC_LEDGER_Z_D_A_GROUP_OPN.area IN(SELECT DISTINCT GR_PARENT FROM ACC_GROUP_SUMMARY)   OR ACC_LEDGER_Z_D_A_GROUP_OPN.ZONE IN(SELECT DISTINCT GR_PARENT FROM ACC_GROUP_SUMMARY)   OR ";
                    strSQL = strSQL + "ACC_LEDGER_Z_D_A_GROUP_OPN.GR_ONE_DOWN IN(SELECT DISTINCT GR_PARENT FROM ACC_GROUP_SUMMARY)  ) ";
                    strSQL = strSQL + "AND (ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(vdteFromDate) + " AND " + Utility.cvtSQLDateString(vdteTodate) + ") ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME_MERZE ,ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME_MERZE ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                else if (vstrGroupName.Contains("ZONE") == true)
                {
                    strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME_MERZE ,ACC_LEDGER_Z_D_A_GROUP_OPN.DIVISION, ISNULL(SUM(VOUCHER_DEBIT_AMOUNT),0), ISNULL(SUM(VOUCHER_CREDIT_AMOUNT),0) AS TOTAL_CREDIT";
                    strSQL = strSQL + " FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A_GROUP_OPN  ";
                    strSQL = strSQL + "WHERE  ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME ";
                    //--and LEDGER_NAME = 'X-Saiful Islam-Mirzapur' 
                    strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A_GROUP_OPN.DIVISION IN(SELECT DISTINCT GR_PARENT FROM ACC_GROUP_SUMMARY)  OR ACC_LEDGER_Z_D_A_GROUP_OPN.area IN(SELECT DISTINCT GR_PARENT FROM ACC_GROUP_SUMMARY)   OR ACC_LEDGER_Z_D_A_GROUP_OPN.ZONE IN(SELECT DISTINCT GR_PARENT FROM ACC_GROUP_SUMMARY)   OR ";
                    strSQL = strSQL + "ACC_LEDGER_Z_D_A_GROUP_OPN.GR_ONE_DOWN IN(SELECT DISTINCT GR_PARENT FROM ACC_GROUP_SUMMARY)  ) ";
                    strSQL = strSQL + "AND (ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(vdteFromDate) + " AND " + Utility.cvtSQLDateString(vdteTodate) + ") ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME_MERZE ,ACC_LEDGER_Z_D_A_GROUP_OPN.DIVISION ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                else if (vstrGroupName == "Sundry Debtors")
                {
                    strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME_MERZE ,ACC_LEDGER_Z_D_A_GROUP_OPN.ZONE, ISNULL(SUM(VOUCHER_DEBIT_AMOUNT),0), ISNULL(SUM(VOUCHER_CREDIT_AMOUNT),0) AS TOTAL_CREDIT";
                    strSQL = strSQL + " FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A_GROUP_OPN  ";
                    strSQL = strSQL + "WHERE  ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME ";
                    //--and LEDGER_NAME = 'X-Saiful Islam-Mirzapur' 
                    strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A_GROUP_OPN.DIVISION IN(SELECT DISTINCT GR_PARENT FROM ACC_GROUP_SUMMARY)  OR ACC_LEDGER_Z_D_A_GROUP_OPN.area IN(SELECT DISTINCT GR_PARENT FROM ACC_GROUP_SUMMARY)   OR ACC_LEDGER_Z_D_A_GROUP_OPN.ZONE IN(SELECT DISTINCT GR_PARENT FROM ACC_GROUP_SUMMARY)   OR ";
                    strSQL = strSQL + "ACC_LEDGER_Z_D_A_GROUP_OPN.GR_ONE_DOWN IN(SELECT DISTINCT GR_PARENT FROM ACC_GROUP_SUMMARY)  ) ";
                    strSQL = strSQL + "AND (ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(vdteFromDate) + " AND " + Utility.cvtSQLDateString(vdteTodate) + ") ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME_MERZE ,ACC_LEDGER_Z_D_A_GROUP_OPN.ZONE ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                else
                {
                    strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,";
                    strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT)AS DEBIT_TOTAL,SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS CREDIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(vdteFromDate) + " AND ";
                    strSQL = strSQL + Utility.cvtSQLDateString(vdteTodate) + ") ";
                    strSQL = strSQL + "AND GR_PARENT = '" + vstrGroupName + "' ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER.LEDGER_NAME_MERZE,ACC_MAIN_LEDGER_GR_SUMMARY.LEDGER_PARENT_GROUP,";
                    strSQL = strSQL + "SUM(VOUCHER_DEBIT_AMOUNT)AS DEBIT_TOTAL,SUM(VOUCHER_CREDIT_AMOUNT) AS CREDIT_TOTAL  ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER_GR_SUMMARY INNER JOIN ACC_LEDGER ON ACC_MAIN_LEDGER_GR_SUMMARY.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_MAIN_LEDGER_GR_SUMMARY.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(vdteFromDate) + " AND ";
                    strSQL = strSQL + Utility.cvtSQLDateString(vdteTodate) + ") ";
                    strSQL = strSQL + "AND ACC_MAIN_LEDGER_GR_SUMMARY.LEDGER_PARENT_GROUP = '" + vstrGroupName + "' ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER.LEDGER_NAME_MERZE,ACC_MAIN_LEDGER_GR_SUMMARY.LEDGER_PARENT_GROUP ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                strSQL = "DELETE FROM ACC_GROUP_SUMMARY ";
                strSQL = strSQL + "WHERE GR_OPENING = 0 AND GR_DEBIT = 0 AND GR_CREDIT = 0 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                strSQL = "UPDATE ACC_GROUP_SUMMARY SET GR_PARENT = GR_NAME , GR_NAME = NULL ";
                strSQL = strSQL + "WHERE GR_PARENT = '" + vstrGroupName + "' ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                cmdInsert.Transaction.Commit();
                return 1;

            }



        }
        private int gGroupSummaryLedgerWise(string strDeComID, string vstrGroupName,
                                       long vlngPrimaryType,
                                       long vlngLevel,
                                       string vdteFromDate,
                                       string vdteTodate)
        {
            string strSQL;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;

                //strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                ////strSQL = strSQL + "SELECT ACC_LEDGER_TO_GROUP.GR_NAME,ACC_LEDGER.LEDGER_NAME_MERZE, ";
                ////strSQL = strSQL + "ACC_LEDGER.LEDGER_OPENING_BALANCE FROM ACC_LEDGER_TO_GROUP INNER JOIN ";
                ////strSQL = strSQL + "ACC_LEDGER ON ACC_LEDGER_TO_GROUP.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                ////strSQL = strSQL + "WHERE ACC_LEDGER_TO_GROUP.GR_NAME = '" + vstrGroupName + "' ";
                ////strSQL = strSQL + "AND LEDGER_GROUP <> 401 ";
                //strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.AREA,ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_OPENING_BALANCE ";
                //strSQL = strSQL + "FROM ACC_LEDGER_Z_D_A ,ACC_LEDGER WHERE ACC_LEDGER_Z_D_A.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                //strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A.DIVISION = '" + vstrGroupName + "' or ACC_LEDGER_Z_D_A.AREA = '" + vstrGroupName + "' ";
                //strSQL = strSQL + "or ACC_LEDGER_Z_D_A.ZONE = '" + vstrGroupName + "') ";
                //strSQL = strSQL + "AND ACC_LEDGER.LEDGER_GROUP <> 401 ";
                //cmdInsert.CommandText = strSQL;
                //cmdInsert.ExecuteNonQuery();


                //if (vlngPrimaryType < 3)
                //{
                //    // 'As On Transaction Details
                //    strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                //    //strSQL = strSQL + "SELECT ACC_LEDGER_TO_GROUP.GR_NAME, ACC_LEDGER.LEDGER_NAME_MERZE,";
                //    //strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                //    //strSQL = strSQL + "FROM ACC_LEDGER_TO_GROUP INNER JOIN ";
                //    //strSQL = strSQL + "ACC_LEDGER ON ACC_LEDGER_TO_GROUP.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME INNER JOIN ";
                //    //strSQL = strSQL + "ACC_VOUCHER ON ACC_LEDGER.LEDGER_NAME = ACC_VOUCHER.LEDGER_NAME ";
                //    //strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                //    //strSQL = strSQL + "AND ACC_LEDGER_TO_GROUP.GR_NAME = '" + vstrGroupName + "' ";
                //    //strSQL = strSQL + "GROUP BY ACC_LEDGER_TO_GROUP.GR_NAME,ACC_LEDGER.LEDGER_NAME_MERZE ";
                //    strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.AREA,ACC_LEDGER.LEDGER_NAME_MERZE, SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                //    strSQL = strSQL + "FROM ACC_LEDGER_Z_D_A ,ACC_LEDGER,ACC_VOUCHER WHERE ACC_LEDGER_Z_D_A.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                //    strSQL = strSQL + "AND ACC_LEDGER.LEDGER_NAME=ACC_VOUCHER.LEDGER_NAME ";
                //    strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A.DIVISION = '" + vstrGroupName + "' or ACC_LEDGER_Z_D_A.AREA = '" + vstrGroupName + "' ";
                //    strSQL = strSQL + "or ACC_LEDGER_Z_D_A.ZONE = '" + vstrGroupName + "' ) ";
                //    strSQL = strSQL + "AND ACC_LEDGER.LEDGER_GROUP <> 401 ";
                //    strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                //    strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.AREA,ACC_LEDGER.LEDGER_NAME_MERZE";
                //    cmdInsert.CommandText = strSQL;
                //    cmdInsert.ExecuteNonQuery();

                //}
                //else
                //{
                //    strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                //    //strSQL = strSQL + "SELECT ACC_LEDGER_TO_GROUP.GR_NAME, ACC_LEDGER.LEDGER_NAME_MERZE,";
                //    //strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                //    //strSQL = strSQL + "FROM ACC_LEDGER_TO_GROUP INNER JOIN ";
                //    //strSQL = strSQL + "ACC_LEDGER ON ACC_LEDGER_TO_GROUP.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME INNER JOIN ";
                //    //strSQL = strSQL + "ACC_VOUCHER ON ACC_LEDGER.LEDGER_NAME = ACC_VOUCHER.LEDGER_NAME ";
                //    //strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                //    //strSQL = strSQL + "AND ACC_LEDGER_TO_GROUP.GR_NAME = '" + vstrGroupName + "' ";
                //    //strSQL = strSQL + "GROUP BY ACC_LEDGER_TO_GROUP.GR_NAME,ACC_LEDGER.LEDGER_NAME_MERZE ";
                //    strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.AREA,ACC_LEDGER.LEDGER_NAME_MERZE, SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                //    strSQL = strSQL + "FROM ACC_LEDGER_Z_D_A ,ACC_LEDGER,ACC_VOUCHER WHERE ACC_LEDGER_Z_D_A.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                //    strSQL = strSQL + "AND ACC_LEDGER.LEDGER_NAME=ACC_VOUCHER.LEDGER_NAME ";
                //    strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A.DIVISION = '" + vstrGroupName + "' or ACC_LEDGER_Z_D_A.AREA = '" + vstrGroupName + "' ";
                //    strSQL = strSQL + "or ACC_LEDGER_Z_D_A.ZONE = '" + vstrGroupName + "' )";
                //    strSQL = strSQL + "AND ACC_LEDGER.LEDGER_GROUP <> 401 ";
                //    strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                //    strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.AREA,ACC_LEDGER.LEDGER_NAME_MERZE";
                //    cmdInsert.CommandText = strSQL;
                //    cmdInsert.ExecuteNonQuery();
                //}
                //// 'Insert Transaction Details
                //strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) ";
                ////strSQL = strSQL + "SELECT ACC_LEDGER_TO_GROUP.GR_NAME, ACC_LEDGER.LEDGER_NAME_MERZE,";
                ////strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL, ";
                ////strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS CREDIT_TOTAL ";
                ////strSQL = strSQL + "FROM ACC_LEDGER_TO_GROUP INNER JOIN ";
                ////strSQL = strSQL + "ACC_LEDGER ON ACC_LEDGER_TO_GROUP.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME INNER JOIN ";
                ////strSQL = strSQL + "ACC_VOUCHER ON ACC_LEDGER.LEDGER_NAME = ACC_VOUCHER.LEDGER_NAME ";
                ////strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(vdteFromDate) + " AND ";
                ////strSQL = strSQL + Utility.cvtSQLDateString(vdteTodate) + ") ";
                ////strSQL = strSQL + "AND ACC_LEDGER_TO_GROUP.GR_NAME = '" + vstrGroupName + "' ";
                ////strSQL = strSQL + "GROUP BY ACC_LEDGER_TO_GROUP.GR_NAME,ACC_LEDGER.LEDGER_NAME_MERZE ";
                //strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.AREA,ACC_LEDGER.LEDGER_NAME_MERZE, SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                //strSQL = strSQL + ",SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS DEBIT_TOTAL FROM ACC_LEDGER_Z_D_A ,ACC_LEDGER,ACC_VOUCHER WHERE ACC_LEDGER_Z_D_A.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                //strSQL = strSQL + "AND ACC_LEDGER.LEDGER_NAME=ACC_VOUCHER.LEDGER_NAME ";
                //strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A.DIVISION = '" + vstrGroupName + "' or ACC_LEDGER_Z_D_A.AREA = '" + vstrGroupName + "' ";
                //strSQL = strSQL + "or ACC_LEDGER_Z_D_A.ZONE = '" + vstrGroupName + "' )";
                //strSQL = strSQL + "AND ACC_LEDGER.LEDGER_GROUP <> 401 ";
                //strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(vdteFromDate) + " AND ";
                //strSQL = strSQL + Utility.cvtSQLDateString(vdteTodate) + ") ";
                //strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.AREA,ACC_LEDGER.LEDGER_NAME_MERZE";
                //cmdInsert.CommandText = strSQL;
                //cmdInsert.ExecuteNonQuery();




                //strSQL = "DELETE FROM ACC_GROUP_SUMMARY ";
                //strSQL = strSQL + "WHERE GR_OPENING = 0 AND GR_DEBIT = 0 AND GR_CREDIT = 0 ";
                //cmdInsert.CommandText = strSQL;
                //cmdInsert.ExecuteNonQuery();


                //strSQL = "UPDATE ACC_GROUP_SUMMARY SET GR_PARENT = GR_NAME , GR_NAME = NULL ";
                //strSQL = strSQL + "WHERE GR_PARENT = '" + vstrGroupName + "' ";
                //cmdInsert.CommandText = strSQL;
                //cmdInsert.ExecuteNonQuery();
                //'Opening for Group
                //strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                //strSQL = strSQL + "SELECT GR_NAME,GR_NAME,(GR_OPENING_CREDIT + GR_OPENING_DEBIT) AS YY ";
                //strSQL = strSQL + "FROM ACC_LEDGERGROUP ";
                //strSQL = strSQL + "WHERE GR_PARENT = '" + vstrGroupName + "' ";
                //strSQL = strSQL + "AND GR_GROUP <> 401 ";
                ////strSQL = strSQL + "SELECT ACC_LEDGER.LEDGER_NAME_MERZE ,ACC_LEDGER.LEDGER_NAME_MERZE,(ACC_LEDGERGROUP.GR_OPENING_CREDIT + ACC_LEDGERGROUP.GR_OPENING_DEBIT) AS YY  ";
                ////strSQL = strSQL + "FROM ACC_LEDGERGROUP INNER JOIN ";
                ////strSQL = strSQL + "ACC_LEDGER ON ACC_LEDGERGROUP.GR_NAME = ACC_LEDGER.LEDGER_PARENT_GROUP ";
                ////strSQL = strSQL + "WHERE ACC_LEDGERGROUP.GR_PARENT = '" + vstrGroupName + "' ";
                ////strSQL = strSQL + "AND ACC_LEDGERGROUP.GR_GROUP <> 401 ";
                //cmdInsert.CommandText = strSQL;
                //cmdInsert.ExecuteNonQuery();

                string strString = "";

                strSQL = "SELECT GR_NAME,GR_PARENT ";
                strSQL = strSQL + "FROM ACC_LEDGERGROUP ";
                strSQL = strSQL + "WHERE GR_PARENT = '" + vstrGroupName + "'";
                strSQL = strSQL + "AND GR_GROUP <> 401 ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    strString = strString + dr["GR_NAME"].ToString() + "|" + dr["GR_PARENT"].ToString() + "~";
                }
                dr.Close();
                if (strString != "")
                {
                    string[] words = strString.Split('~');
                    foreach (string ooValue in words)
                    {
                        string[] ooCostLedger = ooValue.Split('|');
                        if (ooCostLedger[0] != "")
                        {
                            strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                            strSQL = strSQL + "SELECT LEDGER_NAME_MERZE,LEDGER_NAME_MERZE,LEDGER_OPENING_BALANCE ";
                            strSQL = strSQL + "FROM ACC_LEDGER_Z_D_A_GROUP_OPN ";
                            strSQL = strSQL + "WHERE  ZONE='" + ooCostLedger[0] + "' or division ='" + ooCostLedger[0] + "' or Area ='" + ooCostLedger[0] + "'";
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();

                        }
                    }
                }
                else
                {
                    dr.Close();
                    strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME_MERZE,LEDGER_NAME_MERZE,LEDGER_OPENING_BALANCE ";
                    strSQL = strSQL + "FROM ACC_LEDGER ";
                    strSQL = strSQL + "WHERE LEDGER_PARENT_GROUP = '" + vstrGroupName + "' ";
                    strSQL = strSQL + "AND LEDGER_GROUP <> 401 ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }


                //'Opening for Ledger

                if (vlngPrimaryType < 3)
                {
                    strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER.LEDGER_NAME_MERZE,ACC_LEDGER.LEDGER_NAME_MERZE,";
                    strSQL = strSQL + "SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER_GR_SUMMARY INNER JOIN ACC_LEDGER ON ACC_MAIN_LEDGER_GR_SUMMARY.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE ACC_MAIN_LEDGER_GR_SUMMARY.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                    strSQL = strSQL + "AND ACC_MAIN_LEDGER_GR_SUMMARY.LEDGER_PARENT_GROUP = '" + vstrGroupName + "' ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER.LEDGER_NAME_MERZE,ACC_MAIN_LEDGER_GR_SUMMARY.LEDGER_PARENT_GROUP ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    // 'As On Transaction Details
                    strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER.LEDGER_NAME_MERZE,ACC_LEDGER.LEDGER_NAME_MERZE,";
                    strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                    strSQL = strSQL + "AND GR_PARENT IN (SELECT GR_NAME FROM ACC_LEDGERGROUP WHERE GR_NAME = '" + vstrGroupName + "') ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER_GROUP_QRY.GR_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                    //strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME_MERZE ,ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME_MERZE, ISNULL(SUM(VOUCHER_CREDIT_AMOUNT-VOUCHER_DEBIT_AMOUNT),0) AS TOTAL_CREDIT";
                    //strSQL = strSQL + " FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A_GROUP_OPN  ";
                    //strSQL = strSQL + "WHERE  ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME ";
                    ////--and LEDGER_NAME = 'X-Saiful Islam-Mirzapur' 
                    //strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A_GROUP_OPN.DIVISION ='" + vstrGroupName + "'   OR ACC_LEDGER_Z_D_A_GROUP_OPN.area ='" + vstrGroupName + "'  OR ACC_LEDGER_Z_D_A_GROUP_OPN.ZONE ='" + vstrGroupName + "'  OR ";
                    //strSQL = strSQL + "ACC_LEDGER_Z_D_A_GROUP_OPN.GR_ONE_DOWN ='" + vstrGroupName + "' ) ";
                    //strSQL = strSQL + "AND (ACC_VOUCHER.COMP_VOUCHER_DATE <  " + Utility.cvtSQLDateString(vdteFromDate) +  ") ";
                    //strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME_MERZE ,ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME_MERZE ";
                    //cmdInsert.CommandText = strSQL;
                    //cmdInsert.ExecuteNonQuery();

                }
                else
                {
                    strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_OPENING) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_NAME_MERZE,";
                    strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_LEDGER_TO_GROUP INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER ON ACC_LEDGER_TO_GROUP.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME INNER JOIN ";
                    strSQL = strSQL + "ACC_VOUCHER ON ACC_LEDGER.LEDGER_NAME = ACC_VOUCHER.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                    strSQL = strSQL + "AND ACC_LEDGER_TO_GROUP.GR_NAME = '" + vstrGroupName + "' ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_TO_GROUP.GR_NAME,ACC_LEDGER.LEDGER_NAME_MERZE ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                // 'Insert Transaction Details


                //strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) ";
                //strSQL = strSQL + "SELECT ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_NAME_MERZE AS GR_PARENT, SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL, ";
                //strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS CREDIT_TOTAL ";
                //strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ";
                //strSQL = strSQL + "ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME LEFT OUTER JOIN ";
                //strSQL = strSQL + "ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                //strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(vdteFromDate) + " AND ";
                //strSQL = strSQL + Utility.cvtSQLDateString(vdteTodate) + ") ";
                //strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_PARENT = '" + vstrGroupName + "' ";
                //strSQL = strSQL + "GROUP BY ACC_LEDGER.LEDGER_NAME_MERZE  ";
                //cmdInsert.CommandText = strSQL;
                //cmdInsert.ExecuteNonQuery();


                //strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) ";
                //strSQL = strSQL + "SELECT ACC_LEDGER.LEDGER_NAME_MERZE,ACC_LEDGER.LEDGER_NAME_MERZE,";
                //strSQL = strSQL + "SUM(VOUCHER_DEBIT_AMOUNT)AS DEBIT_TOTAL,SUM(VOUCHER_CREDIT_AMOUNT) AS CREDIT_TOTAL  ";
                //strSQL = strSQL + "FROM ACC_MAIN_LEDGER_GR_SUMMARY INNER JOIN ACC_LEDGER ON ACC_MAIN_LEDGER_GR_SUMMARY.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                //strSQL = strSQL + "WHERE (ACC_MAIN_LEDGER_GR_SUMMARY.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(vdteFromDate) + " AND ";
                //strSQL = strSQL + Utility.cvtSQLDateString(vdteTodate) + ") ";
                //strSQL = strSQL + "AND ACC_MAIN_LEDGER_GR_SUMMARY.LEDGER_PARENT_GROUP = '" + vstrGroupName + "' ";
                //strSQL = strSQL + "GROUP BY ACC_LEDGER.LEDGER_NAME_MERZE,ACC_MAIN_LEDGER_GR_SUMMARY.LEDGER_PARENT_GROUP ";
                //cmdInsert.CommandText = strSQL;
                //cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_GROUP_SUMMARY(GR_NAME,GR_PARENT,GR_DEBIT,GR_CREDIT) ";
                strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME_MERZE ,ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME_MERZE, ISNULL(SUM(VOUCHER_DEBIT_AMOUNT),0), ISNULL(SUM(VOUCHER_CREDIT_AMOUNT),0) AS TOTAL_CREDIT";
                strSQL = strSQL + " FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A_GROUP_OPN  ";
                strSQL = strSQL + "WHERE  ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME ";
                //--and LEDGER_NAME = 'X-Saiful Islam-Mirzapur' 
                strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A_GROUP_OPN.DIVISION ='" + vstrGroupName + "'   OR ACC_LEDGER_Z_D_A_GROUP_OPN.area ='" + vstrGroupName + "'  OR ACC_LEDGER_Z_D_A_GROUP_OPN.ZONE ='" + vstrGroupName + "'  OR ";
                strSQL = strSQL + "ACC_LEDGER_Z_D_A_GROUP_OPN.GR_ONE_DOWN ='" + vstrGroupName + "' ) ";
                strSQL = strSQL + "AND (ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(vdteFromDate) + " AND " + Utility.cvtSQLDateString(vdteTodate) +") ";
                strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME_MERZE ,ACC_LEDGER_Z_D_A_GROUP_OPN.LEDGER_NAME_MERZE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                strSQL = "DELETE FROM ACC_GROUP_SUMMARY ";
                strSQL = strSQL + "WHERE GR_OPENING = 0 AND GR_DEBIT = 0 AND GR_CREDIT = 0 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                strSQL = "UPDATE ACC_GROUP_SUMMARY SET GR_PARENT = GR_NAME , GR_NAME = NULL ";
                strSQL = strSQL + "WHERE GR_PARENT = '" + vstrGroupName + "' ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                cmdInsert.Transaction.Commit();
                return 1;

            }
        }

        public int mReceiptPayment(string strDeComID, DateTime strFdate, DateTime strTDate)
        {

            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                cmdInsert.CommandText = "gReceiptAndPayment";
                cmdInsert.CommandType = CommandType.StoredProcedure;
                cmdInsert.Parameters.Add("@frDate", SqlDbType.Date).Value = strFdate;
                cmdInsert.Parameters.Add("@todate", SqlDbType.Date).Value = strTDate;
                cmdInsert.Connection = gcnMain;
                cmdInsert.ExecuteNonQuery();
                cmdInsert.Dispose();

                SqlCommand cmdUpdate = new SqlCommand();
                strSQL = "Update  t set t.GR_NAME=L.LEDGER_NAME_MERZE ";
                strSQL = strSQL + "from  ACC_RECEIPT_AND_PAYMENT t, ACC_LEDGER L where L.LEDGER_NAME =t.GR_NAME ";
                cmdUpdate.Connection = gcnMain;
                cmdUpdate.CommandText = strSQL;
                cmdUpdate.ExecuteNonQuery();
                gcnMain.Close();
                return 1;
            }
        }
        public List<RAccountsGroup> mReceiptPaymentQyery(string strDeComID, int intmode)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                strSQL = "SELECT GR_NAME, GR_PARENT, GR_PRIMARY_TYPE,GR_RECEIPT_PAYMENT ";
                strSQL = strSQL + ",SUM(GR_AMOUNT) GR_AMOUNT ";
                strSQL = strSQL + "FROM ACC_RECEIPT_AND_PAYMENT ";
                strSQL = strSQL + "WHERE GR_RECEIPT_PAYMENT =" + intmode + " ";
                strSQL = strSQL + "GROUP by GR_NAME, GR_PARENT, GR_PRIMARY_TYPE,GR_RECEIPT_PAYMENT ";
                strSQL = strSQL + "ORDER BY GR_PRIMARY_TYPE ASC,GR_PARENT ASC,GR_NAME ASC";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strGrName = dr["GR_NAME"].ToString();
                    oLedg.strGrParent = dr["GR_PARENT"].ToString();
                    oLedg.intPrimaryType = Convert.ToInt16(dr["GR_PRIMARY_TYPE"].ToString());
                    oLedg.dblAmount = Convert.ToDouble(dr["GR_AMOUNT"].ToString());
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strGrName = "";
                    oLedg.strGrParent = "";
                    oLedg.intPrimaryType = 0;
                    oLedg.dblAmount = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }

        public List<RAccountsGroup> mCashFlow(string strDeComID, string strFdate, string strTDate)
        {
            string strSQL = null;
            double dblBankOpening = 0, dblOPening = 0, dblCashOpening = 0, dblODOpening = 0;

            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;
                strSQL = "DELETE FROM ACC_CASH_FLOW";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "SELECT SUM(LEDGER_OPENING_BALANCE * -1) AS OPENING  ";
                strSQL = strSQL + "FROM ACC_LEDGER ";
                strSQL = strSQL + "WHERE (LEDGER_GROUP = " + (int)Utility.GR_GROUP_TYPE.grCash + " ";
                strSQL = strSQL + "OR LEDGER_GROUP = " + (int)Utility.GR_GROUP_TYPE.grBANKACCOUNTS + ") ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblOPening = Convert.ToDouble(dr["OPENING"].ToString());
                }
                dr.Close();

                strSQL = "SELECT ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) AS OPENING ";
                strSQL = strSQL + "FROM ACC_LEDGER_VOUCHER ";
                strSQL = strSQL + "WHERE (LEDGER_GROUP = " + (int)Utility.GR_GROUP_TYPE.grCash + " ";
                strSQL = strSQL + "OR LEDGER_GROUP = " + (int)Utility.GR_GROUP_TYPE.grBANKACCOUNTS + ") ";
                strSQL = strSQL + " AND COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblOPening = dblOPening + Convert.ToDouble(dr["OPENING"].ToString());
                }
                dr.Close();

                strSQL = "INSERT INTO ACC_CASH_FLOW(CASHFLOW_TYPE,CASHFLOW_LEDGER,CASHFLOW_GROUP,CASHFLOW_AMOUNT) ";
                strSQL = strSQL + "VALUES(4,'Cash and Cash Equivalents','Cash and Cash Equivalents'," + dblOPening + ")";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_CASH_FLOW(CASHFLOW_TYPE,CASHFLOW_LEDGER,CASHFLOW_GROUP,CASHFLOW_AMOUNT) ";
                strSQL = strSQL + "SELECT LEDGER_CASH_FLOW_TYPE,LEDGER_NAME,LEDGER_PARENT_GROUP,";
                strSQL = strSQL + "SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL FROM ACC_MAIN_LEDGER ";
                strSQL = strSQL + "WHERE(COMP_VOUCHER_DATE BETWEEN ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strTDate) + ") ";
                strSQL = strSQL + "AND LEDGER_LEVEL = 2 ";
                strSQL = strSQL + "AND VOUCHER_CASHFLOW = 1 ";
                strSQL = strSQL + "GROUP BY LEDGER_CASH_FLOW_TYPE,LEDGER_NAME, LEDGER_PARENT_GROUP ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_CASH_FLOW(CASHFLOW_TYPE,CASHFLOW_LEDGER,CASHFLOW_GROUP,CASHFLOW_AMOUNT) ";
                strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_CASH_FLOW_TYPE,ACC_LEDGER_GROUP_QRY.GR_NAME,";
                strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PARENT,";
                strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) As DEBIT_TOTAL ";
                strSQL = strSQL + "FROM ACC_VOUCHER ";
                strSQL = strSQL + "LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                strSQL = strSQL + "WHERE(COMP_VOUCHER_DATE BETWEEN ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strTDate) + ") ";
                strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_CASH_FLOW_TYPE > 0 ";
                strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_CASH_FLOW_TYPE < 4 ";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_CASHFLOW = 1 ";
                strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_CASH_FLOW_TYPE,ACC_LEDGER_GROUP_QRY.GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                strSQL = "UPDATE ACC_CASH_FLOW SET CASHFLOW_SIGN = 2 WHERE CASHFLOW_AMOUNT >= 0 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "UPDATE ACC_CASH_FLOW SET CASHFLOW_SIGN = 3 WHERE CASHFLOW_AMOUNT < 0 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                cmdInsert.Transaction.Commit();


                strSQL = "SELECT SUM(LEDGER_OPENING_BALANCE) AS OPENING  ";
                strSQL = strSQL + "FROM ACC_LEDGER ";
                strSQL = strSQL + "WHERE LEDGER_GROUP = " + (int)Utility.GR_GROUP_TYPE.grCash + " ";
                strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 1 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblCashOpening = Convert.ToDouble(dr["OPENING"].ToString());
                }
                dr.Close();

                strSQL = "SELECT ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) AS TRAN_TOTAL FROM ACC_LEDGER_VOUCHER ";
                strSQL = strSQL + "WHERE LEDGER_GROUP = " + (int)Utility.GR_GROUP_TYPE.grCash + " ";
                strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 1 ";
                strSQL = strSQL + "AND COMP_VOUCHER_DATE <= " + Utility.cvtSQLDateString(strTDate) + " ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblCashOpening = dblCashOpening + Convert.ToDouble(dr["TRAN_TOTAL"].ToString());
                }
                dr.Close();



                strSQL = "SELECT ISNULL(SUM(LEDGER_OPENING_BALANCE),0) AS OPENING  ";
                strSQL = strSQL + "FROM ACC_LEDGER ";
                strSQL = strSQL + "WHERE LEDGER_GROUP = " + (int)Utility.GR_GROUP_TYPE.grBANKACCOUNTS + " ";
                strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 1 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblBankOpening = Convert.ToDouble(dr["OPENING"].ToString());
                }
                dr.Close();

                strSQL = "SELECT ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) AS TRAN_TOTAL FROM ACC_LEDGER_VOUCHER ";
                strSQL = strSQL + "WHERE LEDGER_GROUP = " + (int)Utility.GR_GROUP_TYPE.grBANKACCOUNTS + " ";
                strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 1 ";
                strSQL = strSQL + "AND COMP_VOUCHER_DATE <= " + Utility.cvtSQLDateString(strTDate) + " ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblBankOpening = dblBankOpening + Convert.ToDouble(dr["TRAN_TOTAL"].ToString());
                }
                dr.Close();

                strSQL = "SELECT ISNULL(SUM(LEDGER_OPENING_BALANCE),0) AS OPENING  ";
                strSQL = strSQL + "FROM ACC_LEDGER ";
                strSQL = strSQL + "WHERE LEDGER_GROUP = " + (int)Utility.GR_GROUP_TYPE.grBANKACCOUNTS + " ";
                strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 2 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblODOpening = Convert.ToDouble(dr["OPENING"].ToString());
                }
                dr.Close();

                strSQL = "SELECT ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) AS TRAN_TOTAL FROM ACC_LEDGER_VOUCHER ";
                strSQL = strSQL + "WHERE LEDGER_GROUP = " + (int)Utility.GR_GROUP_TYPE.grBANKACCOUNTS + " ";
                strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 2 ";
                strSQL = strSQL + "AND COMP_VOUCHER_DATE <= " + Utility.cvtSQLDateString(strTDate) + " ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblODOpening = dblODOpening + Convert.ToDouble(dr["TRAN_TOTAL"].ToString());
                }
                dr.Close();


                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                strSQL = "SELECT CASHFLOW_TYPE,CASHFLOW_SIGN, ";
                strSQL = strSQL + "CASHFLOW_GROUP, CASHFLOW_LEDGER, CASHFLOW_AMOUNT ";
                strSQL = strSQL + "FROM ACC_CASH_FLOW ACC_CASH_FLOW ";
                strSQL = strSQL + "ORDER BY CASHFLOW_TYPE, CASHFLOW_SIGN, CASHFLOW_GROUP ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                int introw = 0;
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strCashFlowType = dr["CASHFLOW_TYPE"].ToString();
                    oLedg.strCashFlowGroup = dr["CASHFLOW_GROUP"].ToString();
                    oLedg.intCashFlowSign = Convert.ToInt16(dr["CASHFLOW_SIGN"]);
                    oLedg.strCashFlowLedger = dr["CASHFLOW_LEDGER"].ToString();
                    oLedg.dblCashFlowAmnt = Convert.ToDouble(dr["CASHFLOW_AMOUNT"]);
                    if (introw == 0)
                    {
                        oLedg.dblCashOpn = dblCashOpening;
                        oLedg.dblBankOpn = dblBankOpening;
                        oLedg.dblOdopn = dblODOpening;
                    }
                    ooAccLedger.Add(oLedg);
                    introw += 1;
                }
                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strCashFlowType = "";
                    oLedg.strCashFlowGroup = "";
                    oLedg.intCashFlowSign = 0;
                    oLedg.strCashFlowLedger = "";
                    oLedg.dblCashFlowAmnt = 0;
                    oLedg.dblCashOpn = 0;
                    oLedg.dblBankOpn = 0;
                    oLedg.dblOdopn = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;
            }


        }


        public int RefreshTradingNew(string strDeComID, DateTime dtefDate, DateTime dteTdate, string strBranchID, int intBusinessType, int intSwpCls)
        {
            string strSQL = "", strFdate, strTDate;
            double dblManuCost = 0, dblGP = 0, dblSales = 0, dblCostOfSL = 0;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                strFdate = dtefDate.ToString("dd/MM/yyyy");
                strTDate = dteTdate.ToString("dd/MM/yyyy");
                SqlCommand cmdInsertPro = new SqlCommand();
                if (intBusinessType == 4)
                {

                    cmdInsertPro.CommandText = "gdblManuCost";
                    cmdInsertPro.CommandType = CommandType.StoredProcedure;
                    cmdInsertPro.Parameters.Add(new SqlParameter("@frDate", dtefDate));
                    cmdInsertPro.Parameters.Add(new SqlParameter("@toDate", dteTdate));
                    cmdInsertPro.Connection = gcnMain;
                    cmdInsertPro.ExecuteNonQuery();
                    cmdInsertPro.Dispose();
                }


                SqlCommand cmdInsert = new SqlCommand();
                strSQL = "SELECT ManuCost FROM INV_MANUFACTURING_COST";
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblManuCost = Convert.ToDouble(dr["ManuCost"].ToString());
                }
                dr.Close();
             
                
                double dblSalescls = Utility.dblLedgerSalesClosing(strDeComID, strFdate, strTDate, "Sales Accounts", "");
                SqlCommand cmdInsertnew = new SqlCommand();
                if (intBusinessType == 4)
                {
                    cmdInsertnew.CommandText = "gTradingAndPL";
                    cmdInsertnew.CommandType = CommandType.StoredProcedure;
                    cmdInsertnew.Parameters.Add("@frDate", SqlDbType.Date).Value = dtefDate;
                    cmdInsertnew.Parameters.Add("@todate", SqlDbType.Date).Value = dteTdate;
                    cmdInsertnew.Parameters.Add("@BusinessType", SqlDbType.Int).Value = intBusinessType;
                    cmdInsertnew.Parameters.Add("@ManuCost", SqlDbType.Decimal).Value = dblManuCost;
                    cmdInsertnew.Parameters.Add("@dblSalesCost", SqlDbType.Decimal).Value = dblSalescls;
                    cmdInsertnew.Connection = gcnMain;
                    cmdInsertnew.ExecuteNonQuery();
                    cmdInsertnew.Dispose();
                }
                else
                {

                    cmdInsertPro.CommandText = "gTrading";
                    cmdInsertPro.CommandType = CommandType.StoredProcedure;
                    cmdInsertPro.Parameters.Add(new SqlParameter("@frDate", dtefDate));
                    cmdInsertPro.Parameters.Add(new SqlParameter("@toDate", dteTdate));
                    cmdInsertPro.Connection = gcnMain;
                    cmdInsertPro.ExecuteNonQuery();
                    cmdInsertPro.Dispose();
                }

                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Transaction = myTrans;
                strSQL = "DELETE FROM ACC_TRADING_REPORT";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO ACC_TRADING_REPORT(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                strSQL = strSQL + "select GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT from ACC_TRADING_PROFIT_LOSS WHERE GR_GROUP < 3 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "DELETE FROM ACC_TRADING_REPORT WHERE GR_AMOUNT=0 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                if (intSwpCls == 1)
                {
                    strSQL = "UPDATE ACC_TRADING_REPORT SET GR_PRIMARY_TYPE = 2 WHERE GR_PRIMARY_TYPE = 3 ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "UPDATE ACC_TRADING_REPORT SET GR_PRIMARY_TYPE = 3,GR_AMOUNT = GR_AMOUNT * -1 ";
                    strSQL = strSQL + "WHERE GR_PRIMARY_TYPE = 5 AND GR_AMOUNT <> 0 ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                strSQL = "SELECT ISNULL(SUM(GR_AMOUNT),0) AS GRAMT FROM ACC_TRADING_REPORT WHERE GR_PRIMARY_TYPE <= 3 ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();

                if (dr.Read())
                {
                    dblSales = Convert.ToDouble(dr["GRAMT"]);
                }
                dr.Close();

                strSQL = "SELECT ISNULL(SUM(GR_AMOUNT),0) AS GRAMT FROM ACC_TRADING_REPORT WHERE GR_PRIMARY_TYPE > 3 ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();

                if (dr.Read())
                {
                    dblCostOfSL = Convert.ToDouble(dr["GRAMT"]);
                }
                dr.Close();
                dblGP = (dblSales) - (dblCostOfSL);
                if (dblGP > 0)
                {
                    strSQL = "INSERT INTO ACC_TRADING_REPORT(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Profit c/d','Gross Profit c/d',6," + dblGP + ")";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                if (dblGP < 0)
                {
                    strSQL = "INSERT INTO ACC_TRADING_REPORT(GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT) ";
                    strSQL = strSQL + "VALUES('Gross Loss c/d','Gross Loss c/d',5.1," + (dblGP) + ")";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }

                cmdInsert.Transaction.Commit();
                return 1;


            }

        }

        public List<RAccountsGroup> mTradingQuery(string strDeComID, float intmode)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();

                strSQL = "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT FROM ACC_TRADING_REPORT ";
                if (intmode == 3.5)
                {
                    strSQL = strSQL + "WHERE GR_PRIMARY_TYPE >3 ";
                }
                else
                {
                    strSQL = strSQL + "WHERE GR_PRIMARY_TYPE <=3 ";
                }
                strSQL = strSQL + "Order by GR_PRIMARY_TYPE ASC, ";
                strSQL = strSQL + "GR_PARENT ASC, ";
                strSQL = strSQL + "GR_NAME ASC";
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strGrName = dr["GR_NAME"].ToString();
                    oLedg.strGrParent = dr["GR_PARENT"].ToString();
                    oLedg.intPrimaryType = Convert.ToInt16(dr["GR_PRIMARY_TYPE"]);
                    oLedg.dblAmount = Convert.ToDouble(dr["GR_AMOUNT"]);
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strGrName = "";
                    oLedg.strGrParent = "";
                    oLedg.intPrimaryType = 0;
                    oLedg.dblAmount = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;
            }
        }

        public List<RAccountsGroup> mTradingQueryVertical(string strDeComID, float intmode)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();

                strSQL = "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT FROM ACC_TRADING_REPORT ";
                //if (intmode == 3.5)
                //{
                //    strSQL = strSQL + "WHERE GR_PRIMARY_TYPE >3 ";
                //}
                //else
                //{
                //    strSQL = strSQL + "WHERE GR_PRIMARY_TYPE <=3 ";
                //}
                strSQL = strSQL + "Order by GR_PRIMARY_TYPE ASC, ";
                strSQL = strSQL + "GR_PARENT ASC, ";
                strSQL = strSQL + "GR_NAME ASC";
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strGrName = dr["GR_NAME"].ToString();
                    oLedg.strGrParent = dr["GR_PARENT"].ToString();
                    oLedg.intPrimaryType = Convert.ToInt16(dr["GR_PRIMARY_TYPE"]);
                    oLedg.dblAmount = Convert.ToDouble(dr["GR_AMOUNT"]);
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strGrName = "";
                    oLedg.strGrParent = "";
                    oLedg.intPrimaryType = 0;
                    oLedg.dblAmount = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;
            }
        }

        public double mloadManufacturingNew(string strDeComID, string vdteFromDate, string vdteTodate)
        {
            string strSQL = null, strDirectRaw = "", strIndirectRaw = "", strWorkInprogress = "", strString = "";
            double dblOpnDirect = 0, dblOpnIndirect = 0, dblOpnWIP = 0, dblClosingStockDirect = 0, dblClosingStockIndirect = 0, dblClosingStockWork = 0,
                 dblTotal = 0, dblDirect = 0, dblIndirect = 0, dblWork = 0;

            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlTransaction myTrans;
                SqlCommand cmdInsert = new SqlCommand();
                cmdInsert.Connection = gcnMain;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Transaction = myTrans;

                try
                {
                    strSQL = "DELETE FROM ACC_MANUFACTURE_REPORT ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "SELECT STOCKGROUP_NAME FROM INV_STOCKGROUP WHERE STOCKGROUP_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + "AND STOCKGROUP_SECONDARY_TYPE = 1 AND STOCKGROUP_DEFAULT = 1 ";
                    //cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = strSQL;

                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        strDirectRaw = dr["STOCKGROUP_NAME"].ToString();
                    }
                    dr.Close();
                    strSQL = "SELECT STOCKGROUP_NAME FROM INV_STOCKGROUP WHERE STOCKGROUP_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + "AND STOCKGROUP_SECONDARY_TYPE = 2 AND STOCKGROUP_DEFAULT = 1 ";
                    //cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        strIndirectRaw = dr["STOCKGROUP_NAME"].ToString();
                    }
                    dr.Close();
                    strSQL = "SELECT STOCKGROUP_NAME FROM INV_STOCKGROUP WHERE STOCKGROUP_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + "AND STOCKGROUP_SECONDARY_TYPE = 0 AND STOCKGROUP_DEFAULT = 1 ";
                    cmdInsert.Connection = gcnMain;
                    //cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        strWorkInprogress = dr["STOCKGROUP_NAME"].ToString();

                    }
                    dr.Close();
                    strSQL = "ALTER VIEW INV_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(INV_TRAN_QUANTITY) AS OPN_QUANTITY,";
                    strSQL = strSQL + "SUM(INV_TRAN_AMOUNT) AS OPN_AMOUNT,0 AS INWARD_QUANTITY, 0 AS INWARD_AMOUNT,";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY,0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT  ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE < " + Utility.cvtSQLDateString(vdteFromDate) + ")  ";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT, SUM(INV_TRAN_QUANTITY) AS INWARD_QUANTITY, SUM(INV_TRAN_AMOUNT) AS INWARD_AMOUNT, ";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY, 0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(vdteTodate) + ")";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "AND INV_INOUT_FLAG='I' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT,0 INWARD_QUANTITY,0 INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(INV_TRAN_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(vdteTodate) + ")";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "AND INV_INOUT_FLAG='O' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "ALTER VIEW INV_OPENING_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(OPN_QUANTITY) AS INV_TRAN_QUANTITY, SUM(OPN_AMOUNT) AS INV_TRAN_AMOUNT,";
                    strSQL = strSQL + "SUM(INWARD_QUANTITY) AS INWARD_QUANTITY, SUM(INWARD_AMOUNT) AS INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT,SUM(OPN_QUANTITY+INWARD_QUANTITY+OUTWARD_QUANTITY) CLS , ";
                    strSQL = strSQL + "SUM(OPN_AMOUNT+INWARD_AMOUNT+OUTWARD_COST_AMOUNT) CLSAMNT  ";
                    strSQL = strSQL + "FROM INV_TRAN_QRY ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    //Direct Opn
                    strSQL = "SELECT ";
                    strSQL = strSQL + "isnull(SUM(INV_OPENING_TRAN_QRY.INV_TRAN_AMOUNT),0) as OPN_AMOUNT ";// Direct Opoening
                    strSQL = strSQL + "from INV_OPENING_TRAN_QRY,INV_STOCKGROUP WHERE INV_STOCKGROUP.STOCKGROUP_NAME =INV_OPENING_TRAN_QRY.STOCKGROUP_NAME  AND INV_STOCKGROUP.STOCKGROUP_PRIMARY_TYPE  =1  ";
                    strSQL = strSQL + "and INV_STOCKGROUP.STOCKGROUP_SECONDARY_TYPE in (0,1) ";
                    //cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblOpnDirect = Convert.ToDouble(dr["OPN_AMOUNT"].ToString());
                    }
                    dr.Close();

                    strSQL = "INSERT INTO ACC_MANUFACTURE_REPORT(MANUFACTURE_TYPE,MANUFACTURE_SUB_TYPE,";
                    strSQL = strSQL + "MANUFACTURE_NAME,MANUFACTURE_GROUP,MANUFACTURE_AMOUNT) ";
                    strSQL = strSQL + "SELECT STOCKGROUP_PRIMARY_TYPE,STOCKGROUP_SECONDARY_TYPE,";
                    strSQL = strSQL + "STOCKGROUP_PRIMARY,";
                    strSQL = strSQL + "' Opening Stock of ' + STOCKGROUP_PRIMARY,";
                    strSQL = strSQL + " " + dblOpnDirect + " FROM INV_STOCKGROUP ";
                    strSQL = strSQL + "WHERE STOCKGROUP_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + " AND STOCKGROUP_SECONDARY_TYPE in (1) ";
                    //strSQL = strSQL + "AND INV_DATE < " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_PRIMARY_TYPE,STOCKGROUP_PRIMARY,STOCKGROUP_SECONDARY_TYPE ";
                    //cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    //Indirect Opn
                    strSQL = "SELECT ";
                    strSQL = strSQL + "isnull(SUM(INV_OPENING_TRAN_QRY.INV_TRAN_AMOUNT),0) as OPN_AMOUNT ";// Indirect Opoening
                    strSQL = strSQL + "from INV_OPENING_TRAN_QRY,INV_STOCKGROUP WHERE INV_STOCKGROUP.STOCKGROUP_NAME =INV_OPENING_TRAN_QRY.STOCKGROUP_NAME  AND INV_STOCKGROUP.STOCKGROUP_PRIMARY_TYPE  =1  ";
                    strSQL = strSQL + "and INV_STOCKGROUP.STOCKGROUP_SECONDARY_TYPE in (2) ";
                    //cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblOpnIndirect = Convert.ToDouble(dr["OPN_AMOUNT"].ToString());
                    }
                    dr.Close();
                    strSQL = "INSERT INTO ACC_MANUFACTURE_REPORT(MANUFACTURE_TYPE,MANUFACTURE_SUB_TYPE,";
                    strSQL = strSQL + "MANUFACTURE_NAME,MANUFACTURE_GROUP,MANUFACTURE_AMOUNT) ";
                    strSQL = strSQL + "SELECT STOCKGROUP_PRIMARY_TYPE,STOCKGROUP_SECONDARY_TYPE,";
                    strSQL = strSQL + "STOCKGROUP_PRIMARY,";
                    strSQL = strSQL + "' Opening Stock of ' + STOCKGROUP_PRIMARY,";
                    strSQL = strSQL + " " + dblOpnIndirect + " FROM INV_STOCKGROUP ";
                    strSQL = strSQL + "WHERE STOCKGROUP_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + " AND STOCKGROUP_SECONDARY_TYPE in (2) ";
                    //strSQL = strSQL + "AND INV_DATE < " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_PRIMARY_TYPE,STOCKGROUP_PRIMARY,STOCKGROUP_SECONDARY_TYPE ";
                    //cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //WIP Opn
                    strSQL = "SELECT ";
                    strSQL = strSQL + "isnull(SUM(INV_OPENING_TRAN_QRY.INV_TRAN_AMOUNT),0) as OPN_AMOUNT ";// 
                    strSQL = strSQL + "from INV_OPENING_TRAN_QRY,INV_STOCKGROUP WHERE INV_STOCKGROUP.STOCKGROUP_NAME =INV_OPENING_TRAN_QRY.STOCKGROUP_NAME  AND INV_STOCKGROUP.STOCKGROUP_PRIMARY_TYPE  =2  ";
                    strSQL = strSQL + "and INV_STOCKGROUP.STOCKGROUP_SECONDARY_TYPE in (0) ";
                    //cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblOpnWIP = Convert.ToDouble(dr["OPN_AMOUNT"].ToString());
                    }
                    dr.Close();

                    strSQL = "INSERT INTO ACC_MANUFACTURE_REPORT(MANUFACTURE_TYPE,MANUFACTURE_SUB_TYPE,";
                    strSQL = strSQL + "MANUFACTURE_NAME,MANUFACTURE_GROUP,MANUFACTURE_AMOUNT) ";
                    strSQL = strSQL + "SELECT STOCKGROUP_PRIMARY_TYPE,STOCKGROUP_SECONDARY_TYPE,";
                    strSQL = strSQL + "STOCKGROUP_PRIMARY,";
                    strSQL = strSQL + "' Opening Stock of ' + STOCKGROUP_PRIMARY,";
                    strSQL = strSQL + " " + dblOpnWIP + " FROM INV_STOCKGROUP ";
                    strSQL = strSQL + "WHERE STOCKGROUP_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + " AND STOCKGROUP_SECONDARY_TYPE in (0) ";
                    //strSQL = strSQL + "AND INV_DATE < " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_PRIMARY_TYPE,STOCKGROUP_PRIMARY,STOCKGROUP_SECONDARY_TYPE ";
                    //cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //Direct closing
                    strSQL = "SELECT ";
                    strSQL = strSQL + "isnull(SUM(INV_OPENING_TRAN_QRY.CLSAMNT),0) *-1as cls_AMOUNT ";// Direct Opoening
                    strSQL = strSQL + "from INV_OPENING_TRAN_QRY,INV_STOCKGROUP WHERE INV_STOCKGROUP.STOCKGROUP_NAME =INV_OPENING_TRAN_QRY.STOCKGROUP_NAME  AND INV_STOCKGROUP.STOCKGROUP_PRIMARY_TYPE  =1  ";
                    strSQL = strSQL + "and INV_STOCKGROUP.STOCKGROUP_SECONDARY_TYPE in (0,1) ";
                    //cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblClosingStockDirect = Convert.ToDouble(dr["cls_AMOUNT"].ToString());
                    }
                    dr.Close();
                    strSQL = "INSERT INTO ACC_MANUFACTURE_REPORT(MANUFACTURE_TYPE,MANUFACTURE_SUB_TYPE,";
                    strSQL = strSQL + "MANUFACTURE_NAME,MANUFACTURE_GROUP,MANUFACTURE_AMOUNT) ";
                    strSQL = strSQL + "SELECT STOCKGROUP_PRIMARY_TYPE,STOCKGROUP_SECONDARY_TYPE,";
                    strSQL = strSQL + "STOCKGROUP_PRIMARY,";
                    strSQL = strSQL + "'Closing Stock of ' + STOCKGROUP_PRIMARY,";
                    strSQL = strSQL + " " + dblClosingStockDirect + " FROM INV_STOCKGROUP ";
                    strSQL = strSQL + "WHERE STOCKGROUP_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + " AND STOCKGROUP_SECONDARY_TYPE in (1) ";
                    //strSQL = strSQL + "AND INV_DATE < " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_PRIMARY_TYPE,STOCKGROUP_PRIMARY,STOCKGROUP_SECONDARY_TYPE ";
                    //cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //IndirectDirect closing
                    strSQL = "SELECT ";
                    strSQL = strSQL + "isnull(SUM(INV_OPENING_TRAN_QRY.CLSAMNT),0)*-1 as cls_AMOUNT ";// Direct Opoening
                    strSQL = strSQL + "from INV_OPENING_TRAN_QRY,INV_STOCKGROUP WHERE INV_STOCKGROUP.STOCKGROUP_NAME =INV_OPENING_TRAN_QRY.STOCKGROUP_NAME  AND INV_STOCKGROUP.STOCKGROUP_PRIMARY_TYPE  =1  ";
                    strSQL = strSQL + "and INV_STOCKGROUP.STOCKGROUP_SECONDARY_TYPE in (2) ";
                    //cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblClosingStockIndirect = Convert.ToDouble(dr["cls_AMOUNT"].ToString());
                    }
                    dr.Close();
                    strSQL = "INSERT INTO ACC_MANUFACTURE_REPORT(MANUFACTURE_TYPE,MANUFACTURE_SUB_TYPE,";
                    strSQL = strSQL + "MANUFACTURE_NAME,MANUFACTURE_GROUP,MANUFACTURE_AMOUNT) ";
                    strSQL = strSQL + "SELECT STOCKGROUP_PRIMARY_TYPE,STOCKGROUP_SECONDARY_TYPE,";
                    strSQL = strSQL + "STOCKGROUP_PRIMARY,";
                    strSQL = strSQL + "'Closing Stock of ' + STOCKGROUP_PRIMARY,";
                    strSQL = strSQL + " " + dblClosingStockIndirect + " FROM INV_STOCKGROUP ";
                    strSQL = strSQL + "WHERE STOCKGROUP_PRIMARY_TYPE = 1 ";
                    strSQL = strSQL + " AND STOCKGROUP_SECONDARY_TYPE in (2) ";
                    //strSQL = strSQL + "AND INV_DATE < " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_PRIMARY_TYPE,STOCKGROUP_PRIMARY,STOCKGROUP_SECONDARY_TYPE ";
                    //cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //WIP closing
                    strSQL = "SELECT ";
                    strSQL = strSQL + "isnull(SUM(INV_OPENING_TRAN_QRY.CLSAMNT),0) *-1 as cls_AMOUNT ";// WIP Closing
                    strSQL = strSQL + "from INV_OPENING_TRAN_QRY,INV_STOCKGROUP WHERE INV_STOCKGROUP.STOCKGROUP_NAME =INV_OPENING_TRAN_QRY.STOCKGROUP_NAME  AND INV_STOCKGROUP.STOCKGROUP_PRIMARY_TYPE  =2  ";
                    strSQL = strSQL + "and INV_STOCKGROUP.STOCKGROUP_SECONDARY_TYPE in (0) ";
                    //cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblClosingStockWork = Convert.ToDouble(dr["cls_AMOUNT"].ToString());
                    }
                    dr.Close();
                    strSQL = "INSERT INTO ACC_MANUFACTURE_REPORT(MANUFACTURE_TYPE,MANUFACTURE_SUB_TYPE,";
                    strSQL = strSQL + "MANUFACTURE_NAME,MANUFACTURE_GROUP,MANUFACTURE_AMOUNT) ";
                    strSQL = strSQL + "SELECT STOCKGROUP_PRIMARY_TYPE,STOCKGROUP_SECONDARY_TYPE,";
                    strSQL = strSQL + "STOCKGROUP_PRIMARY,";
                    strSQL = strSQL + "'Closing Stock of ' + STOCKGROUP_PRIMARY,";
                    strSQL = strSQL + " " + dblClosingStockWork + " FROM INV_STOCKGROUP ";
                    strSQL = strSQL + "WHERE STOCKGROUP_PRIMARY_TYPE = 2 ";
                    strSQL = strSQL + " AND STOCKGROUP_SECONDARY_TYPE in (0) ";
                    //strSQL = strSQL + "AND INV_DATE < " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_PRIMARY_TYPE,STOCKGROUP_PRIMARY,STOCKGROUP_SECONDARY_TYPE ";
                    //cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    //************************End Stock************************
                    strSQL = "select ISNuLL(SUM(INV_TRAN_AMOUNT),0) INV_AMOUNT from ACC_LEDGER_VOUCHER_INV_TRAN_THREE ";
                    strSQL = strSQL + "WHERE STOCKGROUP_PRIMARY_TYPE = 1 AND STOCKGROUP_SECONDARY_TYPE = 1 ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(vdteFromDate) + "";
                    strSQL = strSQL + "AND " + Utility.cvtSQLDateString(vdteTodate) + "";
                    strSQL = strSQL + "AND LEDGER_GROUP = " + (int)Utility.GR_GROUP_TYPE.grPURCHASE + " ";
                    //cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblDirect = dblDirect + Convert.ToDouble(dr["INV_AMOUNT"].ToString());
                    }
                    dr.Close();
                    if (dblDirect != 0)
                    {
                        strString = "Add: Purchases of " + strDirectRaw;
                        strSQL = "INSERT INTO ACC_MANUFACTURE_REPORT(MANUFACTURE_TYPE,MANUFACTURE_SUB_TYPE,";
                        strSQL = strSQL + "MANUFACTURE_NAME,MANUFACTURE_GROUP,MANUFACTURE_AMOUNT) ";
                        strSQL = strSQL + "VALUES('1','1','" + strDirectRaw + "','" + strString + "'," + dblDirect + ")";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }

                    strSQL = "select ISNuLL(SUM(INV_TRAN_AMOUNT),0) INV_AMOUNT from ACC_LEDGER_VOUCHER_INV_TRAN_THREE ";
                    strSQL = strSQL + "WHERE STOCKGROUP_PRIMARY_TYPE = 1 AND STOCKGROUP_SECONDARY_TYPE = 2 ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(vdteFromDate) + "";
                    strSQL = strSQL + "AND " + Utility.cvtSQLDateString(vdteTodate) + "";
                    strSQL = strSQL + "AND LEDGER_GROUP = " + (int)Utility.GR_GROUP_TYPE.grPURCHASE + " ";
                    //cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblIndirect = dblIndirect + Convert.ToDouble(dr["INV_AMOUNT"].ToString());
                    }
                    dr.Close();
                    if (dblIndirect != 0)
                    {
                        strString = "Add: Purchases of " + strIndirectRaw;
                        strSQL = "INSERT INTO ACC_MANUFACTURE_REPORT(MANUFACTURE_TYPE,MANUFACTURE_SUB_TYPE,";
                        strSQL = strSQL + "MANUFACTURE_NAME,MANUFACTURE_GROUP,MANUFACTURE_AMOUNT) ";
                        strSQL = strSQL + "VALUES('1','2','" + strIndirectRaw + "','" + strString + "'," + dblIndirect + ")";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }

                    strSQL = "select ISNuLL(SUM(INV_TRAN_AMOUNT),0) INV_AMOUNT from ACC_LEDGER_VOUCHER_INV_TRAN_THREE ";
                    strSQL = strSQL + "WHERE STOCKGROUP_PRIMARY_TYPE = 2 AND STOCKGROUP_SECONDARY_TYPE = 0 ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(vdteFromDate) + "";
                    strSQL = strSQL + "AND " + Utility.cvtSQLDateString(vdteTodate) + "";
                    strSQL = strSQL + "AND LEDGER_GROUP = " + (int)Utility.GR_GROUP_TYPE.grPURCHASE + " ";
                    //cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblWork = dblWork + Convert.ToDouble(dr["INV_AMOUNT"].ToString());
                    }
                    dr.Close();
                    if (dblWork != 0)
                    {
                        strString = "Add: Purchases of " + strDirectRaw;
                        strSQL = "INSERT INTO ACC_MANUFACTURE_REPORT(MANUFACTURE_TYPE,MANUFACTURE_SUB_TYPE,";
                        strSQL = strSQL + "MANUFACTURE_NAME,MANUFACTURE_GROUP,MANUFACTURE_AMOUNT) ";
                        strSQL = strSQL + "VALUES('1','3','" + strWorkInprogress + "','" + strString + "'," + dblWork + ")";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }


                    //'Direct Expenses Group
                    strSQL = "";
                    strSQL = "INSERT INTO ACC_MANUFACTURE_REPORT(MANUFACTURE_TYPE,MANUFACTURE_NAME,MANUFACTURE_GROUP,MANUFACTURE_AMOUNT) ";
                    strSQL = strSQL + "SELECT 1.5,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME, ";
                    strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) AS DEBIT_TOTAL ";
                    strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE ";
                    strSQL = strSQL + "(ACC_LEDGER_GROUP_QRY.GR_GROUP = " + (int)Utility.GR_GROUP_TYPE.grDIRECT_EXPENSES + ") ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                    strSQL = strSQL + "AND " + Utility.cvtSQLDateString(vdteTodate) + ")";
                    strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    // 'Direct Expenses Ledger
                    strSQL = "";
                    strSQL = "INSERT INTO ACC_MANUFACTURE_REPORT(MANUFACTURE_TYPE,MANUFACTURE_NAME,MANUFACTURE_GROUP,MANUFACTURE_AMOUNT) ";
                    strSQL = strSQL + "SELECT 1.5,LEDGER_PARENT_GROUP,LEDGER_NAME,";
                    strSQL = strSQL + "ISNULL(SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT),0) AS TOTAL ";
                    strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE ";
                    strSQL = strSQL + " (COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                    strSQL = strSQL + "AND " + Utility.cvtSQLDateString(vdteTodate) + ")";
                    strSQL = strSQL + "AND LEDGER_GROUP = '" + (int)Utility.GR_GROUP_TYPE.grDIRECT_EXPENSES + "' ";
                    strSQL = strSQL + "GROUP BY LEDGER_PARENT_GROUP,LEDGER_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    return 0;
                }
                strSQL = "DELETE FROM ACC_MANUFACTURE_REPORT WHERE MANUFACTURE_AMOUNT=0 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                cmdInsert.Transaction.Commit();

                strSQL = "SELECT ISNULL(SUM(MANUFACTURE_AMOUNT),0) AS AMNT FROM ACC_MANUFACTURE_REPORT ";
                //cmdInsert.Connection = gcnMain;
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblTotal = Convert.ToDouble(dr["AMNT"].ToString());
                }
                dr.Close();

                return dblTotal;
            }
        }

        private double GetInventoryTotal(string strDeComID, int intFlag, string vdteFromDate, string vdteTodate,
                                            string vstrBranchID, string strString = "")
        {
            string strSQL = null;
            double dblTotal = 0;
            SqlDataReader dr;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmdInsert = new SqlCommand();
                cmdInsert.Connection = gcnMain;
                if (intFlag == 0)
                {
                    strSQL = "ALTER VIEW INV_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(INV_TRAN_QUANTITY) AS OPN_QUANTITY,";
                    strSQL = strSQL + "SUM(INV_TRAN_AMOUNT) AS OPN_AMOUNT,0 AS INWARD_QUANTITY, 0 AS INWARD_AMOUNT,";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY, 0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT  ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE < " + Utility.cvtSQLDateString(vdteFromDate) + " )";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    if (vstrBranchID != "")
                    {
                        strSQL = strSQL + " AND BRANCH_ID='" + vstrBranchID + "' ";
                    }
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT, SUM(INV_TRAN_QUANTITY) AS INWARD_QUANTITY, SUM(INV_TRAN_AMOUNT) AS INWARD_AMOUNT, ";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY, 0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                    strSQL = strSQL + "AND ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(vdteTodate) + ") ";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    if (vstrBranchID != "")
                    {
                        strSQL = strSQL + " AND BRANCH_ID='" + vstrBranchID + "' ";
                    }
                    strSQL = strSQL + "AND INV_INOUT_FLAG='I' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT,0 INWARD_QUANTITY,0 INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(INV_TRAN_QUANTITY) AS OUTWARD_QUANTITY, SUM(INV_TRAN_AMOUNT) AS OUTWARD_SALES_AMOUNT,0 AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                    strSQL = strSQL + "AND ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(vdteTodate) + ") ";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    if (vstrBranchID != "")
                    {
                        strSQL = strSQL + " AND BRANCH_ID='" + vstrBranchID + "' ";
                    }
                    strSQL = strSQL + "AND INV_INOUT_FLAG='O' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "ALTER VIEW INV_OPENING_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(OPN_QUANTITY) AS INV_TRAN_QUANTITY, SUM(OPN_AMOUNT) AS INV_TRAN_AMOUNT,";
                    strSQL = strSQL + "SUM(INWARD_QUANTITY) AS INWARD_QUANTITY, SUM(INWARD_AMOUNT) AS INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT,SUM(OPN_QUANTITY+INWARD_QUANTITY+OUTWARD_QUANTITY) CLS , ";
                    strSQL = strSQL + "SUM(OPN_AMOUNT+INWARD_AMOUNT+OUTWARD_SALES_AMOUNT) CLSAMNT  ";
                    strSQL = strSQL + "FROM INV_TRAN_QRY ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                else
                {
                    strSQL = "ALTER VIEW INV_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(INV_TRAN_QUANTITY) AS OPN_QUANTITY,";
                    strSQL = strSQL + "SUM(INV_TRAN_AMOUNT) AS OPN_AMOUNT,0 AS INWARD_QUANTITY, 0 AS INWARD_AMOUNT,";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY, 0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT  ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE < " + Utility.cvtSQLDateString(vdteFromDate) + " )";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    if (vstrBranchID != "")
                    {
                        strSQL = strSQL + " AND BRANCH_ID='" + vstrBranchID + "' ";
                    }

                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT, SUM(INV_TRAN_QUANTITY) AS INWARD_QUANTITY, SUM(INV_TRAN_AMOUNT) AS INWARD_AMOUNT, ";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY, 0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                    strSQL = strSQL + "AND ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(vdteTodate) + ") ";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "AND INV_INOUT_FLAG='I' ";
                    if (vstrBranchID != "")
                    {
                        strSQL = strSQL + " AND BRANCH_ID='" + vstrBranchID + "' ";
                    }
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT,0 INWARD_QUANTITY,0 INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(INV_TRAN_QUANTITY) AS OUTWARD_QUANTITY, SUM(INV_TRAN_AMOUNT) AS OUTWARD_SALES_AMOUNT,0 AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                    strSQL = strSQL + "AND ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(vdteTodate) + ") ";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    if (vstrBranchID != "")
                    {
                        strSQL = strSQL + " AND BRANCH_ID='" + vstrBranchID + "' ";
                    }
                    strSQL = strSQL + "AND INV_INOUT_FLAG='O' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "ALTER VIEW INV_OPENING_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(OPN_QUANTITY) AS INV_TRAN_QUANTITY, SUM(OPN_AMOUNT) AS INV_TRAN_AMOUNT,";
                    strSQL = strSQL + "SUM(INWARD_QUANTITY) AS INWARD_QUANTITY, SUM(INWARD_AMOUNT) AS INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT,SUM(OPN_QUANTITY+INWARD_QUANTITY+OUTWARD_QUANTITY) CLS , ";
                    strSQL = strSQL + "SUM(OPN_AMOUNT+INWARD_AMOUNT+OUTWARD_SALES_AMOUNT) CLSAMNT  ";
                    strSQL = strSQL + "FROM INV_TRAN_QRY ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }


                if (intFlag == 0)
                {
                    strSQL = " SELECT SUM(INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY) as QNTY, isnull(SUM(INV_OPENING_TRAN_QRY.INV_TRAN_AMOUNT),0) as AMNT FROM ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY INV_OPENING_TRAN_QRY INNER JOIN INV_STOCKITEM INV_STOCKITEM ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME ";
                    strSQL = strSQL + "INNER JOIN INV_STOCKITEM_LEVEL INV_STOCKITEM_LEVEL ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM_LEVEL.STOCKITEM_NAME ";
                    if (Utility.glngBusinessType == 4)
                    {
                        strSQL = strSQL + "WHERE (INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1 IN (" + strString + ") ";
                        strSQL = strSQL + "OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2 IN (" + strString + ") ";
                        strSQL = strSQL + "OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3 IN (" + strString + ") ";
                        strSQL = strSQL + "OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4 IN (" + strString + ") ";
                        strSQL = strSQL + "OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5 IN (" + strString + "))";
                    }
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblTotal = Convert.ToDouble(dr["AMNT"].ToString());
                    }
                    dr.Close();
                }
                else if (intFlag == 1)
                {
                    strSQL = " SELECT SUM(INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY) as QNTY, isnull(SUM(INV_OPENING_TRAN_QRY.CLSAMNT),0) as AMNT FROM ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY INV_OPENING_TRAN_QRY INNER JOIN INV_STOCKITEM INV_STOCKITEM ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME ";
                    strSQL = strSQL + "INNER JOIN INV_STOCKITEM_LEVEL INV_STOCKITEM_LEVEL ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM_LEVEL.STOCKITEM_NAME ";
                    strSQL = strSQL + "WHERE INV_OPENING_TRAN_QRY.INWARD_QUANTITY + INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY+ INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY > 0";
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblTotal = Convert.ToDouble(dr["AMNT"].ToString());
                    }
                    dr.Close();
                }
                else
                {
                    strSQL = " SELECT SUM(INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY) as QNTY, isnull(SUM(INV_OPENING_TRAN_QRY.INV_TRAN_AMOUNT),0) as AMNT FROM ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY INV_OPENING_TRAN_QRY INNER JOIN INV_STOCKITEM INV_STOCKITEM ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME ";
                    strSQL = strSQL + "INNER JOIN INV_STOCKITEM_LEVEL INV_STOCKITEM_LEVEL ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM_LEVEL.STOCKITEM_NAME ";
                    if (Utility.glngBusinessType == 4)
                    {
                        strSQL = strSQL + "WHERE (INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1 IN (" + strString + ") ";
                        strSQL = strSQL + "OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2 IN (" + strString + ") ";
                        strSQL = strSQL + "OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3 IN (" + strString + ") ";
                        strSQL = strSQL + "OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4 IN (" + strString + ") ";
                        strSQL = strSQL + "OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5 IN (" + strString + "))";
                    }
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblTotal = Convert.ToDouble(dr["AMNT"].ToString());
                    }
                    dr.Close();
                }
            }
            return dblTotal;


        }

        public List<RAccountsGroup> GetCostCenterLedger(string strDeComID, string vdteFromDate, string vdteTodate,
                                            string strBranchId, string strCostcenterLedger)
        {
            string strSQL = null, mySQL = "", strVMasterName = "", strLedgerName = "", strTranDate1, strToBy, strsting = "";
            double dblclosing = 0, dblopn = 0, dblDramount = 0, dblCramount = 0;
            SqlDataReader dr;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;

                strSQL = "DELETE FROM SMART_COST_CENTER_LED_TEMP ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "SELECT VECTOR_MASTER.VMASTER_NAME, VECTOR_TRANSACTION.LEDGER_NAME,";
                strSQL = strSQL + "VECTOR_CATEGORY.VECTOR_CATEGORY_NAME ";
                strSQL = strSQL + "FROM VECTOR_MASTER VECTOR_MASTER INNER JOIN ";
                strSQL = strSQL + "VECTOR_CATEGORY VECTOR_CATEGORY ON ";
                strSQL = strSQL + "VECTOR_MASTER.VECTOR_CATEGORY_NAME = VECTOR_CATEGORY.VECTOR_CATEGORY_NAME LEFT OUTER JOIN ";
                strSQL = strSQL + "VECTOR_TRANSACTION VECTOR_TRANSACTION ON VECTOR_MASTER.VMASTER_NAME = VECTOR_TRANSACTION.VMASTER_NAME LEFT OUTER JOIN ";
                strSQL = strSQL + "VECTOR_MASTER_CHILD VECTOR_MASTER_CHILD ON ";
                strSQL = strSQL + "VECTOR_TRANSACTION.LEDGER_NAME = VECTOR_MASTER_CHILD.MASTER_LEDGER_NAME ";
                if (strBranchId != "")
                {
                    strSQL = strSQL + "WHERE VECTOR_TRANSACTION.BRANCH_ID = '" + strBranchId + "' ";
                }
                strSQL = strSQL + "GROUP BY VECTOR_MASTER.VMASTER_NAME, VECTOR_TRANSACTION.LEDGER_NAME, ";
                strSQL = strSQL + "VECTOR_CATEGORY.VECTOR_CATEGORY_NAME ";

                strSQL = strSQL + "HAVING ";
                strSQL = strSQL + " VECTOR_TRANSACTION.LEDGER_NAME ='" + strCostcenterLedger.Replace("'", "''") + "' ";
                strSQL = strSQL + " order by VECTOR_TRANSACTION.LEDGER_NAME asc ";

                cmdInsert.Connection = gcnMain;
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    strsting = strsting + dr["VMASTER_NAME"].ToString() + "," + dr["LEDGER_NAME"].ToString() + "~";
                }
                dr.Close();

                if (strsting != "")
                {

                    string[] words = strsting.Split('~');
                    foreach (string ooValue in words)
                    {
                        string[] ooCostLedger = ooValue.Split(',');
                        if (ooCostLedger[0] != "")
                        {
                            if (strVMasterName != ooCostLedger[0].ToString())
                            {
                                strVMasterName = ooCostLedger[0].Replace("'", "''");
                                strLedgerName = ooCostLedger[1].Replace("'", "''");
                                dblclosing = 0;
                                strSQL = "SELECT VCHILD_OPENING_BALANCE FROM VECTOR_MASTER_CHILD WHERE VMASTER_NAME='" + strVMasterName + "'";
                                strSQL = strSQL + " and MASTER_LEDGER_NAME='" + strLedgerName + "' ";
                                cmdInsert.Connection = gcnMain;
                                cmdInsert.CommandText = strSQL;
                                dr = cmdInsert.ExecuteReader();
                                if (dr.Read())
                                {
                                    dblopn = Convert.ToDouble(dr["VCHILD_OPENING_BALANCE"].ToString());
                                    dblclosing = 0;
                                }
                                dr.Close();
                                strSQL = "SELECT isnull(SUM(VECTOR_TRANSACTION.VT_TRAN_AMOUNT),0) ";
                                strSQL = strSQL + "AS VT_TRAN_AMOUNT from VECTOR_TRANSACTION  ";
                                strSQL = strSQL + "WHERE VMASTER_NAME='" + strVMasterName + "' ";
                                strSQL = strSQL + "AND LEDGER_NAME ='" + strCostcenterLedger + "' ";
                                strSQL = strSQL + "AND VT_TRAN_DATE < " + Utility.cvtSQLDateString(vdteFromDate);
                                cmdInsert.Connection = gcnMain;
                                cmdInsert.CommandText = strSQL;
                                dr = cmdInsert.ExecuteReader();
                                if (dr.Read())
                                {
                                    dblopn = dblopn + Convert.ToDouble(dr["VT_TRAN_AMOUNT"].ToString());
                                    dblclosing = 0;
                                }
                            }
                            dr.Close();

                            strSQL = "INSERT INTO SMART_COST_CENTER_LED_TEMP(LEDGER_NAME,VMASTER_NAME,OPN_BALANCE)";
                            strSQL = strSQL + "values(";
                            strSQL = strSQL + "'" + strLedgerName + "' ";
                            strSQL = strSQL + ",'" + strVMasterName + "' ";
                            strSQL = strSQL + "," + dblopn + " ";
                            strSQL = strSQL + ")";
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();

                            strSQL = "select VT_TRAN_DATE,LEDGER_NAME,VT_TRAN_TOBY,sum(VECTOR_TRANSACTION.VT_TRAN_AMOUNT) ";
                            strSQL = strSQL + "AS VT_TRAN_AMOUNT from VECTOR_TRANSACTION  ";
                            strSQL = strSQL + "WHERE VMASTER_NAME='" + strVMasterName + "' ";
                            strSQL = strSQL + "AND LEDGER_NAME ='" + strCostcenterLedger.Replace("'", "''") + "' ";
                            strSQL = strSQL + "AND (VT_TRAN_DATE >= " + Utility.cvtSQLDateString(vdteFromDate) + " AND  ";
                            strSQL = strSQL + "VT_TRAN_DATE <= " + Utility.cvtSQLDateString(vdteTodate) + ") ";
                            strSQL = strSQL + "group by VT_TRAN_DATE,LEDGER_NAME,VT_TRAN_TOBY order by VT_TRAN_DATE ";
                            cmdInsert.Connection = gcnMain;
                            cmdInsert.CommandText = strSQL;
                            dr = cmdInsert.ExecuteReader();
                            while (dr.Read())
                            {
                                if (dr["VT_TRAN_TOBY"].ToString() == "Dr")
                                {
                                    dblDramount = Convert.ToDouble(dr["VT_TRAN_AMOUNT"]);
                                }
                                else
                                {
                                    dblCramount = Convert.ToDouble(dr["VT_TRAN_AMOUNT"]);
                                }
                                strTranDate1 = Convert.ToDateTime(dr["VT_TRAN_DATE"]).ToString("dd/MM/yyyy");
                                strToBy = dr["VT_TRAN_TOBY"].ToString();
                                dblclosing = dblclosing + dblopn + (dblDramount + dblCramount);


                                strSQL = "INSERT INTO SMART_COST_CENTER_LED_TEMP(";
                                strSQL = strSQL + "LEDGER_NAME,VMASTER_NAME,TRAN_DATE,OPN_BALANCE,DR_BALANCE,CR_BALANCE,VT_TRAN_TOBY,CLOSING_BALANCE)";
                                strSQL = strSQL + "VALUES(";
                                strSQL = strSQL + "'" + strLedgerName + "' ";
                                strSQL = strSQL + ",'" + strVMasterName + "' ";
                                strSQL = strSQL + "," + Utility.cvtSQLDateString(strTranDate1) + " ";
                                strSQL = strSQL + "," + dblopn + " ";
                                strSQL = strSQL + "," + dblDramount + " ";
                                strSQL = strSQL + "," + dblCramount + " ";
                                strSQL = strSQL + ",'" + strToBy + "' ";
                                strSQL = strSQL + "," + dblclosing + " ";
                                strSQL = strSQL + ");";

                                mySQL += strSQL;
                                dblopn = 0;
                                dblDramount = 0;
                                dblCramount = 0;
                            }
                            dr.Close();


                        }
                    }
                }
                if (mySQL != "")
                {
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = mySQL;
                    cmdInsert.ExecuteNonQuery();
                }
                strSQL = "INSERT INTO SMART_COST_CENTER_LED_TEMP(LEDGER_NAME,VMASTER_NAME,OPN_BALANCE) ";
                strSQL = strSQL + "SELECT MASTER_LEDGER_NAME,VMASTER_NAME,VCHILD_OPENING_BALANCE FROM VECTOR_MASTER_CHILD ";
                strSQL = strSQL + " WHERE MASTER_LEDGER_NAME='" + strCostcenterLedger + "' ";
                strSQL = strSQL + "AND VMASTER_NAME NOT IN ( ";
                strSQL = strSQL + "SELECT DISTINCT VMASTER_NAME FROM SMART_COST_CENTER_LED_TEMP ";
                strSQL = strSQL + " WHERE LEDGER_NAME= '" + strCostcenterLedger + "' )";
                cmdInsert.Connection = gcnMain;
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                cmdInsert.Transaction.Commit();
                mySQL = "";
                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();

                //strSQL = "SELECT GR_NAME,GR_PARENT,GR_PRIMARY_TYPE,GR_AMOUNT FROM ACC_TRADING_REPORT";
                strSQL = "SELECT LEDGER_NAME, VMASTER_NAME, TRAN_DATE, OPN_BALANCE, DR_BALANCE, CR_BALANCE, CLOSING_BALANCE ";
                strSQL = strSQL + "FROM SMART_COST_CENTER_LED_TEMP SMART_COST_CENTER_LED_TEMP ";
                strSQL = strSQL + "ORDER BY LEDGER_NAME, VMASTER_NAME ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.strVectormaster = dr["VMASTER_NAME"].ToString();
                    if (dr["TRAN_DATE"].ToString() != "")
                    {
                        oLedg.strDate = Convert.ToDateTime(dr["TRAN_DATE"]).ToString("dd/MM/yyyy");
                    }
                    else
                    {
                        oLedg.strDate = "";
                    }
                    oLedg.dblOpening = Convert.ToDouble(dr["OPN_BALANCE"]);
                    oLedg.dblDr = Convert.ToDouble(dr["DR_BALANCE"]);
                    oLedg.dblCr = Convert.ToDouble(dr["CR_BALANCE"]);
                    oLedg.dblClosing = Convert.ToDouble(dr["CLOSING_BALANCE"]);
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strLedgerName = "";
                    oLedg.strVectormaster = "";
                    oLedg.strDate = "";
                    oLedg.dblOpening = 0;
                    oLedg.dblDr = 0;
                    oLedg.dblCr = 0;
                    oLedg.dblClosing = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();

                return ooAccLedger;

            }
        }



        public List<RAccountsGroup> GetCostCenterReport(string strDeComID, string vdteFromDate, string vdteTodate,
                                          string strBranchId, string strCostcenterLedger, int indIndividual)
        {
            string strSQL = null;

            SqlDataReader dr;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmdInsert = new SqlCommand();
                cmdInsert.Connection = gcnMain;
                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                strSQL = "SELECT ";
                strSQL = strSQL + "VECTOR_TRANSACTION.COMP_REF_NO, VECTOR_TRANSACTION.VT_TRAN_DATE, VECTOR_TRANSACTION.VMASTER_NAME, VECTOR_TRANSACTION.LEDGER_NAME, VECTOR_TRANSACTION.VT_TRAN_AMOUNT, VECTOR_TRANSACTION.VT_TRAN_TOBY, ";
                strSQL = strSQL + "VECTOR_MASTER.VMASTER_NAME,VECTOR_TRANSACTION.FC_CONVERSION_RATE,VECTOR_TRANSACTION.VT_CURRENCY_SYMBOL ";
                strSQL = strSQL + "FROM ";
                strSQL = strSQL + "VECTOR_TRANSACTION VECTOR_TRANSACTION INNER JOIN VECTOR_MASTER VECTOR_MASTER ON ";
                strSQL = strSQL + "VECTOR_TRANSACTION.VMASTER_NAME = VECTOR_MASTER.VMASTER_NAME ";
                strSQL = strSQL + "WHERE  ";
                strSQL = strSQL + "VECTOR_TRANSACTION.VT_TRAN_DATE >= " + Utility.cvtSQLDateString(vdteFromDate) + " ";
                strSQL = strSQL + "AND VECTOR_TRANSACTION.VT_TRAN_DATE <=" + Utility.cvtSQLDateString(vdteTodate) + " ";
                if (strCostcenterLedger != "")
                {
                    strSQL = strSQL + "AND VECTOR_MASTER.VMASTER_NAME  = '" + strCostcenterLedger + "' ";
                }
                if (strBranchId != "")
                {
                    strSQL = strSQL + "AND VECTOR_TRANSACTION.BRANCH_ID = '" + strBranchId + "' ";

                }
                strSQL = strSQL + "ORDER BY VECTOR_MASTER.VMASTER_NAME ASC ";
                if (indIndividual > 0)
                {
                    strSQL = strSQL + ",VECTOR_TRANSACTION.LEDGER_NAME ASC, VECTOR_TRANSACTION.VT_TRAN_DATE ASC ";
                }
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();

                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strRefNo = dr["COMP_REF_NO"].ToString();
                    if (dr["VT_TRAN_DATE"].ToString() != "")
                    {
                        oLedg.strDate = Convert.ToDateTime(dr["VT_TRAN_DATE"]).ToString("dd/MM/yyyy");
                    }
                    else
                    {
                        oLedg.strDate = "";
                    }
                    oLedg.strVectormaster = dr["VMASTER_NAME"].ToString();
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    //oLedg.dblOpening = Convert.ToDouble(dr["VT_TRAN_AMOUNT"]);
                    oLedg.strToBy = dr["VT_TRAN_TOBY"].ToString();
                    oLedg.dblOpening = Convert.ToDouble(dr["VT_TRAN_AMOUNT"]);

                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strRefNo = "";
                    oLedg.strDate = "";
                    oLedg.strVectormaster = "";
                    oLedg.strLedgerName = "";
                    oLedg.dblOpening = 0;
                    oLedg.strToBy = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();

                return ooAccLedger;

            }
        }

        public double dblManufacturing(string strDeComID, string vdteFromDate, string vdteTodate, string strBranchId)
        {
            string strSQL = null;
            double dblManuCost, dblNetTotal = 0, dblFacCost = 0;
            SqlDataReader dr;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmdInsert = new SqlCommand();

                cmdInsert.Connection = gcnMain;

                dblManuCost = mloadManufacturingNew(strDeComID, vdteFromDate, vdteTodate);


                strSQL = "select ISNULL(sum(MANUFACTURE_AMOUNT),0) AMNT from ACC_MANUFACTURE_REPORT where MANUFACTURE_SUB_TYPE =1";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblNetTotal = Convert.ToDouble(dr["AMNT"]);
                }
                dr.Close();
                strSQL = "select ISNULL(sum(MANUFACTURE_AMOUNT),0) AMNT  from ACC_MANUFACTURE_REPORT where MANUFACTURE_SUB_TYPE =2";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblNetTotal = dblNetTotal + Convert.ToDouble(dr["AMNT"]);
                }
                dr.Close();
                strSQL = "select ISNULL(sum(MANUFACTURE_AMOUNT),0) AMNT  from ACC_MANUFACTURE_REPORT where MANUFACTURE_SUB_TYPE =3";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblNetTotal = dblNetTotal - Convert.ToDouble(dr["AMNT"]);
                }
                dr.Close();

                strSQL = "select ISNULL(sum(MANUFACTURE_AMOUNT),0) AMNT  from ACC_MANUFACTURE_REPORT where MANUFACTURE_SUB_TYPE =0";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblFacCost = dblNetTotal + Convert.ToDouble(dr["AMNT"]);
                }
                dr.Close();

                //strSQL = "INSERT INTO ACC_MANUFACTURE_REPORT(MANUFACTURE_TYPE,MANUFACTURE_SUB_TYPE,MANUFACTURE_NAME,";
                //strSQL = strSQL + "MANUFACTURE_GROUP,MANUFACTURE_AMOUNT) ";
                //strSQL = strSQL + "VALUES(1,4,'zCost of Raw Materials Consumed:','Cost of Raw Materials Consumed:'," + dblNetTotal + " )";
                //cmdInsert.CommandText = strSQL;
                //cmdInsert.ExecuteNonQuery();
                //cmdInsert.Transaction.Commit();
                return dblFacCost;

            }
        }


        public List<RAccountsGroup> mManufacturing(string strDeComID, string strSelection)
        {
            string strSQL = null;
            // double dblManuCost, dblNetTotal = 0, dblFacCost = 0;
            SqlDataReader dr;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmdInsert = new SqlCommand();

                cmdInsert.Connection = gcnMain;


                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                strSQL = "SELECT ";
                strSQL = strSQL + "ACC_MANUFACTURE_REPORT.MANUFACTURE_SERIAL, ";
                strSQL = strSQL + "ACC_MANUFACTURE_REPORT.MANUFACTURE_TYPE, ";
                strSQL = strSQL + "ACC_MANUFACTURE_REPORT.MANUFACTURE_SUB_TYPE, ";
                strSQL = strSQL + "ACC_MANUFACTURE_REPORT.MANUFACTURE_NAME, ";
                strSQL = strSQL + "ACC_MANUFACTURE_REPORT.MANUFACTURE_AMOUNT, ";
                strSQL = strSQL + "ACC_MANUFACTURE_REPORT.MANUFACTURE_GROUP ";
                strSQL = strSQL + "FROM ACC_MANUFACTURE_REPORT ACC_MANUFACTURE_REPORT ";
                strSQL = strSQL + " WHERE MANUFACTURE_TYPE='" + strSelection + "' ";

                strSQL = strSQL + "ORDER BY ACC_MANUFACTURE_REPORT.MANUFACTURE_TYPE ASC,";
                strSQL = strSQL + "ACC_MANUFACTURE_REPORT.MANUFACTURE_SUB_TYPE ASC, ";
                strSQL = strSQL + "ACC_MANUFACTURE_REPORT.MANUFACTURE_GROUP ASC ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.lngslNo = Convert.ToInt64(dr["MANUFACTURE_SERIAL"].ToString());
                    if (dr["MANUFACTURE_TYPE"] != "")
                    {
                        oLedg.lngManuType = Convert.ToInt32(dr["MANUFACTURE_TYPE"]);
                    }
                    oLedg.dblMnauAmount = Convert.ToDouble(dr["MANUFACTURE_AMOUNT"]);
                    oLedg.lngSubType = Convert.ToInt64(dr["MANUFACTURE_SUB_TYPE"]);
                    oLedg.strManuName = dr["MANUFACTURE_NAME"].ToString();
                    oLedg.strManuGroup = dr["MANUFACTURE_GROUP"].ToString();
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }
        public List<RAccountsGroup> mGetDailyCollectionDetails(string strDeComID, string strFate, string strTDate, string strBranchID)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();


                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                strSQL = "SELECT ";
                strSQL = strSQL + "ACC_VOUCHER.COMP_REF_NO, ACC_VOUCHER.COMP_VOUCHER_TYPE, ACC_VOUCHER.COMP_VOUCHER_DATE, ACC_VOUCHER.LEDGER_NAME, ACC_VOUCHER.VOUCHER_CHEQUE_DATE,";
                strSQL = strSQL + "ACC_VOUCHER.VOUCHER_CHEQUE_NUMBER, ACC_VOUCHER.VOUCHER_CHEQUE_DRAWN_ON, ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT, ACC_VOUCHER.VOUCHER_TOBY, ACC_VOUCHER.VOUCHER_REVERSE_LEDGER ";
                strSQL = strSQL + "FROM ACC_VOUCHER ACC_VOUCHER  ";
                strSQL = strSQL + "WHERE COMP_VOUCHER_DATE BETWEEN ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "AND COMP_VOUCHER_TYPE =1 ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "ORDER BY COMP_REF_NO ";


                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strRefNo = dr["COMP_REF_NO"].ToString();
                    oLedg.intvoucherType = Convert.ToInt32(dr["COMP_VOUCHER_TYPE"].ToString());
                    oLedg.strDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd/MM/yyyy");
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.strReverseLedger = dr["VOUCHER_REVERSE_LEDGER"].ToString();
                    oLedg.strToBy = dr["VOUCHER_TOBY"].ToString();
                    if (dr["VOUCHER_CHEQUE_DRAWN_ON"].ToString() != "")
                    {
                        oLedg.strCheuqueNo = dr["VOUCHER_CHEQUE_NUMBER"].ToString();
                    }
                    else
                    {
                        oLedg.strCheuqueNo = "";
                    }
                    if (dr["VOUCHER_CHEQUE_DATE"].ToString() != "")
                    {
                        oLedg.strChequeDate = Convert.ToDateTime(dr["VOUCHER_CHEQUE_DATE"]).ToString("dd/MM/yyyy");
                    }
                    else
                    {
                        oLedg.strChequeDate = "";
                    }

                    if (dr["VOUCHER_CHEQUE_DRAWN_ON"].ToString() != "")
                    {
                        oLedg.strDrawnOn = dr["VOUCHER_CHEQUE_DRAWN_ON"].ToString();
                    }
                    else
                    {
                        oLedg.strDrawnOn = "";
                    }
                    oLedg.dblClosing = Convert.ToDouble(dr["VOUCHER_DEBIT_AMOUNT"].ToString());
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strRefNo = "";
                    oLedg.intvoucherType = 0;
                    oLedg.strDate = "";
                    oLedg.strLedgerName = "";
                    oLedg.strCheuqueNo = "";
                    oLedg.strChequeDate = "";
                    oLedg.strDrawnOn = "";
                    oLedg.strDrawnOn = "";
                    oLedg.dblClosing = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }
        //public List<RAccountsGroup> mGetDailyCollection(string strDeComID, string strFate, string strTDate, string strBranchID, string struserName, string strBkash, int intasperBkash)
        //{
        //    string strSQL = null;
           
        //    connstring = Utility.SQLConnstringComSwitch(strDeComID);

        //    using (SqlConnection gcnMain = new SqlConnection(connstring))
        //    {
        //        if (gcnMain.State == ConnectionState.Open)
        //        {
        //            gcnMain.Close();
        //        }
        //        gcnMain.Open();
        //        SqlDataReader dr;
        //        SqlCommand cmdInsert = new SqlCommand();

        //        List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();

        //        if (strBkash != "B")
        //        {
        //            if (intasperBkash == 0)
        //            {
        //                if (strFate == strTDate)
        //                {
        //                    SqlTransaction myTrans;
        //                    myTrans = gcnMain.BeginTransaction();
        //                    cmdInsert.Connection = gcnMain;
        //                    cmdInsert.Transaction = myTrans;
        //                    strSQL = "DELETE FROM ACC_DAY_BOOK_TEMP_SUMM ";
        //                    cmdInsert.CommandText = strSQL;
        //                    cmdInsert.ExecuteNonQuery();
        //                    strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
        //                    strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.ZONE,ACC_DAY_BOOK_TEMP.LEDGER_NAME,SUM(ACC_DAY_BOOK_TEMP.DEBIT_AMOUNT) VOUCHER_CREDIT_AMOUNT ";
        //                    strSQL = strSQL + "from ACC_DAY_BOOK_TEMP,ACC_LEDGER_Z_D_A where ACC_DAY_BOOK_TEMP.LEDGER_NAME_NEW  =ACC_LEDGER_Z_D_A.LEDGER_NAME  AND  ACC_LEDGER_Z_D_A.ZONE is not null ";
        //                    strSQL = strSQL + "and ACC_DAY_BOOK_TEMP.COMP_VOUCHER_DATE BETWEEN  ";
        //                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
        //                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
        //                    strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
        //                    strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE,ACC_DAY_BOOK_TEMP.LEDGER_NAME ";
        //                    cmdInsert.CommandText = strSQL;
        //                    cmdInsert.ExecuteNonQuery();
        //                    strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
        //                    strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.ZONE,'Z-HL',ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0)*-1 AMOUNT FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A WHERE ";
        //                    strSQL = strSQL + "ACC_VOUCHER.REVERSE_LEDGER1=ACC_LEDGER_Z_D_A.LEDGER_NAME ";
        //                    strSQL = strSQL + "and ACC_VOUCHER.COMP_VOUCHER_TYPE =3 and ";
        //                    strSQL = strSQL + "ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='HL' AND  ACC_VOUCHER.VOUCHER_TOBY ='Cr' ";
        //                    strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
        //                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
        //                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
        //                    if (strBranchID != "")
        //                    {
        //                        strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
        //                    }
        //                    strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
        //                    strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE ";
        //                    cmdInsert.CommandText = strSQL;
        //                    cmdInsert.ExecuteNonQuery();
        //                    strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
        //                    strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.ZONE,'Z-PF',ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0) *-1 AMOUNT FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A WHERE ";
        //                    strSQL = strSQL + "ACC_VOUCHER.REVERSE_LEDGER1=ACC_LEDGER_Z_D_A.LEDGER_NAME ";
        //                    strSQL = strSQL + "and ACC_VOUCHER.COMP_VOUCHER_TYPE =3 and ";
        //                    strSQL = strSQL + "ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='PF' AND  ACC_VOUCHER.VOUCHER_TOBY ='Cr' ";
        //                    strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
        //                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
        //                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
        //                    if (strBranchID != "")
        //                    {
        //                        strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
        //                    }
        //                    strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
        //                    strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE ";
        //                    cmdInsert.CommandText = strSQL;
        //                    cmdInsert.ExecuteNonQuery();
        //                    cmdInsert.Transaction.Commit();
        //                    strSQL = "SELECT ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT,PF_AMOUNT,HL_AMOUNT FROM ACC_DAY_BOOK_TEMP_SUMM ORDER BY ZONE ";
        //                }
        //                else
        //                {
        //                    SqlTransaction myTrans;
        //                    myTrans = gcnMain.BeginTransaction();
        //                    cmdInsert.Connection = gcnMain;
        //                    cmdInsert.Transaction = myTrans;
        //                    strSQL = "DELETE FROM ACC_DAY_BOOK_TEMP_SUMM ";
        //                    cmdInsert.CommandText = strSQL;
        //                    cmdInsert.ExecuteNonQuery();
        //                    strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
        //                    strSQL = strSQL + "SELECT   ACC_LEDGER_Z_D_A.ZONE, (case when ACC_VOUCHER.VOUCHER_REVERSE_LEDGER='As Per Details' then 'BKash Account'  else ACC_VOUCHER.VOUCHER_REVERSE_LEDGER end) LEDGER_NAME,";
        //                    strSQL = strSQL + "isnull(sum(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0)VOUCHER_CREDIT_AMOUNT FROM ACC_VOUCHER,ACC_LEDGER,ACC_LEDGER_Z_D_A  ";
        //                    strSQL = strSQL + "WHERE ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_LEDGER.LEDGER_NAME=ACC_LEDGER_Z_D_A.LEDGER_NAME  ";
        //                    strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
        //                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
        //                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
        //                    if (strBranchID != "")
        //                    {
        //                        strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
        //                    }
        //                    strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
        //                    //strSQL = strSQL + "and ACC_LEDGER_Z_D_A.ZONE <> 'X-MPO Accounts-Zone' ";
        //                    strSQL = strSQL + "GROUP by ACC_LEDGER_Z_D_A.ZONE,ACC_VOUCHER.VOUCHER_REVERSE_LEDGER,ACC_VOUCHER.COMP_VOUCHER_TYPE ";
        //                    strSQL = strSQL + "HAVING (COMP_VOUCHER_TYPE = 1) AND sum(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) > 0 ";
        //                    //strSQL = strSQL + "ORDER by ACC_LEDGER_Z_D_A.ZONE ";

        //                    cmdInsert.CommandText = strSQL;
        //                    cmdInsert.ExecuteNonQuery();
        //                    strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
        //                    strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.ZONE,'Z-HL',ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0)*-1 AMOUNT FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A WHERE ";
        //                    strSQL = strSQL + "ACC_VOUCHER.REVERSE_LEDGER1=ACC_LEDGER_Z_D_A.LEDGER_NAME ";
        //                    strSQL = strSQL + "and ACC_VOUCHER.COMP_VOUCHER_TYPE =3 and ";
        //                    strSQL = strSQL + "ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='HL' AND  ACC_VOUCHER.VOUCHER_TOBY ='Cr' ";
        //                    strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
        //                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
        //                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
        //                    if (strBranchID != "")
        //                    {
        //                        strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
        //                    }
        //                    strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
        //                    strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE ";
        //                    cmdInsert.CommandText = strSQL;
        //                    cmdInsert.ExecuteNonQuery();
        //                    strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
        //                    strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.ZONE,'Z-PF',ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0) *-1 AMOUNT FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A WHERE ";
        //                    strSQL = strSQL + "ACC_VOUCHER.REVERSE_LEDGER1=ACC_LEDGER_Z_D_A.LEDGER_NAME ";
        //                    strSQL = strSQL + "and ACC_VOUCHER.COMP_VOUCHER_TYPE =3 and ";
        //                    strSQL = strSQL + "ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='PF' AND  ACC_VOUCHER.VOUCHER_TOBY ='Cr' ";
        //                    strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
        //                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
        //                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
        //                    if (strBranchID != "")
        //                    {
        //                        strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
        //                    }
        //                    strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
        //                    strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE ";
        //                    cmdInsert.CommandText = strSQL;
        //                    cmdInsert.ExecuteNonQuery();
        //                    cmdInsert.Transaction.Commit();
        //                    strSQL = "SELECT ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT,PF_AMOUNT,HL_AMOUNT FROM ACC_DAY_BOOK_TEMP_SUMM ORDER BY ZONE ";

        //                }
        //            }
        //            else
        //            {
        //                SqlTransaction myTrans;
        //                myTrans = gcnMain.BeginTransaction();
        //                cmdInsert.Connection = gcnMain;
        //                cmdInsert.Transaction = myTrans;
        //                strSQL = "DELETE FROM ACC_DAY_BOOK_TEMP_SUMM ";
        //                cmdInsert.CommandText = strSQL;
        //                cmdInsert.ExecuteNonQuery();
        //                strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
        //                strSQL = strSQL + "SELECT   ACC_LEDGER_Z_D_A.ZONE, (case when ACC_VOUCHER.VOUCHER_REVERSE_LEDGER='As Per Details' then 'BKash Account' else ACC_VOUCHER.VOUCHER_REVERSE_LEDGER end) LEDGER_NAME,";
        //                strSQL = strSQL + "isnull(sum(ACC_COMPANY_VOUCHER.COMP_VOUCHER_NET_AMOUNT),0)VOUCHER_CREDIT_AMOUNT FROM ACC_COMPANY_VOUCHER,ACC_VOUCHER,ACC_LEDGER,ACC_LEDGER_Z_D_A  ";
        //                strSQL = strSQL + "WHERE ACC_COMPANY_VOUCHER.COMP_REF_NO =ACC_VOUCHER.COMP_REF_NO and ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_LEDGER.LEDGER_NAME=ACC_LEDGER_Z_D_A.LEDGER_NAME  ";
        //                strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
        //                strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
        //                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
        //                if (strBranchID != "")
        //                {
        //                    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
        //                }
        //                strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
        //                //strSQL = strSQL + "and ACC_LEDGER_Z_D_A.ZONE <> 'X-MPO Accounts-Zone' ";
        //                strSQL = strSQL + "GROUP by ACC_LEDGER_Z_D_A.ZONE,ACC_VOUCHER.VOUCHER_REVERSE_LEDGER,ACC_VOUCHER.COMP_VOUCHER_TYPE   ";
        //                strSQL = strSQL + "HAVING (ACC_VOUCHER.COMP_VOUCHER_TYPE = 1) AND sum(ACC_COMPANY_VOUCHER.COMP_VOUCHER_NET_AMOUNT) > 0 ";
        //                //strSQL = strSQL + "ORDER by ACC_LEDGER_Z_D_A.ZONE ";
        //                cmdInsert.CommandText = strSQL;
        //                cmdInsert.ExecuteNonQuery();

        //                strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
        //                strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.ZONE,'Z-HL',ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0)*-1 AMOUNT FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A WHERE ";
        //                strSQL = strSQL + "ACC_VOUCHER.REVERSE_LEDGER1=ACC_LEDGER_Z_D_A.LEDGER_NAME ";
        //                strSQL = strSQL + "and ACC_VOUCHER.COMP_VOUCHER_TYPE =3 and ";
        //                strSQL = strSQL + "ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='HL' AND  ACC_VOUCHER.VOUCHER_TOBY ='Cr' ";
        //                strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
        //                strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
        //                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
        //                if (strBranchID != "")
        //                {
        //                    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
        //                }
        //                strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
        //                strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE ";
        //                cmdInsert.CommandText = strSQL;
        //                cmdInsert.ExecuteNonQuery();
        //                strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
        //                strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.ZONE,'Z-PF',ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0) *-1 AMOUNT FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A WHERE ";
        //                strSQL = strSQL + "ACC_VOUCHER.REVERSE_LEDGER1=ACC_LEDGER_Z_D_A.LEDGER_NAME ";
        //                strSQL = strSQL + "and ACC_VOUCHER.COMP_VOUCHER_TYPE =3 and ";
        //                strSQL = strSQL + "ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='PF' AND  ACC_VOUCHER.VOUCHER_TOBY ='Cr' ";
        //                strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
        //                strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
        //                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
        //                if (strBranchID != "")
        //                {
        //                    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
        //                }
        //                strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
        //                strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE ";
        //                cmdInsert.CommandText = strSQL;
        //                cmdInsert.ExecuteNonQuery();
        //                cmdInsert.Transaction.Commit();
        //                strSQL = "SELECT ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT,PF_AMOUNT,HL_AMOUNT FROM ACC_DAY_BOOK_TEMP_SUMM ORDER BY ZONE ";

        //            }

        //        }
        //        else
        //        {
        //            SqlTransaction myTrans;
        //            myTrans = gcnMain.BeginTransaction();
        //            cmdInsert.Connection = gcnMain;
        //            cmdInsert.Transaction = myTrans;
        //            strSQL = "DELETE FROM ACC_DAY_BOOK_TEMP_SUMM ";
        //            cmdInsert.CommandText = strSQL;
        //            cmdInsert.ExecuteNonQuery();
        //            strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
        //            strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.ZONE,ACC_DAY_BOOK_TEMP.LEDGER_NAME,SUM(ACC_DAY_BOOK_TEMP.DEBIT_AMOUNT) VOUCHER_CREDIT_AMOUNT ";
        //            strSQL = strSQL + "from ACC_DAY_BOOK_TEMP,ACC_LEDGER_Z_D_A where ACC_DAY_BOOK_TEMP.LEDGER_NAME_NEW  =ACC_LEDGER_Z_D_A.LEDGER_NAME  AND  ACC_LEDGER_Z_D_A.ZONE is not null ";
        //            strSQL = strSQL + "and ACC_DAY_BOOK_TEMP.COMP_VOUCHER_DATE BETWEEN  ";
        //            strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
        //            strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
        //            strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
        //            strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE,ACC_DAY_BOOK_TEMP.LEDGER_NAME ";
        //            cmdInsert.CommandText = strSQL;
        //            cmdInsert.ExecuteNonQuery();
        //            strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
        //            strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.ZONE,'Z-HL',ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0)*-1 AMOUNT FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A WHERE ";
        //            strSQL = strSQL + "ACC_VOUCHER.REVERSE_LEDGER1=ACC_LEDGER_Z_D_A.LEDGER_NAME ";
        //            strSQL = strSQL + "and ACC_VOUCHER.COMP_VOUCHER_TYPE =3 and ";
        //            strSQL = strSQL + "ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='HL' AND  ACC_VOUCHER.VOUCHER_TOBY ='Cr' ";
        //            strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
        //            strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
        //            strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
        //            if (strBranchID != "")
        //            {
        //                strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
        //            }
        //            strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
        //            strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE ";
        //            cmdInsert.CommandText = strSQL;
        //            cmdInsert.ExecuteNonQuery();
        //            strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
        //            strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.ZONE,'Z-PF',ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0) *-1 AMOUNT FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A WHERE ";
        //            strSQL = strSQL + "ACC_VOUCHER.REVERSE_LEDGER1=ACC_LEDGER_Z_D_A.LEDGER_NAME ";
        //            strSQL = strSQL + "and ACC_VOUCHER.COMP_VOUCHER_TYPE =3 and ";
        //            strSQL = strSQL + "ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='PF' AND  ACC_VOUCHER.VOUCHER_TOBY ='Cr' ";
        //            strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
        //            strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
        //            strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
        //            if (strBranchID != "")
        //            {
        //                strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
        //            }
        //            strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
        //            strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE ";
        //            cmdInsert.CommandText = strSQL;
        //            cmdInsert.ExecuteNonQuery();
        //            cmdInsert.Transaction.Commit();
        //            strSQL = "SELECT ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT,PF_AMOUNT,HL_AMOUNT FROM ACC_DAY_BOOK_TEMP_SUMM ORDER BY ZONE ";



        //        }

        //        SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
        //        dr = cmd.ExecuteReader();
        //        while (dr.Read())
        //        {
        //            RAccountsGroup oLedg = new RAccountsGroup();
        //            oLedg.strZone = dr["ZONE"].ToString();
        //            oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
        //            oLedg.dblClosing = Convert.ToDouble(dr["VOUCHER_CREDIT_AMOUNT"].ToString());
        //            ooAccLedger.Add(oLedg);
        //        }
        //        if (!dr.HasRows)
        //        {
        //            RAccountsGroup oLedg = new RAccountsGroup();
        //            oLedg.strLedgerName = "";
        //            oLedg.dblClosing = 0;
        //            ooAccLedger.Add(oLedg);
        //        }
        //        dr.Close();
        //        gcnMain.Close();
        //        return ooAccLedger;

        //    }
        //}
        public List<RAccountsGroup> mGetDailyCollection(string strDeComID, string strFate, string strTDate, string strBranchID,
                                   string struserName, string strBkash, int intasperBkash, string strHlFdate)
        {
            string strSQL = null;

            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();

                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();

                if (strBkash != "B")
                {
                    if (intasperBkash == 0)
                    {
                        if (strFate == strTDate)
                        {
                            SqlTransaction myTrans;
                            myTrans = gcnMain.BeginTransaction();
                            cmdInsert.Connection = gcnMain;
                            cmdInsert.Transaction = myTrans;
                            strSQL = "DELETE FROM ACC_DAY_BOOK_TEMP_SUMM ";
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();
                            strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
                            strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.ZONE,ACC_DAY_BOOK_TEMP.LEDGER_NAME,SUM(ACC_DAY_BOOK_TEMP.DEBIT_AMOUNT) VOUCHER_CREDIT_AMOUNT ";
                            strSQL = strSQL + "from ACC_DAY_BOOK_TEMP,ACC_LEDGER_Z_D_A where ACC_DAY_BOOK_TEMP.LEDGER_NAME_NEW  =ACC_LEDGER_Z_D_A.LEDGER_NAME  AND  ACC_LEDGER_Z_D_A.ZONE is not null ";
                            strSQL = strSQL + "and ACC_DAY_BOOK_TEMP.COMP_VOUCHER_DATE BETWEEN  ";
                            strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
                            strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                            strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
                            strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE,ACC_DAY_BOOK_TEMP.LEDGER_NAME ";
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();
                            if (strBkash == "BN")
                            {
                                strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
                                strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.ZONE,'Z-Honda Loan',ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0)*-1 AMOUNT FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A WHERE ";
                                strSQL = strSQL + "ACC_VOUCHER.REVERSE_LEDGER1=ACC_LEDGER_Z_D_A.LEDGER_NAME ";
                                strSQL = strSQL + "and ACC_VOUCHER.COMP_VOUCHER_TYPE =3 and ";
                                strSQL = strSQL + "ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='HL' AND  ACC_VOUCHER.VOUCHER_TOBY ='Cr' ";
                                strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
                                strSQL = strSQL + " " + Utility.cvtSQLDateString(strHlFdate) + " ";
                                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                                if (strBranchID != "")
                                {
                                    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
                                }
                                strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
                                strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE ";
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
                                strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.ZONE,'Z-Provident fund',ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0) *-1 AMOUNT FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A WHERE ";
                                strSQL = strSQL + "ACC_VOUCHER.REVERSE_LEDGER1=ACC_LEDGER_Z_D_A.LEDGER_NAME ";
                                strSQL = strSQL + "and ACC_VOUCHER.COMP_VOUCHER_TYPE =3 and ";
                                strSQL = strSQL + "ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='PF' AND  ACC_VOUCHER.VOUCHER_TOBY ='Cr' ";
                                strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
                                strSQL = strSQL + " " + Utility.cvtSQLDateString(strHlFdate) + " ";
                                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                                if (strBranchID != "")
                                {
                                    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
                                }
                                strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
                                strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE ";
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                            }
                            cmdInsert.Transaction.Commit();
                            strSQL = "SELECT ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT,PF_AMOUNT,HL_AMOUNT FROM ACC_DAY_BOOK_TEMP_SUMM ORDER BY ZONE ";
                        }
                        else
                        {
                            SqlTransaction myTrans;
                            myTrans = gcnMain.BeginTransaction();
                            cmdInsert.Connection = gcnMain;
                            cmdInsert.Transaction = myTrans;
                            strSQL = "DELETE FROM ACC_DAY_BOOK_TEMP_SUMM ";
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();
                            strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
                            strSQL = strSQL + "SELECT   ACC_LEDGER_Z_D_A.ZONE, (case when ACC_VOUCHER.VOUCHER_REVERSE_LEDGER='As Per Details' then 'BKash Account'  else ACC_VOUCHER.VOUCHER_REVERSE_LEDGER end) LEDGER_NAME,";
                            strSQL = strSQL + "isnull(sum(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0)VOUCHER_CREDIT_AMOUNT FROM ACC_VOUCHER,ACC_LEDGER,ACC_LEDGER_Z_D_A  ";
                            strSQL = strSQL + "WHERE ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_LEDGER.LEDGER_NAME=ACC_LEDGER_Z_D_A.LEDGER_NAME  ";
                            strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
                            strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
                            strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                            if (strBranchID != "")
                            {
                                strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
                            }
                            strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
                            //strSQL = strSQL + "and ACC_LEDGER_Z_D_A.ZONE <> 'X-MPO Accounts-Zone' ";
                            strSQL = strSQL + "GROUP by ACC_LEDGER_Z_D_A.ZONE,ACC_VOUCHER.VOUCHER_REVERSE_LEDGER,ACC_VOUCHER.COMP_VOUCHER_TYPE ";
                            strSQL = strSQL + "HAVING (COMP_VOUCHER_TYPE = 1) AND sum(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) > 0 ";
                            //strSQL = strSQL + "ORDER by ACC_LEDGER_Z_D_A.ZONE ";

                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();
                            if (strBkash == "BN")
                            {
                                strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
                                strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.ZONE,'Z-Honda Loan',ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0)*-1 AMOUNT FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A WHERE ";
                                strSQL = strSQL + "ACC_VOUCHER.REVERSE_LEDGER1=ACC_LEDGER_Z_D_A.LEDGER_NAME ";
                                strSQL = strSQL + "and ACC_VOUCHER.COMP_VOUCHER_TYPE =3 and ";
                                strSQL = strSQL + "ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='HL' AND  ACC_VOUCHER.VOUCHER_TOBY ='Cr' ";
                                strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
                                strSQL = strSQL + " " + Utility.cvtSQLDateString(strHlFdate) + " ";
                                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                                if (strBranchID != "")
                                {
                                    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
                                }
                                strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
                                strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE ";
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
                                strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.ZONE,'Z-Provident fund',ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0) *-1 AMOUNT FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A WHERE ";
                                strSQL = strSQL + "ACC_VOUCHER.REVERSE_LEDGER1=ACC_LEDGER_Z_D_A.LEDGER_NAME ";
                                strSQL = strSQL + "and ACC_VOUCHER.COMP_VOUCHER_TYPE =3 and ";
                                strSQL = strSQL + "ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='PF' AND  ACC_VOUCHER.VOUCHER_TOBY ='Cr' ";
                                strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
                                strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
                                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                                if (strBranchID != "")
                                {
                                    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
                                }
                                strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
                                strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE ";
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                            }
                            cmdInsert.Transaction.Commit();
                            strSQL = "SELECT ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT,PF_AMOUNT,HL_AMOUNT FROM ACC_DAY_BOOK_TEMP_SUMM ORDER BY ZONE ";

                        }
                    }
                    else
                    {
                        SqlTransaction myTrans;
                        myTrans = gcnMain.BeginTransaction();
                        cmdInsert.Connection = gcnMain;
                        cmdInsert.Transaction = myTrans;
                        strSQL = "DELETE FROM ACC_DAY_BOOK_TEMP_SUMM ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                        strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
                        strSQL = strSQL + "SELECT   ACC_LEDGER_Z_D_A.ZONE, (case when ACC_VOUCHER.VOUCHER_REVERSE_LEDGER='As Per Details' then 'BKash Account' else ACC_VOUCHER.VOUCHER_REVERSE_LEDGER end) LEDGER_NAME,";
                        strSQL = strSQL + "isnull(sum(ACC_COMPANY_VOUCHER.COMP_VOUCHER_NET_AMOUNT),0)VOUCHER_CREDIT_AMOUNT FROM ACC_COMPANY_VOUCHER,ACC_VOUCHER,ACC_LEDGER,ACC_LEDGER_Z_D_A  ";
                        strSQL = strSQL + "WHERE ACC_COMPANY_VOUCHER.COMP_REF_NO =ACC_VOUCHER.COMP_REF_NO and ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_LEDGER.LEDGER_NAME=ACC_LEDGER_Z_D_A.LEDGER_NAME  ";
                        strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
                        strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
                        strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                        if (strBranchID != "")
                        {
                            strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
                        }
                        strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
                        //strSQL = strSQL + "and ACC_LEDGER_Z_D_A.ZONE <> 'X-MPO Accounts-Zone' ";
                        strSQL = strSQL + "GROUP by ACC_LEDGER_Z_D_A.ZONE,ACC_VOUCHER.VOUCHER_REVERSE_LEDGER,ACC_VOUCHER.COMP_VOUCHER_TYPE   ";
                        strSQL = strSQL + "HAVING (ACC_VOUCHER.COMP_VOUCHER_TYPE = 1) AND sum(ACC_COMPANY_VOUCHER.COMP_VOUCHER_NET_AMOUNT) > 0 ";
                        //strSQL = strSQL + "ORDER by ACC_LEDGER_Z_D_A.ZONE ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                        if (strBkash == "BN")
                        {
                            strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
                            strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.ZONE,'Z-Honda Loan',ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0)*-1 AMOUNT FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A WHERE ";
                            strSQL = strSQL + "ACC_VOUCHER.REVERSE_LEDGER1=ACC_LEDGER_Z_D_A.LEDGER_NAME ";
                            strSQL = strSQL + "and ACC_VOUCHER.COMP_VOUCHER_TYPE =3 and ";
                            strSQL = strSQL + "ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='HL' AND  ACC_VOUCHER.VOUCHER_TOBY ='Cr' ";
                            strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
                            strSQL = strSQL + " " + Utility.cvtSQLDateString(strHlFdate) + " ";
                            strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                            if (strBranchID != "")
                            {
                                strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
                            }
                            strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
                            strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE ";
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();
                            strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
                            strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.ZONE,'Z-Provident fund',ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0) *-1 AMOUNT FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A WHERE ";
                            strSQL = strSQL + "ACC_VOUCHER.REVERSE_LEDGER1=ACC_LEDGER_Z_D_A.LEDGER_NAME ";
                            strSQL = strSQL + "and ACC_VOUCHER.COMP_VOUCHER_TYPE =3 and ";
                            strSQL = strSQL + "ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='PF' AND  ACC_VOUCHER.VOUCHER_TOBY ='Cr' ";
                            strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
                            strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
                            strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                            if (strBranchID != "")
                            {
                                strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
                            }
                            strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
                            strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE ";
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();
                        }
                        cmdInsert.Transaction.Commit();
                        strSQL = "SELECT ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT,PF_AMOUNT,HL_AMOUNT FROM ACC_DAY_BOOK_TEMP_SUMM ORDER BY ZONE ";

                    }

                }
                else
                {
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;
                    strSQL = "DELETE FROM ACC_DAY_BOOK_TEMP_SUMM ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
                    strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.ZONE,ACC_DAY_BOOK_TEMP.LEDGER_NAME,SUM(ACC_DAY_BOOK_TEMP.DEBIT_AMOUNT) VOUCHER_CREDIT_AMOUNT ";
                    strSQL = strSQL + "from ACC_DAY_BOOK_TEMP,ACC_LEDGER_Z_D_A where ACC_DAY_BOOK_TEMP.LEDGER_NAME_NEW  =ACC_LEDGER_Z_D_A.LEDGER_NAME  AND  ACC_LEDGER_Z_D_A.ZONE is not null ";
                    strSQL = strSQL + "and ACC_DAY_BOOK_TEMP.COMP_VOUCHER_DATE BETWEEN  ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE,ACC_DAY_BOOK_TEMP.LEDGER_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    if (strBkash == "")
                    {
                        strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
                        strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.ZONE,'Z-Honda Loan',ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0)*-1 AMOUNT FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A WHERE ";
                        strSQL = strSQL + "ACC_VOUCHER.REVERSE_LEDGER1=ACC_LEDGER_Z_D_A.LEDGER_NAME ";
                        strSQL = strSQL + "and ACC_VOUCHER.COMP_VOUCHER_TYPE =3 and ";
                        strSQL = strSQL + "ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='HL' AND  ACC_VOUCHER.VOUCHER_TOBY ='Cr' ";
                        strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
                        strSQL = strSQL + " " + Utility.cvtSQLDateString(strHlFdate) + " ";
                        strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                        if (strBranchID != "")
                        {
                            strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
                        }
                        strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
                        strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                        strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP_SUMM(ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT) ";
                        strSQL = strSQL + "SELECT ACC_LEDGER_Z_D_A.ZONE,'Z-Provident fund',ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0) *-1 AMOUNT FROM ACC_VOUCHER,ACC_LEDGER_Z_D_A WHERE ";
                        strSQL = strSQL + "ACC_VOUCHER.REVERSE_LEDGER1=ACC_LEDGER_Z_D_A.LEDGER_NAME ";
                        strSQL = strSQL + "and ACC_VOUCHER.COMP_VOUCHER_TYPE =3 and ";
                        strSQL = strSQL + "ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='PF' AND  ACC_VOUCHER.VOUCHER_TOBY ='Cr' ";
                        strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
                        strSQL = strSQL + " " + Utility.cvtSQLDateString(strHlFdate) + " ";
                        strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                        if (strBranchID != "")
                        {
                            strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
                        }
                        strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
                        strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    cmdInsert.Transaction.Commit();
                    strSQL = "SELECT ZONE,LEDGER_NAME,VOUCHER_CREDIT_AMOUNT,PF_AMOUNT,HL_AMOUNT FROM ACC_DAY_BOOK_TEMP_SUMM ORDER BY ZONE ";



                }

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strZone = dr["ZONE"].ToString();
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.dblClosing = Convert.ToDouble(dr["VOUCHER_CREDIT_AMOUNT"].ToString());
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strLedgerName = "";
                    oLedg.dblClosing = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }
        public List<RAccountsGroup> mGetContractsPartBill(string strDeComID, string strFate, string strTDate, string strBranchID, string strPartName)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();


                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                //strSQL = "SELECT  tb1.LEDGER_CODE, tb1.LEDGER_ADDRESS1, tb1.LEDGER_ADDRESS2, tb1.COMP_REF_NO, tb1.LEDGERNAME as LedgerName , tb1.COMP_VOUCHER_TYPE, tb1.COMP_VOUCHER_DATE, tb1.COMP_VOUCHER_NET_AMOUNT, tb1.SALES_REP, ";
                //strSQL = strSQL + "tb1.ENTRYBY, tb2.LEDGER_PARENT_GROUP AS Ledger_parentGroup ";
                //strSQL = strSQL + "FROM  (SELECT ACC_LEDGER.LEDGER_CODE, ACC_LEDGER.LEDGER_ADDRESS1, ACC_LEDGER.LEDGER_ADDRESS2, ACC_COMPANY_VOUCHER.COMP_REF_NO, ISNULL(ACC_LEDGER.TERITORRY_CODE, '') ";
                //strSQL = strSQL + "+ '-' + ISNULL(ACC_COMPANY_VOUCHER.LEDGER_NAME, '') + '-' + ISNULL(ACC_LEDGER.TERRITORRY_NAME, '') AS LEDGERNAME, ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE, ";
                //strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE, ACC_COMPANY_VOUCHER.COMP_VOUCHER_NET_AMOUNT, ACC_LEDGER.LEDGER_NAME_MERZE AS SALES_REP, ACC_COMPANY_VOUCHER.ENTRYBY, ";
                //strSQL = strSQL + "ACC_LEDGER.LEDGER_PARENT_GROUP ";
                //strSQL = strSQL + "FROM ACC_LEDGER AS ACC_LEDGER INNER JOIN ";
                //strSQL = strSQL + "ACC_COMPANY_VOUCHER AS ACC_COMPANY_VOUCHER ON ACC_LEDGER.LEDGER_NAME = ACC_COMPANY_VOUCHER.SALES_REP ";
                //strSQL = strSQL + "WHERE (ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = 16) AND (ACC_LEDGER.LEDGER_CODE <> '') AND (ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + "  AND ";
                //strSQL = strSQL + "" + Utility.cvtSQLDateString(strTDate) + ") AND (ACC_COMPANY_VOUCHER.BRANCH_ID = '" + strBranchID + "')) AS tb1 INNER JOIN ";
                //strSQL = strSQL + "(SELECT  LEDGER_PARENT_GROUP,LEDGER_NAME, LEDGER_NAME_MERZE ";
                //strSQL = strSQL + "FROM  ACC_LEDGER AS ACC_LEDGER_1 ";
                //strSQL = strSQL + "WHERE(LEDGER_CODE IS NULL)) AS tb2 ON tb1.LEDGERNAME = tb2.LEDGER_NAME_MERZE ";
                //strSQL = strSQL + " AND ACC_LEDGER.LEDGER_PARENT_GROUP='CP (Contract Party)' ";
                //if (strPartName != "")
                //{
                //    strSQL = strSQL + "WHERE (tb2.LEDGER_NAME ='" + strPartName + "') ";
                //}
                //strSQL = strSQL + " ORDER BY tb2.LEDGER_NAME_MERZE ";


                strSQL = "SELECT ACC_LEDGER.LEDGER_CODE, ACC_LEDGER.LEDGER_ADDRESS1, ACC_LEDGER.LEDGER_ADDRESS2, ACC_COMPANY_VOUCHER.COMP_REF_NO, ACC_LEDGER.LEDGER_NAME_MERZE  as LedgerName , ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE, ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE, ACC_COMPANY_VOUCHER.COMP_VOUCHER_NET_AMOUNT, ACC_CUSTOMER_LIST.LEDGER_NAME_MERZE SALES_REP, ACC_COMPANY_VOUCHER.ENTRYBY,";
                strSQL = strSQL + "ACC_LEDGER.LEDGER_PARENT_GROUP AS Ledger_parentGroup FROM ACC_LEDGER,ACC_COMPANY_VOUCHER,ACC_CUSTOMER_LIST WHERE ACC_LEDGER.LEDGER_NAME =ACC_COMPANY_VOUCHER.LEDGER_NAME ";
                strSQL = strSQL + "AND ACC_CUSTOMER_LIST.LEDGER_NAME =ACC_COMPANY_VOUCHER.SALES_REP ";
                strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + "  AND " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.BRANCH_ID = '" + strBranchID + "' ";
                strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = 16 ";
                strSQL = strSQL + "AND ACC_CUSTOMER_LIST.LEDGER_PARENT_GROUP in ('CP (Contract Party)','SP (Special Party)') ";
                if (strPartName != "")
                {
                    strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_NAME ='" + strPartName + "') ";
                }
                strSQL = strSQL + " ORDER BY ACC_LEDGER.LEDGER_NAME_MERZE ";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    if (dr["LEDGER_CODE"].ToString() != "")
                    {
                        oLedg.strLcode = dr["LEDGER_CODE"].ToString();
                    }
                    else
                    {
                        oLedg.strLcode = "";
                    }

                    if (dr["Ledger_parentGroup"].ToString() != "")
                    {
                        oLedg.strGrParent = dr["Ledger_parentGroup"].ToString();
                    }
                    else
                    {
                        oLedg.strGrParent = "";
                    }

                    if (dr["LEDGER_ADDRESS1"].ToString() != "")
                    {
                        oLedg.strAddress1 = dr["LEDGER_ADDRESS1"].ToString();
                    }
                    else
                    {
                        oLedg.strAddress1 = "";
                    }

                    if (dr["LEDGER_ADDRESS2"].ToString() != "")
                    {
                        oLedg.strAddress2 = dr["LEDGER_ADDRESS2"].ToString();
                    }
                    else
                    {
                        oLedg.strAddress2 = "";
                    }
                    if (dr["ENTRYBY"].ToString() != "")
                    {
                        oLedg.strUserName = dr["ENTRYBY"].ToString();
                    }
                    else
                    {
                        oLedg.strUserName = "";
                    }
                    oLedg.strLedgerName = dr["LedgerName"].ToString();
                    oLedg.intvoucherType = Convert.ToInt32(dr["COMP_VOUCHER_TYPE"]);
                    oLedg.strDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.dblAmount = Convert.ToDouble(dr["COMP_VOUCHER_NET_AMOUNT"].ToString());
                    oLedg.strSalesRep = dr["SALES_REP"].ToString();
                    oLedg.strRefNo = dr["COMP_REF_NO"].ToString();

                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();

                    oLedg.strLcode = "";
                    oLedg.strLcode = "";
                    oLedg.strTerritoryCode = "";
                    oLedg.strTerritoryCode = "";
                    oLedg.strTeritorryName = "";
                    oLedg.strTeritorryName = "";
                    oLedg.strGrParent = "";
                    oLedg.strGrParent = "";
                    oLedg.strAddress1 = "";
                    oLedg.strAddress1 = "";
                    oLedg.strAddress2 = "";
                    oLedg.strAddress2 = "";
                    oLedg.strUserName = "";
                    oLedg.strUserName = "";
                    oLedg.strLedgerName = "";
                    oLedg.intvoucherType = 0;
                    oLedg.strDate = "";
                    oLedg.dblAmount = 0;
                    oLedg.strSalesRep = "";
                    oLedg.strRefNo = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }


        public List<RFinalStatement> mGetFinalStattemnet(string strDeComID, string strFate, string strTDate, string strBranchID, string strGroupName,
                                                        string strPartyName, int intstatus, int intOrderby, double dblValue, double dblBelowValue, string strValOption, string gstrUserName)
        {
            string strSQL = null, strSelection = "";
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;
                strSQL = "DELETE FROM ACC_FINAL_STATEMENT ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                if (strGroupName != "")
                {
                    if (strGroupName.Contains("ZONE") == true)
                    {
                        strSelection = "Z";
                    }
                    else
                    {
                        strSelection = strGroupName.Substring(0, 1).ToUpper();
                    }

                }

                //Previous Dues
                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,PREVIOUS_DUES_GOODS,POSITION) ";
                strSQL = strSQL + "SELECT g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, isnull(sum(l.LEDGER_OPENING_BALANCE),0) *-1 PDUES   ";
                strSQL = strSQL + ",isnull(g.GR_PARENT_POSITION,0) from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND l.BRANCH_ID ='" + strBranchID + "' ";
                }
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                else
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                //Current Month
                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,PREVIOUS_DUES_GOODS,POSITION) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0)) SALES_CURRENT_MONTH   ";
                strSQL = strSQL + ",isnull(g.GR_PARENT_POSITION,0) from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND  C.COMP_VOUCHER_TYPE =16 ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                else
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //Return
                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,PREVIOUS_DUES_GOODS,POSITION) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0))*-1 RETURN_AMOUNT,isnull(g.GR_PARENT_POSITION,0)   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND  C.COMP_VOUCHER_TYPE =13 ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                else
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //Debit Amount

                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,PREVIOUS_DUES_GOODS,POSITION) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0)) DEBIT_AMOUNT,isnull(g.GR_PARENT_POSITION,0)   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                strSQL = strSQL + " AND  C.AUTOJV =0 ";
                strSQL = strSQL + " AND  C.DISABLE_VOUCHER =0 ";
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                else
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //Modified_24-11-19
                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,PREVIOUS_DUES_GOODS,POSITION) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "abs(ISNULL(SUM(av.VOUCHER_DEBIT_AMOUNT-av.VOUCHER_CREDIT_AMOUNT),0)) DEBIT_AMOUNT,isnull(g.GR_PARENT_POSITION,0)   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                strSQL = strSQL + " AND  C.DISABLE_VOUCHER =1 ";
                strSQL = strSQL + " AND  C.AUTOJV =0 ";
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                else
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();



                //Credit Amount
                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,PREVIOUS_DUES_GOODS,POSITION) ";
                strSQL = strSQL + "SELECT  ZDA.ZONE , ZDA.DIVISION , ZDA.AREA  ,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, isnull(SUM(v.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT),0) *-1,isnull(ZDA.GR_PARENT_POSITION,0) ";
                strSQL = strSQL + "FROM ACC_LEDGER_Z_D_A ZDA ,ACC_VOUCHER v,ACC_LEDGER L,ACC_COMPANY_VOUCHER c  WHERE L.LEDGER_NAME =ZDA.LEDGER_NAME AND V.LEDGER_NAME =L.LEDGER_NAME  and c.COMP_REF_NO =v.COMP_REF_NO ";
                strSQL = strSQL + "AND (V.COMP_VOUCHER_DATE <  ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + ") ";
                strSQL = strSQL + "AND V.COMP_VOUCHER_TYPE=3 ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND L.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "and c.SP_JOURNAL =0 ";
                strSQL = strSQL + "and v.VOUCHER_TOBY ='Cr' ";

                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND ZDA.ZONE ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND ZDA.DIVISION ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND g.DIVISION ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND ZDA.AREA='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND ZDA.AREA='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND ZDA.GR_ONE_DOWN ='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                else
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                }
                strSQL = strSQL + " GROUP BY ZDA.ZONE, ZDA.DIVISION , ZDA.AREA ,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE,ZDA.GR_PARENT_POSITION ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                //Cash
                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,PREVIOUS_DUES_GOODS,POSITION) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME,l.TERITORRY_CODE, l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + " abs(ISNULL(SUM(av.VOUCHER_CREDIT_AMOUNT),0)) *-1 COLL_CASH_TT,isnull(g.GR_PARENT_POSITION,0) ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av  ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO  ";
                strSQL = strSQL + "AND av.COMP_VOUCHER_TYPE=" + (int)Utility.VOUCHER_TYPE.vtRECEIPT_VOUCHER + " ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                ////strSQL = strSQL + "AND l.BRANCH_ID ='" + strBranchID + "' ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND av.BRANCH_ID ='" + strBranchID + "' ";
                }
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                else
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //SP Journal
                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,PREVIOUS_DUES_GOODS,POSITION) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME ,l.TERITORRY_CODE,l.LEDGER_NAME_MERZE,";
                strSQL = strSQL + "ABS(ISNULL(SUM(aV.VOUCHER_CREDIT_AMOUNT-aV.VOUCHER_DEBIT_AMOUNT),0)) *-1 COLL_VOUCHER,isnull(g.GR_PARENT_POSITION,0)   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.COMP_VOUCHER_TYPE =3 and c.SP_JOURNAL=1 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.AUTOJV =0 ";
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                else
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                //New minus pf HL 17_07_20

                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,PREVIOUS_DUES_GOODS,POSITION) ";
                strSQL = strSQL + "SELECT Z.ZONE,Z.DIVISION,Z.AREA,Z.TERRITORRY_NAME,Z.TERITORRY_CODE,  Z.LEDGER_NAME_MERZE ,ISNULL(SUM(v.VOUCHER_DEBIT_AMOUNT-V.VOUCHER_CREDIT_AMOUNT),0) *-1, ";
                strSQL = strSQL + "ISNULL(Z.GR_PARENT_POSITION,0)  FROM ACC_LEDGER_Z_D_A Z,ACC_VOUCHER V WHERE Z.LEDGER_NAME=V.REVERSE_LEDGER1  AND V.COMP_VOUCHER_TYPE=3 ";
                strSQL = strSQL + "AND V.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND V.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  V.AUTOJV=1";
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND Z.ZONE ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND Z.DIVISION ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND Z.DIVISION ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND Z.AREA ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND Z.AREA ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND Z.AREA='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND Z.LEDGER_NAME ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND Z.LEDGER_STATUS =" + intstatus + " ";
                }
                else
                {
                    strSQL = strSQL + "AND Z.LEDGER_STATUS in (0,1)";
                }
                strSQL = strSQL + "GROUP by  Z.ZONE,Z.DIVISION,Z.AREA ,Z.LEDGER_NAME,Z.TERRITORRY_NAME,Z.TERITORRY_CODE, Z.LEDGER_NAME_MERZE,GR_PARENT_POSITION ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                //*********
                //*********opn
                //Current Month Sales
                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,SALES_CURRENT_MONTH,POSITION) ";
                strSQL = strSQL + "SELECT  ZDA.ZONE , ZDA.DIVISION , ZDA.AREA  ,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0),isnull(ZDA.GR_PARENT_POSITION,0) FROM ACC_LEDGER_Z_D_A ZDA ,ACC_VOUCHER v,ACC_LEDGER L ";
                strSQL = strSQL + "WHERE L.LEDGER_NAME =ZDA.LEDGER_NAME AND V.LEDGER_NAME =L.LEDGER_NAME  ";
                strSQL = strSQL + "AND (V.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) +  ") " ;
                strSQL = strSQL + "AND V.COMP_VOUCHER_TYPE=16 ";
                if (strBranchID != "")
                {
                    //strSQL = strSQL + "AND L.BRANCH_ID ='" + strBranchID + "' ";
                    strSQL = strSQL + "AND v.BRANCH_ID ='" + strBranchID + "' ";
                }
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND ZDA.ZONE ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND ZDA.DIVISION ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND ZDA.DIVISION ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND ZDA.AREA ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND ZDA.AREA='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND ZDA.GR_ONE_DOWN ='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                else
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                }
                
                strSQL = strSQL + " GROUP BY ZDA.ZONE, ZDA.DIVISION , ZDA.AREA ,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE,ZDA.GR_PARENT_POSITION ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //Return
                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,RETURN_AMOUNT,POSITION) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0) RETURN_AMOUNT,isnull(g.GR_PARENT_POSITION,0)   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                strSQL = strSQL + "AND  C.COMP_VOUCHER_TYPE =13 ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                else
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //Debit Amount
                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,DEBIT_AMOUNT,POSITION) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0) DEBIT_AMOUNT,isnull(g.GR_PARENT_POSITION,0)   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                strSQL = strSQL + " AND  C.DISABLE_VOUCHER =0 ";
                strSQL = strSQL + " AND  C.AUTOJV =0 ";
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                else
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //Modified_24-11-19
                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,DEBIT_AMOUNT,POSITION) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "ISNULL(SUM(av.VOUCHER_DEBIT_AMOUNT-av.VOUCHER_CREDIT_AMOUNT),0) DEBIT_AMOUNT,isnull(g.GR_PARENT_POSITION,0)   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                strSQL = strSQL + " AND  C.DISABLE_VOUCHER =1 ";
                strSQL = strSQL + " AND  C.AUTOJV =0 ";
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                else
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                //Credit Amount
                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,CREDIT_AMOUNT,POSITION) ";
                strSQL = strSQL + "SELECT  ZDA.ZONE , ZDA.DIVISION , ZDA.AREA  ,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, isnull(SUM(v.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT),0),isnull(ZDA.GR_PARENT_POSITION,0) ";
                strSQL = strSQL + "FROM ACC_LEDGER_Z_D_A ZDA ,ACC_VOUCHER v,ACC_LEDGER L,ACC_COMPANY_VOUCHER c  WHERE L.LEDGER_NAME =ZDA.LEDGER_NAME AND V.LEDGER_NAME =L.LEDGER_NAME  and c.COMP_REF_NO =v.COMP_REF_NO ";
                strSQL = strSQL + "AND (V.COMP_VOUCHER_DATE BETWEEN  ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                strSQL = strSQL + "AND V.COMP_VOUCHER_TYPE=3 ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND v.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "and c.SP_JOURNAL =0 ";
                strSQL = strSQL + "and v.VOUCHER_TOBY ='Cr' ";
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND ZDA.ZONE ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND ZDA.DIVISION ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND ZDA.DIVISION ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                else
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1) ";
                }
                strSQL = strSQL + " GROUP BY ZDA.ZONE, ZDA.DIVISION , ZDA.AREA ,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE,ZDA.GR_PARENT_POSITION  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //Commitment
                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,COMMITMENT,POSITION) ";
                strSQL = strSQL + " select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME ,l.TERITORRY_CODE,l.LEDGER_NAME_MERZE,";
                strSQL = strSQL + " ISNULL(SUM(C.COLL_TARGET_COLL_AMT),0) COMMITMENT ,isnull(g.GR_PARENT_POSITION,0)  ";
                strSQL = strSQL + " from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,SALES_COLL_TARGET_MASTER m,SALES_COLL_TARGET_TRAN c ";
                strSQL = strSQL + " where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME  and m.COLL_TARGET_KEY=c.COLL_TARGET_KEY ";
                strSQL = strSQL + " AND C.COLL_TARGET_FROM_DATE >= " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND C.COLL_TARGET_TO_DATE <= " + Utility.cvtSQLDateString(strTDate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND m.BRANCH_ID ='" + strBranchID + "' ";
                }
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                else
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //Cash
                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,COLL_CASH_TT,POSITION) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME,l.TERITORRY_CODE, l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "ISNULL(SUM(AV.VOUCHER_CREDIT_AMOUNT),0) COLL_CASH_TT,isnull(g.GR_PARENT_POSITION,0) ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av  ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO  ";
                strSQL = strSQL + "AND av.COMP_VOUCHER_TYPE=" + (int)Utility.VOUCHER_TYPE.vtRECEIPT_VOUCHER + " ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                //strSQL = strSQL + "AND l.BRANCH_ID ='" + strBranchID + "' ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND av.BRANCH_ID ='" + strBranchID + "' ";
                }
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                else
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                }
                strSQL = strSQL + " group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //************hlpf
                //New minus pf HL 17_07_20

                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,COLL_CASH_TT,POSITION) ";
                strSQL = strSQL + "SELECT Z.ZONE,Z.DIVISION,Z.AREA ,Z.TERRITORRY_NAME,Z.TERITORRY_CODE,  Z.LEDGER_NAME_MERZE ,ISNULL(SUM(V.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT),0) *-1, ";
                strSQL = strSQL + "ISNULL(Z.GR_PARENT_POSITION,0)  FROM ACC_LEDGER_Z_D_A Z,ACC_VOUCHER V WHERE Z.LEDGER_NAME=V.REVERSE_LEDGER1  AND V.COMP_VOUCHER_TYPE=3 ";
                strSQL = strSQL + "AND V.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND V.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  V.AUTOJV=1";
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND Z.ZONE ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND Z.DIVISION ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND Z.DIVISION ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND Z.AREA ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND Z.AREA ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND Z.AREA='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND Z.LEDGER_NAME ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND Z.LEDGER_STATUS =" + intstatus + " ";
                }
                else
                {
                    strSQL = strSQL + "AND Z.LEDGER_STATUS in (0,1)";
                }
                strSQL = strSQL + "GROUP by  Z.ZONE,Z.DIVISION,Z.AREA ,Z.LEDGER_NAME,Z.TERRITORRY_NAME,Z.TERITORRY_CODE, Z.LEDGER_NAME_MERZE,GR_PARENT_POSITION ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,PF_HL,POSITION) ";
                strSQL = strSQL + "SELECT Z.ZONE,Z.DIVISION,Z.AREA ,Z.TERRITORRY_NAME,Z.TERITORRY_CODE,  Z.LEDGER_NAME_MERZE ,ISNULL(SUM(V.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT),0) *-1, ";
                strSQL = strSQL + "ISNULL(Z.GR_PARENT_POSITION,0)  FROM ACC_LEDGER_Z_D_A Z,ACC_VOUCHER V WHERE Z.LEDGER_NAME=V.REVERSE_LEDGER1  AND V.AUTOJV=1 AND V.COMP_VOUCHER_TYPE=3 ";
                strSQL = strSQL + "AND V.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND V.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  V.AUTOJV=1";
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND Z.ZONE ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND Z.DIVISION ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND Z.DIVISION ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND Z.AREA ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND Z.AREA ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND Z.AREA='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND Z.LEDGER_NAME ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND Z.LEDGER_STATUS =" + intstatus + " ";
                }
                else
                {
                    strSQL = strSQL + "AND Z.LEDGER_STATUS in (0,1)";
                }
                strSQL = strSQL + "GROUP by  Z.ZONE,Z.DIVISION,Z.AREA ,Z.LEDGER_NAME,Z.TERRITORRY_NAME,Z.TERITORRY_CODE, Z.LEDGER_NAME_MERZE,GR_PARENT_POSITION ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //***************
                //SP Journal
                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,COLL_VOUCHER,POSITION) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME ,l.TERITORRY_CODE,l.LEDGER_NAME_MERZE,";
                strSQL = strSQL + "ISNULL(SUM(aV.VOUCHER_CREDIT_AMOUNT-aV.VOUCHER_DEBIT_AMOUNT),0) COLL_VOUCHER,isnull(g.GR_PARENT_POSITION,0)   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.COMP_VOUCHER_TYPE =3 and c.SP_JOURNAL=1 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.AUTOJV =0 ";
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                else
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                }
                strSQL = strSQL + " group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //*******************Close Ledger
                if (intstatus == 2)
                {
                    //Previous Dues
                    strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,PREVIOUS_DUES_GOODS,POSITION) ";
                    strSQL = strSQL + "SELECT g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, isnull(sum(l.LEDGER_OPENING_BALANCE),0) *-1 PDUES   ";
                    strSQL = strSQL + ",isnull(g.GR_PARENT_POSITION,0) from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND l.BRANCH_ID ='" + strBranchID + "' ";
                    }
                    if (strGroupName != "")
                    {
                        if (strSelection == "Z")
                        {
                            strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "D")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "R")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "A")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "F")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "S")
                        {
                            strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                        }
                    }
                    else if (strPartyName != "")
                    {
                        strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                    }
                    strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                    strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                    strSQL = strSQL + " group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    //Current Month
                    strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,PREVIOUS_DUES_GOODS,POSITION) ";
                    strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                    strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0)) SALES_CURRENT_MONTH   ";
                    strSQL = strSQL + ",isnull(g.GR_PARENT_POSITION,0) from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c ";
                    strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME ";
                    strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + "AND  C.COMP_VOUCHER_TYPE =16 ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                    }
                    if (strGroupName != "")
                    {
                        if (strSelection == "Z")
                        {
                            strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "D")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "R")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "A")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "F")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "S")
                        {
                            strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                        }
                    }
                    else if (strPartyName != "")
                    {
                        strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                    }
                    strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                    strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                    strSQL = strSQL + " group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //Return
                    strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,PREVIOUS_DUES_GOODS,POSITION) ";
                    strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                    strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0))*-1 RETURN_AMOUNT   ";
                    strSQL = strSQL + ",isnull(g.GR_PARENT_POSITION,0) from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c ";
                    strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME ";
                    strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + "AND  C.COMP_VOUCHER_TYPE =13 ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                    }
                    if (strGroupName != "")
                    {
                        if (strSelection == "Z")
                        {
                            strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "D")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "R")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "A")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "F")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "S")
                        {
                            strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                        }
                    }
                    else if (strPartyName != "")
                    {
                        strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                    }
                    strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                    strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                    strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //Debit Amount

                    strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,PREVIOUS_DUES_GOODS,POSITION) ";
                    strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                    strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0)) DEBIT_AMOUNT,isnull(g.GR_PARENT_POSITION,0)   ";
                    strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                    strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                    strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
                    strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                    }
                    strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                    strSQL = strSQL + " AND  C.DISABLE_VOUCHER =0 ";
                    if (strGroupName != "")
                    {
                        if (strSelection == "Z")
                        {
                            strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "D")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "R")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "A")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "F")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "S")
                        {
                            strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                        }
                    }
                    else if (strPartyName != "")
                    {
                        strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                    }
                    strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                    strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                    strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    
                    //Modified_24_11_19
                    strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,PREVIOUS_DUES_GOODS,POSITION) ";
                    strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                    strSQL = strSQL + "abs(ISNULL(SUM(av.VOUCHER_DEBIT_AMOUNT-av.VOUCHER_CREDIT_AMOUNT),0)) DEBIT_AMOUNT,isnull(g.GR_PARENT_POSITION,0)   ";
                    strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                    strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                    strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
                    strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                    }
                    strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                    strSQL = strSQL + " AND  C.DISABLE_VOUCHER =1 ";
                    strSQL = strSQL + " AND  C.AUTOJV =0 ";
                    if (strGroupName != "")
                    {
                        if (strSelection == "Z")
                        {
                            strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "D")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "R")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "A")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "F")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "S")
                        {
                            strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                        }
                    }
                    else if (strPartyName != "")
                    {
                        strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                    }
                    strSQL = strSQL + "AND l.LEDGER_STATUS =2 ";
                    strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                    strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //Credit Amount
                    strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,PREVIOUS_DUES_GOODS,POSITION) ";
                    strSQL = strSQL + "SELECT  ZDA.ZONE , ZDA.DIVISION , ZDA.AREA  ,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0),isnull(ZDA.GR_PARENT_POSITION,0) ";
                    strSQL = strSQL + "FROM ACC_LEDGER_Z_D_A ZDA ,ACC_VOUCHER v,ACC_LEDGER L,ACC_COMPANY_VOUCHER c  WHERE L.LEDGER_NAME =ZDA.LEDGER_NAME AND V.LEDGER_NAME =L.LEDGER_NAME  and c.COMP_REF_NO =v.COMP_REF_NO ";
                    strSQL = strSQL + "AND (V.COMP_VOUCHER_DATE ";
                    strSQL = strSQL + "< " + Utility.cvtSQLDateString(strFate) + " ) ";
                    strSQL = strSQL + "AND V.COMP_VOUCHER_TYPE=3 ";
                    if (strBranchID != "")
                    {
                        //strSQL = strSQL + " AND L.BRANCH_ID ='" + strBranchID + "' ";
                        strSQL = strSQL + " AND V.BRANCH_ID ='" + strBranchID + "' ";
                    }
                    strSQL = strSQL + "and c.SP_JOURNAL =0 ";
                    strSQL = strSQL + "and v.VOUCHER_TOBY ='Cr' ";
                    if (strGroupName != "")
                    {
                        if (strSelection == "Z")
                        {
                            strSQL = strSQL + "AND ZDA.ZONE ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "D")
                        {
                            strSQL = strSQL + "AND ZDA.DIVISION ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "R")
                        {
                            strSQL = strSQL + "AND ZDA.DIVISION ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "A")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "F")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "S")
                        {
                            strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                        }
                    }
                    else if (strPartyName != "")
                    {
                        strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                    }
                    strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                    strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                    strSQL = strSQL + " GROUP BY ZDA.ZONE, ZDA.DIVISION , ZDA.AREA ,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE,ZDA.GR_PARENT_POSITION  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    //Cash
                    strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,PREVIOUS_DUES_GOODS,POSITION) ";
                    strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME,l.TERITORRY_CODE, l.LEDGER_NAME_MERZE, ";
                    strSQL = strSQL + " abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0)) *-1 COLL_CASH_TT,isnull(g.GR_PARENT_POSITION,0) ";
                    strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av  ";
                    strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO  ";
                    strSQL = strSQL + "AND av.COMP_VOUCHER_TYPE=" + (int)Utility.VOUCHER_TYPE.vtRECEIPT_VOUCHER + " ";
                    strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                    //strSQL = strSQL + "AND l.BRANCH_ID ='" + strBranchID + "' ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND av.BRANCH_ID ='" + strBranchID + "' ";
                    }
                    if (strGroupName != "")
                    {
                        if (strSelection == "Z")
                        {
                            strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "D")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "R")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "A")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "F")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "S")
                        {
                            strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                        }
                    }
                    else if (strPartyName != "")
                    {
                        strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                    }
                    strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                    strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                    strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //SP Journal
                    strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,PREVIOUS_DUES_GOODS,POSITION) ";
                    strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME ,l.TERITORRY_CODE,l.LEDGER_NAME_MERZE,";
                    strSQL = strSQL + "ABS(ISNULL(SUM(aV.VOUCHER_CREDIT_AMOUNT-aV.VOUCHER_DEBIT_AMOUNT),0)) *-1 COLL_VOUCHER,isnull(g.GR_PARENT_POSITION,0)   ";
                    strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                    strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                    strSQL = strSQL + "AND aV.COMP_VOUCHER_TYPE =3 and c.SP_JOURNAL=1 ";
                    strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                    }
                    strSQL = strSQL + " AND  C.AUTOJV =0 ";
                    if (strGroupName != "")
                    {
                        if (strSelection == "Z")
                        {
                            strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "D")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "R")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "A")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "F")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "S")
                        {
                            strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                        }
                    }
                    else if (strPartyName != "")
                    {
                        strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                    }
                    strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                    strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                    strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                   


                    //*********opn
                    //Current Month Sales
                    strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,SALES_CURRENT_MONTH,POSITION) ";
                    strSQL = strSQL + "SELECT  ZDA.ZONE , ZDA.DIVISION , ZDA.AREA  ,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                    strSQL = strSQL + "isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0),isnull(ZDA.GR_PARENT_POSITION,0) FROM ACC_LEDGER_Z_D_A ZDA ,ACC_VOUCHER v,ACC_LEDGER L ";
                    strSQL = strSQL + "WHERE L.LEDGER_NAME =ZDA.LEDGER_NAME AND V.LEDGER_NAME =L.LEDGER_NAME  ";
                    strSQL = strSQL + "AND (V.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ") ";
                    strSQL = strSQL + "AND V.COMP_VOUCHER_TYPE=16 ";
                    if (strBranchID != "")
                    {
                       // strSQL = strSQL + " AND L.BRANCH_ID ='" + strBranchID + "' ";
                        strSQL = strSQL + " AND v.BRANCH_ID ='" + strBranchID + "' ";
                    }
                    if (strGroupName != "")
                    {
                        if (strSelection == "Z")
                        {
                            strSQL = strSQL + "AND ZDA.ZONE ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "D")
                        {
                            strSQL = strSQL + "AND ZDA.DIVISION ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "R")
                        {
                            strSQL = strSQL + "AND ZDA.DIVISION ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "A")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "F")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "S")
                        {
                            strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                        }
                    }
                    else if (strPartyName != "")
                    {
                        strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                    }
                    strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                    strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                    //strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION";
                     strSQL = strSQL + " GROUP BY ZDA.ZONE, ZDA.DIVISION , ZDA.AREA ,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE,ZDA.GR_PARENT_POSITION ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //Return
                    strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,RETURN_AMOUNT,POSITION) ";
                    strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                    strSQL = strSQL + "ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0) RETURN_AMOUNT ,isnull(g.GR_PARENT_POSITION,0)  ";
                    strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c ";
                    strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME ";
                    strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                    strSQL = strSQL + "AND  C.COMP_VOUCHER_TYPE =13 ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                    }
                    if (strGroupName != "")
                    {
                        if (strSelection == "Z")
                        {
                            strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "D")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "R")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "A")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "F")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "S")
                        {
                            strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                        }
                    }
                    else if (strPartyName != "")
                    {
                        strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                    }
                    strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                    strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                    strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //Debit Amount
                    strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,DEBIT_AMOUNT,POSITION) ";
                    strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                    strSQL = strSQL + "ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0) DEBIT_AMOUNT,isnull(g.GR_PARENT_POSITION,0)   ";
                    strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                    strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                    strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
                    strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                    }
                    strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                    strSQL = strSQL + " AND  C.DISABLE_VOUCHER =0 ";
                    strSQL = strSQL + " AND  C.AUTOJV =0 ";
                    if (strGroupName != "")
                    {
                        if (strSelection == "Z")
                        {
                            strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "D")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "R")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "A")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "F")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "S")
                        {
                            strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                        }
                    }
                    else if (strPartyName != "")
                    {
                        strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                    }
                    strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                    strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                    strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    //Modified_24_11_19
                    strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,DEBIT_AMOUNT,POSITION) ";
                    strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                    strSQL = strSQL + "ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0) DEBIT_AMOUNT,isnull(g.GR_PARENT_POSITION,0)   ";
                    strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                    strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                    strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
                    strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                    }
                    strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                    strSQL = strSQL + " AND  C.DISABLE_VOUCHER =1 ";
                    strSQL = strSQL + " AND  C.AUTOJV =0 ";
                    if (strGroupName != "")
                    {
                        if (strSelection == "Z")
                        {
                            strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "D")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "R")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "A")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "F")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "S")
                        {
                            strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                        }
                    }
                    else if (strPartyName != "")
                    {
                        strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                    }
                    strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                    strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                    strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    //Credit Amount
                    strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,CREDIT_AMOUNT,POSITION) ";
                    strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME ,l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                    strSQL = strSQL + "ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0) CREDIT_AMOUNT,isnull(g.GR_PARENT_POSITION,0)   ";
                    strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                    strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                    strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Cr' AND aV.COMP_VOUCHER_TYPE =3 ";
                    strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                    }
                    strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                    strSQL = strSQL + " AND  C.AUTOJV =0 ";
                    if (strGroupName != "")
                    {
                        if (strSelection == "Z")
                        {
                            strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "D")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "R")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "A")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "F")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "S")
                        {
                            strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                        }
                    }
                    else if (strPartyName != "")
                    {
                        strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                    }
                    strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                    strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                    strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //Commitment
                    strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,COMMITMENT,POSITION) ";
                    strSQL = strSQL + " select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME ,l.TERITORRY_CODE,l.LEDGER_NAME_MERZE,";
                    strSQL = strSQL + " ISNULL(SUM(C.COLL_TARGET_COLL_AMT),0) COMMITMENT,isnull(g.GR_PARENT_POSITION,0)   ";
                    strSQL = strSQL + " from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,SALES_COLL_TARGET_MASTER m,SALES_COLL_TARGET_TRAN c ";
                    strSQL = strSQL + " where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME  and m.COLL_TARGET_KEY=c.COLL_TARGET_KEY ";
                    strSQL = strSQL + " AND C.COLL_TARGET_FROM_DATE >= " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + " AND C.COLL_TARGET_TO_DATE <= " + Utility.cvtSQLDateString(strTDate) + " ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + " AND m.BRANCH_ID ='" + strBranchID + "' ";
                    }
                    if (strGroupName != "")
                    {
                        if (strSelection == "Z")
                        {
                            strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "D")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "R")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "A")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "F")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "S")
                        {
                            strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                        }
                    }
                    else if (strPartyName != "")
                    {
                        strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                    }
                    strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                    strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                    strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //Cash
                    strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,COLL_CASH_TT,POSITION) ";
                    strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME,l.TERITORRY_CODE, l.LEDGER_NAME_MERZE, ";
                    strSQL = strSQL + "ISNULL(SUM(AV.VOUCHER_CREDIT_AMOUNT),0) COLL_CASH_TT,isnull(g.GR_PARENT_POSITION,0) ";
                    strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av  ";
                    strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO  ";
                    strSQL = strSQL + "AND av.COMP_VOUCHER_TYPE=" + (int)Utility.VOUCHER_TYPE.vtRECEIPT_VOUCHER + " ";
                    strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                    //strSQL = strSQL + "AND l.BRANCH_ID ='" + strBranchID + "' ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND av.BRANCH_ID ='" + strBranchID + "' ";
                    }
                    if (strGroupName != "")
                    {
                        if (strSelection == "Z")
                        {
                            strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "D")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "R")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "A")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "F")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "S")
                        {
                            strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                        }
                    }
                    else if (strPartyName != "")
                    {
                        strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                    }
                    strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                    strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                    strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                            

                    //SP Journal
                    strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,COLL_VOUCHER,POSITION) ";
                    strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME ,l.TERITORRY_CODE,l.LEDGER_NAME_MERZE,";
                    strSQL = strSQL + "ISNULL(SUM(aV.VOUCHER_CREDIT_AMOUNT-aV.VOUCHER_DEBIT_AMOUNT),0) COLL_VOUCHER,isnull(g.GR_PARENT_POSITION,0)   ";
                    strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                    strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                    strSQL = strSQL + "AND aV.COMP_VOUCHER_TYPE =3 and c.SP_JOURNAL=1 ";
                    strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                    }
                    strSQL = strSQL + " AND  C.AUTOJV =0 ";
                    if (strGroupName != "")
                    {
                        if (strSelection == "Z")
                        {
                            strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "D")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "R")
                        {
                            strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "A")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "F")
                        {
                            strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                        }
                        else if (strSelection == "S")
                        {
                            strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                        }
                    }
                    else if (strPartyName != "")
                    {
                        strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                    }
                    strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                    strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";

                    strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                ///****************

                cmdInsert.Transaction.Commit();


                List<RFinalStatement> ooAccLedger = new List<RFinalStatement>();
                strSQL = "SELECT DISTINCT ";
                strSQL = strSQL + "ACC_FINAL_STATEMENT_VIEW.ZONE, ACC_FINAL_STATEMENT_VIEW.DIVISION, ACC_FINAL_STATEMENT_VIEW.AREA, ACC_FINAL_STATEMENT_VIEW.TERITORY_NAME, ACC_FINAL_STATEMENT_VIEW.TERITORY_CODE, ";
                strSQL = strSQL + "ACC_FINAL_STATEMENT_VIEW.MEDICAL_REPRESENTATIVE, ACC_FINAL_STATEMENT_VIEW.PREVIOUS_DUES_GOODS, ACC_FINAL_STATEMENT_VIEW.PREVIOUS_DUES_SHORT, ";
                strSQL = strSQL + "ACC_FINAL_STATEMENT_VIEW.SALES_CURRENT_MONTH, ACC_FINAL_STATEMENT_VIEW.COLL_ON_COMMIT, ACC_FINAL_STATEMENT_VIEW.RETURN_AMOUNT, ACC_FINAL_STATEMENT_VIEW.DEBIT_AMOUNT, ";
                strSQL = strSQL + "ACC_FINAL_STATEMENT_VIEW.CREDIT_AMOUNT, ACC_FINAL_STATEMENT_VIEW.COMMITMENT, ACC_FINAL_STATEMENT_VIEW.COLL_CASH_TT, ACC_FINAL_STATEMENT_VIEW.COLL_VOUCHER, ";
                strSQL = strSQL + "ACC_FINAL_STATEMENT_VIEW.CP_COMMISSION, ACC_FINAL_STATEMENT_VIEW.POSITION,ACC_FINAL_STATEMENT_VIEW.PF_HL ";
                strSQL = strSQL + "FROM  ACC_FINAL_STATEMENT_VIEW  ";
                //strSQL = strSQL + "INNER JOIN ACC_LEDGERGROUP ON ACC_FINAL_STATEMENT_VIEW.ZONE = ACC_LEDGERGROUP.GR_PARENT ";
                strSQL = strSQL + " WHERE ACC_FINAL_STATEMENT_VIEW.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + gstrUserName + "')";
                if (dblValue != 0)
                {
                    if (dblValue != 0 && dblBelowValue != 0)
                    {
                        strSQL = strSQL + "AND (ACC_FINAL_STATEMENT_VIEW.PREVIOUS_DUES_GOODS + ABS(ACC_FINAL_STATEMENT_VIEW.SALES_CURRENT_MONTH) ";
                        strSQL = strSQL + "+ ACC_FINAL_STATEMENT_VIEW.DEBIT_AMOUNT - ACC_FINAL_STATEMENT_VIEW.COLL_VOUCHER - ";
                        strSQL = strSQL + "ACC_FINAL_STATEMENT_VIEW.COLL_CASH_TT - ACC_FINAL_STATEMENT_VIEW.CREDIT_AMOUNT - ACC_FINAL_STATEMENT_VIEW.RETURN_AMOUNT >= " + dblBelowValue + ")";
                        strSQL = strSQL + "AND (ACC_FINAL_STATEMENT_VIEW.PREVIOUS_DUES_GOODS + ABS(ACC_FINAL_STATEMENT_VIEW.SALES_CURRENT_MONTH) ";
                        strSQL = strSQL + "+ ACC_FINAL_STATEMENT_VIEW.DEBIT_AMOUNT - ACC_FINAL_STATEMENT_VIEW.COLL_VOUCHER - ";
                        strSQL = strSQL + "ACC_FINAL_STATEMENT_VIEW.COLL_CASH_TT - ACC_FINAL_STATEMENT_VIEW.CREDIT_AMOUNT - ACC_FINAL_STATEMENT_VIEW.RETURN_AMOUNT <= " + dblValue + ")";
                    }
                    else
                    {
                        if (strValOption == "<")
                        {

                            strSQL = strSQL + "AND (ACC_FINAL_STATEMENT_VIEW.PREVIOUS_DUES_GOODS + ABS(ACC_FINAL_STATEMENT_VIEW.SALES_CURRENT_MONTH) ";
                            strSQL = strSQL + "+ ACC_FINAL_STATEMENT_VIEW.DEBIT_AMOUNT - ACC_FINAL_STATEMENT_VIEW.COLL_VOUCHER - ";
                            strSQL = strSQL + "ACC_FINAL_STATEMENT_VIEW.COLL_CASH_TT - ACC_FINAL_STATEMENT_VIEW.CREDIT_AMOUNT - ACC_FINAL_STATEMENT_VIEW.RETURN_AMOUNT < " + dblValue + ") ";
                        }
                        else
                        {
                            strSQL = strSQL + "AND (ACC_FINAL_STATEMENT_VIEW.PREVIOUS_DUES_GOODS + ABS(ACC_FINAL_STATEMENT_VIEW.SALES_CURRENT_MONTH) ";
                            strSQL = strSQL + "+ ACC_FINAL_STATEMENT_VIEW.DEBIT_AMOUNT - ACC_FINAL_STATEMENT_VIEW.COLL_VOUCHER - ";
                            strSQL = strSQL + "ACC_FINAL_STATEMENT_VIEW.COLL_CASH_TT - ACC_FINAL_STATEMENT_VIEW.CREDIT_AMOUNT - ACC_FINAL_STATEMENT_VIEW.RETURN_AMOUNT > " + dblValue + ") ";
                        }
                    }
                }

                if (intOrderby == 2)
                {
                    strSQL = strSQL + "ORDER BY  ACC_FINAL_STATEMENT_VIEW.TERITORY_CODE ";
                }
                else
                {
                    //ACC_FINAL_STATEMENT_VIEW.MEDICAL_REPRESENTATIVE 
                    strSQL = strSQL + "ORDER BY ACC_FINAL_STATEMENT_VIEW.POSITION, ACC_FINAL_STATEMENT_VIEW.TERITORY_CODE ";
                }

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RFinalStatement oLedg = new RFinalStatement();
                    if (intOrderby == 1)
                    {
                        if (dr["ZONE"].ToString() != "")
                        {
                            oLedg.strZone = dr["ZONE"].ToString();
                        }
                        else
                        {
                            oLedg.strZone = "";
                        }

                        if (dr["DIVISION"].ToString() != "")
                        {
                            oLedg.strDivision = dr["DIVISION"].ToString();
                        }
                        else
                        {
                            oLedg.strDivision = "";
                        }

                        if (dr["AREA"].ToString() != "")
                        {
                            oLedg.strArea = dr["AREA"].ToString();
                        }
                        else
                        {
                            oLedg.strArea = "";
                        }
                    }

                    if (dr["TERITORY_NAME"].ToString() != "")
                    {
                        oLedg.strteritorryname = dr["TERITORY_NAME"].ToString();
                    }
                    else
                    {
                        oLedg.strteritorryname = "";
                    }

                    if (dr["TERITORY_CODE"].ToString() != "")
                    {
                        oLedg.strTeritorryCode = dr["TERITORY_CODE"].ToString();
                    }
                    else
                    {
                        oLedg.strTeritorryCode = "";
                    }

                    if (dr["MEDICAL_REPRESENTATIVE"].ToString() != "")
                    {
                        oLedg.strMrname = dr["MEDICAL_REPRESENTATIVE"].ToString();
                    }
                    else
                    {
                        oLedg.strMrname = "";
                    }

                    oLedg.dblPreviousDues = Convert.ToDouble(dr["PREVIOUS_DUES_GOODS"].ToString());
                    //oLedg.dblsh = Convert.ToDouble(dr["PREVIOUS_DUES_SHORT"].ToString());
                    oLedg.dblCurrentSales = Convert.ToDouble(dr["SALES_CURRENT_MONTH"].ToString());
                    oLedg.dblcollecCommi = Convert.ToDouble(dr["COLL_ON_COMMIT"].ToString());
                    oLedg.dblSalesReturn = Convert.ToDouble(dr["RETURN_AMOUNT"].ToString());
                    oLedg.dblDebit = Convert.ToDouble(dr["DEBIT_AMOUNT"].ToString());
                    oLedg.dblCredit = Convert.ToDouble(dr["CREDIT_AMOUNT"].ToString());
                    oLedg.dblCommitment = Convert.ToDouble(dr["COMMITMENT"].ToString());
                    oLedg.dblCash = Convert.ToDouble(dr["COLL_CASH_TT"].ToString());
                    oLedg.dblSpVoucher = Convert.ToDouble(dr["COLL_VOUCHER"].ToString());
                    oLedg.dblPFHL = Convert.ToDouble(dr["PF_HL"].ToString());
                    //oLedg.dblcp = Convert.ToDouble(dr["CP_COMMISSION"].ToString());
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RFinalStatement oLedg = new RFinalStatement();
                    oLedg.strZone = "";

                    oLedg.strDivision = "";
                    oLedg.strArea = "";
                    oLedg.strteritorryname = "";
                    oLedg.strTeritorryCode = "";
                    oLedg.strMrname = "";
                    oLedg.dblPreviousDues = 0;
                    oLedg.dblCurrentSales = 0;
                    oLedg.dblcollecCommi = 0;
                    oLedg.dblSalesReturn = 0;
                    oLedg.dblDebit = 0;
                    oLedg.dblCredit = 0;
                    oLedg.dblCommitment = 0;
                    oLedg.dblCash = 0;
                    oLedg.dblSpVoucher = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }

        public List<RFinalStatement> mGetMarketMonitoringSheet(string strDeComID, string strFate, string strTDate, string strBranchID,
                                                                int intstatus, string strString, string gstrUserName,int intSelection)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;
                strSQL = "DELETE FROM ACC_MARKET_MONITROING_SHEET ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                if (intstatus == 1)
                {
                    strSQL = "INSERT INTO ACC_MARKET_MONITROING_SHEET(ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME,TOTAL_OS) ";
                    strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME ,l.TERITORRY_CODE,l.LEDGER_NAME_MERZE,  0 COLLECTION_AMNT  ";
                    strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l ";
                    strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP AND l.LEDGER_STATUS =1   ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + " AND l.BRANCH_ID ='" + strBranchID + "' ";
                    }
                    strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                if (intstatus == 2)
                {
                    strSQL = "INSERT INTO ACC_MARKET_MONITROING_SHEET(ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME,TOTAL_OS) ";
                    strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME ,l.TERITORRY_CODE,l.LEDGER_NAME_MERZE,  0 COLLECTION_AMNT  ";
                    strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l ";
                    strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP AND l.LEDGER_STATUS in (0,1)   ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + " AND l.BRANCH_ID ='" + strBranchID + "' ";
                    }
                    strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
               
                strSQL = "INSERT INTO ACC_MARKET_MONITROING_SHEET(ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME,TOTAL_OS) ";
                strSQL = strSQL + "SELECT g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, isnull(sum(l.LEDGER_OPENING_BALANCE),0) *-1 PDUES   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND l.BRANCH_ID ='" + strBranchID + "' ";
                }

                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_MARKET_MONITROING_SHEET(ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME,TOTAL_OS) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0)) SALES_CURRENT_MONTH   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND  C.COMP_VOUCHER_TYPE =16 ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_MARKET_MONITROING_SHEET(ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME,TOTAL_OS) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0))*-1 RETURN_AMOUNT   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND  C.COMP_VOUCHER_TYPE =13 ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                //Debit Amount

                strSQL = "INSERT INTO ACC_MARKET_MONITROING_SHEET(ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME,TOTAL_OS) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0)) DEBIT_AMOUNT   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                strSQL = strSQL + " AND  C.AUTOJV =0 ";
                strSQL = strSQL + " AND  C.DISABLE_VOUCHER =0 ";
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_MARKET_MONITROING_SHEET(ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME,TOTAL_OS) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0)) DEBIT_AMOUNT   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                strSQL = strSQL + " AND  C.AUTOJV =0 ";
                strSQL = strSQL + " AND  C.DISABLE_VOUCHER =1 ";
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                strSQL = "INSERT INTO ACC_MARKET_MONITROING_SHEET(ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME,TOTAL_OS) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME ,l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0)) *-1 CREDIT_AMOUNT   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Cr' AND aV.COMP_VOUCHER_TYPE =3 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                strSQL = strSQL + " AND  C.AUTOJV =0 ";
                strSQL = strSQL + "and av.VOUCHER_TOBY ='Cr' ";
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //Cash
                strSQL = "INSERT INTO ACC_MARKET_MONITROING_SHEET(ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME,TOTAL_OS) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME,l.TERITORRY_CODE, l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + " abs(ISNULL(SUM(av.VOUCHER_CREDIT_AMOUNT),0)) *-1 COLL_CASH_TT ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av  ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO  ";
                strSQL = strSQL + "AND av.COMP_VOUCHER_TYPE=" + (int)Utility.VOUCHER_TYPE.vtRECEIPT_VOUCHER + " ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                if (strBranchID != "")
                {
                    //strSQL = strSQL + " AND l.BRANCH_ID ='" + strBranchID + "' ";
                    strSQL = strSQL + " AND av.BRANCH_ID ='" + strBranchID + "' ";
                }

                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //SP Journal
                strSQL = "INSERT INTO ACC_MARKET_MONITROING_SHEET(ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME,TOTAL_OS) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME ,l.TERITORRY_CODE,l.LEDGER_NAME_MERZE,";
                strSQL = strSQL + "ABS(ISNULL(SUM(aV.VOUCHER_CREDIT_AMOUNT-aV.VOUCHER_DEBIT_AMOUNT),0)) *-1 COLL_VOUCHER   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.COMP_VOUCHER_TYPE =3 and c.SP_JOURNAL=1 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.AUTOJV =0 ";
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                ////New minus pf HL 17_07_20
                strSQL = "INSERT INTO ACC_MARKET_MONITROING_SHEET(ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME,TOTAL_OS) ";
                strSQL = strSQL + "SELECT Z.ZONE,Z.DIVISION,Z.AREA,Z.TERRITORRY_NAME,Z.TERITORRY_CODE,  Z.LEDGER_NAME_MERZE ,ISNULL(SUM(V.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT),0) ";
                strSQL = strSQL + "FROM ACC_LEDGER_Z_D_A Z,ACC_VOUCHER V WHERE Z.LEDGER_NAME=V.REVERSE_LEDGER1  AND V.COMP_VOUCHER_TYPE=3 ";
                strSQL = strSQL + "AND V.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND V.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  V.AUTOJV=1";
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND Z.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + "GROUP by  Z.ZONE,Z.DIVISION,Z.AREA ,Z.LEDGER_NAME,Z.TERRITORRY_NAME,Z.TERITORRY_CODE, Z.LEDGER_NAME_MERZE,GR_PARENT_POSITION ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                //**************Opn


                //commit
              

                strSQL = "INSERT INTO ACC_MARKET_MONITROING_SHEET(ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME,COMMITMENT) ";
                strSQL = strSQL + " select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE,";
                strSQL = strSQL + " ISNULL(SUM(C.COLL_TARGET_COLL_AMT),0) COMMITMENT   ";
                strSQL = strSQL + " from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,SALES_COLL_TARGET_MASTER m,SALES_COLL_TARGET_TRAN c ";
                strSQL = strSQL + " where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME  and m.COLL_TARGET_KEY=c.COLL_TARGET_KEY ";
                strSQL = strSQL + " AND Upper(c.MONTH_ID) in (" + strString + ")";
               
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND m.BRANCH_ID ='" + strBranchID + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + " group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME ";
                //strSQL = strSQL + " having sum(COLL_TARGET_COLL_AMT) > 0 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //collect amnt
                strSQL = "INSERT INTO ACC_MARKET_MONITROING_SHEET(ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME,COLLECTION_AMNT) ";
                strSQL = strSQL + " select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME ,l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + " ISNULL(SUM(AV.VOUCHER_CREDIT_AMOUNT),0) COLLECTION_AMNT   ";
                strSQL = strSQL + " from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + " where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + " AND aV.COMP_VOUCHER_TYPE =1 and C.COMP_VOUCHER_NET_AMOUNT > 0 ";
                strSQL = strSQL + " AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    //strSQL = strSQL + " AND l.BRANCH_ID ='" + strBranchID + "' ";
                    strSQL = strSQL + " AND aV.BRANCH_ID ='" + strBranchID + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + " group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //**********hlpf
                strSQL = "INSERT INTO ACC_MARKET_MONITROING_SHEET(ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME,COLLECTION_AMNT) ";
                strSQL = strSQL + "SELECT Z.ZONE,Z.DIVISION,Z.AREA,Z.TERRITORRY_NAME,Z.TERITORRY_CODE,  Z.LEDGER_NAME_MERZE ,ISNULL(SUM(V.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT),0) *-1 ";
                strSQL = strSQL + " FROM ACC_LEDGER_Z_D_A Z,ACC_VOUCHER V WHERE Z.LEDGER_NAME=V.REVERSE_LEDGER1  AND V.COMP_VOUCHER_TYPE=3 ";
                strSQL = strSQL + "AND V.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND V.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  V.AUTOJV=1";
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND Z.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + "GROUP by  Z.ZONE,Z.DIVISION,Z.AREA ,Z.LEDGER_NAME,Z.TERRITORRY_NAME,Z.TERITORRY_CODE, Z.LEDGER_NAME_MERZE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //******************
                //SP
                strSQL = "INSERT INTO ACC_MARKET_MONITROING_SHEET(ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME,SP_VOUCHER) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME ,l.TERITORRY_CODE,l.LEDGER_NAME_MERZE,";
                strSQL = strSQL + "ABS(ISNULL(SUM(aV.VOUCHER_CREDIT_AMOUNT-aV.VOUCHER_DEBIT_AMOUNT),0)) COLL_VOUCHER   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.COMP_VOUCHER_TYPE =3 and c.SP_JOURNAL=1 ";
                //and c.SP_JOURNAL=1
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE  BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.AUTOJV =0 ";
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO ACC_MARKET_MONITROING_SHEET(ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME,JV_DEBIT) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME ,l.TERITORRY_CODE,l.LEDGER_NAME_MERZE,";
                strSQL = strSQL + "ABS(ISNULL(SUM(aV.VOUCHER_DEBIT_AMOUNT),0))  COLL_VOUCHER   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.COMP_VOUCHER_TYPE =3 and c.SP_JOURNAL=0 ";
                //and c.SP_JOURNAL=1
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE  BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.AUTOJV =0 ";
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO ACC_MARKET_MONITROING_SHEET(ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME,JV_CREDIT) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME ,l.TERITORRY_CODE,l.LEDGER_NAME_MERZE,";
                strSQL = strSQL + "ABS(ISNULL(SUM(aV.VOUCHER_CREDIT_AMOUNT),0))  COLL_VOUCHER   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.COMP_VOUCHER_TYPE =3 and c.SP_JOURNAL=0 ";
                //and c.SP_JOURNAL=1
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE  BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.AUTOJV =0 ";
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_MARKET_MONITROING_SHEET(ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME,SALES_RETURN) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME ,l.TERITORRY_CODE,l.LEDGER_NAME_MERZE,";
                strSQL = strSQL + "ABS(ISNULL(SUM(aV.VOUCHER_CREDIT_AMOUNT-aV.VOUCHER_DEBIT_AMOUNT),0))  COLL_VOUCHER   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.COMP_VOUCHER_TYPE =13 ";
                //and c.SP_JOURNAL=1
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE  BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.AUTOJV =0 ";
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //sales target
                strSQL = "INSERT INTO ACC_MARKET_MONITROING_SHEET(ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME,SALES_TARGET) ";
                strSQL = strSQL + " select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME ,l.TERITORRY_CODE, l.LEDGER_NAME_MERZE,";
                strSQL = strSQL + " ISNULL(SUM(C.TARGET_ACHIEVE_AMOUNT),0) COMMITMENT    ";
                strSQL = strSQL + " from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,SALES_TARGET_ACHIEVEMENT_MASTER m,SALES_TARGET_ACHIEVEMENT c ";
                strSQL = strSQL + " where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME  and m.TARGET_ACHIEVE_KEY=c.TARGET_ACHIEVE_KEY ";
                strSQL = strSQL + " AND Upper(c.TARGET_ACHIEVE_MONTH_ID) in (" + strString + ")";
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND m.BRANCH_ID ='" + strBranchID + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + " group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME ";
                strSQL = strSQL + " having SUM(C.TARGET_ACHIEVE_AMOUNT) > 0 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //Achieve
                strSQL = "INSERT INTO ACC_MARKET_MONITROING_SHEET(ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME,ACHIEVE) ";
                strSQL = strSQL + " select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + " ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0) ACHIEVE   ";
                strSQL = strSQL + " from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c ";
                strSQL = strSQL + " where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME ";
                strSQL = strSQL + " AND C.COMP_VOUCHER_TYPE =16 ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + " group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                cmdInsert.Transaction.Commit();


                List<RFinalStatement> ooAccLedger = new List<RFinalStatement>();

                //strSQL = "SELECT ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME,";
                //strSQL = strSQL + " ISNULL(SUM(TOTAL_OS),0) TOTAL_OS,isnull(SUM(COMMITMENT),0) COMMITMENT,ISNULL(SUM(COLLECTION_AMNT),0) COLLECTION_AMNT,";
                //strSQL = strSQL + " ISNULL(SUM(SALES_TARGET),0) SALES_TARGET, ISNULL(SUM(ACHIEVE),0) ACHIEVE ";
                //strSQL = strSQL + "FROM ACC_MARKET_MONITROING_SHEET ";
                //strSQL = strSQL + " GROUP by ZONE,DIVISION,AREA,TERITORRY_NAME,TERITORRY_CODE,MR_NAME ";
                //strSQL = strSQL + " ORDER BY ZONE, MR_NAME ";

                strSQL = "SELECT ACC_MARKET_MONITROING_SHEET.ZONE,ACC_MARKET_MONITROING_SHEET.DIVISION,ACC_MARKET_MONITROING_SHEET.AREA,ACC_MARKET_MONITROING_SHEET.TERITORRY_NAME,ACC_MARKET_MONITROING_SHEET.TERITORRY_CODE,ACC_MARKET_MONITROING_SHEET.MR_NAME, ";
                strSQL = strSQL + "ISNULL(SUM(ACC_MARKET_MONITROING_SHEET.TOTAL_OS),0) TOTAL_OS,isnull(SUM(ACC_MARKET_MONITROING_SHEET.COMMITMENT),0) COMMITMENT,ISNULL(SUM(ACC_MARKET_MONITROING_SHEET.COLLECTION_AMNT),0) COLLECTION_AMNT, ";
                strSQL = strSQL + "ISNULL(SUM(ACC_MARKET_MONITROING_SHEET.SALES_TARGET),0) SALES_TARGET, ISNULL(SUM(ACC_MARKET_MONITROING_SHEET.ACHIEVE),0) SALES, ";
                strSQL = strSQL + "ISNULL(SUM(ACC_MARKET_MONITROING_SHEET.SALES_RETURN),0) SALES_RETURN, ISNULL(SUM(ACC_MARKET_MONITROING_SHEET.JV_DEBIT),0) JV_DEBIT, ";
                strSQL = strSQL + "ISNULL(SUM(ACC_MARKET_MONITROING_SHEET.JV_CREDIT),0) JV_CREDIT,"; 
                strSQL = strSQL + "ISNULL(SUM(ACC_MARKET_MONITROING_SHEET.SP_VOUCHER),0) SP_VOUCHER FROM ACC_MARKET_MONITROING_SHEET,ACC_LEDGER_Z_D_A WHERE  ACC_MARKET_MONITROING_SHEET.MR_NAME =ACC_LEDGER_Z_D_A.LEDGER_NAME_MERZE ";
                strSQL = strSQL + " AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + gstrUserName + "')";
                //strSQL = strSQL + "AND ACC_MARKET_MONITROING_SHEET.TERITORRY_CODE ='257' ";
                strSQL = strSQL + "GROUP by ACC_MARKET_MONITROING_SHEET.ZONE,ACC_MARKET_MONITROING_SHEET.DIVISION,ACC_MARKET_MONITROING_SHEET.AREA,ACC_MARKET_MONITROING_SHEET.TERITORRY_NAME, ";
                strSQL = strSQL + "ACC_MARKET_MONITROING_SHEET.TERITORRY_CODE,ACC_MARKET_MONITROING_SHEET.MR_NAME ";
                if (intSelection == 1)
                {
                    strSQL = strSQL + "ORDER BY ACC_MARKET_MONITROING_SHEET.ZONE, ACC_MARKET_MONITROING_SHEET.TERITORRY_CODE ASC ";
                }
                else
                {
                    strSQL = strSQL + "ORDER BY ACC_MARKET_MONITROING_SHEET.MR_NAME ";
                }


                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RFinalStatement oLedg = new RFinalStatement();
                    if (dr["ZONE"].ToString() != "")
                    {
                        oLedg.strZone = dr["ZONE"].ToString();
                    }
                    else
                    {
                        oLedg.strZone = "";
                    }

                    if (dr["DIVISION"].ToString() != "")
                    {
                        oLedg.strDivision = dr["DIVISION"].ToString();
                    }
                    else
                    {
                        oLedg.strDivision = "";
                    }

                    if (dr["AREA"].ToString() != "")
                    {
                        oLedg.strArea = dr["AREA"].ToString();
                    }
                    else
                    {
                        oLedg.strArea = "";
                    }

                    if (dr["TERITORRY_NAME"].ToString() != "")
                    {
                        oLedg.strteritorryname = dr["TERITORRY_NAME"].ToString();
                    }
                    else
                    {
                        oLedg.strteritorryname = "";
                    }

                    if (dr["TERITORRY_CODE"].ToString() != "")
                    {
                        oLedg.strTeritorryCode = dr["TERITORRY_CODE"].ToString();
                    }
                    else
                    {
                        oLedg.strTeritorryCode = "";
                    }

                    if (dr["MR_NAME"].ToString() != "")
                    {
                        oLedg.strMrname = dr["MR_NAME"].ToString();
                    }
                    else
                    {
                        oLedg.strMrname = "";
                    }

                    oLedg.dblPreviousDues = Convert.ToDouble(dr["TOTAL_OS"].ToString());
                    oLedg.dblCurrentSales = Convert.ToDouble(dr["SALES_TARGET"].ToString());
                    oLedg.dblcollecCommi = Convert.ToDouble(dr["COLLECTION_AMNT"].ToString());
                    oLedg.dblCommitment = Convert.ToDouble(dr["COMMITMENT"].ToString());
                    oLedg.dblSpVoucher = Math.Abs(Convert.ToDouble(dr["SALES"].ToString()));
                    oLedg.dblSAVoucherPayment = Convert.ToDouble(dr["SP_VOUCHER"].ToString());
                    oLedg.dblClosing = (Convert.ToDouble(dr["TOTAL_OS"].ToString()) + Convert.ToDouble(dr["SALES"].ToString()) + Convert.ToDouble(dr["JV_DEBIT"].ToString())) -
                                            (Convert.ToDouble(dr["SALES_RETURN"].ToString()) + Convert.ToDouble(dr["SP_VOUCHER"].ToString()) + Convert.ToDouble(dr["COLLECTION_AMNT"].ToString()) + Convert.ToDouble(dr["JV_CREDIT"].ToString()));
                        
                       

                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RFinalStatement oLedg = new RFinalStatement();
                    oLedg.strZone = "";
                    oLedg.strDivision = "";
                    oLedg.strArea = "";
                    oLedg.strteritorryname = "";
                    oLedg.strTeritorryCode = "";
                    oLedg.strMrname = "";
                    oLedg.strMrname = "";
                    oLedg.dblPreviousDues = 0;
                    oLedg.dblCurrentSales = 0;
                    oLedg.dblcollecCommi = 0;
                    oLedg.dblCommitment = 0;
                    oLedg.dblSpVoucher = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }
        public List<RAccountsGroup> mGetPostDateCheque(string strDeComID, string strFate, string strTDate, string strSelection, string strVCDate)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();


                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                if (strSelection == "R")
                {
                    strSQL = "SELECT substring(ACC_VOUCHER.COMP_REF_NO,7,30) COMP_REF_NO, ACC_VOUCHER.COMP_VOUCHER_TYPE, ACC_VOUCHER.VOUCHER_CHEQUE_NUMBER, ACC_VOUCHER.VOUCHER_CHEQUE_DATE, ACC_VOUCHER.VOUCHER_CHEQUE_DRAWN_ON, ";
                    strSQL = strSQL + "ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT, ACC_LEDGER.LEDGER_NAME_MERZE LEDGER_NAME, ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE ";
                    strSQL = strSQL + "FROM  ACC_COMPANY_VOUCHER ,ACC_VOUCHER,ACC_LEDGER  WHERE ACC_VOUCHER.COMP_REF_NO = ACC_COMPANY_VOUCHER.COMP_REF_NO AND ACC_LEDGER.LEDGER_NAME =ACC_COMPANY_VOUCHER.LEDGER_NAME  ";
                    strSQL = strSQL + "AND (ACC_VOUCHER.VOUCHER_CHEQUE_DATE IS NOT NULL) ";
                    if (strVCDate == "VD")
                    {
                        strSQL = strSQL + " AND (ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + "))  ";
                    }
                    else
                    {
                        strSQL = strSQL + " AND (ACC_VOUCHER.VOUCHER_CHEQUE_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + "))  ";
                    }
                    strSQL = strSQL + "AND (ACC_VOUCHER.COMP_VOUCHER_TYPE <> 4) ";
                    strSQL = strSQL + "AND (ACC_VOUCHER.VOUCHER_TOBY = 'Dr') ";
                    strSQL = strSQL + "ORDER BY ACC_COMPANY_VOUCHER.LEDGER_NAME,ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE ";
                }
                else
                {
                    strSQL = "SELECT substring(ACC_VOUCHER.COMP_REF_NO,7,30) COMP_REF_NO, ACC_VOUCHER.COMP_VOUCHER_TYPE, ACC_VOUCHER.VOUCHER_CHEQUE_NUMBER, ACC_VOUCHER.VOUCHER_CHEQUE_DATE, ACC_VOUCHER.VOUCHER_CHEQUE_DRAWN_ON, ";
                    strSQL = strSQL + " ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT VOUCHER_DEBIT_AMOUNT, ACC_LEDGER.LEDGER_NAME_MERZE LEDGER_NAME, ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE ";
                    strSQL = strSQL + "FROM  ACC_COMPANY_VOUCHER ,ACC_VOUCHER,ACC_LEDGER  WHERE ACC_VOUCHER.COMP_REF_NO = ACC_COMPANY_VOUCHER.COMP_REF_NO AND ACC_LEDGER.LEDGER_NAME =ACC_COMPANY_VOUCHER.LEDGER_NAME  ";
                    strSQL = strSQL + "AND (ACC_VOUCHER.VOUCHER_CHEQUE_DATE IS NOT NULL) ";
                    if (strVCDate == "VD")
                    {
                        strSQL = strSQL + " AND (ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + "))  ";
                    }
                    else
                    {
                        strSQL = strSQL + " AND (ACC_VOUCHER.VOUCHER_CHEQUE_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + "))  ";
                    }
                    strSQL = strSQL + "AND (ACC_VOUCHER.COMP_VOUCHER_TYPE <> 4) ";
                    strSQL = strSQL + "AND (ACC_VOUCHER.VOUCHER_TOBY = 'Cr') ";
                    strSQL = strSQL + "ORDER BY ACC_COMPANY_VOUCHER.LEDGER_NAME,ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE ";

                }
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.strRefNo = dr["COMP_REF_NO"].ToString();
                    if (dr["VOUCHER_CHEQUE_DATE"].ToString() != "")
                    {
                        oLedg.strChequeDate = Convert.ToDateTime(dr["VOUCHER_CHEQUE_DATE"]).ToString("dd-MM-yyyy");
                    }
                    else
                    {
                        oLedg.strChequeDate = "";
                    }
                    oLedg.dblAmount = Convert.ToDouble(dr["VOUCHER_DEBIT_AMOUNT"].ToString());
                    oLedg.strSalesRep = dr["VOUCHER_CHEQUE_DRAWN_ON"].ToString();
                    if (dr["VOUCHER_CHEQUE_NUMBER"].ToString() != "")
                    {
                        oLedg.strCheuqueNo = dr["VOUCHER_CHEQUE_NUMBER"].ToString();
                    }
                    else
                    {
                        oLedg.strCheuqueNo = "";
                    }

                    oLedg.dblCredit = Convert.ToDouble(dr["VOUCHER_DEBIT_AMOUNT"].ToString());
                    oLedg.strDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.dblDr = Convert.ToDouble(dr["COMP_VOUCHER_TYPE"].ToString());
                    ooAccLedger.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strLedgerName = "";
                    oLedg.strRefNo = "";
                    oLedg.strChequeDate = "";
                    oLedg.dblAmount = 0;
                    oLedg.strSalesRep = "";
                    oLedg.strCheuqueNo = "";
                    oLedg.dblCashOpn = 0;
                    oLedg.strDate = "";
                    oLedg.dblDr = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }

        public List<RAccountsGroup> mGetContractsPartBill2(string strDeComID, string strFate, string strTDate, string strBranchID, string strPartName)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();


                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();

                strSQL = "SELECT  ACC_CUSTOMER_LIST.LEDGER_CODE,ACC_LEDGER.LEDGER_TARGET, ACC_COMPANY_VOUCHER.COMP_REF_NO, ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE, ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE, ACC_COMPANY_VOUCHER.COMP_VOUCHER_NET_AMOUNT, ";
                strSQL = strSQL + "ACC_LEDGER.LEDGER_NAME_MERZE LEDGER_NAME,ACC_CUSTOMER_LIST.LEDGER_NAME_MERZE SALES_REP  ";
                strSQL = strSQL + "FROM ACC_LEDGER,ACC_COMPANY_VOUCHER,ACC_CUSTOMER_LIST WHERE ACC_LEDGER.LEDGER_NAME =ACC_COMPANY_VOUCHER.LEDGER_NAME AND ACC_CUSTOMER_LIST.LEDGER_NAME =ACC_COMPANY_VOUCHER.SALES_REP  ";
                strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = 16) ";
                strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "and (ACC_COMPANY_VOUCHER.BRANCH_ID = '" + strBranchID + "') ";
                strSQL = strSQL + "AND ACC_CUSTOMER_LIST.LEDGER_PARENT_GROUP in ('CP (Contract Party)','SP (Special Party)' )";
                if (strPartName != "")
                {
                    strSQL = strSQL + "and (ACC_COMPANY_VOUCHER.LEDGER_NAME = '" + strPartName + "') ";
                }
                strSQL = strSQL + "ORDER BY  ACC_LEDGER.TERITORRY_CODE, ACC_LEDGER.LEDGER_NAME_MERZE,ACC_CUSTOMER_LIST.LEDGER_NAME_MERZE  ";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strLcode = dr["LEDGER_CODE"].ToString();
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.strRefNo = dr["COMP_REF_NO"].ToString();
                    oLedg.strDate = dr["COMP_VOUCHER_DATE"].ToString();
                    oLedg.dblAmount = Convert.ToDouble(dr["COMP_VOUCHER_NET_AMOUNT"].ToString());
                    oLedg.strSalesRep = dr["SALES_REP"].ToString();
                    oLedg.dblCashOpn = Convert.ToDouble(dr["LEDGER_TARGET"].ToString());
                    ooAccLedger.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strLcode = "";
                    oLedg.strLedgerName = "";
                    oLedg.strRefNo = "";
                    oLedg.strDate = "";
                    oLedg.dblAmount = 0;
                    oLedg.strSalesRep = "";
                    oLedg.dblCashOpn = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }

       

        #endregion
        #region "Cheque Payment"
        public List<RAccountsGroup> getrptChequePayment(string strDeComID, string strFate, string strTDate, int intSorting)
        {
            string strSQL = null;
            SqlDataReader dr;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;

                strSQL = "DELETE from ACC_EXPENSE_DUMP ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(LEDGER_NAME,HEAD_NAME,COMP_REF_NO,COMP_VOUCHER_DATE,CHEQUE_NO,REMARKS,CASH_AMOUNT) ";
                strSQL = strSQL + "SELECT ACC_LEDGER.LEDGER_NAME,ACC_VOUCHER.VOUCHER_REVERSE_LEDGER, ACC_VOUCHER.COMP_REF_NO, ACC_VOUCHER.COMP_VOUCHER_DATE, ACC_VOUCHER.VOUCHER_CHEQUE_NUMBER,  ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION,ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT AS AMOUNT  ";
                strSQL = strSQL + " ";
                strSQL = strSQL + "FROM  ACC_LEDGER INNER JOIN ";
                strSQL = strSQL + "ACC_VOUCHER ON ACC_LEDGER.LEDGER_NAME = ACC_VOUCHER.LEDGER_NAME INNER JOIN ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER ON ACC_VOUCHER.COMP_REF_NO = ACC_COMPANY_VOUCHER.COMP_REF_NO ";
                strSQL = strSQL + "WHERE (ACC_LEDGER.LEDGER_GROUP = 100) ";
                strSQL = strSQL + "AND (ACC_VOUCHER.COMP_VOUCHER_TYPE NOT IN (1, 4)) ";
                strSQL = strSQL + " AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                strSQL = strSQL + " AND ACC_VOUCHER.LEDGER_NAME NOT in('IBBL-Current (1426)') ";
                strSQL = strSQL + " and ACC_VOUCHER.LEDGER_NAME <> 'AIBL Investment (TR)' ";
                strSQL = strSQL + " AND ACC_VOUCHER.VOUCHER_REVERSE_LEDGER  not IN ('Bkash Charge (L)') ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(LEDGER_NAME,HEAD_NAME,CASH_AMOUNT) ";
                strSQL = strSQL + "SELECT 'BKash Account','Bkash Charge (Exp.)',  ";
                strSQL = strSQL + "isnull(sum(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0) AS AMOUNT  ";
                strSQL = strSQL + "FROM  ACC_LEDGER INNER JOIN ";
                strSQL = strSQL + "ACC_VOUCHER ON ACC_LEDGER.LEDGER_NAME = ACC_VOUCHER.LEDGER_NAME INNER JOIN ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER ON ACC_VOUCHER.COMP_REF_NO = ACC_COMPANY_VOUCHER.COMP_REF_NO ";
                strSQL = strSQL + "WHERE ACC_VOUCHER.COMP_VOUCHER_TYPE IN (1) ";
                strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND " + Utility.cvtSQLDateString(strTDate);
                strSQL = strSQL + "AND ACC_VOUCHER.LEDGER_NAME IN ('Bkash Charge (Exp.)') ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                cmdInsert.Transaction.Commit();


                //strSQL = "ALTER VIEW ACC_CHEQUE_PAYMENT_DETAILS AS ";
                //strSQL = strSQL + "SELECT LEDGER_NAME,HEAD_NAME VOUCHER_REVERSE_LEDGER,COMP_REF_NO,COMP_VOUCHER_DATE,CHEQUE_NO AS VOUCHER_CHEQUE_NUMBER,REMARKS,SUM(CASH_AMOUNT) AMOUNT ";
                //strSQL = strSQL + "FROM ACC_EXPENSE_DUMP ";
                //strSQL = strSQL + "group by LEDGER_NAME,HEAD_NAME VOUCHER_REVERSE_LEDGER,COMP_REF_NO,COMP_VOUCHER_DATE,CHEQUE_NO AS VOUCHER_CHEQUE_NUMBER,REMARKS ";
                //cmdInsert.CommandText = strSQL;
                //cmdInsert.ExecuteNonQuery();
                //strSQL = strSQL + "SELECT ACC_LEDGER.LEDGER_NAME, ACC_VOUCHER.COMP_REF_NO, ACC_VOUCHER.COMP_VOUCHER_DATE, ACC_VOUCHER.VOUCHER_CHEQUE_NUMBER, ACC_VOUCHER.VOUCHER_CHEQUE_DATE,  ";
                //strSQL = strSQL + "ACC_VOUCHER.VOUCHER_CHEQUE_DRAWN_ON, ACC_LEDGER.LEDGER_GROUP, ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT AS AMOUNT, ACC_VOUCHER.VOUCHER_REVERSE_LEDGER,  ";
                //strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION ";
                //strSQL = strSQL + "FROM  ACC_LEDGER INNER JOIN ";
                //strSQL = strSQL + "ACC_VOUCHER ON ACC_LEDGER.LEDGER_NAME = ACC_VOUCHER.LEDGER_NAME INNER JOIN ";
                //strSQL = strSQL + "ACC_COMPANY_VOUCHER ON ACC_VOUCHER.COMP_REF_NO = ACC_COMPANY_VOUCHER.COMP_REF_NO ";
                //strSQL = strSQL + "WHERE (ACC_LEDGER.LEDGER_GROUP = 100) ";
                //strSQL=strSQL + "AND (ACC_VOUCHER.COMP_VOUCHER_TYPE NOT IN (1, 4)) ";
                //strSQL = strSQL + " AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                //strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                //strSQL = strSQL + " AND ACC_VOUCHER.LEDGER_NAME NOT in('IBBL-Current (1426)') ";
                ////strSQL = strSQL + " AND ACC_VOUCHER.VOUCHER_REVERSE_LEDGER  not IN ('Import Purchase' ) ";
                //cmdInsert.CommandText = strSQL;
                //cmdInsert.ExecuteNonQuery();
                strSQL = "SELECT ";
                strSQL = strSQL + "LEDGER_NAME,substring(COMP_REF_NO,7,30) COMP_REF_NO ,COMP_VOUCHER_DATE,isnull(CHEQUE_NO,'') VOUCHER_CHEQUE_NUMBER,CASH_AMOUNT AMOUNT,";
                strSQL = strSQL + "isnull(HEAD_NAME,'') VOUCHER_REVERSE_LEDGER ,isnull(REMARKS,'') COMP_VOUCHER_NARRATION ";
                strSQL = strSQL + "FROM ACC_EXPENSE_DUMP  ";
                strSQL = strSQL + " WHERE CASH_AMOUNT  > 0 ";
                //strSQL = strSQL + " and LEDGER_NAME <> 'AIBL Investment (TR)' ";
                //strSQL = strSQL + " and VOUCHER_REVERSE_LEDGER <> 'Bkash Charge (L)' ";

                if (intSorting > 0)
                {
                    strSQL = strSQL + " ORDER by LEDGER_NAME,CHEQUE_NO ASC ,COMP_VOUCHER_DATE ASC";
                }
                else
                {
                    strSQL = strSQL + " ORDER by LEDGER_NAME,COMP_VOUCHER_DATE ";
                }
                //strSQL = strSQL + " WHERE COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                //strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);

                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.strRefNo = dr["COMP_REF_NO"].ToString();
                    if (dr["COMP_VOUCHER_DATE"].ToString() != "")
                    {
                        oLedg.strDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd-MM-yyyy");
                    }
                    else
                    {
                        oLedg.strDate = "";
                    }
                    if (dr["VOUCHER_CHEQUE_NUMBER"].ToString() != "")
                    {
                        oLedg.strCheuqueNo = dr["VOUCHER_CHEQUE_NUMBER"].ToString();
                    }
                    else
                    {
                        oLedg.strCheuqueNo = "";
                    }
                    if (dr["VOUCHER_REVERSE_LEDGER"].ToString() != "")
                    {
                        oLedg.strReverseLedger = dr["VOUCHER_REVERSE_LEDGER"].ToString();
                    }
                    else
                    {
                        oLedg.strReverseLedger = "";
                    }
                    if (dr["COMP_VOUCHER_NARRATION"].ToString() != "")
                    {
                        oLedg.strNarration = dr["COMP_VOUCHER_NARRATION"].ToString();
                    }
                    else
                    {
                        oLedg.strNarration = "";
                    }
                    oLedg.dblAmount = Convert.ToDouble(dr["AMOUNT"]);
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strLedgerName = "";
                    oLedg.strRefNo = "";
                    oLedg.strDate = "";
                    oLedg.strCheuqueNo = "";
                    oLedg.strReverseLedger = "";
                    oLedg.strNarration = "";
                    oLedg.dblAmount = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }
        #endregion
        #region "Collection Target Achieve"
        public List<RAccountsGroup> GetrptCollectionTargetAchieve(string strDeComID, string strBranchID, string strStringMonth, string strSelection, string strFate, string strTDate,
                                                                        string strSalesFate, string strSalesTDate, int inttype, int intStatus, string gstrUserName)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;

                strSQL = "DELETE from ACC_SAL_COLL_TARGET_ACHIEVE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO  ACC_SAL_COLL_TARGET_ACHIEVE(LEDGER_NAME,LEDGER_GROUP_NAME,SAL_TARGET) ";
                strSQL = strSQL + "SELECT L.LEDGER_NAME_MERZE AS LEDGER_NAME ,l.LEDGER_PARENT_GROUP,";
                strSQL = strSQL + "ISNULL(SUM(T.TARGET_ACHIEVE_AMOUNT),0)  AS TARGET_ACHIEVE_AMOUNT FROM SALES_TARGET_ACHIEVEMENT_MASTER M ,SALES_TARGET_ACHIEVEMENT T, ";
                strSQL = strSQL + "ACC_LEDGER L, ACC_LEDGER_Z_D_A LG WHERE M.TARGET_ACHIEVE_KEY=T.TARGET_ACHIEVE_KEY AND L.LEDGER_NAME =T.LEDGER_NAME and L.LEDGER_NAME=LG.LEDGER_NAME ";
                strSQL = strSQL + "AND (T.TARGET_ACHIEVE_FROM_DATE >= (" + Utility.cvtSQLDateString(strSalesFate) + ") AND T.TARGET_ACHIEVE_TO_DATE <=(" + Utility.cvtSQLDateString(strSalesTDate) + ")) ";
                if (intStatus == 0)
                {
                    strSQL = strSQL + " AND L.LEDGER_STATUS in (0,1,2)";
                }
                else if (intStatus == 1)
                {
                    strSQL = strSQL + " AND L.LEDGER_STATUS in (0)";
                }
                else
                {
                    strSQL = strSQL + " AND L.LEDGER_STATUS in (0)";
                }
                //if (strStringMonth != "")
                //{
                //    strSQL = strSQL + " AND T.TARGET_ACHIEVE_MONTH_ID IN (" + strStringMonth + ") ";
                //}
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND l.BRANCH_ID='" + strBranchID + "' ";
                }
                if (strSelection != "")
                {
                    if (inttype == 1)
                    {
                        if (strSelection == "Sundry Debtors")
                        {
                            strSQL = strSQL + " AND l.LEDGER_ONE_DOWN='" + strSelection + "' ";
                        }
                        else if (strSelection.Substring(0, 1).ToUpper() == "D" || strSelection.Substring(0, 1).ToUpper() == "R")
                        {
                            strSQL = strSQL + " AND LG.Division='" + strSelection + "' ";
                        }
                        else if (strSelection.Contains("ZONE") == true)
                        {
                            strSQL = strSQL + " AND LG.ZONE='" + strSelection + "' ";
                        }
                        else
                        {
                            strSQL = strSQL + " AND l.LEDGER_PARENT_GROUP='" + strSelection + "' ";
                        }
                    }
                    else
                    {
                        strSQL = strSQL + " AND l.LEDGER_NAME='" + strSelection + "' ";
                    }
                }
                strSQL = strSQL + "GROUP BY L.LEDGER_NAME_MERZE,l.LEDGER_PARENT_GROUP ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();



                strSQL = "INSERT INTO  ACC_SAL_COLL_TARGET_ACHIEVE(LEDGER_GROUP_NAME,LEDGER_NAME,SAL_ACHIEVE) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP ,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0) ACHIEVE  from ACC_LEDGER l,ACC_COMPANY_VOUCHER c , ACC_LEDGER_Z_D_A LG ";
                strSQL = strSQL + "where  l.LEDGER_NAME =c.LEDGER_NAME  and L.LEDGER_NAME=LG.LEDGER_NAME  ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSALES_INVOICE + " ";
                strSQL = strSQL + "AND (C.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strSalesFate) + ") AND (" + Utility.cvtSQLDateString(strSalesTDate) + ")) ";
                if (intStatus == 0)
                {
                    strSQL = strSQL + " AND L.LEDGER_STATUS in (0,1,2)";
                }
                else if (intStatus == 1)
                {
                    strSQL = strSQL + " AND L.LEDGER_STATUS in (0)";
                }
                else
                {
                    strSQL = strSQL + " AND L.LEDGER_STATUS in (0)";
                }
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND l.BRANCH_ID='" + strBranchID + "' ";
                }
                if (strSelection != "")
                {
                    if (inttype == 1)
                    {
                        if (strSelection == "Sundry Debtors")
                        {
                            strSQL = strSQL + " AND l.LEDGER_ONE_DOWN='" + strSelection + "' ";
                        }
                        else if (strSelection.Substring(0, 1).ToUpper() == "D" || strSelection.Substring(0, 1).ToUpper() == "R")
                        {
                            strSQL = strSQL + " AND LG.Division='" + strSelection + "' ";
                        }
                        else if (strSelection.Contains("ZONE") == true)
                        {
                            strSQL = strSQL + " AND LG.ZONE='" + strSelection + "' ";
                        }
                        else
                        {
                            strSQL = strSQL + " AND l.LEDGER_PARENT_GROUP='" + strSelection + "' ";
                        }
                    }
                    else
                    {
                        strSQL = strSQL + " AND l.LEDGER_NAME='" + strSelection + "' ";
                    }
                }
                strSQL = strSQL + "GROUP by  l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                strSQL = "INSERT INTO  ACC_SAL_COLL_TARGET_ACHIEVE(LEDGER_NAME,LEDGER_GROUP_NAME,COLL_TARGET) ";
                strSQL = strSQL + "SELECT L.LEDGER_NAME_MERZE AS LEDGER_NAME ,l.LEDGER_PARENT_GROUP,";
                strSQL = strSQL + "ISNULL(SUM(T.COLL_TARGET_COLL_AMT),0)  AS TARGET_ACHIEVE_AMOUNT FROM SALES_COLL_TARGET_MASTER M,SALES_COLL_TARGET_TRAN T, ACC_LEDGER_Z_D_A LG , ";
                strSQL = strSQL + "ACC_LEDGER L WHERE M.COLL_TARGET_KEY=T.COLL_TARGET_KEY AND L.LEDGER_NAME =T.LEDGER_NAME  and L.LEDGER_NAME=LG.LEDGER_NAME ";
                strSQL = strSQL + "AND (T.COLL_TARGET_FROM_DATE >= (" + Utility.cvtSQLDateString(strFate) + ") AND T.COLL_TARGET_TO_DATE <=(" + Utility.cvtSQLDateString(strTDate) + ")) ";
                if (intStatus == 0)
                {
                    strSQL = strSQL + " AND L.LEDGER_STATUS in (0,1,2)";
                }
                else if (intStatus == 1)
                {
                    strSQL = strSQL + " AND L.LEDGER_STATUS in (0)";
                }
                else
                {
                    strSQL = strSQL + " AND L.LEDGER_STATUS in (0)";
                }
                //if (strStringMonth != "")
                //{
                //    strSQL = strSQL + " AND T.MONTH_ID IN (" + strStringMonth + ") ";
                //}

                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND l.BRANCH_ID='" + strBranchID + "' ";
                }
                if (strSelection != "")
                {
                    if (inttype == 1)
                    {
                        if (strSelection == "Sundry Debtors")
                        {
                            strSQL = strSQL + " AND l.LEDGER_ONE_DOWN='" + strSelection + "' ";
                        }
                        else if (strSelection.Substring(0, 1).ToUpper() == "D" || strSelection.Substring(0, 1).ToUpper() == "R")
                        {
                            strSQL = strSQL + " AND LG.Division='" + strSelection + "' ";
                        }
                        else if (strSelection.Contains("ZONE") == true)
                        {
                            strSQL = strSQL + " AND LG.ZONE='" + strSelection + "' ";
                        }
                        else
                        {
                            strSQL = strSQL + " AND l.LEDGER_PARENT_GROUP='" + strSelection + "' ";
                        }
                    }
                    else
                    {
                        strSQL = strSQL + " AND l.LEDGER_NAME='" + strSelection + "' ";
                    }
                }
                strSQL = strSQL + "GROUP BY L.LEDGER_NAME_MERZE,l.LEDGER_PARENT_GROUP ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO  ACC_SAL_COLL_TARGET_ACHIEVE(LEDGER_GROUP_NAME,LEDGER_NAME,COLL_ACHIEVE) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP ,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "ISNULL(SUM(av.VOUCHER_CREDIT_AMOUNT),0) COLLECTION_AMNT   from ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av, ACC_LEDGER_Z_D_A LG  ";
                strSQL = strSQL + "where l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO AND  L.LEDGER_NAME=LG.LEDGER_NAME   ";
                strSQL = strSQL + "AND aV.COMP_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtRECEIPT_VOUCHER + " and C.COMP_VOUCHER_NET_AMOUNT > 0 ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                if (intStatus == 0)
                {
                    strSQL = strSQL + " AND L.LEDGER_STATUS in (0,1,2)";
                }
                else if (intStatus == 1)
                {
                    strSQL = strSQL + " AND L.LEDGER_STATUS in (0)";
                }
                else
                {
                    strSQL = strSQL + " AND L.LEDGER_STATUS in (0)";
                }

                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND l.BRANCH_ID='" + strBranchID + "' ";
                }
                if (strSelection != "")
                {
                    if (inttype == 1)
                    {
                        if (strSelection == "Sundry Debtors")
                        {
                            strSQL = strSQL + " AND l.LEDGER_ONE_DOWN='" + strSelection + "' ";
                        }
                        else if (strSelection.Substring(0, 1).ToUpper() == "D" || strSelection.Substring(0, 1).ToUpper() == "R")
                        {
                            strSQL = strSQL + " AND LG.Division='" + strSelection + "' ";
                        }
                        else if (strSelection.Contains("ZONE") == true)
                        {
                            strSQL = strSQL + " AND LG.ZONE='" + strSelection + "' ";
                        }
                        else
                        {
                            strSQL = strSQL + " AND l.LEDGER_PARENT_GROUP='" + strSelection + "' ";
                        }
                    }
                    else
                    {
                        strSQL = strSQL + " AND l.LEDGER_NAME='" + strSelection + "' ";
                    }
                }

                strSQL = strSQL + "GROUP by  l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                ///************hlpf
                strSQL = "INSERT INTO  ACC_SAL_COLL_TARGET_ACHIEVE(LEDGER_GROUP_NAME,LEDGER_NAME,COLL_ACHIEVE) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP ,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "ISNULL(SUM(aV.VOUCHER_CREDIT_AMOUNT-av.VOUCHER_DEBIT_AMOUNT),0) *-1 COLLECTION_AMNT   from ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av, ACC_LEDGER_Z_D_A LG  ";
                strSQL = strSQL + "where l.LEDGER_NAME =av.REVERSE_LEDGER1  and c.COMP_REF_NO =av.COMP_REF_NO AND  L.LEDGER_NAME=LG.LEDGER_NAME   ";
                strSQL = strSQL + "AND AV.AUTOJV=1 AND aV.COMP_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtJOURNAL_VOUCHER + " and C.COMP_VOUCHER_NET_AMOUNT > 0 ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                if (intStatus == 0)
                {
                    strSQL = strSQL + " AND L.LEDGER_STATUS in (0,1,2)";
                }
                else if (intStatus == 1)
                {
                    strSQL = strSQL + " AND L.LEDGER_STATUS in (0)";
                }
                else
                {
                    strSQL = strSQL + " AND L.LEDGER_STATUS in (0)";
                }

                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND l.BRANCH_ID='" + strBranchID + "' ";
                }
                if (strSelection != "")
                {
                    if (inttype == 1)
                    {
                        if (strSelection == "Sundry Debtors")
                        {
                            strSQL = strSQL + " AND l.LEDGER_ONE_DOWN='" + strSelection + "' ";
                        }
                        else if (strSelection.Substring(0, 1).ToUpper() == "D" || strSelection.Substring(0, 1).ToUpper() == "R")
                        {
                            strSQL = strSQL + " AND LG.Division='" + strSelection + "' ";
                        }
                        else if (strSelection.Contains("ZONE") == true)
                        {
                            strSQL = strSQL + " AND LG.ZONE='" + strSelection + "' ";
                        }
                        else
                        {
                            strSQL = strSQL + " AND l.LEDGER_PARENT_GROUP='" + strSelection + "' ";
                        }
                    }
                    else
                    {
                        strSQL = strSQL + " AND l.LEDGER_NAME='" + strSelection + "' ";
                    }
                }

                strSQL = strSQL + "GROUP by  l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                strSQL = "DELETE FROM ACC_SAL_COLL_TARGET_ACHIEVE WHERE (COLL_ACHIEVE + COLL_TARGET + SAL_TARGET + SAL_ACHIEVE)=0 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                cmdInsert.Transaction.Commit();

                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();

                strSQL = "SELECT TT.LEDGER_NAME, LEDGER_GROUP_NAME, SAL_TARGET, SAL_ACHIEVE, COLL_TARGET, COLL_ACHIEVE,LG.ZONE,LG.DIVISION ";
                strSQL = strSQL + "FROM  ACC_SAL_COLL_TARGET_ACHIEVE_VIEW TT, ACC_LEDGER_Z_D_A LG ";
                strSQL = strSQL + "WHERE TT.LEDGER_NAME= LG.LEDGER_NAME_MERZE ";
                strSQL = strSQL + " AND LG.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + gstrUserName + "')";
                if (inttype == 1)
                {
                    strSQL = strSQL + "ORDER BY LG.ZONE,LG.DIVISION, LEDGER_GROUP_NAME, TT.LEDGER_NAME ";
                }
                else
                {
                    strSQL = strSQL + "ORDER BY LG.ZONE,LG.DIVISION, LEDGER_GROUP_NAME, TT.LEDGER_NAME ";
                }

                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strGrParent = dr["LEDGER_GROUP_NAME"].ToString();
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.dblSalTarget = Convert.ToDouble(dr["SAL_TARGET"]);
                    oLedg.dblSaltargetAchieve = Convert.ToDouble(dr["SAL_ACHIEVE"]);
                    oLedg.dblColltarget = Convert.ToDouble(dr["COLL_TARGET"]);
                    oLedg.dblCollAcieve = Convert.ToDouble(dr["COLL_ACHIEVE"]);
                    oLedg.strAddress1 = dr["ZONE"].ToString();
                    oLedg.strAddress2 = dr["DIVISION"].ToString();

                    //oLedg.strGrParent = dr["GR_PARENT"].ToString();
                    ooAccLedger.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strGrParent = "";
                    oLedg.strLedgerName = "";
                    oLedg.dblSalTarget = 0;
                    oLedg.dblSaltargetAchieve = 0;
                    oLedg.dblColltarget = 0;
                    oLedg.dblCollAcieve = 0;
                    ooAccLedger.Add(oLedg);
                }


                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }
        #endregion
        #region "Expense Summary"
        public List<RAccountsGroup> GetrptExpenseSummary(string strDeComID, string strFate, string strTDate, int intSumDet)
        {
            string strSQL = null, strHeadCash = "", strFactoryCash = "", strBank = "",strJV="";
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;

                strSQL = "DELETE from ACC_EXPENSE_DUMP ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                //****************JOURNAL VOUCHER FOR BANK MULTIPLE LEDGER
                strSQL = "SELECT DISTINCT ACC_VOUCHER.COMP_REF_NO FROM ACC_VOUCHER,ACC_LEDGER WHERE ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_LEDGER.LEDGER_GROUP IN (100,101) AND COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_REVERSE_LEDGER = 'As per Details' AND  ACC_VOUCHER.AUTOJV=0  AND (ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY='Cr' ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    strJV = strJV + "'" + dr["COMP_REF_NO"].ToString() + "'" + ",";
                }
                dr.Close();
                if (strJV != "")
                {
                    strJV = Utility.Mid(strJV, 0, strJV.Length - 1);
                }
                //*************************END

                //****************PAYMENT VOUCHER FOR BANK MULTIPLE LEDGER
                strSQL = "SELECT DISTINCT COMP_REF_NO FROM ACC_VOUCHER WHERE VOUCHER_REVERSE_LEDGER ='As per Details'  AND COMP_VOUCHER_TYPE =2 AND LEDGER_NAME NOT IN('Cash Of Head Office','Cash In Hand Factory') ";
                strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    strBank = strBank + "'" + dr["COMP_REF_NO"].ToString() + "'" + ",";
                }
                dr.Close();
                if (strBank != "")
                {
                    strBank = Utility.Mid(strBank, 0, strBank.Length - 1);
                }
                //*************************END
                //*************PAYMENT VOUCHER FOR CASH MULTIPLE LEDGER
                strSQL = "SELECT DISTINCT COMP_REF_NO FROM ACC_VOUCHER WHERE LEDGER_NAME ='Cash Of Head Office' AND VOUCHER_REVERSE_LEDGER ='As per Details'  AND COMP_VOUCHER_TYPE =2 ";
                strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    strHeadCash = strHeadCash + "'" + dr["COMP_REF_NO"].ToString() + "'" + ",";
                }
                dr.Close();
                if (strHeadCash != "")
                {
                    strHeadCash = Utility.Mid(strHeadCash, 0, strHeadCash.Length - 1);
                }

                strSQL = "SELECT DISTINCT COMP_REF_NO FROM ACC_VOUCHER WHERE LEDGER_NAME ='Cash In Hand Factory'  AND VOUCHER_REVERSE_LEDGER ='As per Details' AND COMP_VOUCHER_TYPE =2 ";
                strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    strFactoryCash = strHeadCash + "'" + dr["COMP_REF_NO"].ToString() + "'" + ",";
                }
                dr.Close();
                if (strFactoryCash != "")
                {
                    strFactoryCash = Utility.Mid(strFactoryCash, 0, strFactoryCash.Length - 1);
                }
                //***************END
                if (intSumDet == 0)
                {

                    strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(HEAD_NAME,LEDGER_NAME,CASH_AMOUNT) ";
                    strSQL = strSQL + "select v.LEDGER_NAME,V.VOUCHER_REVERSE_LEDGER, sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (2) ";
                    strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                    strSQL = strSQL + "and l.LEDGER_GROUP =" + (int)Utility.GR_GROUP_TYPE.grCash + " ";
                    strSQL = strSQL + "and V.LEDGER_NAME ='Cash Of Head Office' ";
                    strSQL = strSQL + "and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER not like 'HL%' ";
                    strSQL = strSQL + "group by v.LEDGER_NAME,V.VOUCHER_REVERSE_LEDGER ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(HEAD_NAME1,LEDGER_NAME,CASH_AMOUNT1) ";
                    strSQL = strSQL + "select v.LEDGER_NAME,V.VOUCHER_REVERSE_LEDGER, sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (2) ";
                    strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                    strSQL = strSQL + "and l.LEDGER_GROUP =" + (int)Utility.GR_GROUP_TYPE.grCash + " ";
                    strSQL = strSQL + "and V.LEDGER_NAME ='Cash In Hand Factory' ";
                    strSQL = strSQL + "and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER not like 'HL%' ";
                    strSQL = strSQL + "group by v.LEDGER_NAME,V.VOUCHER_REVERSE_LEDGER ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    if (strHeadCash != "")
                    {
                        strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(HEAD_NAME,LEDGER_NAME,CASH_AMOUNT) ";
                        strSQL = strSQL + "select v.LEDGER_NAME,V.LEDGER_NAME, sum(v.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT) As Amnt ";
                        strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                        //strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (2) ";
                        strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                        //strSQL = strSQL + "and l.LEDGER_GROUP =" + (int)Utility.GR_GROUP_TYPE.grCash + " ";
                        strSQL = strSQL + " and v.COMP_REF_NO in (" + strHeadCash + ")";
                        //strSQL = strSQL + "and V.LEDGER_NAME !='Cash Of Head Office' ";
                        strSQL = strSQL + "AND  v.VOUCHER_TOBY='Dr' ";
                        strSQL = strSQL + "AND v.VOUCHER_REVERSE_LEDGER not like 'HL%' ";
                        strSQL = strSQL + "group by v.LEDGER_NAME,V.VOUCHER_REVERSE_LEDGER ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    if (strBank !="")
                    {
                        strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(HEAD_NAME,LEDGER_NAME,CHECQUE_AMOUNT) ";
                        strSQL = strSQL + "select v.LEDGER_NAME,V.LEDGER_NAME, sum(v.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT) As Amnt ";
                        strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                        //strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (2) ";
                        strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                        //strSQL = strSQL + "and l.LEDGER_GROUP =" + (int)Utility.GR_GROUP_TYPE.grCash + " ";
                        strSQL = strSQL + " and v.COMP_REF_NO in (" + strBank + ")";
                        strSQL = strSQL + "AND  VOUCHER_TOBY='Dr' ";
                        strSQL = strSQL + "AND v.VOUCHER_REVERSE_LEDGER not like 'HL%' ";
                        strSQL = strSQL + "group by v.LEDGER_NAME,V.VOUCHER_REVERSE_LEDGER ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    if (strFactoryCash != "")
                    {

                        strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(HEAD_NAME1,LEDGER_NAME,CASH_AMOUNT1) ";
                        strSQL = strSQL + "select v.LEDGER_NAME,V.LEDGER_NAME, sum(v.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT) As Amnt ";
                        strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                        strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (2) ";
                        strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                        
                        strSQL = strSQL + " and v.COMP_REF_NO in (" + strFactoryCash + ")";
                        strSQL = strSQL + "AND  VOUCHER_TOBY='Dr' ";
                        strSQL = strSQL + "AND v.VOUCHER_REVERSE_LEDGER not like 'HL%' ";
                        strSQL = strSQL + "group by v.LEDGER_NAME,V.VOUCHER_REVERSE_LEDGER ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                   

                    strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(LEDGER_NAME,HEAD_NAME,CHECQUE_AMOUNT,POSITION) ";
                    strSQL = strSQL + "select V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME,sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt,1 ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + "and l.LEDGER_GROUP <> " + (int)Utility.GR_GROUP_TYPE.grCash + " ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (2) ";
                    strSQL = strSQL + "and l.LEDGER_GROUP =" + (int)Utility.GR_GROUP_TYPE.grBANKACCOUNTS + " ";
                    strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                    strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER not like 'HL%' ";
                    strSQL = strSQL + "and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                    strSQL = strSQL + "group by l.LEDGER_NAME,V.VOUCHER_REVERSE_LEDGER ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(LEDGER_NAME,HEAD_NAME,CHECQUE_AMOUNT,POSITION) ";
                    strSQL = strSQL + "select V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME,sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt,1 ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + "and l.LEDGER_GROUP <> " + (int)Utility.GR_GROUP_TYPE.grCash + " ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "and l.LEDGER_GROUP =" + (int)Utility.GR_GROUP_TYPE.grBANKACCOUNTS + " ";
                    strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) ";
                    strSQL = strSQL + "and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                    strSQL = strSQL + "AND V.AUTOJV=0 ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    strSQL = strSQL + " AND  V.VOUCHER_REVERSE_LEDGER IN (SELECT LEDGER_NAME FROM ACC_LEDGER WHERE LEDGER_GROUP =100) ";
                    strSQL = strSQL + "group by V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0 ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    if (strJV != "")
                    {
                        strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(LEDGER_NAME,HEAD_NAME,CHECQUE_AMOUNT,POSITION) ";
                        strSQL = strSQL + "select V.LEDGER_NAME,l.LEDGER_NAME,sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)*-1 As Amnt,1 ";
                        strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                        strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                        strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                        strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase','Bkash Non Active' ) ";
                        strSQL = strSQL + " and v.COMP_REF_NO in (" + strJV + ")";
                        strSQL = strSQL + "AND V.AUTOJV=0 ";
                        strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                        strSQL = strSQL + "group by  V.LEDGER_NAME,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) > 0 ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }

                    if (strFactoryCash != "")
                    {
                        strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(LEDGER_NAME,HEAD_NAME,CHECQUE_AMOUNT,POSITION) ";
                        strSQL = strSQL + "select V.LEDGER_NAME,l.LEDGER_NAME,sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt,1 ";
                        strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                        strSQL = strSQL + "and l.LEDGER_GROUP <> " + (int)Utility.GR_GROUP_TYPE.grCash + " ";
                        strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                        strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                        strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) ";
                        strSQL = strSQL + " and v.COMP_REF_NO in (" + strFactoryCash + ")";
                        strSQL = strSQL + "group by V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0 ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    if (strHeadCash != "")
                    {
                        strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(LEDGER_NAME,HEAD_NAME,CHECQUE_AMOUNT,POSITION) ";
                        strSQL = strSQL + "select V.LEDGER_NAME,l.LEDGER_NAME,sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt,1 ";
                        strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                        strSQL = strSQL + "and l.LEDGER_GROUP <> " + (int)Utility.GR_GROUP_TYPE.grCash + " ";
                        strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                        strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                        strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) ";
                        strSQL = strSQL + " and v.COMP_REF_NO in (" + strHeadCash + ")";
                        strSQL = strSQL + "group by V.LEDGER_NAME,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0 ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }


                    strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(HEAD_NAME,LEDGER_NAME,CHECQUE_AMOUNT,POSITION) ";
                    strSQL = strSQL + "select 'BKash Account',V.LEDGER_NAME,sum(v.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT) As Amnt,1 ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                    strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                    strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                    strSQL = strSQL + "and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                    strSQL = strSQL + "group by V.LEDGER_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    //New***
                    strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(HEAD_NAME,LEDGER_NAME,CHECQUE_AMOUNT,POSITION) ";
                    strSQL = strSQL + "select 'BKash Account',V.LEDGER_NAME,sum(v.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT) As Amnt,1 ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                    strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                    strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                    strSQL = strSQL + "group by V.LEDGER_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    if (strHeadCash != "")
                    {
                        strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(HEAD_NAME,LEDGER_NAME,CHECQUE_AMOUNT,POSITION) ";
                        strSQL = strSQL + "select 'BKash Account',V.LEDGER_NAME,sum(v.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT) As Amnt,1 ";
                        strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                        strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                        strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                        strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                        strSQL = strSQL + " and v.COMP_REF_NO in (" + strHeadCash + ")";
                        strSQL = strSQL + "group by V.LEDGER_NAME ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    if (strFactoryCash != "")
                    {
                        strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(HEAD_NAME,LEDGER_NAME,CHECQUE_AMOUNT,POSITION) ";
                        strSQL = strSQL + "select 'BKash Account',V.LEDGER_NAME,sum(v.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT) As Amnt,1 ";
                        strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                        strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                        strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                        strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                        strSQL = strSQL + " and v.COMP_REF_NO in (" + strFactoryCash + ")";
                        strSQL = strSQL + "group by V.LEDGER_NAME ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }

                    //////strSQL = "DELETE FROM ACC_EXPENSE_DUMP WHERE HEAD_NAME ='IBBL-Current (1426)' ";
                    //////cmdInsert.CommandText = strSQL;
                    //////cmdInsert.ExecuteNonQuery();

                }
                else
                {

                    strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(HEAD_NAME,LEDGER_NAME,CASH_AMOUNT) ";
                    strSQL = strSQL + "select v.LEDGER_NAME,V.VOUCHER_REVERSE_LEDGER, sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (2) ";
                    strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                    strSQL = strSQL + "and l.LEDGER_GROUP =" + (int)Utility.GR_GROUP_TYPE.grCash + " ";
                    strSQL = strSQL + "and V.LEDGER_NAME ='Cash Of Head Office' ";
                    strSQL = strSQL + "and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER not like 'HL%' ";
                    strSQL = strSQL + "group by v.LEDGER_NAME,V.VOUCHER_REVERSE_LEDGER ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(HEAD_NAME,LEDGER_NAME,CASH_AMOUNT) ";
                    strSQL = strSQL + "select v.LEDGER_NAME,V.VOUCHER_REVERSE_LEDGER, sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (2) ";
                    strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                    strSQL = strSQL + "and l.LEDGER_GROUP =" + (int)Utility.GR_GROUP_TYPE.grCash + " ";
                    strSQL = strSQL + "and V.LEDGER_NAME ='Cash In Hand Factory' ";
                    strSQL = strSQL + "and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER not like 'HL%' ";
                    strSQL = strSQL + "group by v.LEDGER_NAME,V.VOUCHER_REVERSE_LEDGER ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    if (strHeadCash != "")
                    {
                        strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(HEAD_NAME,LEDGER_NAME,CASH_AMOUNT) ";
                        strSQL = strSQL + "select v.LEDGER_NAME,V.LEDGER_NAME, sum(v.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT) As Amnt ";
                        strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                        //strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (2) ";
                        strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                        //strSQL = strSQL + "and l.LEDGER_GROUP =" + (int)Utility.GR_GROUP_TYPE.grCash + " ";
                        strSQL = strSQL + " and v.COMP_REF_NO in (" + strHeadCash + ")";
                        //strSQL = strSQL + "and V.LEDGER_NAME !='Cash Of Head Office' ";
                        strSQL = strSQL + "AND  v.VOUCHER_TOBY='Dr' ";
                        strSQL = strSQL + "AND v.VOUCHER_REVERSE_LEDGER not like 'HL%' ";
                        strSQL = strSQL + "group by v.LEDGER_NAME,V.VOUCHER_REVERSE_LEDGER ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    if (strBank != "")
                    {


                        strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(HEAD_NAME,LEDGER_NAME,CASH_AMOUNT,POSITION) ";
                        strSQL = strSQL + "select v.LEDGER_NAME,V.LEDGER_NAME, sum(v.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT) As Amnt ,1";
                        strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                        //strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (2) ";
                        strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                        //strSQL = strSQL + "and l.LEDGER_GROUP =" + (int)Utility.GR_GROUP_TYPE.grCash + " ";
                        strSQL = strSQL + " and v.COMP_REF_NO in (" + strBank + ")";
                        strSQL = strSQL + "AND  VOUCHER_TOBY='Dr' ";
                        strSQL = strSQL + "AND v.VOUCHER_REVERSE_LEDGER not like 'HL%' ";
                        strSQL = strSQL + "group by v.LEDGER_NAME,V.VOUCHER_REVERSE_LEDGER ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                     
                 
                    }
                    if (strFactoryCash != "")
                    {

                        strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(HEAD_NAME,LEDGER_NAME,CASH_AMOUNT) ";
                        strSQL = strSQL + "select v.LEDGER_NAME,V.LEDGER_NAME, sum(v.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT) As Amnt ";
                        strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                        strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (2) ";
                        strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";

                        strSQL = strSQL + " and v.COMP_REF_NO in (" + strFactoryCash + ")";
                        strSQL = strSQL + "AND  VOUCHER_TOBY='Dr' ";
                        strSQL = strSQL + "AND v.VOUCHER_REVERSE_LEDGER not like 'HL%' ";
                        strSQL = strSQL + "group by v.LEDGER_NAME,V.VOUCHER_REVERSE_LEDGER ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }


                    strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(LEDGER_NAME,HEAD_NAME,CASH_AMOUNT,POSITION) ";
                    strSQL = strSQL + "select V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME,sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt,1 ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + "and l.LEDGER_GROUP <> " + (int)Utility.GR_GROUP_TYPE.grCash + " ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (2) ";
                    strSQL = strSQL + "and l.LEDGER_GROUP =" + (int)Utility.GR_GROUP_TYPE.grBANKACCOUNTS + " ";
                    strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                    strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER not like 'HL%' ";
                    strSQL = strSQL + "and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                    strSQL = strSQL + "group by l.LEDGER_NAME,V.VOUCHER_REVERSE_LEDGER ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(LEDGER_NAME,HEAD_NAME,CASH_AMOUNT,POSITION) ";
                    strSQL = strSQL + "select V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME,sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt,1 ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + "and l.LEDGER_GROUP <> " + (int)Utility.GR_GROUP_TYPE.grCash + " ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "and l.LEDGER_GROUP =" + (int)Utility.GR_GROUP_TYPE.grBANKACCOUNTS + " ";
                    strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) ";
                    strSQL = strSQL + "and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                    strSQL = strSQL + "AND V.AUTOJV=0 ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    strSQL = strSQL + " AND  V.VOUCHER_REVERSE_LEDGER IN (SELECT LEDGER_NAME FROM ACC_LEDGER WHERE LEDGER_GROUP =100) ";
                    strSQL = strSQL + "group by V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0 ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    if (strJV != "")
                    {
                        strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(LEDGER_NAME,HEAD_NAME,CASH_AMOUNT,POSITION) ";
                        strSQL = strSQL + "select V.LEDGER_NAME,'AIBL-Current (39599)',sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)  *-1 As Amnt,1 ";
                        strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                        strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                        strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                        strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase','Bkash Non Active' ) ";
                        strSQL = strSQL + " and v.COMP_REF_NO in (" + strJV + ")";
                        strSQL = strSQL + "AND V.AUTOJV=0 ";
                        strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                        strSQL = strSQL + "group by  V.LEDGER_NAME,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) > 0 ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }

                    if (strFactoryCash != "")
                    {
                        strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(LEDGER_NAME,HEAD_NAME,CASH_AMOUNT,POSITION) ";
                        strSQL = strSQL + "select V.LEDGER_NAME,l.LEDGER_NAME,sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt,1 ";
                        strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                        strSQL = strSQL + "and l.LEDGER_GROUP <> " + (int)Utility.GR_GROUP_TYPE.grCash + " ";
                        strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                        strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                        strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) ";
                        strSQL = strSQL + " and v.COMP_REF_NO in (" + strFactoryCash + ")";
                        strSQL = strSQL + "group by V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0 ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    if (strHeadCash != "")
                    {
                        strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(LEDGER_NAME,HEAD_NAME,CASH_AMOUNT,POSITION) ";
                        strSQL = strSQL + "select V.LEDGER_NAME,l.LEDGER_NAME,sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt,1 ";
                        strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                        strSQL = strSQL + "and l.LEDGER_GROUP <> " + (int)Utility.GR_GROUP_TYPE.grCash + " ";
                        strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                        strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                        strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) ";
                        strSQL = strSQL + " and v.COMP_REF_NO in (" + strHeadCash + ")";
                        strSQL = strSQL + "group by V.LEDGER_NAME,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0 ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }


                    strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(HEAD_NAME,LEDGER_NAME,CASH_AMOUNT,POSITION) ";
                    strSQL = strSQL + "select 'BKash Account',V.LEDGER_NAME,sum(v.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT) As Amnt,1 ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                    strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                    strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                    strSQL = strSQL + "and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                    strSQL = strSQL + "group by V.LEDGER_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    //New***
                    strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(HEAD_NAME,LEDGER_NAME,CASH_AMOUNT,POSITION) ";
                    strSQL = strSQL + "select 'BKash Account',V.LEDGER_NAME,sum(v.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT) As Amnt,1 ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                    strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                    strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                    strSQL = strSQL + "group by V.LEDGER_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    if (strHeadCash != "")
                    {
                        strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(HEAD_NAME,LEDGER_NAME,CASH_AMOUNT,POSITION) ";
                        strSQL = strSQL + "select 'BKash Account',V.LEDGER_NAME,sum(v.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT) As Amnt,1 ";
                        strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                        strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                        strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                        strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                        strSQL = strSQL + " and v.COMP_REF_NO in (" + strHeadCash + ")";
                        strSQL = strSQL + "group by V.LEDGER_NAME ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    if (strFactoryCash != "")
                    {
                        strSQL = "INSERT INTO  ACC_EXPENSE_DUMP(HEAD_NAME,LEDGER_NAME,CASH_AMOUNT,POSITION) ";
                        strSQL = strSQL + "select 'BKash Account',V.LEDGER_NAME,sum(v.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT) As Amnt,1 ";
                        strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                        strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                        strSQL = strSQL + "AND (v.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                        strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                        strSQL = strSQL + " and v.COMP_REF_NO in (" + strFactoryCash + ")";
                        strSQL = strSQL + "group by V.LEDGER_NAME ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                   strSQL="UPDATE ACC_EXPENSE_DUMP SET HEAD_NAME ='AIBL-Current (39599)' WHERE  HEAD_NAME IN ('Bonus For Head Office','Bonus For Marketing') ";
                   cmdInsert.CommandText = strSQL;
                   cmdInsert.ExecuteNonQuery();
                 
                }

                cmdInsert.Transaction.Commit();

                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                if (intSumDet == 0)
                {
                    strSQL = "SELECT LEDGER_NAME,'' HEAD_NAME1,'' HEAD_NAME, 0 POSITION,SUM(CASH_AMOUNT)CASH_AMOUNT,SUM(CHECQUE_AMOUNT) CHECQUE_AMOUNT,SUM(CASH_AMOUNT1) CASH_AMOUNT1  FROM ACC_LEDGER_EXPENSE_VIEW ";
                    strSQL = strSQL + " GROUP by LEDGER_NAME ORDER BY LEDGER_NAME ";
                }
                else
                {
                    strSQL = "SELECT LEDGER_NAME,HEAD_NAME1,HEAD_NAME, POSITION,SUM(CASH_AMOUNT)CASH_AMOUNT,SUM(CHECQUE_AMOUNT) CHECQUE_AMOUNT,SUM(CASH_AMOUNT1) CASH_AMOUNT1  FROM ACC_LEDGER_EXPENSE_VIEW ";
                    strSQL = strSQL + " GROUP by LEDGER_NAME,HEAD_NAME1,HEAD_NAME, POSITION ORDER BY POSITION DESC,LEDGER_NAME DESC ";
                }

                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.strGrName = dr["HEAD_NAME"].ToString();
                    oLedg.strGrParent = dr["HEAD_NAME1"].ToString();
                    oLedg.dblCashOpn = Convert.ToDouble(dr["CASH_AMOUNT"]);
                    oLedg.dblMnauAmount = Convert.ToDouble(dr["CASH_AMOUNT1"]);
                    oLedg.dblBankOpn = Convert.ToDouble(dr["CHECQUE_AMOUNT"]);
                    oLedg.intPrimaryType = Convert.ToInt32(dr["POSITION"]);
                    ooAccLedger.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strLedgerName = "";
                    oLedg.strGrName = "";
                    oLedg.strGrParent = "";
                    oLedg.dblCashOpn = 0;
                    oLedg.dblColltarget = 0;
                    oLedg.dblBankOpn = 0;
                    oLedg.intPrimaryType = 0;
                    ooAccLedger.Add(oLedg);
                }


                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }

        #endregion
        #region "Statistics"
        public List<RStatistics> mGetStatistics(string strDeComID, string strFdate, string strTdate)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;
                strSQL = "DELETE FROM ACC_STATISTICS ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO ACC_STATISTICS(STATISTICS_NAME,STATISTICS_COUNT,STATISTICS_TYPE) ";
                strSQL = strSQL + "SELECT 'Group',COUNT(GR_NAME),1 FROM ACC_LEDGERGROUP ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_STATISTICS(STATISTICS_NAME,STATISTICS_COUNT,STATISTICS_TYPE) ";
                strSQL = strSQL + "SELECT 'Ledger',COUNT(LEDGER_NAME),1 FROM ACC_LEDGER ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_STATISTICS(STATISTICS_NAME,STATISTICS_COUNT,STATISTICS_TYPE) ";
                strSQL = strSQL + "SELECT 'Stock Group',COUNT(STOCKGROUP_NAME),1 FROM INV_STOCKGROUP ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_STATISTICS(STATISTICS_NAME,STATISTICS_COUNT,STATISTICS_TYPE) ";
                strSQL = strSQL + "SELECT 'Stock Item',COUNT(STOCKITEM_NAME),1 FROM INV_STOCKITEM ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_STATISTICS(STATISTICS_NAME,STATISTICS_COUNT,STATISTICS_TYPE) ";
                strSQL = strSQL + "SELECT 'Voucher Types',COUNT(VOUCHER_TYPE_VALUE),1 FROM ACC_VOUCHER_TYPE  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_STATISTICS(STATISTICS_NAME,STATISTICS_COUNT,STATISTICS_TYPE) ";
                strSQL = strSQL + "SELECT 'Units',COUNT(UNIT_SYMBOL) ,1 FROM INV_UNIT_MEASUREMENT  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_STATISTICS(STATISTICS_NAME,STATISTICS_COUNT,STATISTICS_TYPE) ";
                strSQL = strSQL + "SELECT 'Currencies',COUNT(CURRENCY_NAME),1 FROM ACC_CURRENCY  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_STATISTICS(STATISTICS_NAME,STATISTICS_COUNT,STATISTICS_TYPE) ";
                strSQL = strSQL + "SELECT 'Cost Category',COUNT(VECTOR_CATEGORY_NAME),1 FROM VECTOR_CATEGORY ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_STATISTICS(STATISTICS_NAME,STATISTICS_COUNT,STATISTICS_TYPE) ";
                strSQL = strSQL + "SELECT 'Cost Centres',COUNT(VMASTER_NAME) ,1 FROM VECTOR_MASTER   ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_STATISTICS(STATISTICS_NAME,STATISTICS_COUNT) ";
                strSQL = strSQL + "SELECT ACC_VOUCHER_TYPE.VOUCHER_TYPE_NAME,COUNT(ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE) ";
                strSQL = strSQL + "FROM ACC_VOUCHER_TYPE INNER JOIN ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER ON ACC_VOUCHER_TYPE.VOUCHER_TYPE_VALUE = ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE ";
                strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND " + Utility.cvtSQLDateString(strTdate) + ") ";
                strSQL = strSQL + "AND SAMPLE_STATUS =0 AND SP_JOURNAL =0";
                strSQL = strSQL + "GROUP BY ACC_VOUCHER_TYPE.VOUCHER_TYPE_NAME   ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_STATISTICS(STATISTICS_NAME,STATISTICS_COUNT) ";
                strSQL = strSQL + "SELECT 'MPO Commission',COUNT(ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE) ";
                strSQL = strSQL + "FROM ACC_VOUCHER_TYPE INNER JOIN ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER ON ACC_VOUCHER_TYPE.VOUCHER_TYPE_VALUE = ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE ";
                strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND " + Utility.cvtSQLDateString(strTdate) + ") ";
                strSQL = strSQL + "AND SAMPLE_STATUS =0 AND SP_JOURNAL =1";
                strSQL = strSQL + "GROUP BY ACC_VOUCHER_TYPE.VOUCHER_TYPE_NAME   ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_STATISTICS(STATISTICS_NAME,STATISTICS_COUNT) ";
                strSQL = strSQL + "SELECT 'Sales Sample',COUNT(ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE) ";
                strSQL = strSQL + "FROM ACC_VOUCHER_TYPE INNER JOIN ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER ON ACC_VOUCHER_TYPE.VOUCHER_TYPE_VALUE = ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE ";
                strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND " + Utility.cvtSQLDateString(strTdate) + ") ";
                strSQL = strSQL + "AND SAMPLE_STATUS =1 ";
                strSQL = strSQL + "GROUP BY ACC_VOUCHER_TYPE.VOUCHER_TYPE_NAME   ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_STATISTICS(STATISTICS_NAME,STATISTICS_COUNT) ";
                strSQL = strSQL + "SELECT 'Consumption',COUNT(INV_REF_NO)  FROM INV_MASTER ";
                strSQL = strSQL + " WHERE INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION + " ";
                strSQL = strSQL + "AND (INV_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strTdate) + " )";
                strSQL = strSQL + " AND INV_MANU_VOUCHER_AUTO=0 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_STATISTICS(STATISTICS_NAME,STATISTICS_COUNT) ";
                strSQL = strSQL + "SELECT 'Finished Goods',COUNT(INV_REF_NO) FROM INV_MASTER ";
                strSQL = strSQL + " WHERE INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_FINISHED_GOODS + " ";
                strSQL = strSQL + "AND (INV_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strTdate) + " )";
                strSQL = strSQL + " AND INV_MANU_VOUCHER_AUTO=0 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_STATISTICS(STATISTICS_NAME,STATISTICS_COUNT) ";
                strSQL = strSQL + "SELECT 'Physical Stock',COUNT(INV_REF_NO) FROM INV_MASTER ";
                strSQL = strSQL + " WHERE INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_PHYSICAL + " ";
                strSQL = strSQL + "AND (INV_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strTdate) + " )";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_STATISTICS(STATISTICS_NAME,STATISTICS_COUNT) ";
                strSQL = strSQL + "SELECT 'Transfer',COUNT(INV_REF_NO) FROM INV_MASTER ";
                strSQL = strSQL + " WHERE INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                strSQL = strSQL + "AND (INV_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strTdate) + " )";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_STATISTICS(STATISTICS_NAME,STATISTICS_COUNT) ";
                strSQL = strSQL + "SELECT 'Stock Damage',COUNT(INV_REF_NO) FROM INV_MASTER ";
                strSQL = strSQL + " WHERE INV_VOUCHER_TYPE = '" + (int)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE + "' ";
                strSQL = strSQL + "AND (INV_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strTdate) + " )";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO ACC_STATISTICS(STATISTICS_NAME,STATISTICS_COUNT) ";
                strSQL = strSQL + "SELECT 'Manufacturing Voucher',COUNT(INV_REF_NO) FROM INV_MASTER ";
                strSQL = strSQL + " WHERE INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_VOUCHER + " ";
                strSQL = strSQL + "AND (INV_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strTdate) + " )";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                cmdInsert.Transaction.Commit();


                List<RStatistics> oooStatistics = new List<RStatistics>();
                strSQL = "SELECT  STATISTICS_NAME, STATISTICS_COUNT, STATISTICS_TYPE ";
                strSQL = strSQL + "FROM  ACC_STATISTICS AS ACC_STATISTICS ";
                strSQL = strSQL + "ORDER BY STATISTICS_TYPE ASC, STATISTICS_SERIAL ";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RStatistics oLedg = new RStatistics();
                    oLedg.strStatisticname = dr["STATISTICS_NAME"].ToString();
                    oLedg.dblCount = Convert.ToDouble(dr["STATISTICS_COUNT"].ToString());
                    oLedg.dblType = Convert.ToInt16(dr["STATISTICS_TYPE"]);
                    oooStatistics.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RStatistics oLedg = new RStatistics();
                    oLedg.strStatisticname = "";
                    oLedg.dblCount = 0;
                    oLedg.dblType = 0;
                    oooStatistics.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return oooStatistics;
            }
        }
        #endregion
        #region "Audit"
        public List<RAudit> mGetAudit(string strDeComID, string strFdate, string strTDate, int intVtype, string strLedger, int intROption)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RAudit> oooStatistics = new List<RAudit>();

                if (intROption == 1)
                {
                    strSQL = "SELECT  AUDIT_DATE, AUDIT_TYPE, AUDIT_NO, USER_LOGIN_NAME, AUDIT_TXN, AUDIT_AMOUNT, INSERT_DATE ";
                    strSQL = strSQL + "FROM   SYS_AUDIT AS SYS_AUDIT ";
                    strSQL = strSQL + "WHERE (AUDIT_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                }
                else
                {
                    strSQL = "SELECT  AUDIT_DATE, AUDIT_TYPE, AUDIT_NO, USER_LOGIN_NAME, AUDIT_TXN, AUDIT_AMOUNT,INSERT_DATE,FORMAT( INSERT_DATE,'yyyy-MM-dd') AS Insertdate ";
                    strSQL = strSQL + "FROM   SYS_AUDIT AS SYS_AUDIT ";
                    strSQL = strSQL + "WHERE (FORMAT( INSERT_DATE,'yyyy-MM-dd') BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                }

                if (intVtype != 0)
                {
                    strSQL = strSQL + "AND (MODULE_TYPE = " + intVtype + ") ";
                }

                if (strLedger != "<<All User>>")
                {
                    strSQL = strSQL + " AND (USER_LOGIN_NAME = '" + strLedger + "') ";
                }

                strSQL = strSQL + "ORDER BY USER_LOGIN_NAME, AUDIT_TYPE ";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RAudit oLedg = new RAudit();
                    oLedg.strAuditDate = Convert.ToDateTime(dr["AUDIT_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.strAuditType = dr["AUDIT_TYPE"].ToString();
                    oLedg.strAuditNo = dr["AUDIT_NO"].ToString();
                    oLedg.strUserLoginName = dr["USER_LOGIN_NAME"].ToString();
                    oLedg.dblAuditText = Convert.ToDouble(dr["AUDIT_TXN"].ToString());
                    oLedg.dblAuditamount = Convert.ToDouble(dr["AUDIT_AMOUNT"].ToString());
                    oLedg.strInsertDate = Convert.ToDateTime(dr["INSERT_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.strDelete = Convert.ToDateTime(dr["INSERT_DATE"]).ToString("h:mm:ss tt");
                    oooStatistics.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RAudit oLedg = new RAudit();
                    oLedg.strAuditDate = "";
                    oLedg.strAuditType = "";
                    oLedg.strAuditNo = "";
                    oLedg.strUserLoginName = "";
                    oLedg.dblAuditText = 0;
                    oLedg.dblAuditamount = 0;
                    oLedg.strInsertDate = "";
                    oooStatistics.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return oooStatistics;
            }
        }

        #endregion
        #region "Budget"
        public List<RAccountsGroup> mGetBudgetledgerList(string strDeComID)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RAccountsGroup> oooChequePrint = new List<RAccountsGroup>();
                strSQL = "SELECT DISTINCT LEDGER_NAME FROM  ACC_BUDGET_DETAIL ";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oooChequePrint.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strLedgerName = "";
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return oooChequePrint;
            }
        }
        public List<RAccountsGroup> mGetBudget(string strDeComID, string strString, string strFdate, string strTdate)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RAccountsGroup> oooChequePrint = new List<RAccountsGroup>();
                strSQL = "SELECT LEDGER_PRIMARY_TYPE, LEDGER_NAME, BUDGET_FROM_DATE, BUDGET_TO_DATE, isnull(BUDGET_AMOUNT,0) BUDGET_AMOUNT, isnull(AMOUNT,0) AMOUNT ";
                strSQL = strSQL + "FROM  ACC_VOUCHER_LEDGER_BUDGET_DETAILS_VIEW ";
                strSQL = strSQL + " WHERE(BUDGET_FROM_DATE >= (" + Utility.cvtSQLDateString(strFdate) + ") AND BUDGET_TO_DATE <=(" + Utility.cvtSQLDateString(strTdate) + "))  and BUDGET_AMOUNT>0 ";
                if (strString != "")
                {
                    strSQL = strSQL + "AND(LEDGER_NAME = '" + strString + "')";
                }
                strSQL = strSQL + "ORDER BY LEDGER_NAME,BUDGET_FROM_DATE ";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.intPrimaryType = Convert.ToInt16(dr["LEDGER_PRIMARY_TYPE"].ToString());
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.strFromDate = Convert.ToDateTime(dr["BUDGET_FROM_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.strToDate = Convert.ToDateTime(dr["BUDGET_TO_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.dblMnauAmount = Convert.ToDouble(dr["BUDGET_AMOUNT"].ToString());
                    oLedg.dblAmount = Convert.ToDouble(dr["AMOUNT"].ToString());
                    oooChequePrint.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.intPrimaryType = 0;
                    oLedg.strLedgerName = "";
                    oLedg.strFromDate = "";
                    oLedg.strToDate = "";
                    oLedg.dblMnauAmount = 0;
                    oLedg.dblAmount = 0;
                    oooChequePrint.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return oooChequePrint;
            }
        }
        #endregion
        #region "SecurityReport"

        public List<RAudit> mgetUserPrivilage(string strDeComID, string strUserName)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RAudit> ooAccLedger = new List<RAudit>();

                strSQL = "SELECT DISTINCT ";
                strSQL = strSQL + "USER_FORM_CONFIG.SL_NO, USER_PRIVILEGES_CHILD.PRI_COMPONENT, USER_FORM_CONFIG.FORM_NAME, USER_FORM_CONFIG.MODULE_TYPE, USER_FORM_CONFIG.MODE_TYPE, ";
                strSQL = strSQL + "(CASE WHEN USER_PRIVILEGES_CHILD.PRI_ADD = 1 THEN 'Yes' ELSE 'No' END) AS AddStatus, (CASE WHEN USER_PRIVILEGES_CHILD.PRI_EDIT = 1 THEN 'Yes' ELSE 'No' END) AS EditStatus, ";
                strSQL = strSQL + "(CASE WHEN USER_PRIVILEGES_CHILD.PRI_DELETE = 1 THEN 'Yes' ELSE 'No' END) AS DeleteStatus, USER_CONFIG.DEPARTMENT, USER_CONFIG.DESIGNATION ";
                strSQL = strSQL + "FROM  USER_FORM_CONFIG INNER JOIN ";
                strSQL = strSQL + "USER_PRIVILEGES_CHILD ON USER_FORM_CONFIG.SL_NO = USER_PRIVILEGES_CHILD.PRI_COMPONENT INNER JOIN ";
                strSQL = strSQL + "USER_CONFIG ON USER_PRIVILEGES_CHILD.USER_LOGIN_NAME = USER_CONFIG.USER_LOGIN_NAME ";
                strSQL = strSQL + "WHERE (USER_PRIVILEGES_CHILD.USER_LOGIN_NAME = '" + strUserName + "') AND (USER_PRIVILEGES_CHILD.PRI_ADD + USER_PRIVILEGES_CHILD.PRI_EDIT + USER_PRIVILEGES_CHILD.PRI_DELETE >= 1) ";
                strSQL = strSQL + "UNION ALL ";
                strSQL = strSQL + "SELECT 0 AS SL_NO, 10 AS PRI_COMPONENT, ACC_BRANCH.BRANCH_NAME, 10 AS MODULE_TYPE, 1 AS MODE_TYPE, 'Yes' AS Expr1, '' AS Expr2, '' AS Expr3, '' AS Expr4, '' AS Expr5 ";
                strSQL = strSQL + "FROM USER_PRIVILEGES_BRANCH INNER JOIN ";
                strSQL = strSQL + "ACC_BRANCH ON USER_PRIVILEGES_BRANCH.BRANCH_ID = ACC_BRANCH.BRANCH_ID ";
                strSQL = strSQL + "WHERE (USER_PRIVILEGES_BRANCH.USER_LOGIN_NAME = '" + strUserName + "') ";
                strSQL = strSQL + "UNION ALL ";
                strSQL = strSQL + "SELECT 0 AS SL_NO, 0 AS PRI_COMPONENT, GODOWNS_NAME, 11 AS MODULE_TYPE, 1 AS MODE_TYPE, 'Yes' AS Expr1, '' AS Expr2, '' AS Expr3, '' AS Expr4, '' AS Expr5 ";
                strSQL = strSQL + "FROM USER_PRIVILEGES_LOCATION ";
                strSQL = strSQL + "WHERE (USER_LOGIN_NAME = '" + strUserName + "') ";
                strSQL = strSQL + "UNION ALL ";
                strSQL = strSQL + "SELECT 0 AS SL_NO, 0 AS PRI_COMPONENT, LEDGER_GROUP_NAME, 12 AS MODULE_TYPE, 1 AS MODE_TYPE, 'Yes' AS Expr1, '' AS Expr2, '' AS Expr3, '' AS Expr4, '' AS Expr5 ";
                strSQL = strSQL + "FROM USER_PRIVILEGES_COLOR ";
                strSQL = strSQL + "WHERE (USER_LOGIN_NAME = '" + strUserName + "') ";
                strSQL = strSQL + "UNION ALL ";
                strSQL = strSQL + "SELECT  0 AS SL_NO, 0 AS PRI_COMPONENT, STOCKGROUP_NAME, 13 AS MODULE_TYPE, 1 AS MODE_TYPE, 'Yes' AS Expr1, '' AS Expr2, '' AS Expr3, '' AS Expr4, '' AS Expr5 ";
                strSQL = strSQL + "FROM  USER_PRIVILEGES_STOCKGROUP ";
                strSQL = strSQL + "WHERE (USER_LOGIN_NAME = '" + strUserName + "') ";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RAudit oLedg = new RAudit();
                    oLedg.strFromname = dr["FORM_NAME"].ToString();
                    oLedg.intModuletype = Convert.ToInt16(dr["MODULE_TYPE"].ToString());
                    oLedg.intModetype = Convert.ToInt16(dr["MODE_TYPE"].ToString());
                    oLedg.strAdd = dr["AddStatus"].ToString();
                    oLedg.strEdit = dr["EditStatus"].ToString();
                    oLedg.strDelete = dr["DeleteStatus"].ToString();
                    oLedg.strDepartment = dr["DEPARTMENT"].ToString();
                    oLedg.strDesignation = dr["DESIGNATION"].ToString();
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RAudit oLedg = new RAudit();
                    oLedg.strFromname = "";
                    oLedg.intModuletype = 0;
                    oLedg.intModetype = 0;
                    oLedg.strAdd = "";
                    oLedg.strEdit = "";
                    oLedg.strDelete = "";
                    oLedg.strDepartment = "";
                    oLedg.strDesignation = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }

        #endregion
        #region "StockSummary S Price Wise"

        public List<RStockInformation> mloadCategoryGroup(string strDeComID, int intmode)
        {


            // intmode 1=all , 2=category, 3= Groupwise
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RStockInformation> ooAccLedger = new List<RStockInformation>();


                if (intmode == 2)
                {
                    strSQL = "select distinct  STOCKCATEGORY_NAME from INV_STOCKITEM where STOCKCATEGORY_NAME != 'null'order by STOCKCATEGORY_NAME desc ";
                }

                if (intmode == 3)
                {
                    strSQL = "	select distinct STOCKGROUP_NAME from INV_STOCKGROUP order by STOCKGROUP_NAME";
                }
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    if (intmode == 2)
                    {
                        oLedg.strGroupName = dr["STOCKCATEGORY_NAME"].ToString();
                    }
                    else
                    {
                        oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();

                    }

                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strGroupName = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }
        public List<RStockInformation> mGetSalesPriceItem(string strCon, string strgroupName, string strcategory)
        {
            connstring = Utility.SQLConnstringComSwitch(strCon);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmdInsert = new SqlCommand();
                cmdInsert.Connection = gcnMain;
                strSQL = "DELETE FROM INV_SALES_PRICE_RPT ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                SqlDataReader dr;
                List<RStockInformation> ooAccLedger = new List<RStockInformation>();
                strSQL = "SELECT STOCKITEM_NAME,STOCKITEM_OPENING_RATE FROM INV_STOCKITEM  ";
                //WHERE STOCKITEM_STATUS =0
                if (strgroupName != "")
                {
                    strSQL = strSQL + "WHERE  (STOCKGROUP_NAME = '" + strgroupName + "') ";

                }

                if (strcategory != "")
                {
                    strSQL = strSQL + "WHERE  (STOCKCATEGORY_NAME  = '" + strcategory + "') ";
                }
                //strSQL = strSQL + "WHERE  (STOCKITEM_NAME  = 'Gastrolaid 30ml Inner Carton') ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString().Replace("'", "''") + "|" + 0 + "~";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;
            }
        }
        public string mInsertTempSaleaPrcice(string strCon, string striItemName, string strLevel)
        {
            string strItemNameNew = "";
            SqlDataReader dr;
            SqlCommand cmdInsert = new SqlCommand();
            connstring = Utility.SQLConnstringComSwitch(strCon);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();


                cmdInsert.Connection = gcnMain;
                string[] words = striItemName.Split('~');
                foreach (string branch in words)
                {
                    string[] words1 = branch.Split('|');
                    if (words1[0].ToString() != "")
                    {
                        strSQL = "SELECT STOCKITEM_NAME,SALES_PRICE_EFFECTIVE_DATE,SALES_PRICE_AMOUNT  from INV_SALES_PRICE ";
                        strSQL = strSQL + "WHERE PRICE_LEVEL_NAME ='" + strLevel + "' ";
                        strSQL = strSQL + " AND STOCKITEM_NAME ='" + words1[0] + "' ";
                        strSQL = strSQL + "ORDER by SALES_PRICE_EFFECTIVE_DATE DESC ";
                        cmdInsert.CommandText = strSQL;
                        dr = cmdInsert.ExecuteReader();
                        if (dr.Read())
                        {
                            strItemNameNew = strItemNameNew + dr["STOCKITEM_NAME"].ToString().Replace("'", "''") + "|" + Convert.ToDateTime(dr["SALES_PRICE_EFFECTIVE_DATE"]).ToString("dd/MM/yyyy") + "|" + dr["SALES_PRICE_AMOUNT"] + "|" + words1[1] + "~";
                        }
                        else
                        {
                            dr.Close();
                            strSQL = "SELECT STOCKITEM_NAME,INV_DATE,INV_TRAN_RATE  from INV_TRAN ";
                            strSQL = strSQL + " WHERE STOCKITEM_NAME ='" + words1[0] + "' ";
                            strSQL = strSQL + " AND INV_VOUCHER_TYPE in (33) ";
                            strSQL = strSQL + " AND GODOWNS_NAME ='Main Location'  ";
                            strSQL = strSQL + "ORDER by INV_DATE DESC ";
                            cmdInsert.CommandText = strSQL;
                            dr = cmdInsert.ExecuteReader();
                            if (dr.Read())
                            {
                                if (Convert.ToDouble(dr["INV_TRAN_RATE"]) != 0)
                                {
                                    strItemNameNew = strItemNameNew + dr["STOCKITEM_NAME"].ToString().Replace("'", "''") + "|" + Convert.ToDateTime(dr["INV_DATE"]).ToString("dd/MM/yyyy") + "|" + dr["INV_TRAN_RATE"] + "|" + words1[1] + "~";
                                }
                                else
                                {
                                    dr.Close();
                                    //strItemNameNew = strItemNameNew + words1[0] + "|" + "" + "|" + 0 + "|" + words1[1] + "~";
                                    strSQL = "SELECT STOCKITEM_NAME,INV_DATE,INV_TRAN_RATE  from INV_TRAN ";
                                    strSQL = strSQL + " WHERE STOCKITEM_NAME ='" + words1[0] + "' ";
                                    strSQL = strSQL + " AND INV_VOUCHER_TYPE in (0) ";
                                    strSQL = strSQL + " AND GODOWNS_NAME ='Main Location'  ";
                                    strSQL = strSQL + "ORDER by INV_DATE DESC ";
                                    cmdInsert.CommandText = strSQL;
                                    dr = cmdInsert.ExecuteReader();
                                    if (dr.Read())
                                    {
                                        strItemNameNew = strItemNameNew + dr["STOCKITEM_NAME"].ToString().Replace("'", "''") + "|" + "" + "|" + dr["INV_TRAN_RATE"] + "|" + words1[1] + "~";
                                    }
                                }
                            }
                            else
                            {
                                dr.Close();
                                //strItemNameNew = strItemNameNew + words1[0] + "|" + "" + "|" + 0 + "|" + words1[1] + "~";
                                strSQL = "SELECT STOCKITEM_NAME,INV_DATE,INV_TRAN_RATE  from INV_TRAN ";
                                strSQL = strSQL + " WHERE STOCKITEM_NAME ='" + words1[0] + "' ";
                                strSQL = strSQL + " AND INV_VOUCHER_TYPE in (0) ";
                                strSQL = strSQL + " AND GODOWNS_NAME ='Main Location'  ";
                                strSQL = strSQL + "ORDER by INV_DATE DESC ";
                                cmdInsert.CommandText = strSQL;
                                dr = cmdInsert.ExecuteReader();
                                if (dr.Read())
                                {
                                    strItemNameNew = strItemNameNew + dr["STOCKITEM_NAME"].ToString().Replace("'", "''") + "|" + "" + "|" + dr["INV_TRAN_RATE"] + "|" + words1[1] + "~";
                                }

                            }
                        }



                        dr.Close();
                    }
                }

                if (strItemNameNew != "")
                {
                    string[] wordsnew = strItemNameNew.Split('~');
                    foreach (string branch in wordsnew)
                    {
                        string[] words1 = branch.Split('|');
                        if (words1[0].ToString() != "")
                        {
                            SqlTransaction myTrans;
                            myTrans = gcnMain.BeginTransaction();
                            cmdInsert.Transaction = myTrans;
                            strSQL = "INSERT INTO INV_SALES_PRICE_RPT(STOCKITEM_NAME,SALES_PRICE_EFFECTIVE_DATE,SALES_PRICE_AMOUNT)";
                            strSQL = strSQL + "VALUES(";
                            strSQL = strSQL + "'" + words1[0] + "' ";
                            if (words1[1].ToString() != "")
                            {
                                strSQL = strSQL + "," + Utility.cvtSQLDateString(words1[1]) + "";
                            }
                            else
                            {
                                strSQL = strSQL + ",NULL";
                            }
                            if (words1[2].ToString() != "0")
                            {
                                strSQL = strSQL + "," + words1[2] + "";
                            }
                            else
                            {
                                strSQL = strSQL + "," + words1[3] + "";
                            }
                            strSQL = strSQL + ")";
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();
                            cmdInsert.Transaction.Commit();
                        }
                    }
                }
                gcnMain.Close();

                return "1";
            }


        }
        public List<RStockInformation> mgetStockSummarySPriceWise(string strDeComID, string strString, int intmode)
        {


            // intmode 1=all , 2=category, 3= Groupwise
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmdInsert = new SqlCommand();
                cmdInsert.Connection = gcnMain;
                SqlDataReader dr;
                List<RStockInformation> ooAccLedger = new List<RStockInformation>();
                //strSQL = "SELECT INV_TRAN_QTY_SALES_PRICE_QRY.STOCKITEM_NAME, INV_TRAN_QTY_SALES_PRICE_QRY.INV_TRAN_QUANTITY, INV_STOCKITEM.STOCKITEM_ALIAS, INV_STOCKITEM.STOCKCATEGORY_NAME, ";
                //strSQL = strSQL + "INV_STOCKITEM.STOCKITEM_BASEUNITS, ( case when  INV_SALES_PRICE_RPT.SALES_PRICE_AMOUNT is null then 0 else INV_SALES_PRICE_RPT.SALES_PRICE_AMOUNT end ) as RateAmt,INV_STOCKITEM.STOCKGROUP_NAME ";
                //strSQL = strSQL + "FROM INV_TRAN_QTY_SALES_PRICE_QRY AS INV_TRAN_QTY_SALES_PRICE_QRY INNER JOIN ";
                //strSQL = strSQL + "INV_STOCKITEM AS INV_STOCKITEM ON INV_TRAN_QTY_SALES_PRICE_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME LEFT OUTER JOIN ";
                //strSQL = strSQL + "INV_SALES_PRICE_RPT AS INV_SALES_PRICE_RPT ON INV_TRAN_QTY_SALES_PRICE_QRY.STOCKITEM_NAME = INV_SALES_PRICE_RPT.STOCKITEM_NAME ";
                //if (intmode == 2)
                //{
                //    strSQL = strSQL + "WHERE  (INV_STOCKITEM.STOCKCATEGORY_NAME  = '" + strString + "') ";
                //}

                //if (intmode == 3)
                //{
                //    strSQL = strSQL + "WHERE  (INV_STOCKITEM.STOCKGROUP_NAME = '" + strString + "') ";
                //}
                //strSQL = strSQL + "ORDER BY INV_STOCKITEM.STOCKITEM_PRIMARY_GROUP, INV_STOCKITEM.STOCKITEM_NAME ";

                strSQL = "SELECT  ";
                strSQL = strSQL + "INV_TRAN_QTY_SALES_PRICE_QRY.STOCKITEM_NAME, INV_TRAN_QTY_SALES_PRICE_QRY.INV_TRAN_QUANTITY,   ";
                strSQL = strSQL + "INV_STOCKITEM.STOCKITEM_ALIAS, INV_STOCKITEM.STOCKCATEGORY_NAME, INV_STOCKITEM.STOCKITEM_BASEUNITS,INV_STOCKITEM.STOCKGROUP_NAME,  ";
                strSQL = strSQL + "ISNULL(INV_SALES_PRICE_RPT.SALES_PRICE_AMOUNT,0) RateAmt  ";
                strSQL = strSQL + "FROM  ";
                strSQL = strSQL + "INV_TRAN_QTY_SALES_PRICE_QRY INV_TRAN_QTY_SALES_PRICE_QRY INNER JOIN INV_STOCKITEM INV_STOCKITEM ON INV_TRAN_QTY_SALES_PRICE_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME LEFT OUTER JOIN INV_SALES_PRICE_RPT INV_SALES_PRICE_RPT ON INV_TRAN_QTY_SALES_PRICE_QRY.STOCKITEM_NAME = INV_SALES_PRICE_RPT.STOCKITEM_NAME   ";
                if (intmode == 2)
                {
                    strSQL = strSQL + "WHERE  (INV_STOCKITEM.STOCKCATEGORY_NAME  = '" + strString + "') ";
                }

                if (intmode == 3)
                {
                    strSQL = strSQL + "WHERE  (INV_STOCKITEM.STOCKGROUP_NAME = '" + strString + "') ";
                }
                strSQL = strSQL + "ORDER BY  ";
                strSQL = strSQL + "INV_STOCKITEM.STOCKITEM_PRIMARY_GROUP,INV_STOCKITEM.STOCKITEM_NAME   ";


                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.dblOpnQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                    oLedg.strItemAlias = dr["STOCKITEM_ALIAS"].ToString();
                    oLedg.strItemCategory = dr["STOCKCATEGORY_NAME"].ToString();
                    oLedg.StockItemBASEUNITS = dr["STOCKITEM_BASEUNITS"].ToString();
                    oLedg.dblOpnRate = Convert.ToDouble(dr["RateAmt"].ToString());
                    oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strItemName = "";
                    oLedg.dblOpnQty = 0;
                    oLedg.strItemAlias = "";
                    oLedg.strItemCategory = "";
                    oLedg.StockItemBASEUNITS = "";
                    oLedg.dblOpnRate = 0;
                    oLedg.strGroupName = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;
            }
        }
        #endregion
        #region "Doctor Collection"
        public List<RAccountsGroup> mGetAccountsDoctotorvoucher(string strDeComID, string strRefNo)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                strSQL = "SELECT COMP_REF_NO, LEDGER_NAME_MERZE, COMP_VOUCHER_NARRATION, COMP_VOUCHER_NET_AMOUNT, Doctors, VT_TRAN_AMOUNT, COMP_VOUCHER_DATE ";
                strSQL = strSQL + "FROM V_DOCTORRS_COLLECTION ";
                if (strRefNo != "")
                {
                    strSQL = strSQL + "WHERE (COMP_REF_NO = '" + strRefNo + "') ";
                }
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strRefNo = Utility.Mid(dr["COMP_REF_NO"].ToString(), 6, dr["COMP_REF_NO"].ToString().Length - 6);
                    oLedg.strLedgerName = dr["LEDGER_NAME_MERZE"].ToString();
                    oLedg.strSalesRep = dr["Doctors"].ToString();
                    oLedg.strDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.dblDebit = Convert.ToDouble(dr["COMP_VOUCHER_NET_AMOUNT"].ToString());
                    oLedg.dblCredit = Convert.ToDouble(dr["VT_TRAN_AMOUNT"].ToString());
                    if (dr["COMP_VOUCHER_NARRATION"].ToString() != "")
                    {
                        oLedg.strNarration = dr["COMP_VOUCHER_NARRATION"].ToString();
                    }

                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strRefNo = "";
                    oLedg.strLedgerName = "";
                    oLedg.strDate = "";
                    oLedg.dblDebit = 0;
                    oLedg.dblCredit = 0;
                    oLedg.strNarration = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }

        #endregion
        #region "CreditlimtListAll"
        public List<RCreditLimit> mDisplayCreditLimitListAll(string strDeComID, string strKey, string strSeclection)
        {
            string strSQL = null, strfromdate = "", strTodate="";
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                List<RCreditLimit> oogrp = new List<RCreditLimit>();
                if (strSeclection == "TA")
                {

                    strSQL = "SELECT ACC_LEDGER.LEDGER_NAME_MERZE ,SALES_TARGET_ACHIEVEMENT.TARGET_ACHIEVE_FROM_DATE,MONTH(SALES_TARGET_ACHIEVEMENT.TARGET_ACHIEVE_FROM_DATE) as MONTH,SALES_TARGET_ACHIEVEMENT.TARGET_ACHIEVE_TO_DATE,SALES_TARGET_ACHIEVEMENT.TARGET_ACHIEVE_MONTH_ID as MONTH_ID, ";
                    strSQL = strSQL + "SALES_TARGET_ACHIEVEMENT.TARGET_ACHIEVE_AMOUNT as CREDIT_LIMIT_AMOUNT,COL_POS,ROW_POS ";
                    strSQL = strSQL + "FROM SALES_TARGET_ACHIEVEMENT,ACC_LEDGER WHERE ACC_LEDGER.LEDGER_NAME=SALES_TARGET_ACHIEVEMENT.LEDGER_NAME ";
                    strSQL = strSQL + "AND SALES_TARGET_ACHIEVEMENT.TARGET_ACHIEVE_KEY='" + strKey + "' ";
                    strSQL = strSQL + "ORDER BY  ACC_LEDGER.LEDGER_NAME_MERZE,SALES_TARGET_ACHIEVEMENT.TARGET_ACHIEVE_TO_DATE ";
                }
                else if (strSeclection == "CT")
                {
                    strSQL = "SELECT  SALES_COLL_TARGET_TRAN.COLL_TARGET_FROM_DATE ,MONTH(SALES_COLL_TARGET_TRAN.COLL_TARGET_FROM_DATE) as MONTH, SALES_COLL_TARGET_TRAN.COLL_TARGET_TO_DATE, SALES_COLL_TARGET_TRAN.COLL_TARGET_OPENING, ";
                    strSQL = strSQL + "SALES_COLL_TARGET_TRAN.MONTH_ID AS MONTH_ID, SALES_COLL_TARGET_TRAN.COLL_TARGET_COLL_PER, SALES_COLL_TARGET_TRAN.COL_POS, SALES_COLL_TARGET_TRAN.ROW_POS, ";
                    strSQL = strSQL + "SALES_COLL_TARGET_TRAN.COLL_TARGET_COLL_AMT AS CREDIT_LIMIT_AMOUNT, ACC_LEDGER.LEDGER_NAME_MERZE ";
                    strSQL = strSQL + "FROM  SALES_COLL_TARGET_TRAN INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER ON SALES_COLL_TARGET_TRAN.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                    strSQL = strSQL + "where COLL_TARGET_KEY='" + strKey + "' ";
                    strSQL = strSQL + "ORDER BY month(SALES_COLL_TARGET_TRAN.COLL_TARGET_FROM_DATE), SALES_COLL_TARGET_TRAN.LEDGER_NAME, SALES_COLL_TARGET_TRAN.COLL_TARGET_TO_DATE ";
                }
                else if (strSeclection == "MC")
                {
                    strSQL = "SELECT ACC_LEDGER.LEDGER_NAME_MERZE,SALES_CREDIT_LIMIT.CREDIT_LIMIT_KEY_REF,SALES_CREDIT_LIMIT.CREDIT_LIMIT_FROM_DATE,MONTH(SALES_CREDIT_LIMIT.CREDIT_LIMIT_FROM_DATE) as MONTH,SALES_CREDIT_LIMIT.CREDIT_LIMIT_TO_DATE,SALES_CREDIT_LIMIT.CREDIT_LIMIT_MONTH_ID As  MONTH_ID,SALES_CREDIT_LIMIT.COL_POS,SALES_CREDIT_LIMIT.ROW_POS,SALES_CREDIT_LIMIT.CREDIT_LIMIT_AMOUNT ";
                    strSQL = strSQL + "FROM SALES_CREDIT_LIMIT ,ACC_LEDGER ";
                    strSQL = strSQL + "where SALES_CREDIT_LIMIT.LEDGER_NAME= ACC_LEDGER.LEDGER_NAME ";
                    strSQL = strSQL + "and CREDIT_LIMIT_KEY='" + strKey + "' ";
                    strSQL = strSQL + "ORDER BY month(SALES_CREDIT_LIMIT.CREDIT_LIMIT_FROM_DATE)  ";
                }

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RCreditLimit ogrp = new RCreditLimit();
                    ogrp.strLedgerName = dr["LEDGER_NAME_MERZE"].ToString();
                    ogrp.strDate = dr["MONTH_ID"].ToString();
                    ogrp.dblCriditLimit1 = Convert.ToDouble(dr["MONTH"].ToString());
                    ogrp.dblAmount = Convert.ToDouble(dr["CREDIT_LIMIT_AMOUNT"].ToString());
                    if (strSeclection == "MC")
                    {
                        strfromdate = Convert.ToDateTime(dr["CREDIT_LIMIT_FROM_DATE"]).ToString("dd");
                        strTodate = Convert.ToDateTime(dr["CREDIT_LIMIT_TO_DATE"]).ToString("dd");
                        ogrp.strFROM_DATE = strfromdate + " to  " + strTodate;
                    }

                    oogrp.Add(ogrp);

                }
                if (!dr.HasRows)
                {
                    RCreditLimit ogrp = new RCreditLimit();
                    ogrp.strLedgerName = "";
                    ogrp.strMonthID = "";
                    ogrp.dblAmount = 0;
                    ogrp.strFROM_DATE = "";
                    oogrp.Add(ogrp);
                }
                dr.Close();
                gcnMain.Dispose();
                return oogrp;

            }
        }
        #endregion
        #region "Group Comm"
        public List<RStockInformation> mGetGroupCommissionWithSales(string strDeComID, string strFdate, string strTDate, string strString)
        {
            string strSQL = null;
            SqlDataReader dr;

            List<RStockInformation> ooAccLedger = new List<RStockInformation>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmdInsert = new SqlCommand();
                strSQL = "select  GM.GR_NAME, SG.STOCKGROUP_NAME,GCM.COMM_STATUS, GCT.AMOUNT_FORM, GCT.AMOUNT_TO, GCT.GROUP_PERCENTAGES ";
                strSQL = strSQL + ",sum(B.BILL_NET_AMOUNT)SalesAmount, count(Distinct  B.COMP_REF_NO)NoOfInvo ,sum(B.BILL_ADD_LESS_AMOUNT)Commission ";
                strSQL = strSQL + "from INV_GROUP_MASTER GM, INV_STOCKGROUP SG ,INV_GROUP_COMMISSION_MASTER GCM, INV_GROUP_COMMISSION_TRAN GCT,ACC_BILL_TRAN B ";
                strSQL = strSQL + "where  GM.GR_NAME=SG.GR_NAME and GM.GR_NAME= GCM.STOCKGROUP_NAME and GCM.GROUP_COMMISSION_KEY= GCT.GROUP_COMMISSION_KEY and B.G_COMM_PER=GCT.GROUP_PERCENTAGES ";
                strSQL = strSQL + "and  SG.STOCKGROUP_NAME= B.STOCKGROUP_NAME ";
                //strSQL = strSQL + "and  GCM.EFFECTIVE_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "and   B.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND " + Utility.cvtSQLDateString(strTDate) + " and B.G_COMM_PER>0 ";
                strSQL = strSQL + "group by GM.GR_NAME, SG.STOCKGROUP_NAME,GCM.COMM_STATUS, GCT.AMOUNT_FORM, GCT.AMOUNT_TO, GCT.GROUP_PERCENTAGES ";
                strSQL = strSQL + "ORDER BY GM.GR_NAME, SG.STOCKGROUP_NAME, GCT.GROUP_PERCENTAGES ";

                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();

                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    //oLedg.strKey = dr["GROUP_COMMISSION_KEY"].ToString();
                    oLedg.strGroupName = dr["GR_NAME"].ToString();
                    oLedg.strGroupParent = dr["STOCKGROUP_NAME"].ToString();
                    oLedg.dblInwAmount = Math.Abs(Convert.ToDouble(dr["AMOUNT_FORM"]));
                    oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["AMOUNT_TO"]));
                    oLedg.dblCommissionValue = Math.Abs(Convert.ToDouble(dr["GROUP_PERCENTAGES"]));
                    oLedg.dblOpnAmnt = Math.Abs(Convert.ToDouble(dr["SalesAmount"]));
                    oLedg.dblOpnQty = Math.Abs(Convert.ToDouble(dr["NoOfInvo"]));
                    oLedg.dblOutwardRate = Math.Abs(Convert.ToDouble(dr["Commission"]));
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strKey = "";
                    oLedg.strGroupName = "";
                    oLedg.dblInwAmount = 0;
                    oLedg.dblOutwardAmnt = 0;
                    oLedg.dblCommissionValue = 0;
                    oLedg.dblOpnAmnt = 0;
                    oLedg.dblOpnQty = 0;
                    oLedg.dblOutwardRate = 0;
                    ooAccLedger.Add(oLedg);
                }

                dr.Close();

                gcnMain.Close();
                return ooAccLedger;
            }
        }
        #endregion
        #region "Sales/Collection achieve"
        public List<RAccountsGroup> GetrptSalesCollection(string strDeComID, string strBranchID, string strSelection,
                                                            string strFate, string strTDate, int inttype, int intStatus, int intsummDeta)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                if (intStatus == 1)
                {
                    intStatus = 0;
                }
                else
                {
                    intStatus = 1;
                }

                //if (inttype == 1)
                //{
                if (inttype == 1)
                {
                    strSQL = "SELECT monthno,ZONE,DIVISION,AREA,LEDGER_NAME_MERZE,COMP_VOUCHER_MONTH_ID,SUM(SALESAMNT)SALESAMNT ,ABS(SUM(RECEIPT))RECEIPT FROM VIEW_MPOWISE_SALES_COLLECTION ";
                    strSQL = strSQL + " WHERE LEDGER_STATUS='" + intStatus + "' ";
                    strSQL = strSQL + " AND (COMP_VOUCHER_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    if (strSelection != "")
                    {
                        strSQL = strSQL + " AND LEDGER_NAME='" + strSelection + "' ";
                    }
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + " AND BRANCH_ID='" + strBranchID + "' ";
                    }
                    strSQL = strSQL + "GROUP BY monthno,LEDGER_NAME_MERZE,ZONE,DIVISION,AREA,COMP_VOUCHER_MONTH_ID ";
                    strSQL = strSQL + "ORDER BY LEDGER_NAME_MERZE,monthno ";

                }
                else if (inttype == 2)
                {
                    strSQL = "SELECT monthno,ZONE,'' DIVISION,'' AREA,'' LEDGER_NAME_MERZE,COMP_VOUCHER_MONTH_ID,SUM(SALESAMNT)SALESAMNT ,ABS(SUM(RECEIPT))RECEIPT FROM VIEW_MPOWISE_SALES_COLLECTION ";
                    strSQL = strSQL + " WHERE LEDGER_STATUS='" + intStatus + "' ";
                    strSQL = strSQL + " AND (COMP_VOUCHER_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    if (strSelection != "")
                    {
                        strSQL = strSQL + " AND LEDGER_NAME='" + strSelection + "' ";
                    }
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + " AND BRANCH_ID='" + strBranchID + "' ";
                    }
                    strSQL = strSQL + "GROUP BY monthno,ZONE,COMP_VOUCHER_MONTH_ID ";
                    strSQL = strSQL + "ORDER BY ZONE,monthno ";
                }
                else if (inttype == 3)
                {
                    strSQL = "SELECT monthno,'' ZONE ,DIVISION,'' AREA,'' LEDGER_NAME_MERZE,COMP_VOUCHER_MONTH_ID,SUM(SALESAMNT)SALESAMNT ,ABS(SUM(RECEIPT))RECEIPT FROM VIEW_MPOWISE_SALES_COLLECTION ";
                    strSQL = strSQL + " WHERE LEDGER_STATUS='" + intStatus + "' ";
                    strSQL = strSQL + " AND (COMP_VOUCHER_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    if (strSelection != "")
                    {
                        strSQL = strSQL + " AND LEDGER_NAME='" + strSelection + "' ";
                    }
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + " AND BRANCH_ID='" + strBranchID + "' ";
                    }
                    strSQL = strSQL + "GROUP BY monthno,DIVISION,COMP_VOUCHER_MONTH_ID ";
                    strSQL = strSQL + "ORDER BY DIVISION,monthno ";
                }
                else if (inttype == 4)
                {
                    strSQL = "SELECT monthno,'' ZONE,'' DIVISION,AREA,'' LEDGER_NAME_MERZE,COMP_VOUCHER_MONTH_ID,SUM(SALESAMNT)SALESAMNT ,ABS(SUM(RECEIPT))RECEIPT FROM VIEW_MPOWISE_SALES_COLLECTION ";
                    strSQL = strSQL + " WHERE LEDGER_STATUS='" + intStatus + "' ";
                    strSQL = strSQL + " AND (COMP_VOUCHER_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    if (strSelection != "")
                    {
                        strSQL = strSQL + " AND LEDGER_NAME='" + strSelection + "' ";
                    }
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + " AND BRANCH_ID='" + strBranchID + "' ";
                    }
                    strSQL = strSQL + "GROUP BY monthno,AREA,COMP_VOUCHER_MONTH_ID ";
                    strSQL = strSQL + "ORDER BY AREA,monthno ";
                }
                else
                {
                    if (strSelection != "")
                    {
                        if (strSelection.Substring(0, 1).ToUpper() == "D" || strSelection.Substring(0, 1).ToUpper() == "R")
                        {
                            strSQL = "SELECT monthno,'' ZONE ,DIVISION,'' AREA,'' LEDGER_NAME_MERZE,COMP_VOUCHER_MONTH_ID,SUM(SALESAMNT)SALESAMNT ,ABS(SUM(RECEIPT))RECEIPT FROM VIEW_MPOWISE_SALES_COLLECTION ";
                            strSQL = strSQL + " WHERE LEDGER_STATUS='" + intStatus + "' ";
                            strSQL = strSQL + " AND (COMP_VOUCHER_DATE BETWEEN ";
                            strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
                            strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                            if (strSelection != "")
                            {
                                strSQL = strSQL + " AND LEDGER_NAME='" + strSelection + "' ";
                            }
                            if (strBranchID != "")
                            {
                                strSQL = strSQL + " AND BRANCH_ID='" + strBranchID + "' ";
                            }
                            strSQL = strSQL + "GROUP BY monthno,DIVISION,COMP_VOUCHER_MONTH_ID ";
                            strSQL = strSQL + "ORDER BY DIVISION,monthno ";
                        }
                        else if (strSelection.Contains("ZONE") == true)
                        {
                            strSQL = "SELECT monthno,ZONE,'' DIVISION,'' AREA,'' LEDGER_NAME_MERZE,COMP_VOUCHER_MONTH_ID,SUM(SALESAMNT)SALESAMNT ,ABS(SUM(RECEIPT))RECEIPT FROM VIEW_MPOWISE_SALES_COLLECTION ";
                            strSQL = strSQL + " WHERE LEDGER_STATUS='" + intStatus + "' ";
                            strSQL = strSQL + " AND (COMP_VOUCHER_DATE BETWEEN ";
                            strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
                            strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                            if (strSelection != "")
                            {
                                strSQL = strSQL + " AND ZONE='" + strSelection + "' ";
                            }
                            if (strBranchID != "")
                            {
                                strSQL = strSQL + " AND BRANCH_ID='" + strBranchID + "' ";
                            }
                            strSQL = strSQL + "GROUP BY monthno,ZONE,COMP_VOUCHER_MONTH_ID ";
                            strSQL = strSQL + "ORDER BY ZONE,monthno ";
                        }
                        else
                        {
                            if (intsummDeta == 1)
                            {
                                strSQL = "SELECT monthno,'' ZONE,'' DIVISION,AREA,'' LEDGER_NAME_MERZE,COMP_VOUCHER_MONTH_ID,SUM(SALESAMNT)SALESAMNT ,ABS(SUM(RECEIPT))RECEIPT FROM VIEW_MPOWISE_SALES_COLLECTION ";
                                strSQL = strSQL + " WHERE LEDGER_STATUS='" + intStatus + "' ";
                                strSQL = strSQL + " AND (COMP_VOUCHER_DATE BETWEEN ";
                                strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
                                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                                if (strSelection != "")
                                {
                                    strSQL = strSQL + " AND AREA='" + strSelection + "' ";
                                }
                                if (strBranchID != "")
                                {
                                    strSQL = strSQL + " AND BRANCH_ID='" + strBranchID + "' ";
                                }
                                strSQL = strSQL + "GROUP BY monthno,AREA,COMP_VOUCHER_MONTH_ID ";
                                strSQL = strSQL + "ORDER BY AREA,monthno ";
                            }
                            else
                            {
                                strSQL = "SELECT monthno,ZONE,DIVISION,AREA,LEDGER_NAME_MERZE,COMP_VOUCHER_MONTH_ID,SUM(SALESAMNT)SALESAMNT ,ABS(SUM(RECEIPT))RECEIPT FROM VIEW_MPOWISE_SALES_COLLECTION ";
                                strSQL = strSQL + " WHERE LEDGER_STATUS='" + intStatus + "' ";
                                strSQL = strSQL + " AND (COMP_VOUCHER_DATE BETWEEN ";
                                strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
                                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                                if (strSelection != "")
                                {
                                    strSQL = strSQL + " AND LEDGER_NAME='" + strSelection + "' ";
                                }
                                if (strBranchID != "")
                                {
                                    strSQL = strSQL + " AND BRANCH_ID='" + strBranchID + "' ";
                                }
                                strSQL = strSQL + "GROUP BY monthno,ZONE,DIVISION,AREA,LEDGER_NAME_MERZE,COMP_VOUCHER_MONTH_ID ";
                                strSQL = strSQL + "ORDER BY LEDGER_NAME_MERZE,monthno ";

                            }
                        }
                    }
                    else
                    {
                        if (intsummDeta == 1)
                        {
                            strSQL = "SELECT monthno,'' ZONE,'' DIVISION,AREA,'' LEDGER_NAME_MERZE,COMP_VOUCHER_MONTH_ID,SUM(SALESAMNT)SALESAMNT ,ABS(SUM(RECEIPT))RECEIPT FROM VIEW_MPOWISE_SALES_COLLECTION ";
                            strSQL = strSQL + " WHERE LEDGER_STATUS='" + intStatus + "' ";
                            strSQL = strSQL + " AND (COMP_VOUCHER_DATE BETWEEN ";
                            strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
                            strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                            if (strSelection != "")
                            {
                                strSQL = strSQL + " AND AREA='" + strSelection + "' ";
                            }
                            if (strBranchID != "")
                            {
                                strSQL = strSQL + " AND BRANCH_ID='" + strBranchID + "' ";
                            }
                            strSQL = strSQL + "GROUP BY monthno,AREA,COMP_VOUCHER_MONTH_ID ";
                            strSQL = strSQL + "ORDER BY AREA,monthno ";
                        }
                        else
                        {
                            strSQL = "SELECT monthno,ZONE,DIVISION,AREA,LEDGER_NAME_MERZE,COMP_VOUCHER_MONTH_ID,SUM(SALESAMNT)SALESAMNT ,ABS(SUM(RECEIPT))RECEIPT FROM VIEW_MPOWISE_SALES_COLLECTION ";
                            strSQL = strSQL + " WHERE LEDGER_STATUS='" + intStatus + "' ";
                            strSQL = strSQL + " AND (COMP_VOUCHER_DATE BETWEEN ";
                            strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
                            strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                            if (strSelection != "")
                            {
                                strSQL = strSQL + " AND LEDGER_NAME='" + strSelection + "' ";
                            }
                            if (strBranchID != "")
                            {
                                strSQL = strSQL + " AND BRANCH_ID='" + strBranchID + "' ";
                            }
                            strSQL = strSQL + "GROUP BY monthno,ZONE,DIVISION,AREA,LEDGER_NAME_MERZE,COMP_VOUCHER_MONTH_ID ";
                            strSQL = strSQL + "ORDER BY LEDGER_NAME_MERZE,monthno ";

                        }
                    }
                }



                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strZone = dr["ZONE"].ToString();
                    oLedg.strGrParent = dr["DIVISION"].ToString();
                    oLedg.strGrName = dr["AREA"].ToString();
                    oLedg.strMonthID = dr["COMP_VOUCHER_MONTH_ID"].ToString();
                    oLedg.strLedgerName = dr["LEDGER_NAME_MERZE"].ToString();
                    oLedg.dblSalTarget = Convert.ToDouble(dr["SALESAMNT"]);
                    oLedg.dblSaltargetAchieve = Convert.ToDouble(dr["RECEIPT"]);
                    ooAccLedger.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strZone = "";
                    oLedg.strGrParent = "";
                    oLedg.strGrName = "";
                    oLedg.strLedgerName = "";
                    oLedg.dblSalTarget = 0;
                    oLedg.dblSaltargetAchieve = 0;
                    ooAccLedger.Add(oLedg);
                }


                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }
        #endregion
        #region "Honda Loan"

        public List<RHondaLoan> mHondaLoanFineRecAmoun(string strDeComID, string strLedgerName)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                List<RHondaLoan> oogrp = new List<RHondaLoan>();

                strSQL = "select isnull (sum(VOUCHER_CREDIT_AMOUNT),0) AS FINERECAMOUNT from ACC_VOUCHER ";
                if (strLedgerName != "")
                {
                    strSQL = strSQL + "WHERE LEDGER_NAME='" + strLedgerName + "' ";
                }
                strSQL = strSQL + "and VOUCHER_TOBY='Cr'  ";
                strSQL = strSQL + "and TRANSFER_TYPE=4   ";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RHondaLoan ogrp = new RHondaLoan();
                    if (dr["FINERECAMOUNT"].ToString() != "")
                    {
                        ogrp.dblRecFineAmount = Convert.ToDouble(dr["FINERECAMOUNT"].ToString());
                    }
                    else
                    {
                        ogrp.dblRecFineAmount = 0;
                    }
                    oogrp.Add(ogrp);

                }
                if (!dr.HasRows)
                {
                    RHondaLoan ogrp = new RHondaLoan();
                    ogrp.dblRecFineAmount = 0;
                    oogrp.Add(ogrp);
                }
                dr.Close();
                gcnMain.Dispose();
                return oogrp;

            }
        }


        public List<RHondaLoan> mGetHondaLoan(string strDeComID, string strBranchID, string strLedgerName, string strGroupName, string strFdate, string strTDate, int intMode, string strLoanDate,int intSuppress)
        {
            string strSQL = null;
            SqlDataReader dr;
            double dblbalnale1st = 0, intintdd = 0;
            List<RHondaLoan> ooAccHondaLoan = new List<RHondaLoan>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmdInsert = new SqlCommand();
                cmdInsert.Connection = gcnMain;

                if (intMode == 1)
                {
                    strSQL = "ALTER VIEW ACC_HONDALOAN AS  ";
                    strSQL = strSQL + "SELECT DISTINCT  ";
                    strSQL = strSQL + " MIN(S.DUE_DATE) AS StartM, MAX(S.DUE_DATE) AS EndM, T.NO_OF_INSTALLMENT, SUM(S.MONTHLY_AMOUNT) AS InsAmount, COUNT(S.INSTALLMET_NAME) ";
                    strSQL = strSQL + "AS TEMPLATE_NAME, MAX(S.MONTHLY_AMOUNT) AS MONTHLY_AMOUNT, S.COMP_REF_NO, S.LEDGER_NAME, ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_PARENT_GROUP, ACC_LEDGER.LEDGER_PHONE ";
                    strSQL = strSQL + "FROM  ACC_PAYMENT_SCHEDULE AS S INNER JOIN ";
                    strSQL = strSQL + "ACC_LOAN_TEMPLATE_MASTER AS T ON S.TEMPLATE_NAME = T.TEMPLATE_NAME INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER ON S.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (S.TO_BY = 'Dr') ";
                    strSQL = strSQL + "GROUP BY T.NO_OF_INSTALLMENT, S.COMP_REF_NO, S.LEDGER_NAME, ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_PARENT_GROUP, ACC_LEDGER.LEDGER_PHONE";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "ALTER VIEW ACC_HONDALOAN2 AS  ";
                    strSQL = strSQL + "SELECT DATEADD(month, -1, StartM) AS Loandate,   StartM, EndM, NO_OF_INSTALLMENT, InsAmount, TEMPLATE_NAME, ";
                    strSQL = strSQL + "MONTHLY_AMOUNT, COMP_REF_NO, LEDGER_NAME, LEDGER_NAME_MERZE, LEDGER_PARENT_GROUP,LEDGER_PHONE FROM   ACC_HONDALOAN ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();


                    strSQL = "SELECT LEDGER_PHONE, Loandate, StartM, EndM, NO_OF_INSTALLMENT, InsAmount, TEMPLATE_NAME, COMP_REF_NO, LEDGER_NAME, LEDGER_NAME_MERZE, LEDGER_PARENT_GROUP, TakenInstalmetn, TakenAmount, ";
                    strSQL = strSQL + "MONTHLY_AMOUNT, TO_BY, SUM(CurrentMonthCr) AS CurrentMonthCr ";
                    strSQL = strSQL + "FROM (SELECT V.LEDGER_PHONE, V.Loandate, V.StartM, V.EndM, V.NO_OF_INSTALLMENT, V.InsAmount, V.TEMPLATE_NAME, SUBSTRING(V.COMP_REF_NO, 7, 30) AS COMP_REF_NO, V.LEDGER_NAME, ";
                    strSQL = strSQL + "V.LEDGER_NAME_MERZE, V.LEDGER_PARENT_GROUP, (CASE WHEN tb2.TakenInstalmetn IS NULL THEN 0 ELSE tb2.TakenInstalmetn END) AS TakenInstalmetn, (CASE WHEN tb2.TakenAmount IS NULL ";
                    strSQL = strSQL + "THEN 0 ELSE tb2.TakenAmount END) AS TakenAmount, (CASE WHEN TB3.MONTHLY_AMOUNT IS NULL THEN 0 ELSE TB3.MONTHLY_AMOUNT END) AS MONTHLY_AMOUNT, tb2.TO_BY, ";
                    strSQL = strSQL + "(CASE WHEN Cr.MONTHLY_AMOUNT IS NULL THEN 0 ELSE Cr.MONTHLY_AMOUNT END) AS CurrentMonthCr ";
                    strSQL = strSQL + "FROM ACC_HONDALOAN2 AS V LEFT OUTER JOIN ";
                    strSQL = strSQL + "(SELECT ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT AS MONTHLY_AMOUNT, ACC_LEDGER.LEDGER_NAME_MERZE ";
                    strSQL = strSQL + "FROM ACC_VOUCHER INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND " + Utility.cvtSQLDateString(strTDate) + ") AND ";
                    strSQL = strSQL + "(ACC_VOUCHER.VOUCHER_TOBY = 'Cr') AND (ACC_VOUCHER.TRANSFER_TYPE <> 4)) AS Cr ON V.LEDGER_NAME = Cr.LEDGER_NAME_MERZE LEFT OUTER JOIN ";
                    strSQL = strSQL + "(SELECT LEDGER_NAME, MONTHLY_AMOUNT ";
                    strSQL = strSQL + "FROM ACC_PAYMENT_SCHEDULE AS ACC_PAYMENT_SCHEDULE_1 ";
                    strSQL = strSQL + "WHERE  (TO_BY = 'Dr') AND (DUE_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND " + Utility.cvtSQLDateString(strTDate) + ")) AS TB3 ON  ";
                    strSQL = strSQL + "V.LEDGER_NAME = TB3.LEDGER_NAME LEFT OUTER JOIN ";
                    strSQL = strSQL + "(SELECT TO_BY, COUNT(TEMPLATE_NAME) AS TakenInstalmetn, SUM(MONTHLY_AMOUNT) AS TakenAmount, TEMPLATE_NAME, LEDGER_NAME ";
                    strSQL = strSQL + "FROM ACC_PAYMENT_SCHEDULE AS S ";
                    strSQL = strSQL + "WHERE (TO_BY = 'Cr') ";
                    strSQL = strSQL + "GROUP BY TEMPLATE_NAME, TO_BY, LEDGER_NAME) AS tb2 ON V.LEDGER_NAME = tb2.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (V.Loandate <=" + Utility.cvtSQLDateString(strTDate) + ") ";
                    ////strSQL = strSQL + "AND (V.LEDGER_NAME LIKE '%HL-X-FM-Masumul Haque%') ";
                    strSQL = strSQL + "AND V.LEDGER_NAME !='HL-Salim Mia-MPO-Jamalpur' )";
                    strSQL = strSQL + "AS tb56 ";
                    strSQL = strSQL + "GROUP BY LEDGER_PHONE, Loandate, StartM, EndM, NO_OF_INSTALLMENT, InsAmount, TEMPLATE_NAME, COMP_REF_NO, LEDGER_NAME, LEDGER_NAME_MERZE, LEDGER_PARENT_GROUP, TakenInstalmetn, TakenAmount,  ";
                    strSQL = strSQL + "MONTHLY_AMOUNT, TO_BY ";
                    if (intSuppress > 0)
                    {
                        strSQL = strSQL + "HAVING sum(InsAmount -abs(TakenAmount)) > 0 ";
                    }
                    strSQL = strSQL + "ORDER BY LEDGER_PARENT_GROUP, LEDGER_NAME, MONTHLY_AMOUNT DESC ";


                }
                else
                {

                    strSQL = "Alter VIEW ACC_HONDALOAN_IND_VIEW AS SELECT DISTINCT DUE_DATE, INSTALLMET_NAME, TO_BY, SUBSTRING(COMP_REF_NO, 7, 30) AS COMP_REF_NO, ";
                    strSQL = strSQL + "MONTHLY_AMOUNT, LEDGER_NAME FROM  ACC_PAYMENT_SCHEDULE AS S ";
                    strSQL = strSQL + "WHERE (LEDGER_NAME = '" + strLedgerName + "')   ";
                    strSQL = strSQL + "and (TO_BY = 'Dr') ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "SELECT DISTINCT ACC_HONDALOAN_IND_VIEW.INSTALLMET_NAME, ACC_HONDALOAN_IND_VIEW.TO_BY, SUBSTRING(Tb1.COMP_REF_NO, 7, 30) as RecVNO ,(CASE WHEN  Tb1.FINE_AMOUNT is null then 0 else Tb1.FINE_AMOUNT end ) as fineamt, ";
                    strSQL = strSQL + "ACC_HONDALOAN_IND_VIEW.COMP_REF_NO, ACC_HONDALOAN_IND_VIEW.MONTHLY_AMOUNT, ACC_HONDALOAN_IND_VIEW.LEDGER_NAME, ";
                    strSQL = strSQL + "ACC_HONDALOAN_IND_VIEW.DUE_DATE, (CASE WHEN Tb1.RECEIVED_AMOUNT IS NULL THEN 0 ELSE Tb1.RECEIVED_AMOUNT END) AS RecAmt ";
                    strSQL = strSQL + "FROM  ACC_HONDALOAN_IND_VIEW LEFT OUTER JOIN (SELECT SL_NO, COMP_REF_NO, LEDGER_NAME, TEMPLATE_NAME, DUE_DATE, ";
                    strSQL = strSQL + "RECEIVE_DATE, RECEIVED_AMOUNT, INSTALLMET_NAME, MONTHLY_AMOUNT, FINE_AMOUNT, TO_BY, INSTALL_STATUS,  ";
                    strSQL = strSQL + "TRANSFER_TYPE, TRANSFER_DATE, NARRATION, FROM_LEDGER_NAME FROM ACC_PAYMENT_SCHEDULE ";

                    if (strLedgerName != "")
                    {
                        strSQL = strSQL + "where  LEDGER_NAME='" + strLedgerName + "'  ";
                    }

                    strSQL = strSQL + " AND (TO_BY = 'Cr')) AS Tb1 ON ACC_HONDALOAN_IND_VIEW.INSTALLMET_NAME = Tb1.INSTALLMET_NAME AND  ";
                    strSQL = strSQL + "ACC_HONDALOAN_IND_VIEW.LEDGER_NAME = Tb1.LEDGER_NAME ";
                    strSQL = strSQL + "ORDER BY ACC_HONDALOAN_IND_VIEW.INSTALLMET_NAME ";
                }
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();

                while (dr.Read())
                {
                    RHondaLoan ohonda = new RHondaLoan();
                    if (intMode == 1)
                    {
                        ohonda.strLedgerName = dr["LEDGER_NAME_MERZE"].ToString();
                        ohonda.dblLoanAmount = Convert.ToDouble(dr["InsAmount"].ToString());
                        if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-X-FM-Masumul Haque-Naogaon")
                        {
                            ohonda.strDate = "Mar-18";
                        }
                        else if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-209-Khayer Uddin-Borhanuddin")
                        {
                            ohonda.strDate = "Dec-16";
                        }
                        else if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-060-Magharul Islam-Sarishabari")
                        {
                            ohonda.strDate = "Jun-19";
                        }
                        else if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-DSM-Gillur Rahman-Comilla")
                        {
                            ohonda.strDate = "Oct-17";
                        }
                        else if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-DSM-Mostakim Billah-Barishal")
                        {
                            ohonda.strDate = "Sep-17";
                        }
                        else if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-FM-Abu Hanif Zomaddar-Patuakhali")
                        {
                            ohonda.strDate = "Nov-18";
                        }
                        else if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-FM-Anisur Rahman-Mahendigonj")
                        {
                            ohonda.strDate = "Nov-17";
                        }
                        else if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-FM-Imran Hossain-Mohammedpur")
                        {
                            ohonda.strDate = "Jul-17";
                        }
                        else if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-FM-Kawsar Ahmed-Rajendrapur")
                        {
                            ohonda.strDate = "Nov-17";
                        }
                        else if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-FM-Mizanur Rahman-Katiadi")
                        {
                            ohonda.strDate = "Dec-16";
                        }
                        else if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-FM-Moazzam Hossain-Norsingdi")
                        {
                            ohonda.strDate = "Dec-18";
                        }
                        else if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-FM-Mosaddek Billah-Tongi")
                        {
                            ohonda.strDate = "Aug-17";
                        }
                        else if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-DSM-Mostakim Billah-Barishal")
                        {
                            ohonda.strDate = "Sep-17";
                        }
                        else if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-FM-Mostafizur Rahman-Gouronadi")
                        {
                            ohonda.strDate = "Dec-16";
                        }
                        else if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-FM-Motiur Rahman-Joydebpur")
                        {
                            ohonda.strDate = "Oct-18";
                        }
                        else if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-FM-Noor Alam-Sylhet Bandar")
                        {
                            ohonda.strDate = "Nov-17";
                        }
                        else if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-DSM-Mostakim Billah-Barishal")
                        {
                            ohonda.strDate = "Sep-17";
                        }
                        else if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-FM-Nur Islam-Potiya")
                        {
                            ohonda.strDate = "Sep-16";
                        }
                        else if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-X-FM-Abul Kalam Azad-kaliakair")
                        {
                            ohonda.strDate = "Feb-17";
                        }
                        else if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-X-FM-Babul Rana-Kurigram")
                        {
                            ohonda.strDate = "Jul-17";
                        }
                        else if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-044-Prince Chowdhury-Muktagacha")
                        {
                            ohonda.strDate = "Sep-17";
                        }
                       
                        else if (dr["LEDGER_NAME_MERZE"].ToString() == "HL-219-Zahidul Islam-Bhandaria")
                        {
                            ohonda.strDate = "Jun-17";
                        }

                        else
                        {
                            ohonda.strDate = Convert.ToDateTime(dr["StartM"]).AddMonths(-1).ToString("MMM-yy");
                        }
                        if (dr["TO_BY"].ToString() != "D")
                        {
                            ohonda.strCom_Ref_No = dr["COMP_REF_NO"].ToString();
                        }
                        if ((dr["MONTHLY_AMOUNT"]) != "")
                        {
                            if (Convert.ToDouble(dr["MONTHLY_AMOUNT"]) == 0)
                            {
                                ohonda.dblInstallmentAmt = Convert.ToDouble(dr["InsAmount"]) / Convert.ToDouble(dr["TEMPLATE_NAME"]);
                            }
                            else
                            {
                                ohonda.dblInstallmentAmt = Convert.ToDouble(dr["MONTHLY_AMOUNT"]);
                            }
                        }
                        if ((dr["LEDGER_PHONE"]) != "")
                        {
                            ohonda.strPhoneNumber = dr["LEDGER_PHONE"].ToString();
                        }

                        if ((dr["CurrentMonthCr"]) != "")
                        {
                            ohonda.dblCrAmount = Math.Abs(Convert.ToDouble(dr["CurrentMonthCr"]));
                        }
                        else
                        {
                            ohonda.dblCrAmount = 0;
                        }

                        ohonda.strStartDate = Convert.ToDateTime(dr["StartM"]).ToString("MMM-yy");
                        ohonda.strEndDate = Convert.ToDateTime(dr["EndM"]).ToString("MMM-yy");
                        ohonda.intTotalInstallment = Convert.ToInt32(dr["TEMPLATE_NAME"]);
                        if ((dr["TakenInstalmetn"]) != "")
                        {
                            ohonda.intTakeInstallment = Convert.ToInt32(dr["TakenInstalmetn"]);
                        }
                        else
                        {
                            ohonda.intTakeInstallment = 0;
                        }
                        if ((dr["TakenAmount"]) != "")
                        {
                            ohonda.dblTakeLoanAmount = Math.Abs(Convert.ToDouble(dr["TakenAmount"]));
                        }
                        else
                        {
                            ohonda.dblTakeLoanAmount = 0;
                        }
                        ohonda.strGroupName = dr["LEDGER_PARENT_GROUP"].ToString();

                    }
                    else
                    {
                        ohonda.strDate = Convert.ToDateTime(dr["DUE_DATE"]).ToString("dd-MMM-yy");
                        ohonda.intInstallmentNo = Convert.ToInt32(dr["INSTALLMET_NAME"].ToString());
                        ohonda.strCom_Ref_No = dr["COMP_REF_NO"].ToString();
                        ohonda.dblLoanPayemnt = Math.Abs(Convert.ToDouble(dr["MONTHLY_AMOUNT"]));
                        ohonda.dblTakeLoanAmount = Math.Abs(Convert.ToDouble(dr["RecAmt"]));
                        if ((dr["fineamt"]).ToString() != "")
                        {
                            ohonda.dblFine = Math.Abs(Convert.ToDouble(dr["fineamt"]));
                        }
                        else
                        {
                            ohonda.dblFine = 0;
                        }

                        if (Math.Abs(Convert.ToDouble(dr["MONTHLY_AMOUNT"])) == Math.Abs(Convert.ToDouble(dr["RecAmt"])))
                        {
                            double dblbalnale = 0;
                            ohonda.dblClosingBalance = dblbalnale;
                        }
                        else
                        {
                            if (dblbalnale1st == 0)
                            {
                                if (intintdd == 0)
                                {
                                    dblbalnale1st = (Math.Abs(Convert.ToDouble(dr["MONTHLY_AMOUNT"])) + Math.Abs(Convert.ToDouble(dr["RecAmt"])) + Math.Abs(Convert.ToDouble(dr["fineamt"])));
                                    intintdd = 1;
                                    ohonda.dblClosingBalance = dblbalnale1st;
                                }
                            }
                            else
                            {
                                dblbalnale1st = dblbalnale1st + (Math.Abs(Convert.ToDouble(dr["MONTHLY_AMOUNT"])));
                                ohonda.dblClosingBalance = dblbalnale1st;
                            }

                        }
                        if (dr["RecVNO"].ToString() != "")
                        {
                            ohonda.strCom_Ref_No_Rec_V_No = dr["RecVNO"].ToString();
                        }
                        else
                        {
                            ohonda.strCom_Ref_No_Rec_V_No = "";
                        }
                    }
                    ooAccHondaLoan.Add(ohonda);
                }
                if (!dr.HasRows)
                {
                    RHondaLoan ohonda = new RHondaLoan();
                    ohonda.strLedgerName = "";
                    ohonda.dblLoanAmount = 0;
                    ohonda.strDate = "";
                    ohonda.strCom_Ref_No = "";
                    ohonda.dblInstallmentAmt = 0;
                    ohonda.strStartDate = "";
                    ohonda.strEndDate = "";
                    ohonda.intTotalInstallment = 0;
                    ohonda.intTakeInstallment = 0;
                    ohonda.dblTakeLoanAmount = 0;
                    ooAccHondaLoan.Add(ohonda);
                }

                dr.Close();

                gcnMain.Close();
                return ooAccHondaLoan;
            }
        }
        #endregion
        #region"Draft MPO Commission"
        public List<RAccountsGroup> mFillDisplayBill(string strDeComID, string strKey)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<RAccountsGroup> ooLed = new List<RAccountsGroup>();

            strSQL = "SELECT C.COMM_MANUAL_KEY,L.LEDGER_NAME_MERZE,AMOUNT,COLS,ROWPOS,HEAD_NAME ";
            strSQL = strSQL + "FROM MPO_COMM_MAN_PARENT_CHILD C , ACC_LEDGER L ";
            strSQL = strSQL + "WHERE COMM_MANUAL_KEY ='" + strKey + "' and AMOUNT <> 0 and  C.LEDGER_NAME= L.LEDGER_NAME ";
            strSQL = strSQL + "ORDER BY L.LEDGER_NAME_MERZE ASC  ";
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    RAccountsGroup ogrp = new RAccountsGroup();

                    ogrp.strLedgerName = drGetGroup["LEDGER_NAME_MERZE"].ToString();
                    ogrp.dblAmount = Convert.ToDouble(drGetGroup["AMOUNT"].ToString());
                    ogrp.strManuName = drGetGroup["HEAD_NAME"].ToString();
                    ooLed.Add(ogrp);
                }
                if (!drGetGroup.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strLedgerName = "";
                    oLedg.dblAmount = 0;
                    oLedg.strManuName = "";
                    ooLed.Add(oLedg);
                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return ooLed;

            }
        }
        #endregion
        #region"LedgerConfiguration %"
        public List<RAccountsGroup> mFillLedgerListMpoPercen(string strDeComID, string strCommissionLedger)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<RAccountsGroup> ooLed = new List<RAccountsGroup>();

            strSQL = "Select C.COMMISSION_LEDGER,L.LEDGER_NAME_MERZE,C.PERCENTAGES,C.SAL_AMOUNT,C.EFFECTIVE_DATE ";
            strSQL = strSQL + "from MPO_COMMISSION_PERCENTAGE C ,ACC_LEDGER L ";
            strSQL = strSQL + "WHERE C.LEDGER_NAME= L.LEDGER_NAME ";
            if (strCommissionLedger != "")
            {
                if (strCommissionLedger != "Salary By Voucher")
                {
                    strSQL = strSQL + "AND C.COMMISSION_LEDGER = '" + strCommissionLedger + "' ";
                    strSQL = strSQL + "AND C.PERCENTAGES > 0 ";
                }
                else
                {
                    strSQL = strSQL + "AND C.COMMISSION_LEDGER = '" + strCommissionLedger + "' ";
                    strSQL = strSQL + "AND C.SAL_AMOUNT > 0 ";
                }
            }
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    RAccountsGroup ogrp = new RAccountsGroup();
                    ogrp.dblColltarget = Convert.ToDouble(drGetGroup["PERCENTAGES"].ToString());
                    ogrp.dblCredit = Convert.ToDouble(drGetGroup["SAL_AMOUNT"].ToString());
                    ogrp.strLedgerName = drGetGroup["LEDGER_NAME_MERZE"].ToString();
                    if (drGetGroup["EFFECTIVE_DATE"].ToString() != "")
                    {
                        ogrp.strDate = Convert.ToDateTime(drGetGroup["EFFECTIVE_DATE"]).ToString("dd-MM-yyyy");
                    }
                    else
                    {
                        ogrp.strDate = "";
                    }
                    ooLed.Add(ogrp);
                }
                if (!drGetGroup.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strLedgerName = "";
                    oLedg.dblColltarget = 0;
                    oLedg.dblCredit = 0;
                    oLedg.strDate = "";
                    ooLed.Add(oLedg);
                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return ooLed;

            }
        }
        #endregion
        #region "TradingProfitLossLedger"
        public int gintProfitLossLedger(string strDeComID, DateTime dtefDate, DateTime dteTdate, string strBranchID, int intBusinessType, int intSwpCls)
        {
            string strSQL = "", strFdate, strTDate;

           
            double dblGP = 0, dblIncome = 0, dblExpenses = 0,dblAmount=0;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                strFdate = dtefDate.ToString("dd/MM/yyyy");
                strTDate = dteTdate.ToString("dd/MM/yyyy");

                SqlCommand cmdInsert = new SqlCommand();
                cmdInsert.Connection = gcnMain;

                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Transaction = myTrans;
                strSQL = "DELETE FROM ACC_TRADING_PROFIT_LOSS_LEDGER ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //''Cost of goods Sold

                strSQL = "INSERT INTO ACC_TRADING_PROFIT_LOSS_LEDGER(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_AMOUNT )";
                strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT,1,0,  ";
                strSQL = strSQL + "   ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT),0) AS DEBIT_TOTAL ";
                strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ";
                strSQL = strSQL + "ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 3) ";
                strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_GROUP LIKE '211%' ";
                strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN  CONVERT(DATETIME,'01-01-2019',103) AND  CONVERT(DATETIME,'01-01-2019',103))";
                strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_TRADING_PROFIT_LOSS_LEDGER(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_AMOUNT ) ";
                strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,1,0, ISNULL(SUM( VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) AS TOTAL  ";
                strSQL = strSQL + "FROM ACC_MAIN_LEDGER  ";
                strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE BETWEEN  CONVERT(DATETIME,'01-01-2019',103) AND  CONVERT(DATETIME,'01-01-2019',103))";
                strSQL = strSQL + "AND LEDGER_GROUP LIKE '211%' ";
                strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 3 ";
                strSQL = strSQL + "AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME,LEDGER_PARENT_GROUP ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO ACC_TRADING_PROFIT_LOSS_LEDGER(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_AMOUNT ) ";
                strSQL = strSQL + "SELECT 'Opening Stock','Cost of Goods Sold'T,2,1,0 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO ACC_TRADING_PROFIT_LOSS_LEDGER(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_AMOUNT ) ";
                strSQL = strSQL + "SELECT 'Add:Purchase','Cost of Goods Sold'T,2,2, ";
                strSQL = strSQL + "ISNULL(SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0) AS DEBIT_TOTAL  ";
                strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN  ";
                strSQL = strSQL + "ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME  ";
                strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 4)  ";
                strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_GROUP LIKE '21%' ";
                strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN   CONVERT(DATETIME,'01-01-2019',103) AND  CONVERT(DATETIME,'01-01-2019',103)) ";
                strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO ACC_TRADING_PROFIT_LOSS_LEDGER(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_AMOUNT ) ";
                strSQL = strSQL + "SELECT 'Add:Purchase','Cost of Goods Sold'T,2,2,ISNULL(SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT),0) AS TOTAL  ";
                strSQL = strSQL + "FROM ACC_MAIN_LEDGER  ";
                strSQL = strSQL + "WHERE  ";
                strSQL = strSQL + "(COMP_VOUCHER_DATE BETWEEN   CONVERT(DATETIME,'01-01-2019',103) AND  CONVERT(DATETIME,'01-01-2019',103)) ";
                strSQL = strSQL + "AND LEDGER_GROUP LIKE '21%' ";
                strSQL = strSQL + "AND LEDGER_PRIMARY_TYPE = 4 ";
                strSQL = strSQL + "AND LEDGER_LEVEL = 2 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO ACC_TRADING_PROFIT_LOSS_LEDGER(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_AMOUNT ) ";
                strSQL = strSQL + "SELECT 'Closing Stock','Cost of Goods Sold'T,2,1,0 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //************
                if (dblGP > 0)
                {
                    strSQL = "INSERT INTO ACC_TRADING_PROFIT_LOSS_LEDGER(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_AMOUNT ) ";
                    strSQL = strSQL + "SELECT 'Gross Profit b/d',' Gross Profit b/d',2,2," + dblGP + " ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                else
                {
                    strSQL = "INSERT INTO ACC_TRADING_PROFIT_LOSS_LEDGER(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_AMOUNT ) ";
                    strSQL = strSQL + "SELECT 'Gross Profit b/d',' Gross Profit b/d',2,2,"+ dblGP +" ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }

                strSQL = "INSERT INTO ACC_TRADING_PROFIT_LOSS_LEDGER(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_AMOUNT ) ";
                strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,";
                strSQL = strSQL + "3,3, SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT - ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT) AS DEBIT_TOTAL ";
                strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 3) AND ACC_LEDGER_GROUP_QRY.GR_GROUP <> '211' ";
                strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN CONVERT(DATETIME,'01-01-2019',103) AND  CONVERT(DATETIME,'01-01-2019',103)) AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,";
                strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO ACC_TRADING_PROFIT_LOSS_LEDGER(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_AMOUNT ) ";
                strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,3,3,SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT) AS TOTAL FROM ";
                strSQL = strSQL + "ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN CONVERT(DATETIME,'01-01-2019',103) AND  CONVERT(DATETIME,'01-01-2019',103)) AND LEDGER_GROUP <>'211' AND LEDGER_PRIMARY_TYPE = 3 ";
                strSQL = strSQL + "AND LEDGER_LEVEL = 2 GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO ACC_TRADING_PROFIT_LOSS_LEDGER(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_AMOUNT ) ";
                strSQL = strSQL + "SELECT ACC_LEDGER_GROUP_QRY.GR_NAME AS GR_NAME,ACC_LEDGER_GROUP_QRY.GR_PARENT AS GR_PARENT,4,4, ";
                strSQL = strSQL + "SUM(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT - ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) As DEBIT_TOTAL ";
                strSQL = strSQL + "FROM ACC_VOUCHER LEFT OUTER JOIN ACC_LEDGER_GROUP_QRY ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER_GROUP_QRY.LEDGER_NAME ";
                strSQL = strSQL + "WHERE (ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE = 4) AND ACC_LEDGER_GROUP_QRY.GR_GROUP NOT LIKE '21%' ";
                strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN CONVERT(DATETIME,'01-01-2019',103) AND  CONVERT(DATETIME,'01-01-2019',103)) ";
                strSQL = strSQL + "AND ACC_LEDGER_GROUP_QRY.GR_LEVEL = 2 ";
                strSQL = strSQL + "GROUP BY ACC_LEDGER_GROUP_QRY.GR_NAME, ACC_LEDGER_GROUP_QRY.GR_PARENT,";
                strSQL = strSQL + "ACC_LEDGER_GROUP_QRY.GR_PRIMARY_TYPE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_TRADING_PROFIT_LOSS_LEDGER(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_AMOUNT ) ";
                strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_PARENT_GROUP,4,4,SUM(VOUCHER_DEBIT_AMOUNT - VOUCHER_CREDIT_AMOUNT) AS TOTAL ";
                strSQL = strSQL + "FROM ACC_MAIN_LEDGER WHERE (COMP_VOUCHER_DATE BETWEEN CONVERT(DATETIME,'01-01-2019',103) AND  CONVERT(DATETIME,'01-01-2019',103)) AND LEDGER_GROUP NOT LIKE '21%' ";
                strSQL = strSQL + " AND LEDGER_PRIMARY_TYPE = 4 AND LEDGER_LEVEL = 2 ";
                strSQL = strSQL + "GROUP BY LEDGER_NAME, LEDGER_PARENT_GROUP,LEDGER_PRIMARY_TYPE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "SELECT ISNULL(SUM(GR_AMOUNT),0) AMNT FROM ACC_TRADING_PROFIT_LOSS_LEDGER WHERE GR_TYPE = 3 ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblIncome = Convert.ToDouble(dr["AMNT"]);
                }
                dr.Close();
                strSQL = "SELECT ISNULL(SUM(GR_AMOUNT),0) AMNT FROM ACC_TRADING_PROFIT_LOSS_LEDGER WHERE GR_TYPE = 4 ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblExpenses = Convert.ToDouble(dr["AMNT"]);
                }
                dr.Close();
               
                if (dblIncome > dblExpenses)
                {
                    dblAmount = dblIncome - dblExpenses;
                    strSQL = "INSERT INTO ACC_TRADING_PROFIT_LOSS_LEDGER(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_AMOUNT ) ";
                    strSQL = strSQL + "select 'Net Profit','Net Profit',7,10," + dblAmount + " ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                else
                {
                    dblAmount = dblExpenses - dblIncome;
                    strSQL = "INSERT INTO ACC_TRADING_PROFIT_LOSS_LEDGER(GR_NAME,GR_PARENT,GR_TYPE,GR_SUB_TYPE,GR_AMOUNT ) ";
                    strSQL = strSQL + "select 'Net Profit','Net Profit',7,10, " + dblAmount + " ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }

                cmdInsert.Transaction.Commit();
                return 1;


            }

        }
        #endregion
        #region "Commission"
        public List<RoMCommission> GetrptSPCommissionHead(string strDeComID, string strCardNo, string strFdate, string strTdate)
        {

            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            SqlDataReader dr;
            List<RoMCommission> ooVector = new List<RoMCommission>();


            strSQL = "select  DISTINCT ACC_VOUCHER.LEDGER_NAME  from ACC_COMPANY_VOUCHER,ACC_VOUCHER,ACC_EXPENSE_CONFIG_MASTER ";
            strSQL = strSQL + "where ACC_COMPANY_VOUCHER.COMP_REF_NO = ACC_VOUCHER.COMP_REF_NO AND  ";
            strSQL = strSQL + "ACC_EXPENSE_CONFIG_MASTER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_COMPANY_VOUCHER.SP_JOURNAL=1 ";
            strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE  BETWEEN ";
            strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
            strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTdate) + ")";
            strSQL = strSQL + " order by  ACC_VOUCHER.LEDGER_NAME  ";

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RoMCommission ovector = new RoMCommission();
                    ovector.strLedger = dr["LEDGER_NAME"].ToString();
                    ooVector.Add(ovector);
                }
                return ooVector;
                dr.Close();
                gcnMain.Close();
                gcnMain.Dispose();
            }

        }
        public List<RStockInformation> mGetCommitionN(string strDeComID, string strFdate, string strTDate, string strBranchId, string strLedgername)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;

                strSQL = "ALTER VIEW ACC_Commission_View AS ";
                strSQL = strSQL + "SELECT ACC_LEDGER.LEDGER_NAME_MERZE ,   sum( ACC_COMPANY_VOUCHER.COMP_VOUCHER_NET_AMOUNT) as Samount,'0' as CSamount ";
                strSQL = strSQL + "FROM ACC_COMPANY_VOUCHER AS ACC_COMPANY_VOUCHER ";
                strSQL = strSQL + "INNER JOIN ACC_BRANCH ON ACC_COMPANY_VOUCHER.BRANCH_ID = ACC_BRANCH.BRANCH_ID  ";
                strSQL = strSQL + "INNER JOIN ACC_LEDGER ON ACC_COMPANY_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME AND ACC_BRANCH.BRANCH_ID = ACC_LEDGER.BRANCH_ID ";
                strSQL = strSQL + "LEFT OUTER JOIN (SELECT LEDGER_CODE, LEDGER_NAME, LEDGER_ADDRESS1, LEDGER_ADDRESS2 ,HOMOEO_HALL FROM  ACC_LEDGER AS ACC_LEDGER_1 WHERE (LEDGER_GROUP = '204')) ";
                strSQL = strSQL + "AS Customer ON ACC_COMPANY_VOUCHER.SALES_REP = Customer.LEDGER_NAME WHERE ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND " + Utility.cvtSQLDateString(strTDate) + " AND (ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = 16)  AND(ACC_COMPANY_VOUCHER.BRANCH_ID = '0001')  ";
                if (strLedgername != "")
                {
                    strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.LEDGER_NAME = '" + strLedgername + "') ";
                }
                strSQL = strSQL + "Group by ACC_LEDGER.LEDGER_NAME_MERZE ";


                strSQL = strSQL + "Union all ";

                strSQL = strSQL + "SELECT   ACC_LEDGER.LEDGER_NAME_MERZE LEDGER_NAME , ";
                strSQL = strSQL + "'0' as Samount, sum( ACC_COMPANY_VOUCHER.COMP_VOUCHER_NET_AMOUNT) as CSamount ";
                strSQL = strSQL + "FROM ACC_LEDGER,ACC_COMPANY_VOUCHER,ACC_CUSTOMER_LIST WHERE ACC_LEDGER.LEDGER_NAME =ACC_COMPANY_VOUCHER.LEDGER_NAME  ";
                strSQL = strSQL + "AND ACC_CUSTOMER_LIST.LEDGER_NAME =ACC_COMPANY_VOUCHER.SALES_REP AND (ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = 16) AND  ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "and (ACC_COMPANY_VOUCHER.BRANCH_ID = '0001') AND ACC_CUSTOMER_LIST.LEDGER_PARENT_GROUP in ('CP (Contract Party)','SP (Special Party)' ) ";
                if (strLedgername != "")
                {
                    strSQL = strSQL + "and(ACC_COMPANY_VOUCHER.LEDGER_NAME = '" + strLedgername + "') ";
                }
                strSQL = strSQL + "Group by ACC_LEDGER.LEDGER_NAME_MERZE  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();



                List<RStockInformation> ooAccLedger = new List<RStockInformation>();

                strSQL = " select L.LEDGER_NAME_MERZE , sum(Samount) as Samt,sum(CSamount) as CSamt, round( (sum(CSamount)*100)/ sum(Samount) ,2)as CSPS from ACC_Commission_View L group by L.LEDGER_NAME_MERZE Order by L.LEDGER_NAME_MERZE   ";

                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strLedgerName = dr["LEDGER_NAME_MERZE"].ToString();
                    oLedg.dblclsAmnt = Convert.ToDouble(dr["Samt"].ToString());
                    oLedg.dblBonusValue = Convert.ToDouble(dr["CSamt"].ToString());
                    oLedg.dblclsQty = Convert.ToDouble(dr["CSPS"].ToString());

                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.dblclsAmnt = 0;
                    oLedg.dblBonusValue = 0;
                    oLedg.dblclsQty = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }

        public List<RoMCommission> GetrptSPCommission3(string strDeComID, string strFate, string strTDate, string strGrid)
        {


            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                List<RoMCommission> ooAccLedger = new List<RoMCommission>();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                cmdInsert.Connection = gcnMain;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Transaction = myTrans;

                strSQL = "DELETE from SP_COMMITION_TEMP ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();



                int intloop = 1;
                string[] words = strGrid.Split('|');
                foreach (string ooObj in words)
                {

                    if (ooObj != "")
                    {
                        string strGroupName = ooObj.ToString();

                        strSQL = "INSERT INTO  SP_COMMITION_TEMP (AREA, LEDGER_NAME_MARZE, VOUCHER_LEDGER, COMM_REF_NO, AMOUNT" + intloop + ")";
                        strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,  v.LEDGER_NAME,c.COMP_REF_NO,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) amnt ";
                        strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v , ";
                        strSQL = strSQL + "ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and  ";
                        strSQL = strSQL + "l.LEDGER_NAME =c.LEDGER_NAME   and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                        strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                        strSQL = strSQL + "and  v.LEDGER_NAME=" + strGroupName + " ";
                        //strSQL = strSQL + "and l.LEDGER_NAME_MERZE='100-Saddam Hossain-Mehendiganj' ";
                        strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,c.COMP_REF_NO , l.LEDGER_NAME_MERZE  ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                        intloop += 1;


                    }

                }

                cmdInsert.Transaction.Commit();


                strSQL = "SELECT SP_COMMITION_TEMP.AREA, SP_COMMITION_TEMP.LEDGER_NAME_MARZE,SP_COMMITION_TEMP. VOUCHER_LEDGER,substring(SP_COMMITION_TEMP.COMM_REF_NO,7,30) COMM_REF_NO  , ";
                strSQL = strSQL + "SP_COMMITION_TEMP.AMOUNT1, SP_COMMITION_TEMP.AMOUNT2, SP_COMMITION_TEMP.AMOUNT3, ";
                strSQL = strSQL + "SP_COMMITION_TEMP.AMOUNT4, SP_COMMITION_TEMP.AMOUNT5, SP_COMMITION_TEMP.AMOUNT6, SP_COMMITION_TEMP.AMOUNT7, SP_COMMITION_TEMP.AMOUNT8,";
                strSQL = strSQL + "SP_COMMITION_TEMP.AMOUNT9, SP_COMMITION_TEMP.AMOUNT10, SP_COMMITION_TEMP.AMOUNT11, SP_COMMITION_TEMP.AMOUNT12,  ";
                strSQL = strSQL + "SP_COMMITION_TEMP.AMOUNT13, SP_COMMITION_TEMP.AMOUNT14, SP_COMMITION_TEMP.AMOUNT15 ";
                strSQL = strSQL + "FROM SP_COMMITION_TEMP,ACC_LEDGER_Z_D_A WHERE ACC_LEDGER_Z_D_A.LEDGER_NAME_MERZE  = SP_COMMITION_TEMP.LEDGER_NAME_MARZE ";
                strSQL = strSQL + "ORDER BY ACC_LEDGER_Z_D_A.GR_PARENT_POSITION ,ACC_LEDGER_Z_D_A.DIVISION,SP_COMMITION_TEMP.AREA,SP_COMMITION_TEMP.LEDGER_NAME_MARZE  ";
                cmdInsert.CommandText = strSQL;
                //cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RoMCommission oLedg = new RoMCommission();
                    oLedg.strArea = dr["AREA"].ToString();
                    oLedg.strLedger = dr["LEDGER_NAME_MARZE"].ToString();
                    oLedg.strVoucherLedger = dr["VOUCHER_LEDGER"].ToString();
                    oLedg.strComRefNo = dr["COMM_REF_NO"].ToString();
                    oLedg.dblAmount1 = Convert.ToDouble(dr["AMOUNT1"].ToString());
                    oLedg.dblAmount2 = Convert.ToDouble(dr["AMOUNT2"].ToString());
                    oLedg.dblAmount3 = Convert.ToDouble(dr["AMOUNT3"].ToString());
                    oLedg.dblAmount4 = Convert.ToDouble(dr["AMOUNT4"].ToString());
                    oLedg.dblAmount5 = Convert.ToDouble(dr["AMOUNT5"].ToString());
                    oLedg.dblAmount6 = Convert.ToDouble(dr["AMOUNT6"].ToString());
                    oLedg.dblAmount7 = Convert.ToDouble(dr["AMOUNT7"].ToString());
                    oLedg.dblAmount8 = Convert.ToDouble(dr["AMOUNT8"].ToString());
                    oLedg.dblAmount9 = Convert.ToDouble(dr["AMOUNT9"].ToString());
                    oLedg.dblAmount10 = Convert.ToDouble(dr["AMOUNT10"].ToString());
                    oLedg.dblAmount11 = Convert.ToDouble(dr["AMOUNT11"].ToString());
                    oLedg.dblAmount12 = Convert.ToDouble(dr["AMOUNT12"].ToString());
                    oLedg.dblAmount13 = Convert.ToDouble(dr["AMOUNT13"].ToString());
                    oLedg.dblAmount14 = Convert.ToDouble(dr["AMOUNT14"].ToString());
                    oLedg.dblAmount15 = Convert.ToDouble(dr["AMOUNT15"].ToString());

                    ooAccLedger.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RoMCommission oLedg = new RoMCommission();
                    oLedg.strArea = "";
                    oLedg.strLedger = "";
                    oLedg.strVoucherLedger = "";
                    oLedg.dblAmount1 = 0;
                    oLedg.dblAmount2 = 0;
                    oLedg.dblAmount3 = 0;
                    oLedg.dblAmount4 = 0;
                    oLedg.dblAmount5 = 0;
                    oLedg.dblAmount6 = 0;
                    oLedg.dblAmount7 = 0;
                    oLedg.dblAmount8 = 0;
                    oLedg.dblAmount9 = 0;
                    oLedg.dblAmount10 = 0;
                    oLedg.dblAmount11 = 0;
                    oLedg.dblAmount12 = 0;
                    oLedg.dblAmount13 = 0;
                    oLedg.dblAmount14 = 0;
                    oLedg.dblAmount15 = 0;

                    ooAccLedger.Add(oLedg);
                }


                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }


        }
        #endregion
        #region "GetBatchWiseProductionInd"
        public List<RoProduction> GetBatchWiseProductionInd(string strDeComID, string vstrRefNo)
        {

            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            SqlDataReader dr;
            List<RoProduction> ooProduction = new List<RoProduction>();

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                strSQL = "SELECT INV_PRODUCTION_MASTER.VOUCHER_DATE, SUBSTRING(INV_PRODUCTION_MASTER.VOUCHER_NO, 7, 30) as VOUCHER_NO,INV_PRODUCTION_MASTER.INV_LOG_NO ";
                strSQL = strSQL + ",ACC_BRANCH.BRANCH_NAME,INV_PRODUCTION_MASTER.CONSUMPTION_GODWNS_NAME,INV_PRODUCTION_CHILD.TO_FG_GODWNS_NAME, ";
                strSQL = strSQL + "INV_PRODUCTION_MASTER.PROCESS_NAME,INV_PRODUCTION_CHILD.STOCKITEM_NAME,";
                strSQL = strSQL + "INV_PRODUCTION_CHILD.STOCKITEM_BASEUNITS,INV_PRODUCTION_CHILD.RECEIEE_QNTY,INV_PRODUCTION_CHILD.QNTY,INV_PRODUCTION_CHILD.RATE,";
                strSQL = strSQL + "INV_PRODUCTION_MASTER.FG_SIZE,INV_PRODUCTION_CHILD.AMNT,INV_PRODUCTION_MASTER.APP_STATUS,INV_PRODUCTION_MASTER.INV_LOG_NO,INV_PRODUCTION_CHILD.PROCESS_TYPE ";
                strSQL = strSQL + "FROM INV_PRODUCTION_MASTER,INV_PRODUCTION_CHILD,ACC_BRANCH WHERE INV_PRODUCTION_MASTER.VOUCHER_NO =INV_PRODUCTION_CHILD.VOUCHER_NO ";
                strSQL = strSQL + "AND INV_PRODUCTION_MASTER.BRANCH_ID=ACC_BRANCH.BRANCH_ID ";
                if (vstrRefNo != "")
                {
                    strSQL = strSQL + "and INV_PRODUCTION_MASTER.VOUCHER_NO='" + vstrRefNo + "' ";
                }
                strSQL = strSQL + "ORDER BY INV_PRODUCTION_CHILD.PROCESS_TYPE ";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RoProduction oProduction = new RoProduction();
                    oProduction.strBatchNo = dr["INV_LOG_NO"].ToString();
                    oProduction.strVoucherNo = dr["VOUCHER_NO"].ToString();
                    oProduction.strBranchName = dr["BRANCH_NAME"].ToString();
                    oProduction.strdate = Convert.ToDateTime(dr["VOUCHER_DATE"]).ToString("dd-MM-yyyy");
                    oProduction.strConsumtionGodown = dr["CONSUMPTION_GODWNS_NAME"].ToString();
                    oProduction.strToFgGodown = dr["TO_FG_GODWNS_NAME"].ToString();
                    oProduction.strProcess = dr["PROCESS_NAME"].ToString();
                    oProduction.strStockItemName = dr["STOCKITEM_NAME"].ToString();
                    oProduction.strUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                    oProduction.dblReceipeQty = Convert.ToDouble(dr["RECEIEE_QNTY"].ToString());
                    oProduction.dblQty = Convert.ToDouble(dr["QNTY"].ToString());
                    oProduction.dblRate = Convert.ToDouble(dr["RATE"].ToString());
                    oProduction.dblAmount = Convert.ToDouble(dr["AMNT"].ToString());
                    if (dr["APP_STATUS"].ToString() != "")
                    {
                        if (Convert.ToInt32(dr["APP_STATUS"]) == 1)
                        {
                            oProduction.appStatus = "Approved";
                        }
                        else
                        {
                            oProduction.appStatus = "Not Approved";
                        }
                    }
                    oProduction.intProcessType = Convert.ToInt16(dr["PROCESS_TYPE"].ToString());

                    ooProduction.Add(oProduction);
                }
                if (!dr.HasRows)
                {
                    RoProduction oProduction = new RoProduction();
                    oProduction.strVoucherNo = "";
                    oProduction.strBranchName = "";
                    oProduction.strdate = "";
                    oProduction.strConsumtionGodown = "";
                    oProduction.strToFgGodown = "";
                    oProduction.strProcess = "";
                    oProduction.strStockItemName = "";
                    oProduction.strUnit = "";
                    oProduction.dblReceipeQty = 0;
                    oProduction.dblQty = 0;
                    oProduction.dblRate = 0;
                    oProduction.dblAmount = 0;
                    oProduction.appStatus = "";
                    oProduction.intProcessType = 0;

                }
                return ooProduction;
                dr.Close();
                gcnMain.Close();
                gcnMain.Dispose();
            }
        }

        #endregion
        #region "Monthly Production"
        public List<RoPackingRawMaterialsStockinfo> mGetLocationQty2(string strDeComID, string strFdate, string strTDate, string strString, string strSelction,
                                                 int intZeroQntySuppress, string strStringNew)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;
                if ("L" == "L")
                {
                    strSQL = "ALTER VIEW INV_TRAN_QRY2 AS ";
                    strSQL = strSQL + "SELECT GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME,SUM(INV_TRAN_QUANTITY) AS OPN_QUANTITY,";
                    strSQL = strSQL + "0 AS INWARD_RECEIVED, 0 INWARD_STOCKTRANSFER, ";
                    strSQL = strSQL + "0 OUTWARD_CONJUMPTION, 0 AS OUTWARD_STOCK_TRANSFER , 0 AS OUTWARD_DEFECT, 0 AS OUTWARD_WASTAGE , 0 AS OUTWARD_REPACK  ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE < " + Utility.cvtSQLDateString(strFdate) + ")  ";
                    //strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    if (strString != "")
                    {
                        strSQL = strSQL + " AND STOCKGROUP_NAME  IN(" + strString + ") ";
                    }
                    if (strSelction != "")
                    {
                        strSQL = strSQL + " AND GODOWNS_NAME   IN(" + strSelction + ") ";
                    }
                    strSQL = strSQL + "GROUP BY GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All "; //Received
                    strSQL = strSQL + "SELECT INV_TRAN.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME, ";
                    strSQL = strSQL + "0 OPN_QUANTITY,SUM(INWARD_QUANTITY) AS INWARD_RECEIVED, 0 INWARD_STOCKTRANSFER,  ";
                    strSQL = strSQL + "0 OUTWARD_CONJUMPTION, 0 AS OUTWARD_STOCK_TRANSFER , 0 AS OUTWARD_DEFECT, 0 AS OUTWARD_WASTAGE , 0 AS OUTWARD_REPACK  ";
                    strSQL = strSQL + "FROM INV_TRAN,INV_STOCKITEM,INV_STOCKGROUP  WHERE INV_STOCKITEM.STOCKITEM_NAME =INV_TRAN.STOCKITEM_NAME ";
                    strSQL = strSQL + "and INV_STOCKGROUP.STOCKGROUP_NAME=INV_STOCKITEM.STOCKGROUP_NAME  ";
                    strSQL = strSQL + "AND (INV_TRAN.INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "and  INV_TRAN.INV_VOUCHER_TYPE IN (33) ";
                    if (strString != "")
                    {
                        strSQL = strSQL + " AND INV_STOCKGROUP.STOCKGROUP_NAME  IN(" + strString + ") ";
                    }
                    if (strSelction != "")
                    {
                        strSQL = strSQL + " AND INV_TRAN.GODOWNS_NAME   IN(" + strSelction + ") ";
                    }
                    strSQL = strSQL + "GROUP BY INV_TRAN.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME  ";

                    strSQL = strSQL + "Union All ";//transfer in
                    strSQL = strSQL + "SELECT INV_TRAN.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME, ";
                    strSQL = strSQL + "0 OPN_QUANTITY, 0 AS INWARD_RECEIVED,SUM(INWARD_QUANTITY) AS INWARD_STOCKTRANSFER,  ";
                    strSQL = strSQL + "0 OUTWARD_CONJUMPTION, 0 AS OUTWARD_STOCK_TRANSFER , 0 AS OUTWARD_DEFECT, 0 AS OUTWARD_WASTAGE , 0 AS OUTWARD_REPACK  ";
                    strSQL = strSQL + "FROM INV_TRAN,INV_STOCKITEM,INV_STOCKGROUP  WHERE INV_STOCKITEM.STOCKITEM_NAME =INV_TRAN.STOCKITEM_NAME ";
                    strSQL = strSQL + "and INV_STOCKGROUP.STOCKGROUP_NAME=INV_STOCKITEM.STOCKGROUP_NAME  ";
                    strSQL = strSQL + "AND (INV_TRAN.INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_TRAN.INV_INOUT_FLAG='I'  ";
                    strSQL = strSQL + "and  INV_TRAN.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    if (strString != "")
                    {
                        strSQL = strSQL + " AND INV_STOCKGROUP.STOCKGROUP_NAME  IN(" + strString + ") ";
                    }
                    if (strSelction != "")
                    {
                        strSQL = strSQL + " AND INV_TRAN.GODOWNS_NAME   IN(" + strSelction + ") ";
                    }
                    strSQL = strSQL + "GROUP BY INV_TRAN.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME  ";

                    strSQL = strSQL + "Union All "; //condumtion
                    strSQL = strSQL + "SELECT INV_TRAN.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME, ";
                    strSQL = strSQL + "0 OPN_QUANTITY, 0 AS INWARD_RECEIVED,0 AS INWARD_STOCKTRANSFER,  ";
                    strSQL = strSQL + "(SUM(INV_TRAN.OUTWARD_QUANTITY))As OUTWARD_CONJUMPTION, 0 AS OUTWARD_STOCK_TRANSFER , 0 AS OUTWARD_DEFECT, 0 AS OUTWARD_WASTAGE , 0 AS OUTWARD_REPACK  ";
                    strSQL = strSQL + "FROM INV_TRAN,INV_STOCKITEM,INV_STOCKGROUP  WHERE INV_STOCKITEM.STOCKITEM_NAME =INV_TRAN.STOCKITEM_NAME ";
                    strSQL = strSQL + "and INV_STOCKGROUP.STOCKGROUP_NAME=INV_STOCKITEM.STOCKGROUP_NAME  ";
                    strSQL = strSQL + "AND (INV_TRAN.INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "and  INV_TRAN.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION + " ";
                    if (strString != "")
                    {
                        strSQL = strSQL + " AND INV_STOCKGROUP.STOCKGROUP_NAME  IN(" + strString + ") ";
                    }
                    if (strSelction != "")
                    {
                        strSQL = strSQL + " AND INV_TRAN.GODOWNS_NAME   IN(" + strSelction + ") ";
                    }
                    strSQL = strSQL + "GROUP BY INV_TRAN.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME  ";
                    //strSQL = strSQL + "Union All ";//repacking
                    //strSQL = strSQL + "SELECT INV_TRAN_REPACKING.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME, ";
                    //strSQL = strSQL + "0 OPN_QUANTITY, 0 AS INWARD_RECEIVED,0 AS INWARD_STOCKTRANSFER,  ";
                    //strSQL = strSQL + "SUM(INV_TRAN_REPACKING.QNTY) AS OUTWARD_CONJUMPTION, 0 AS OUTWARD_STOCK_TRANSFER , 0 AS OUTWARD_DEFECT, 0 AS OUTWARD_WASTAGE , 0 OUTWARD_REPACK  ";
                    //strSQL = strSQL + "FROM INV_TRAN_REPACKING,INV_STOCKITEM,INV_STOCKGROUP WHERE ";
                    //strSQL = strSQL + "INV_STOCKITEM.STOCKITEM_NAME =INV_TRAN_REPACKING.STOCKITEM_NAME and INV_STOCKGROUP.STOCKGROUP_NAME=INV_STOCKITEM.STOCKGROUP_NAME  ";
                    //strSQL = strSQL + "AND (INV_TRAN_REPACKING.COMP_VOUCHER_DATE BETWEEN ";
                    //strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    //strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    //if (strString != "")
                    //{
                    //    strSQL = strSQL + " AND INV_STOCKGROUP.STOCKGROUP_NAME  IN(" + strString + ") ";
                    //}
                    //if (strSelction != "")
                    //{
                    //    strSQL = strSQL + " AND INV_TRAN_REPACKING.GODOWNS_NAME   IN(" + strSelction + ") ";
                    //}
                    //strSQL = strSQL + "GROUP BY INV_TRAN_REPACKING.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME  ";
                    //cmdInsert.CommandText = strSQL;
                    //cmdInsert.ExecuteNonQuery();



                    strSQL = strSQL + "Union All ";//transfer out
                    strSQL = strSQL + "SELECT INV_TRAN.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME, ";
                    strSQL = strSQL + "0 OPN_QUANTITY, 0 AS INWARD_RECEIVED,0 AS INWARD_STOCKTRANSFER,  ";
                    strSQL = strSQL + "0 As OUTWARD_CONJUMPTION, SUM(INV_TRAN.OUTWARD_QUANTITY) AS OUTWARD_STOCK_TRANSFER , 0 AS OUTWARD_DEFECT, 0 AS OUTWARD_WASTAGE , 0 AS OUTWARD_REPACK  ";
                    strSQL = strSQL + "FROM INV_TRAN,INV_STOCKITEM,INV_STOCKGROUP  WHERE INV_STOCKITEM.STOCKITEM_NAME =INV_TRAN.STOCKITEM_NAME ";
                    strSQL = strSQL + "and INV_STOCKGROUP.STOCKGROUP_NAME=INV_STOCKITEM.STOCKGROUP_NAME  ";
                    strSQL = strSQL + "AND (INV_TRAN.INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_TRAN.INV_INOUT_FLAG='O'  ";
                    strSQL = strSQL + "and  INV_TRAN.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + "  ";
                    if (strString != "")
                    {
                        strSQL = strSQL + " AND INV_STOCKGROUP.STOCKGROUP_NAME  IN(" + strString + ") ";
                    }
                    if (strSelction != "")
                    {
                        strSQL = strSQL + " AND INV_TRAN.GODOWNS_NAME   IN(" + strSelction + ") ";
                    }
                    strSQL = strSQL + "GROUP BY INV_TRAN.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME  ";
                 
                    strSQL = strSQL + "Union All "; //defect
                    strSQL = strSQL + "SELECT INV_TRAN.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME, ";
                    strSQL = strSQL + "0 OPN_QUANTITY, 0 AS INWARD_RECEIVED,0 AS INWARD_STOCKTRANSFER,  ";
                    strSQL = strSQL + "0 As OUTWARD_CONJUMPTION, 0 AS OUTWARD_STOCK_TRANSFER , 0 AS OUTWARD_DEFECT, 0 OUTWARD_WASTAGE , 0 AS OUTWARD_REPACK  ";
                    strSQL = strSQL + "FROM INV_TRAN,INV_STOCKITEM,INV_STOCKGROUP  WHERE INV_STOCKITEM.STOCKITEM_NAME =INV_TRAN.STOCKITEM_NAME ";
                    strSQL = strSQL + "and INV_STOCKGROUP.STOCKGROUP_NAME=INV_STOCKITEM.STOCKGROUP_NAME  ";
                    strSQL = strSQL + "AND (INV_TRAN.INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    
                    strSQL = strSQL + "and  INV_TRAN.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE + "";
                    if (strString != "")
                    {
                        strSQL = strSQL + " AND INV_STOCKGROUP.STOCKGROUP_NAME  IN(" + strString + ") ";
                    }
                    if (strSelction != "")
                    {
                        strSQL = strSQL + " AND INV_TRAN.GODOWNS_NAME   IN(" + strSelction + ") ";
                    }
                    strSQL = strSQL + "GROUP BY INV_TRAN.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME  ";
                    strSQL = strSQL + "Union All ";//wastage
                    strSQL = strSQL + "SELECT INV_TRAN.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME, ";
                    strSQL = strSQL + "0 OPN_QUANTITY, 0 AS INWARD_RECEIVED,0 AS INWARD_STOCKTRANSFER,  ";
                    strSQL = strSQL + "0 As OUTWARD_CONJUMPTION, 0 AS OUTWARD_STOCK_TRANSFER , 0 AS OUTWARD_DEFECT, SUM(INV_TRAN.OUTWARD_QUANTITY) AS OUTWARD_WASTAGE , 0 OUTWARD_REPACK  ";
                    strSQL = strSQL + "FROM INV_TRAN,INV_STOCKITEM,INV_STOCKGROUP  WHERE INV_STOCKITEM.STOCKITEM_NAME =INV_TRAN.STOCKITEM_NAME ";
                    strSQL = strSQL + "and INV_STOCKGROUP.STOCKGROUP_NAME=INV_STOCKITEM.STOCKGROUP_NAME  ";
                    strSQL = strSQL + "AND (INV_TRAN.INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "and  INV_TRAN.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE + "  ";
                    if (strString != "")
                    {
                        strSQL = strSQL + " AND INV_STOCKGROUP.STOCKGROUP_NAME  IN(" + strString + ") ";
                    }
                    if (strSelction != "")
                    {
                        strSQL = strSQL + " AND INV_TRAN.GODOWNS_NAME   IN(" + strSelction + ") ";
                    }
                    strSQL = strSQL + "GROUP BY INV_TRAN.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = strSQL + "Union All ";//repacking
                    strSQL = strSQL + "SELECT INV_TRAN_REPACKING.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME, ";
                    strSQL = strSQL + "0 OPN_QUANTITY, 0 AS INWARD_RECEIVED,0 AS INWARD_STOCKTRANSFER,  ";
                    strSQL = strSQL + "0 As OUTWARD_CONJUMPTION, 0 AS OUTWARD_STOCK_TRANSFER , 0 AS OUTWARD_DEFECT, 0 AS OUTWARD_WASTAGE , SUM(INV_TRAN_REPACKING.QNTY) AS OUTWARD_REPACK  ";
                    strSQL = strSQL + "FROM INV_TRAN_REPACKING,INV_STOCKITEM,INV_STOCKGROUP WHERE ";
                    strSQL = strSQL + "INV_STOCKITEM.STOCKITEM_NAME =INV_TRAN_REPACKING.STOCKITEM_NAME and INV_STOCKGROUP.STOCKGROUP_NAME=INV_STOCKITEM.STOCKGROUP_NAME  ";
                    strSQL = strSQL + "AND (INV_TRAN_REPACKING.COMP_VOUCHER_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    if (strString != "")
                    {
                        strSQL = strSQL + " AND INV_STOCKGROUP.STOCKGROUP_NAME  IN(" + strString + ") ";
                    }
                    if (strSelction != "")
                    {
                        strSQL = strSQL + " AND INV_TRAN_REPACKING.GODOWNS_NAME   IN(" + strSelction + ") ";
                    }
                    strSQL = strSQL + "GROUP BY INV_TRAN_REPACKING.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "ALTER VIEW INV_OPENING_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME,SUM(OPN_QUANTITY) AS INV_TRAN_QUANTITY,  ";
                    strSQL = strSQL + "SUM(INWARD_RECEIVED) AS INWARD_RECEIVED, SUM(INWARD_STOCKTRANSFER) AS INWARD_STOCKTRANSFER,SUM(OUTWARD_CONJUMPTION) AS OUTWARD_CONJUMPTION, ";
                    strSQL = strSQL + "SUM(OUTWARD_STOCK_TRANSFER) AS OUTWARD_STOCK_TRANSFER,SUM(OUTWARD_DEFECT) AS OUTWARD_DEFECT ";
                    strSQL = strSQL + ",SUM(OUTWARD_WASTAGE) AS OUTWARD_WASTAGE ,SUM(OUTWARD_REPACK) AS OUTWARD_REPACK ";
                    strSQL = strSQL + "FROM INV_TRAN_QRY2 GROUP BY GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();

                    List<RoPackingRawMaterialsStockinfo> ooAccLedger = new List<RoPackingRawMaterialsStockinfo>();
                    strSQL = "SELECT  INV_OPENING_TRAN_QRY.GODOWNS_NAME, INV_OPENING_TRAN_QRY.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_BASEUNITS, INV_OPENING_TRAN_QRY.STOCKITEM_NAME, INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY, ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.INWARD_RECEIVED, INV_OPENING_TRAN_QRY.INWARD_STOCKTRANSFER, INV_OPENING_TRAN_QRY.OUTWARD_CONJUMPTION, INV_OPENING_TRAN_QRY.OUTWARD_STOCK_TRANSFER, ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.OUTWARD_DEFECT, INV_OPENING_TRAN_QRY.OUTWARD_WASTAGE, INV_OPENING_TRAN_QRY.OUTWARD_REPACK, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1,  ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5 ";
                    strSQL = strSQL + "FROM INV_OPENING_TRAN_QRY AS INV_OPENING_TRAN_QRY INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM AS INV_STOCKITEM ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL AS INV_STOCKITEM_LEVEL ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM_LEVEL.STOCKITEM_NAME ";

                    if (strString != "")
                    {

                        strSQL = strSQL + " where INV_OPENING_TRAN_QRY.STOCKGROUP_NAME  IN(" + strString + ")";

                    }

                    if (strSelction != "")
                    {

                        strSQL = strSQL + " AND INV_OPENING_TRAN_QRY.GODOWNS_NAME  IN(" + strSelction + ")";

                    }
                    strSQL = strSQL + "ORDER BY INV_OPENING_TRAN_QRY.GODOWNS_NAME, INV_STOCKITEM_LEVEL.STOCKITEM_NAME ";
                    //strSQL = strSQL + " ORDER BY INV_OPENING_TRAN_QRY.GODOWNS_NAME,INV_STOCKITEM_LEVEL.STOCKITEM_NAME ASC ";

                    cmdInsert.CommandText = strSQL;
                    cmdInsert.Connection = gcnMain;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        RoPackingRawMaterialsStockinfo oLedg = new RoPackingRawMaterialsStockinfo();
                        oLedg.strLocationName = dr["GODOWNS_NAME"].ToString();
                        oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                        oLedg.strGroupParent = dr["STOCKGROUP_LEVEL_1"].ToString();
                        oLedg.strGroupPrimary = dr["STOCKGROUP_LEVEL_2"].ToString();
                        oLedg.strAltUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                        oLedg.strGroupName = dr["STOCKGROUP_LEVEL_3"].ToString();
                        oLedg.dblOpening = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                        oLedg.dblInReceived = Convert.ToDouble(dr["INWARD_RECEIVED"].ToString());
                        oLedg.dblInStockTransfer = Convert.ToDouble(dr["INWARD_STOCKTRANSFER"].ToString());
                        oLedg.dblOutConjumption = Convert.ToDouble(dr["OUTWARD_CONJUMPTION"].ToString());
                        oLedg.dblOutdblStockTransfer = Math.Abs(Convert.ToDouble(dr["OUTWARD_STOCK_TRANSFER"].ToString()));
                        oLedg.dblOutDefect = Math.Abs(Convert.ToDouble(dr["OUTWARD_DEFECT"].ToString()));
                        oLedg.dblOutWastage = Math.Abs(Convert.ToDouble(dr["OUTWARD_WASTAGE"].ToString()));
                        oLedg.dblOutRepack = Math.Abs(Convert.ToDouble(dr["OUTWARD_REPACK"].ToString()));
                        ooAccLedger.Add(oLedg);
                    }
                    if (!dr.HasRows)
                    {
                        RoPackingRawMaterialsStockinfo oLedg = new RoPackingRawMaterialsStockinfo();
                        oLedg.strLocationName = "";
                        oLedg.strItemName = "";
                        oLedg.strGroupParent = "";
                        oLedg.strGroupPrimary = "";
                        oLedg.strAltUnit = "";
                        oLedg.strGroupName = "";
                        oLedg.dblOpening = 0;
                        oLedg.dblInReceived = 0;
                        oLedg.dblInStockTransfer = 0;
                        oLedg.dblOutConjumption = 0;
                        oLedg.dblOutdblStockTransfer = 0;
                        oLedg.dblOutDefect = 0;
                        oLedg.dblOutWastage = 0;
                        oLedg.dblOutRepack = 0;
                        ooAccLedger.Add(oLedg);
                    }

                    dr.Close();
                    gcnMain.Close();
                    return ooAccLedger;
                }

            }
        }

        public List<RoConsumption> mGetConversion(string strDeComID, string strFdate, string strTDate, string strStockGroup, string strLoacation, string strpowerClass, int intROption)
        {


            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;


                strSQL = "alter view Consumption as SELECT INV_STOCKITEM.STOCKGROUP_NAME, 'FG' as ProcessName ,INV_STOCKITEM.STOCKITEM_NAME, ";
                strSQL = strSQL + "INV_STOCKITEM.STOCKCATEGORY_NAME,SUM(INV_TRAN_QUANTITY) as Qty,INV_TRAN.GODOWNS_NAME    FROM INV_STOCKITEM,INV_TRAN WHERE ";
                strSQL = strSQL + "INV_STOCKITEM.STOCKITEM_NAME =INV_TRAN.STOCKITEM_NAME AND ";
                strSQL = strSQL + "INV_TRAN.CONVERSION_TYPE=1 AND INV_TRAN.INV_VOUCHER_TYPE =29 ";
                strSQL = strSQL + "AND INV_TRAN.INV_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " and " + Utility.cvtSQLDateString(strTDate) + "  ";
                strSQL = strSQL + "GROUP BY  INV_STOCKITEM.STOCKITEM_NAME,INV_STOCKITEM.STOCKCATEGORY_NAME,INV_STOCKITEM.STOCKGROUP_NAME  ,INV_TRAN.GODOWNS_NAME   ";
                strSQL = strSQL + "Union all ";
                strSQL = strSQL + "select S.STOCKGROUP_NAME, 'Consumption' as ProcessName,T.STOCKITEM_NAME,S.STOCKCATEGORY_NAME, abs( sum(T.INV_TRAN_QUANTITY)) as Qty,T.GODOWNS_NAME  ";
                strSQL = strSQL + "from  INV_PRODUCTION_LOG L, INV_TRAN T, INV_STOCKITEM S ";
                strSQL = strSQL + "WHERE  L.INV_REF_NO_OUT=T.INV_REF_NO and    T.STOCKITEM_NAME =S.STOCKITEM_NAME  and ";
                strSQL = strSQL + "L.INV_LOG_DATE between " + Utility.cvtSQLDateString(strFdate) + " and " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "and t.CONVERSION_TYPE =1  ";
                strSQL = strSQL + "GROUP BY  S.STOCKGROUP_NAME,S.STOCKCATEGORY_NAME,T.STOCKITEM_NAME,T.GODOWNS_NAME  ";

                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                cmdInsert.Transaction.Commit();
                List<RoConsumption> ooAccLedger = new List<RoConsumption>();

                strSQL = "select V.STOCKGROUP_NAME,V.ProcessName,V.STOCKITEM_NAME,V.STOCKCATEGORY_NAME,sum(V.Qty) as Qty ,V.GODOWNS_NAME ";
                strSQL = strSQL + "from Consumption V ,INV_STOCKITEM_LEVEL L ";
                strSQL = strSQL + "where V.STOCKITEM_NAME=L.STOCKITEM_NAME  ";



                if (strLoacation != "")
                {
                    strSQL = strSQL + " and V.GODOWNS_NAME  IN(" + strLoacation + ")";
                }
                if (strStockGroup != "")
                {
                    strSQL = strSQL + " AND L.STOCKGROUP_LEVEL_3  IN(" + strStockGroup + ")";
                }
                if (strpowerClass != "")
                {
                    strSQL = strSQL + " AND S.POWER_CLASS  IN(" + strpowerClass + ")";
                }
                strSQL = strSQL + "group by V.STOCKGROUP_NAME,V.ProcessName,V.STOCKITEM_NAME,V.STOCKCATEGORY_NAME,V.GODOWNS_NAME  ";
                strSQL = strSQL + "order by V.ProcessName,V.STOCKCATEGORY_NAME   ";

                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RoConsumption oLedg = new RoConsumption();
                    oLedg.strStockGroup = dr["STOCKGROUP_NAME"].ToString();
                    oLedg.strStockItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.strStockLocation = dr["GODOWNS_NAME"].ToString();
                    oLedg.strProcessName = dr["ProcessName"].ToString();
                    oLedg.strCategoryName = dr["STOCKCATEGORY_NAME"].ToString();
                    oLedg.dblConv450_ML = Convert.ToDouble(dr["Qty"].ToString());
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RoConsumption oLedg = new RoConsumption();
                    oLedg.strStockGroup = "";
                    oLedg.strStockItemName = "";
                    oLedg.strStockLocation = "";
                    oLedg.strProcessName = "";
                    oLedg.strCategoryName = "";
                    oLedg.dblConv450_ML = 0;
                    ooAccLedger.Add(oLedg);
                }

                dr.Close();
                gcnMain.Close();
                return ooAccLedger;
            }

        }
        public List<RoMonthlyProduction> mGetloadPowerClass(string strDeComID)
        {

            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RoMonthlyProduction> ooAccLedger = new List<RoMonthlyProduction>();
                strSQL = "select distinct left(POWER_CLASS,1)as pp ,POWER_CLASS from INV_STOCKITEM where ";
                strSQL = strSQL + "STOCKITEM_PRIMARY_GROUP='Finished Goods' and POWER_CLASS<> '' and  POWER_CLASS<> '-'order by left(POWER_CLASS,1) ";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RoMonthlyProduction oLedg = new RoMonthlyProduction();
                    oLedg.strPowerClass = dr["POWER_CLASS"].ToString();

                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RoMonthlyProduction oLedg = new RoMonthlyProduction();
                    oLedg.strPowerClass = "";
                    ooAccLedger.Add(oLedg);
                }

                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;



            }

        }

        public List<RoMonthlyProduction> mGetMonthlyProductionClassPower(string strDeComID, string strFdate, string strTDate, string strStockGroup, string strLoacation, string strpowerClass, int intROption)
        {
            string strBranchID = "0001";
            double dblTotal = 0;
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;
                if (strStockGroup.ToUpper() == "'DILUTION'")
                {
                    //strSQL = "alter VIEW INV_PRODUCTION_ClASS_POWER AS ";
                    //strSQL = strSQL + "SELECT ACC_BILL_TRAN.STOCKITEM_NAME as FG_ITEM,INV_STOCKITEM.STOCKCATEGORY_NAME,ACC_BILL_TRAN.INV_LOG_NO, ";
                    //strSQL = strSQL + "0 PREVIOUS, ISNULL(SUM(ACC_BILL_TRAN.BILL_QUANTITY),0) PRODUCTION,0 SAMPLE_TO_FG, 0 SAMPLE_TO_QC,0 CONVERSION,0 REPACKING , ";
                    //strSQL = strSQL + "ACC_BILL_TRAN.GODOWNS_NAME as TO_FG_GODWNS_NAME  from INV_STOCKITEM, ACC_BILL_TRAN ";
                    //strSQL = strSQL + "WHERE INV_STOCKITEM.STOCKITEM_NAME =ACC_BILL_TRAN.STOCKITEM_NAME AND   ";
                    //strSQL = strSQL + "ACC_BILL_TRAN.COMP_VOUCHER_TYPE IN(16,23,24,26,27,29,50) AND ";
                    //strSQL = strSQL + "ACC_BILL_TRAN.INV_INOUT_FLAG ='O' ";
                    //strSQL = strSQL + "ACC_BILL_TRAN.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                    //strSQL = strSQL + "GROUP BY ACC_BILL_TRAN.STOCKITEM_NAME,INV_STOCKITEM.STOCKCATEGORY_NAME,ACC_BILL_TRAN.INV_LOG_NO, ";
                    //strSQL = strSQL + "ACC_BILL_TRAN.GODOWNS_NAME  ";







                    strSQL = "alter VIEW INV_PRODUCTION_ClASS_POWER AS ";
                    strSQL = strSQL + "SELECT S.STOCKITEM_NAME as FG_ITEM,'' as STOCKCATEGORY_NAME,'' as INV_LOG_NO,t.GODOWNS_NAME as TO_FG_GODWNS_NAME, ";
                    strSQL = strSQL + "0 PREVIOUS, ISNULL(SUM(t.OUTWARD_QUANTITY),0) PRODUCTION,0 SAMPLE_TO_FG, 0 SAMPLE_TO_QC,0 CONVERSION,0 REPACKING  ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE in (27,29)  ";
                    strSQL = strSQL + "and t.INV_INOUT_FLAG ='O' ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strStockGroup != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strStockGroup + ") ";
                    }
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    strSQL = strSQL + "and t.CONVERSION_TYPE =1 ";
                    strSQL = strSQL + "group by S.STOCKITEM_NAME  , t.GODOWNS_NAME  ";
                    strSQL = strSQL + "UNION ALL ";
                    strSQL = strSQL + "SELECT S.STOCKITEM_NAME as FG_ITEM,'' as STOCKCATEGORY_NAME,'' as INV_LOG_NO,t.GODOWNS_NAME as TO_FG_GODWNS_NAME, ";
                    strSQL = strSQL + "0 PREVIOUS, ISNULL(SUM(t.OUTWARD_QUANTITY),0) PRODUCTION,0 SAMPLE_TO_FG, 0 SAMPLE_TO_QC,0 CONVERSION,0 REPACKING  ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strStockGroup != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strStockGroup + ") ";
                    }
                    strSQL = strSQL + "group by S.STOCKITEM_NAME  , t.GODOWNS_NAME  ";
                    strSQL = strSQL + "UNION ALL ";
                    strSQL = strSQL + "SELECT S.STOCKITEM_NAME as FG_ITEM,'' as STOCKCATEGORY_NAME,'' as INV_LOG_NO,t.GODOWNS_NAME as TO_FG_GODWNS_NAME, ";
                    strSQL = strSQL + "0 PREVIOUS, ISNULL(SUM(t.OUTWARD_QUANTITY),0) PRODUCTION,0 SAMPLE_TO_FG, 0 SAMPLE_TO_QC,0 CONVERSION,0 REPACKING  ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c ";
                    strSQL = strSQL + "where s.STOCKITEM_NAME =t.STOCKITEM_NAME   AND  c.COMP_REF_NO=t.INV_REF_NO ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "AND c.SAMPLE_STATUS=1 ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strStockGroup != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strStockGroup + ") ";
                    }
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    strSQL = strSQL + "group by S.STOCKITEM_NAME  , t.GODOWNS_NAME  ";
                    strSQL = strSQL + "UNION ALL ";
                    strSQL = strSQL + "SELECT S.STOCKITEM_NAME as FG_ITEM,'' as STOCKCATEGORY_NAME,'' as INV_LOG_NO,t.GODOWNS_NAME as TO_FG_GODWNS_NAME, ";
                    strSQL = strSQL + "0 PREVIOUS, ISNULL(SUM(t.OUTWARD_QUANTITY),0) PRODUCTION,0 SAMPLE_TO_FG, 0 SAMPLE_TO_QC,0 CONVERSION,0 REPACKING  ";
                    strSQL = strSQL + " from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c  ";
                    strSQL = strSQL + "where s.STOCKITEM_NAME =t.STOCKITEM_NAME   ";
                    strSQL = strSQL + "AND  c.COMP_REF_NO=t.INV_REF_NO ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "AND t.BILL_TRAN_AGST_VOUCHER_TYPE=" + (int)Utility.VOUCHER_TYPE.vt_SAMPLE_CLASS + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strStockGroup != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strStockGroup + ") ";
                    }
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    strSQL = strSQL + "group by S.STOCKITEM_NAME  , t.GODOWNS_NAME  ";
                    strSQL = strSQL + "UNION ALL ";
                    strSQL = strSQL + "SELECT S.STOCKITEM_NAME as FG_ITEM,'' as STOCKCATEGORY_NAME,'' as INV_LOG_NO,t.GODOWNS_NAME as TO_FG_GODWNS_NAME, ";
                    strSQL = strSQL + "0 PREVIOUS, ISNULL(SUM(t.BILL_QUANTITY),0) PRODUCTION,0 SAMPLE_TO_FG, 0 SAMPLE_TO_QC,0 CONVERSION,0 REPACKING  ";
                    strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME   ";
                    strSQL = strSQL + "AND t.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "and t.COMP_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSALES_INVOICE + " ";
                    if (strStockGroup != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strStockGroup + ") ";
                    }
                    strSQL = strSQL + " and s.POWER_CLASS is not null ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    strSQL = strSQL + "group by S.STOCKITEM_NAME  , t.GODOWNS_NAME  ";
                    strSQL = strSQL + "UNION ALL ";
                    strSQL = strSQL + "SELECT S.STOCKITEM_NAME as FG_ITEM,'' as STOCKCATEGORY_NAME,'' as INV_LOG_NO,t.GODOWNS_NAME as TO_FG_GODWNS_NAME, ";
                    strSQL = strSQL + "0 PREVIOUS, ISNULL(SUM(t.OUTWARD_QUANTITY),0) PRODUCTION,0 SAMPLE_TO_FG, 0 SAMPLE_TO_QC,0 CONVERSION,0 REPACKING  ";
                    strSQL = strSQL + " from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION + " ";
                    strSQL = strSQL + "and t.INV_INOUT_FLAG ='O' ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE = 26 ";
                    strSQL = strSQL + "and t.CONVERSION_TYPE =0 ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strStockGroup != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strStockGroup + ") ";
                    }
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    strSQL = strSQL + "group by S.STOCKITEM_NAME  , t.GODOWNS_NAME  ";
                    strSQL = strSQL + "UNION ALL ";
                    strSQL = strSQL + "SELECT S.STOCKITEM_NAME as FG_ITEM,'' as STOCKCATEGORY_NAME,'' as INV_LOG_NO,t.GODOWNS_NAME as TO_FG_GODWNS_NAME, ";
                    strSQL = strSQL + "0 PREVIOUS, ISNULL(SUM(t.OUTWARD_QUANTITY),0) PRODUCTION,0 SAMPLE_TO_FG, 0 SAMPLE_TO_QC,0 CONVERSION,0 REPACKING  ";
                    strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION + " ";
                    strSQL = strSQL + "and t.INV_INOUT_FLAG ='O' ";
                    strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                    strSQL = strSQL + "and t.INV_VOUCHER_TYPE = 26 ";
                    strSQL = strSQL + "and t.CONVERSION_TYPE =1 ";
                    if (strBranchID == "0001")
                    {
                        strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                    }
                    if (strStockGroup != "")
                    {
                        strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strStockGroup + ") ";
                    }
                    strSQL = strSQL + "and s.POWER_CLASS is not null ";
                    strSQL = strSQL + "group by S.STOCKITEM_NAME  , t.GODOWNS_NAME  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                else
                {


                    strSQL = "alter VIEW INV_PRODUCTION_ClASS_POWER AS ";
                    strSQL = strSQL + "SELECT INV_PRODUCTION_MASTER.FG_ITEM,INV_STOCKITEM.STOCKCATEGORY_NAME,INV_PRODUCTION_MASTER.INV_LOG_NO, ";
                    strSQL = strSQL + "ISNULL(SUM(INV_PRODUCTION_CHILD.QNTY),0) PREVIOUS, ";
                    strSQL = strSQL + "0 PRODUCTION,0 SAMPLE_TO_FG, 0 SAMPLE_TO_QC,0 CONVERSION,0 REPACKING ,INV_PRODUCTION_CHILD.TO_FG_GODWNS_NAME   ";
                    strSQL = strSQL + "from INV_STOCKITEM, INV_PRODUCTION_MASTER,INV_PRODUCTION_CHILD  ";
                    strSQL = strSQL + "WHERE INV_STOCKITEM.STOCKITEM_NAME =INV_PRODUCTION_CHILD.STOCKITEM_NAME AND  ";
                    strSQL = strSQL + "INV_PRODUCTION_MASTER.VOUCHER_NO = INV_PRODUCTION_CHILD.VOUCHER_NO  ";
                    strSQL = strSQL + "AND INV_PRODUCTION_CHILD.PROCESS_TYPE =0 AND INV_PRODUCTION_MASTER.VOUCHER_DATE < " + Utility.cvtSQLDateString(strFdate) + "  ";
                    strSQL = strSQL + "GROUP BY INV_PRODUCTION_MASTER.FG_ITEM,INV_STOCKITEM.STOCKCATEGORY_NAME,INV_PRODUCTION_CHILD.RECEIEE_QNTY,INV_PRODUCTION_MASTER.INV_LOG_NO, ";
                    strSQL = strSQL + "INV_PRODUCTION_MASTER.SAMPLE_TO_FG,INV_PRODUCTION_MASTER.SAMPLE_TO_QC,INV_PRODUCTION_CHILD.TO_FG_GODWNS_NAME  ";
                    strSQL = strSQL + "UNION ALL ";

                    strSQL = strSQL + "SELECT INV_PRODUCTION_MASTER.FG_ITEM,INV_STOCKITEM.STOCKCATEGORY_NAME,INV_PRODUCTION_MASTER.INV_LOG_NO,0 PREVIOUS, ";
                    strSQL = strSQL + "ISNULL(SUM(INV_PRODUCTION_CHILD.QNTY),0)PRODUCTION, ";
                    strSQL = strSQL + "INV_PRODUCTION_MASTER.SAMPLE_TO_FG,INV_PRODUCTION_MASTER.SAMPLE_TO_QC,0 CONVERSION ,0 REPACKING,INV_PRODUCTION_CHILD.TO_FG_GODWNS_NAME    ";
                    strSQL = strSQL + "from INV_STOCKITEM, INV_PRODUCTION_MASTER,INV_PRODUCTION_CHILD  ";
                    strSQL = strSQL + "WHERE INV_STOCKITEM.STOCKITEM_NAME =INV_PRODUCTION_CHILD.STOCKITEM_NAME AND INV_PRODUCTION_MASTER.VOUCHER_NO = INV_PRODUCTION_CHILD.VOUCHER_NO  ";
                    strSQL = strSQL + "AND INV_PRODUCTION_CHILD.PROCESS_TYPE =0 AND ";
                    strSQL = strSQL + "INV_PRODUCTION_MASTER.VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "GROUP BY INV_PRODUCTION_MASTER.FG_ITEM,INV_STOCKITEM.STOCKCATEGORY_NAME,INV_PRODUCTION_CHILD.RECEIEE_QNTY,INV_PRODUCTION_MASTER.INV_LOG_NO, ";
                    strSQL = strSQL + "INV_PRODUCTION_MASTER.SAMPLE_TO_FG,INV_PRODUCTION_MASTER.SAMPLE_TO_QC,INV_PRODUCTION_CHILD.TO_FG_GODWNS_NAME  ";
                    strSQL = strSQL + "union all ";

                    strSQL = strSQL + "SELECT INV_PRODUCTION_MASTER.FG_ITEM,INV_STOCKITEM.STOCKCATEGORY_NAME,INV_PRODUCTION_MASTER.INV_LOG_NO,0 PREVIOUS, ";
                    strSQL = strSQL + "0 PRODUCTION, ";
                    strSQL = strSQL + "0 SAMPLE_TO_FG,0 SAMPLE_TO_QC,ISNULL(SUM(INV_TRAN.INV_TRAN_QUANTITY),0) CONVERSION,0 REPACKING,INV_PRODUCTION_CHILD.TO_FG_GODWNS_NAME   ";
                    strSQL = strSQL + "from INV_STOCKITEM, INV_PRODUCTION_MASTER,INV_PRODUCTION_CHILD,INV_TRAN  ";
                    strSQL = strSQL + "WHERE INV_STOCKITEM.STOCKITEM_NAME =INV_PRODUCTION_CHILD.STOCKITEM_NAME and INV_PRODUCTION_CHILD.STOCKITEM_NAME=INV_TRAN.STOCKITEM_NAME  ";
                    strSQL = strSQL + "AND INV_PRODUCTION_MASTER.VOUCHER_NO = INV_PRODUCTION_CHILD.VOUCHER_NO  ";
                    strSQL = strSQL + "AND INV_PRODUCTION_CHILD.PROCESS_TYPE =0 ";
                    strSQL = strSQL + "AND INV_PRODUCTION_MASTER.VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + "  AND " + Utility.cvtSQLDateString(strTDate) + "  ";
                    strSQL = strSQL + "and INV_TRAN.CONVERSION_TYPE=1 ";
                    strSQL = strSQL + "GROUP BY INV_PRODUCTION_MASTER.FG_ITEM,INV_STOCKITEM.STOCKCATEGORY_NAME,INV_PRODUCTION_CHILD.RECEIEE_QNTY,INV_PRODUCTION_MASTER.INV_LOG_NO, ";
                    strSQL = strSQL + "INV_PRODUCTION_MASTER.SAMPLE_TO_FG,INV_PRODUCTION_MASTER.SAMPLE_TO_QC,INV_PRODUCTION_CHILD.TO_FG_GODWNS_NAME  ";
                    strSQL = strSQL + "union all ";


                    strSQL = strSQL + "select S.STOCKITEM_NAME,S.STOCKCATEGORY_NAME,'' INV_LOG_NO,0 PREVIOUS,sum(T.INWARD_QUANTITY) as PRODUCTION,0 SAMPLE_TO_FG, ";
                    strSQL = strSQL + "0 SAMPLE_TO_QC,0 CONVERSION,0 REPACKING ,T.GODOWNS_NAME   from  INV_TRAN T, INV_STOCKITEM S ";
                    strSQL = strSQL + "where T.STOCKITEM_NAME= S.STOCKITEM_NAME and T.INV_VOUCHER_TYPE=27  ";
                    strSQL = strSQL + "and  T.INV_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND " + Utility.cvtSQLDateString(strTDate) + "  ";
                    strSQL = strSQL + "group by S.STOCKITEM_NAME,S.STOCKCATEGORY_NAME,T.GODOWNS_NAME    ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                }


                cmdInsert.Transaction.Commit();

                List<RoMonthlyProduction> ooAccLedger = new List<RoMonthlyProduction>();

                strSQL = "select S.POWER_CLASS, S.STOCKCATEGORY_NAME,V.INV_LOG_NO,sum(V.PREVIOUS)as PREVIOUS, sum(V.PRODUCTION) as PRODUCTION,sum(V.REPACKING) as REPACKING,";
                strSQL = strSQL + "sum(V.SAMPLE_TO_FG) as SAMPLE_TO_FG,sum(V.SAMPLE_TO_QC) as SAMPLE_TO_QC, sum(V.CONVERSION) as CONVERSION, ";
                strSQL = strSQL + "V.TO_FG_GODWNS_NAME,L.STOCKGROUP_LEVEL_1 ,L.STOCKGROUP_LEVEL_2  ";
                strSQL = strSQL + ",L.STOCKGROUP_LEVEL_3 ,L.STOCKGROUP_LEVEL_4 ,L.STOCKGROUP_LEVEL_5  ";
                strSQL = strSQL + "from INV_PRODUCTION_ClASS_POWER V ,INV_STOCKITEM S ,INV_STOCKITEM_LEVEL L ";
                strSQL = strSQL + "where V.FG_ITEM=S.STOCKITEM_NAME and V.FG_ITEM=L.STOCKITEM_NAME ";
                if (strLoacation != "")
                {
                    strSQL = strSQL + " and V.TO_FG_GODWNS_NAME  IN(" + strLoacation + ")";
                }
                if (strStockGroup != "")
                {
                    strSQL = strSQL + " AND L.STOCKGROUP_LEVEL_3  IN(" + strStockGroup + ")";
                }
                if (strpowerClass != "")
                {
                    strSQL = strSQL + " AND S.POWER_CLASS  IN(" + strpowerClass + ")";
                }
                strSQL = strSQL + " Group by S.POWER_CLASS, S.STOCKCATEGORY_NAME,V.INV_LOG_NO,CONVERSION,V.TO_FG_GODWNS_NAME,L.STOCKGROUP_LEVEL_1 ,L.STOCKGROUP_LEVEL_2  ,L.STOCKGROUP_LEVEL_3 ,L.STOCKGROUP_LEVEL_4 ,L.STOCKGROUP_LEVEL_5 ";
                strSQL = strSQL + " order by S.POWER_CLASS, S.STOCKCATEGORY_NAME desc";
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RoMonthlyProduction oLedg = new RoMonthlyProduction();
                    oLedg.strLocationname = dr["TO_FG_GODWNS_NAME"].ToString();
                    oLedg.strStockGroup = dr["STOCKGROUP_LEVEL_3"].ToString();
                    oLedg.strPowerClass = dr["POWER_CLASS"].ToString();
                    oLedg.strPackSize = dr["STOCKCATEGORY_NAME"].ToString();
                    oLedg.dblPrevious = Convert.ToDouble(dr["PREVIOUS"].ToString());
                    oLedg.dblProduction = Convert.ToDouble(dr["PRODUCTION"].ToString());
                    oLedg.dblRepacking = Convert.ToDouble(dr["REPACKING"].ToString());
                    dblTotal = (Convert.ToDouble(dr["PREVIOUS"].ToString()) + Convert.ToDouble(dr["PRODUCTION"].ToString()));
                    oLedg.dblSampleToFG = dblTotal;
                    oLedg.dblSampleToQC = Convert.ToDouble(dr["SAMPLE_TO_QC"].ToString());
                    oLedg.dblConversion = Convert.ToDouble(dr["CONVERSION"].ToString());
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RoMonthlyProduction oLedg = new RoMonthlyProduction();
                    oLedg.strItemName = "";
                    oLedg.strPackSize = "";
                    oLedg.dblBatchSize = 0;
                    oLedg.strBatchNo = "";
                    oLedg.dblPrevious = 0;
                    oLedg.dblProduction = 0;
                    oLedg.dblSampleToFG = 0;
                    oLedg.dblSampleToQC = 0;
                    ooAccLedger.Add(oLedg);
                }

                dr.Close();
                gcnMain.Close();
                return ooAccLedger;
            }

        }

        public List<RoMonthlyProduction> mGetMonthlyProduction(string strDeComID, string strFdate, string strTDate, string strStockGroup, string strLoacation, int intROption)
        {

            double dblTotal = 0;
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;

                strSQL = "ALTER VIEW INV_PRODUCTION_MVC AS ";
                strSQL = strSQL + "SELECT INV_PRODUCTION_MASTER.FG_ITEM,INV_STOCKITEM.STOCKCATEGORY_NAME,0 RECEIEE_QNTY, ";
                strSQL = strSQL + "INV_PRODUCTION_MASTER.INV_LOG_NO,ISNULL(SUM(INV_PRODUCTION_CHILD.QNTY),0) PREVIOUS, ";
                strSQL = strSQL + "0 PRODUCTION,0 SAMPLE_TO_FG, 0 SAMPLE_TO_QC,INV_PRODUCTION_CHILD.TO_FG_GODWNS_NAME  ";
                strSQL = strSQL + "from INV_STOCKITEM, INV_PRODUCTION_MASTER,INV_PRODUCTION_CHILD  ";
                strSQL = strSQL + "WHERE INV_STOCKITEM.STOCKITEM_NAME =INV_PRODUCTION_CHILD.STOCKITEM_NAME AND INV_PRODUCTION_MASTER.VOUCHER_NO = INV_PRODUCTION_CHILD.VOUCHER_NO  ";
                strSQL = strSQL + "AND INV_PRODUCTION_CHILD.PROCESS_TYPE =0 AND INV_PRODUCTION_MASTER.VOUCHER_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "GROUP BY INV_PRODUCTION_MASTER.FG_ITEM,INV_STOCKITEM.STOCKCATEGORY_NAME,INV_PRODUCTION_CHILD.RECEIEE_QNTY,INV_PRODUCTION_MASTER.INV_LOG_NO, ";
                strSQL = strSQL + "INV_PRODUCTION_MASTER.SAMPLE_TO_FG,INV_PRODUCTION_MASTER.SAMPLE_TO_QC,INV_PRODUCTION_CHILD.TO_FG_GODWNS_NAME ";
                strSQL = strSQL + "UNION ALL ";

                strSQL = strSQL + "SELECT INV_PRODUCTION_MASTER.FG_ITEM,INV_STOCKITEM.STOCKCATEGORY_NAME,INV_PRODUCTION_CHILD.RECEIEE_QNTY,INV_PRODUCTION_MASTER.INV_LOG_NO,0 PREVIOUS, ";
                strSQL = strSQL + "ISNULL(SUM(INV_PRODUCTION_CHILD.QNTY),0)PRODUCTION, ";
                strSQL = strSQL + "INV_PRODUCTION_MASTER.SAMPLE_TO_FG,INV_PRODUCTION_MASTER.SAMPLE_TO_QC,INV_PRODUCTION_CHILD.TO_FG_GODWNS_NAME   from INV_STOCKITEM, INV_PRODUCTION_MASTER,INV_PRODUCTION_CHILD  ";
                strSQL = strSQL + "WHERE INV_STOCKITEM.STOCKITEM_NAME =INV_PRODUCTION_CHILD.STOCKITEM_NAME AND INV_PRODUCTION_MASTER.VOUCHER_NO = INV_PRODUCTION_CHILD.VOUCHER_NO  ";
                strSQL = strSQL + "AND INV_PRODUCTION_CHILD.PROCESS_TYPE =0 ";
                strSQL = strSQL + "AND INV_PRODUCTION_MASTER.VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + "AND " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "GROUP BY INV_PRODUCTION_MASTER.FG_ITEM,INV_STOCKITEM.STOCKCATEGORY_NAME,INV_PRODUCTION_CHILD.RECEIEE_QNTY,INV_PRODUCTION_MASTER.INV_LOG_NO, ";
                strSQL = strSQL + "INV_PRODUCTION_MASTER.SAMPLE_TO_FG,INV_PRODUCTION_MASTER.SAMPLE_TO_QC,INV_PRODUCTION_CHILD.TO_FG_GODWNS_NAME ";



                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                cmdInsert.Transaction.Commit();
                List<RoMonthlyProduction> ooAccLedger = new List<RoMonthlyProduction>();

                //strSQL = "SELECT FG_ITEM,V.STOCKCATEGORY_NAME,ISNULL(SUM(RECEIEE_QNTY),0) RECEIEE_QNTY,INV_LOG_NO,ISNULL(SUM(PREVIOUS),0) ";
                //strSQL = strSQL + "PREVIOUS,ISNULL(SUM(PRODUCTION),0)PRODUCTION,ISNULL(SUM(SAMPLE_TO_FG),0) SAMPLE_TO_FG, ";
                //strSQL = strSQL + "ISNULL(SUM(SAMPLE_TO_QC),0) SAMPLE_TO_QC,V.TO_FG_GODWNS_NAME ";
                //strSQL = strSQL + "FROM INV_PRODUCTION_MVC V,INV_STOCKITEM_LEVEL L   ";

                //if (strLoacation != "")
                //{
                //    strSQL = strSQL + " WHERE INV_OPENING_TRAN_QRY.GODOWNS_NAME  IN(" + strLoacation + ")";
                //}
                //if (strStockGroup != "")
                //{
                //    strSQL = strSQL + " AND INV_OPENING_TRAN_QRY.STOCKGROUP_NAME  IN(" + strStockGroup + ")";
                //}
                //strSQL = strSQL + "GROUP BY FG_ITEM,V.STOCKCATEGORY_NAME,INV_LOG_NO ,L.STOCKGROUP_LEVEL_1 ,L.STOCKGROUP_LEVEL_2 ";
                //strSQL = strSQL + ",L.STOCKGROUP_LEVEL_3 ,L.STOCKGROUP_LEVEL_4 ,L.STOCKGROUP_LEVEL_5,V.TO_FG_GODWNS_NAME";



                strSQL = "SELECT FG_ITEM,V.STOCKCATEGORY_NAME,ISNULL(SUM(RECEIEE_QNTY),0) RECEIEE_QNTY,INV_LOG_NO,ISNULL(SUM(PREVIOUS),0) PREVIOUS, ";
                strSQL = strSQL + "ISNULL(SUM(PRODUCTION),0)PRODUCTION,ISNULL(SUM(SAMPLE_TO_FG),0) SAMPLE_TO_FG, ISNULL(SUM(SAMPLE_TO_QC),0)  ";
                strSQL = strSQL + "SAMPLE_TO_QC ,L.STOCKGROUP_LEVEL_1 ,L.STOCKGROUP_LEVEL_2 ,L.STOCKGROUP_LEVEL_3 ,L.STOCKGROUP_LEVEL_4 ,L.STOCKGROUP_LEVEL_5 ";
                strSQL = strSQL + ",V.TO_FG_GODWNS_NAME ";
                strSQL = strSQL + "FROM INV_PRODUCTION_MVC V,INV_STOCKITEM_LEVEL L  ";
                strSQL = strSQL + "where V.FG_ITEM=L.STOCKITEM_NAME ";
                if (strLoacation != "")
                {
                    strSQL = strSQL + " and V.TO_FG_GODWNS_NAME  IN(" + strLoacation + ")";
                }
                if (strStockGroup != "")
                {
                    strSQL = strSQL + " AND L.STOCKGROUP_LEVEL_3  IN(" + strStockGroup + ")";
                }
                strSQL = strSQL + "GROUP BY FG_ITEM,V.STOCKCATEGORY_NAME,INV_LOG_NO ,L.STOCKGROUP_LEVEL_1 ,L.STOCKGROUP_LEVEL_2 ,L.STOCKGROUP_LEVEL_3  ";
                strSQL = strSQL + ",L.STOCKGROUP_LEVEL_4 ,L.STOCKGROUP_LEVEL_5,V.TO_FG_GODWNS_NAME ";

                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RoMonthlyProduction oLedg = new RoMonthlyProduction();

                    oLedg.strLocationname = dr["TO_FG_GODWNS_NAME"].ToString();
                    oLedg.strItemName = dr["FG_ITEM"].ToString();
                    oLedg.strStockGroup = dr["STOCKGROUP_LEVEL_3"].ToString();
                    oLedg.strPackSize = dr["STOCKCATEGORY_NAME"].ToString();
                    oLedg.dblBatchSize = Convert.ToDouble(dr["RECEIEE_QNTY"].ToString());
                    oLedg.strBatchNo = dr["INV_LOG_NO"].ToString();
                    oLedg.dblPrevious = Convert.ToDouble(dr["PREVIOUS"].ToString());
                    oLedg.dblProduction = Convert.ToDouble(dr["PRODUCTION"].ToString());

                    dblTotal = (Convert.ToDouble(dr["PREVIOUS"].ToString()) + Convert.ToDouble(dr["PRODUCTION"].ToString()));

                    if (dblTotal < Convert.ToDouble(dr["RECEIEE_QNTY"].ToString()))
                    {
                        oLedg.dblLoss = (((dblTotal * 100) / Convert.ToDouble(dr["RECEIEE_QNTY"].ToString())));
                    }
                    else
                    {
                        oLedg.dblGain = (((dblTotal * 100) / Convert.ToDouble(dr["RECEIEE_QNTY"].ToString())));
                    }
                    oLedg.dblSampleToFG = Convert.ToDouble(dr["SAMPLE_TO_FG"].ToString());
                    oLedg.dblSampleToQC = Convert.ToDouble(dr["SAMPLE_TO_QC"].ToString());
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RoMonthlyProduction oLedg = new RoMonthlyProduction();
                    oLedg.strItemName = "";
                    oLedg.strPackSize = "";
                    oLedg.dblBatchSize = 0;
                    oLedg.strBatchNo = "";
                    oLedg.dblPrevious = 0;
                    oLedg.dblProduction = 0;
                    oLedg.dblSampleToFG = 0;
                    oLedg.dblSampleToQC = 0;
                    ooAccLedger.Add(oLedg);
                }

                dr.Close();
                gcnMain.Close();
                return ooAccLedger;
            }

        }
        #endregion
        #region "Payment Summ Monthly/Yearly"
        public List<RoPaymentSummaryMonthly> mGetPaymentSummaryMonthly(string strDeComID, string strYear, int intmode)
        {

            string strSQL = "", strJV="";
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;

                List<RoPaymentSummaryMonthly> ooAccLedger = new List<RoPaymentSummaryMonthly>();

                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;

                strSQL = "DELETE FROM Payment_Summary_Monthly_Temp ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //JANUARY
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month1) ";
                strSQL = strSQL + "SELECT VOUCHER_REVERSE_LEDGER, sum(VOUCHER_CREDIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=1  and VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }
               
                strSQL = strSQL + "Group by VOUCHER_REVERSE_LEDGER ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //New 
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month1) ";
                strSQL = strSQL + "SELECT LEDGER_NAME, sum(VOUCHER_DEBIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=1 and VOUCHER_REVERSE_LEDGER = 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //*********
                strJV = "";
                strSQL = "SELECT DISTINCT ACC_VOUCHER.COMP_REF_NO FROM ACC_VOUCHER,ACC_LEDGER WHERE ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_LEDGER.LEDGER_GROUP IN (100,101) AND COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_REVERSE_LEDGER = 'As per Details' AND  ACC_VOUCHER.AUTOJV=0  AND Month(ACC_VOUCHER.COMP_VOUCHER_DATE)=1 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY='Cr' ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    strJV = strJV + "'" + dr["COMP_REF_NO"].ToString() + "'" + ",";
                }
                dr.Close();
                if (strJV != "")
                {
                    strJV = Utility.Mid(strJV, 0, strJV.Length - 1);
                }
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month1) ";
                strSQL = strSQL + "select V.LEDGER_NAME,ABS(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                // strSQL = strSQL + "and l.LEDGER_GROUP <> " + (int)Utility.GR_GROUP_TYPE.grCash + " ";
                strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                //strSQL = strSQL + "and l.LEDGER_GROUP =" + (int)Utility.GR_GROUP_TYPE.grBANKACCOUNTS + " ";
                strSQL = strSQL + "and Month(v.COMP_VOUCHER_DATE)=1 ";
                strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                strSQL = strSQL + "group by V.LEDGER_NAME ";
                //having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month1) ";
                strSQL = strSQL + "select V.VOUCHER_REVERSE_LEDGER,abs(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME and l.LEDGER_GROUP <> 101  and v.COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "and l.LEDGER_GROUP =100 AND year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=1 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND V.AUTOJV=0 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                strSQL = strSQL + " AND  V.VOUCHER_REVERSE_LEDGER IN (SELECT LEDGER_NAME FROM ACC_LEDGER WHERE LEDGER_GROUP =100) ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and V.LEDGER_NAME ='Cash Of Head Office' ";
                }
              
                strSQL = strSQL + "group by V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                if (strJV != "")
                {
                    strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month1) ";
                    strSQL = strSQL + "select V.LEDGER_NAME,sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "AND  Month(v.COMP_VOUCHER_DATE)=1 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase','Bkash Non Active' ) ";
                    strSQL = strSQL + " and v.COMP_REF_NO in (" + strJV + ")";
                    strSQL = strSQL + "AND V.AUTOJV=0 ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    strSQL = strSQL + "group by  V.LEDGER_NAME,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) > 0 ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }


                //***********FEB
                strJV = "";
                strSQL = "SELECT DISTINCT ACC_VOUCHER.COMP_REF_NO FROM ACC_VOUCHER,ACC_LEDGER WHERE ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_LEDGER.LEDGER_GROUP IN (100,101) AND COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_REVERSE_LEDGER = 'As per Details' AND  ACC_VOUCHER.AUTOJV=0  AND Month(ACC_VOUCHER.COMP_VOUCHER_DATE)=2 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY='Cr' ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    strJV = strJV + "'" + dr["COMP_REF_NO"].ToString() + "'" + ",";
                }
                dr.Close();
                if (strJV != "")
                {
                    strJV = Utility.Mid(strJV, 0, strJV.Length - 1);
                }
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month2) ";
                strSQL = strSQL + "SELECT VOUCHER_REVERSE_LEDGER, sum(VOUCHER_CREDIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=2 and VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }
              
                strSQL = strSQL + "Group by VOUCHER_REVERSE_LEDGER ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //New 
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month2) ";
                strSQL = strSQL + "SELECT LEDGER_NAME, sum(VOUCHER_DEBIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=2 and VOUCHER_REVERSE_LEDGER = 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //*********
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month2) ";
                strSQL = strSQL + "select V.LEDGER_NAME,ABS(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                strSQL = strSQL + "and Month(v.COMP_VOUCHER_DATE)=2 ";
                strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                strSQL = strSQL + "group by V.LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month2) ";
                strSQL = strSQL + "select V.VOUCHER_REVERSE_LEDGER,abs(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME and l.LEDGER_GROUP <> 101  and v.COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "and l.LEDGER_GROUP =100 AND year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=2 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND V.AUTOJV=0 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                strSQL = strSQL + " AND  V.VOUCHER_REVERSE_LEDGER IN (SELECT LEDGER_NAME FROM ACC_LEDGER WHERE LEDGER_GROUP =100) ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and V.LEDGER_NAME ='Cash Of Head Office' ";
                }
              
                strSQL = strSQL + "group by V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                if (strJV != "")
                {
                    strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month2) ";
                    strSQL = strSQL + "select V.LEDGER_NAME,sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "AND  Month(v.COMP_VOUCHER_DATE)=2 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase','Bkash Non Active' ) ";
                    strSQL = strSQL + " and v.COMP_REF_NO in (" + strJV + ")";
                    strSQL = strSQL + "AND V.AUTOJV=0 ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    strSQL = strSQL + "group by  V.LEDGER_NAME,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) > 0 ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }

                ///MARCH
                strJV = "";
                strSQL = "SELECT DISTINCT ACC_VOUCHER.COMP_REF_NO FROM ACC_VOUCHER,ACC_LEDGER WHERE ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_LEDGER.LEDGER_GROUP IN (100,101) AND COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_REVERSE_LEDGER = 'As per Details' AND  ACC_VOUCHER.AUTOJV=0  AND Month(ACC_VOUCHER.COMP_VOUCHER_DATE)=3 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY='Cr' ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    strJV = strJV + "'" + dr["COMP_REF_NO"].ToString() + "'" + ",";
                }
                dr.Close();
                if (strJV != "")
                {
                    strJV = Utility.Mid(strJV, 0, strJV.Length - 1);
                }
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month3) ";
                strSQL = strSQL + "SELECT VOUCHER_REVERSE_LEDGER, sum(VOUCHER_CREDIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=3 and VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by VOUCHER_REVERSE_LEDGER ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //New 
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month3) ";
                strSQL = strSQL + "SELECT LEDGER_NAME, sum(VOUCHER_DEBIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=3 and VOUCHER_REVERSE_LEDGER = 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //*********
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month3) ";
                strSQL = strSQL + "select V.LEDGER_NAME,ABS(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                strSQL = strSQL + "and Month(v.COMP_VOUCHER_DATE)=3 ";
                strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                strSQL = strSQL + "group by V.LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month3) ";
                strSQL = strSQL + "select V.VOUCHER_REVERSE_LEDGER,abs(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME and l.LEDGER_GROUP <> 101  and v.COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "and l.LEDGER_GROUP =100 AND year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=3 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND V.AUTOJV=0 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                strSQL = strSQL + " AND  V.VOUCHER_REVERSE_LEDGER IN (SELECT LEDGER_NAME FROM ACC_LEDGER WHERE LEDGER_GROUP =100) ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and V.LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "group by V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                if (strJV != "")
                {
                    strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month3) ";
                    strSQL = strSQL + "select V.LEDGER_NAME,sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "AND  Month(v.COMP_VOUCHER_DATE)=3 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase','Bkash Non Active' ) ";
                    strSQL = strSQL + " and v.COMP_REF_NO in (" + strJV + ")";
                    strSQL = strSQL + "AND V.AUTOJV=0 ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    strSQL = strSQL + "group by  V.LEDGER_NAME,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) > 0 ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                ///APR
                strJV = "";
                strSQL = "SELECT DISTINCT ACC_VOUCHER.COMP_REF_NO FROM ACC_VOUCHER,ACC_LEDGER WHERE ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_LEDGER.LEDGER_GROUP IN (100,101) AND COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_REVERSE_LEDGER = 'As per Details' AND  ACC_VOUCHER.AUTOJV=0  AND Month(ACC_VOUCHER.COMP_VOUCHER_DATE)=4 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY='Cr' ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    strJV = strJV + "'" + dr["COMP_REF_NO"].ToString() + "'" + ",";
                }
                dr.Close();
                if (strJV != "")
                {
                    strJV = Utility.Mid(strJV, 0, strJV.Length - 1);
                }
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month4) ";
                strSQL = strSQL + "SELECT VOUCHER_REVERSE_LEDGER, sum(VOUCHER_CREDIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=4 and VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by VOUCHER_REVERSE_LEDGER ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //New 
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month4) ";
                strSQL = strSQL + "SELECT LEDGER_NAME, sum(VOUCHER_DEBIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=4 and VOUCHER_REVERSE_LEDGER = 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //*********
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month4) ";
                strSQL = strSQL + "select V.LEDGER_NAME,ABS(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                strSQL = strSQL + "and Month(v.COMP_VOUCHER_DATE)=4 ";
                strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                strSQL = strSQL + "group by V.LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month4) ";
                strSQL = strSQL + "select V.VOUCHER_REVERSE_LEDGER,abs(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME and l.LEDGER_GROUP <> 101  and v.COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "and l.LEDGER_GROUP =100 AND year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=4 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND V.AUTOJV=0 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                strSQL = strSQL + " AND  V.VOUCHER_REVERSE_LEDGER IN (SELECT LEDGER_NAME FROM ACC_LEDGER WHERE LEDGER_GROUP =100) ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and V.LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "group by V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                if (strJV != "")
                {
                    strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month4) ";
                    strSQL = strSQL + "select V.LEDGER_NAME,sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "AND  Month(v.COMP_VOUCHER_DATE)=4 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase','Bkash Non Active' ) ";
                    strSQL = strSQL + " and v.COMP_REF_NO in (" + strJV + ")";
                    strSQL = strSQL + "AND V.AUTOJV=0 ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    strSQL = strSQL + "group by  V.LEDGER_NAME,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) > 0 ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                ///MAY
                strJV = "";
                strSQL = "SELECT DISTINCT ACC_VOUCHER.COMP_REF_NO FROM ACC_VOUCHER,ACC_LEDGER WHERE ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_LEDGER.LEDGER_GROUP IN (100,101) AND COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_REVERSE_LEDGER = 'As per Details' AND  ACC_VOUCHER.AUTOJV=0  AND Month(ACC_VOUCHER.COMP_VOUCHER_DATE)=5 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY='Cr' ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    strJV = strJV + "'" + dr["COMP_REF_NO"].ToString() + "'" + ",";
                }
                dr.Close();
                if (strJV != "")
                {
                    strJV = Utility.Mid(strJV, 0, strJV.Length - 1);
                }

                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month5) ";
                strSQL = strSQL + "SELECT VOUCHER_REVERSE_LEDGER, sum(VOUCHER_CREDIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=5 and VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by VOUCHER_REVERSE_LEDGER ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //New 
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month5) ";
                strSQL = strSQL + "SELECT LEDGER_NAME, sum(VOUCHER_DEBIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=5 and VOUCHER_REVERSE_LEDGER = 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //*********
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month5) ";
                strSQL = strSQL + "select V.LEDGER_NAME,ABS(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                strSQL = strSQL + "and Month(v.COMP_VOUCHER_DATE)=5 ";
                strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                strSQL = strSQL + "group by V.LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month5) ";
                strSQL = strSQL + "select V.VOUCHER_REVERSE_LEDGER,abs(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME and l.LEDGER_GROUP <> 101  and v.COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "and l.LEDGER_GROUP =100 AND year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=5 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND V.AUTOJV=0 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                strSQL = strSQL + " AND  V.VOUCHER_REVERSE_LEDGER IN (SELECT LEDGER_NAME FROM ACC_LEDGER WHERE LEDGER_GROUP =100) ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and V.LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "group by V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                if (strJV != "")
                {
                    strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month5) ";
                    strSQL = strSQL + "select V.LEDGER_NAME,sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "AND  Month(v.COMP_VOUCHER_DATE)=5 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase','Bkash Non Active' ) ";
                    strSQL = strSQL + " and v.COMP_REF_NO in (" + strJV + ")";
                    strSQL = strSQL + "AND V.AUTOJV=0 ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    strSQL = strSQL + "group by  V.LEDGER_NAME,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) > 0 ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                ///JUNE
                ///
                strJV = "";
                strSQL = "SELECT DISTINCT ACC_VOUCHER.COMP_REF_NO FROM ACC_VOUCHER,ACC_LEDGER WHERE ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_LEDGER.LEDGER_GROUP IN (100,101) AND COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_REVERSE_LEDGER = 'As per Details' AND  ACC_VOUCHER.AUTOJV=0  AND Month(ACC_VOUCHER.COMP_VOUCHER_DATE)=6 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY='Cr' ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    strJV = strJV + "'" + dr["COMP_REF_NO"].ToString() + "'" + ",";
                }
                dr.Close();
                if (strJV != "")
                {
                    strJV = Utility.Mid(strJV, 0, strJV.Length - 1);
                }
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month6) ";
                strSQL = strSQL + "SELECT VOUCHER_REVERSE_LEDGER, sum(VOUCHER_CREDIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=6 and VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by VOUCHER_REVERSE_LEDGER ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //New 
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month6) ";
                strSQL = strSQL + "SELECT LEDGER_NAME, sum(VOUCHER_DEBIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=6 and VOUCHER_REVERSE_LEDGER = 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //*********
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month6) ";
                strSQL = strSQL + "select V.LEDGER_NAME,ABS(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                strSQL = strSQL + "and Month(v.COMP_VOUCHER_DATE)=6 ";
                strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                strSQL = strSQL + "group by V.LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month6) ";
                strSQL = strSQL + "select V.VOUCHER_REVERSE_LEDGER,abs(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME and l.LEDGER_GROUP <> 101  and v.COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "and l.LEDGER_GROUP =100 AND year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=6 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND V.AUTOJV=0 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                strSQL = strSQL + " AND  V.VOUCHER_REVERSE_LEDGER IN (SELECT LEDGER_NAME FROM ACC_LEDGER WHERE LEDGER_GROUP =100) ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and V.LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "group by V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                if (strJV != "")
                {
                    strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month6) ";
                    strSQL = strSQL + "select V.LEDGER_NAME,sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "AND  Month(v.COMP_VOUCHER_DATE)=6 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase','Bkash Non Active' ) ";
                    strSQL = strSQL + " and v.COMP_REF_NO in (" + strJV + ")";
                    strSQL = strSQL + "AND V.AUTOJV=0 ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    strSQL = strSQL + "group by  V.LEDGER_NAME,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) > 0 ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }

                //JULY

                strJV = "";
                strSQL = "SELECT DISTINCT ACC_VOUCHER.COMP_REF_NO FROM ACC_VOUCHER,ACC_LEDGER WHERE ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_LEDGER.LEDGER_GROUP IN (100,101) AND COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_REVERSE_LEDGER = 'As per Details' AND  ACC_VOUCHER.AUTOJV=0  AND Month(ACC_VOUCHER.COMP_VOUCHER_DATE)=7 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY='Cr' ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    strJV = strJV + "'" + dr["COMP_REF_NO"].ToString() + "'" + ",";
                }
                dr.Close();
                if (strJV != "")
                {
                    strJV = Utility.Mid(strJV, 0, strJV.Length - 1);
                }
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month7) ";
                strSQL = strSQL + "SELECT VOUCHER_REVERSE_LEDGER, sum(VOUCHER_CREDIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=7 and VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by VOUCHER_REVERSE_LEDGER ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //New 
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month7) ";
                strSQL = strSQL + "SELECT LEDGER_NAME, sum(VOUCHER_DEBIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=7 and VOUCHER_REVERSE_LEDGER = 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //*********
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month7) ";
                strSQL = strSQL + "select V.LEDGER_NAME,ABS(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                strSQL = strSQL + "and Month(v.COMP_VOUCHER_DATE)=7 ";
                strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                strSQL = strSQL + "group by V.LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month7) ";
                strSQL = strSQL + "select V.VOUCHER_REVERSE_LEDGER,abs(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME and l.LEDGER_GROUP <> 101  and v.COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "and l.LEDGER_GROUP =100 AND year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=7 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND V.AUTOJV=0 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                strSQL = strSQL + " AND  V.VOUCHER_REVERSE_LEDGER IN (SELECT LEDGER_NAME FROM ACC_LEDGER WHERE LEDGER_GROUP =100) ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and V.LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "group by V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                if (strJV != "")
                {
                    strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month7) ";
                    strSQL = strSQL + "select V.LEDGER_NAME,sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "AND  Month(v.COMP_VOUCHER_DATE)=7 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase','Bkash Non Active' ) ";
                    strSQL = strSQL + " and v.COMP_REF_NO in (" + strJV + ")";
                    strSQL = strSQL + "AND V.AUTOJV=0 ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    strSQL = strSQL + "group by  V.LEDGER_NAME,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) > 0 ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                ///AUGUST
                strJV = "";
                strSQL = "SELECT DISTINCT ACC_VOUCHER.COMP_REF_NO FROM ACC_VOUCHER,ACC_LEDGER WHERE ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_LEDGER.LEDGER_GROUP IN (100,101) AND COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_REVERSE_LEDGER = 'As per Details' AND  ACC_VOUCHER.AUTOJV=0  AND Month(ACC_VOUCHER.COMP_VOUCHER_DATE)=8 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY='Cr' ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    strJV = strJV + "'" + dr["COMP_REF_NO"].ToString() + "'" + ",";
                }
                dr.Close();
                if (strJV != "")
                {
                    strJV = Utility.Mid(strJV, 0, strJV.Length - 1);
                }
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month8) ";
                strSQL = strSQL + "SELECT VOUCHER_REVERSE_LEDGER, sum(VOUCHER_CREDIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=8 and VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by VOUCHER_REVERSE_LEDGER ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //New 
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month8) ";
                strSQL = strSQL + "SELECT LEDGER_NAME, sum(VOUCHER_DEBIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=8 and VOUCHER_REVERSE_LEDGER = 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //*********
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month8) ";
                strSQL = strSQL + "select V.LEDGER_NAME,ABS(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                strSQL = strSQL + "and Month(v.COMP_VOUCHER_DATE)=8 ";
                strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                strSQL = strSQL + "group by V.LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month8) ";
                strSQL = strSQL + "select V.VOUCHER_REVERSE_LEDGER,abs(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME and l.LEDGER_GROUP <> 101  and v.COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "and l.LEDGER_GROUP =100 AND year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=8 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND V.AUTOJV=0 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                strSQL = strSQL + " AND  V.VOUCHER_REVERSE_LEDGER IN (SELECT LEDGER_NAME FROM ACC_LEDGER WHERE LEDGER_GROUP =100) ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and V.LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "group by V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                if (strJV != "")
                {
                    strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month8) ";
                    strSQL = strSQL + "select V.LEDGER_NAME,sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "AND  Month(v.COMP_VOUCHER_DATE)=8 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase','Bkash Non Active' ) ";
                    strSQL = strSQL + " and v.COMP_REF_NO in (" + strJV + ")";
                    strSQL = strSQL + "AND V.AUTOJV=0 ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    strSQL = strSQL + "group by  V.LEDGER_NAME,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) > 0 ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                //SEPTEMBER
                strJV = "";
                strSQL = "SELECT DISTINCT ACC_VOUCHER.COMP_REF_NO FROM ACC_VOUCHER,ACC_LEDGER WHERE ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_LEDGER.LEDGER_GROUP IN (100,101) AND COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_REVERSE_LEDGER = 'As per Details' AND  ACC_VOUCHER.AUTOJV=0  AND Month(ACC_VOUCHER.COMP_VOUCHER_DATE)=9 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY='Cr' ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    strJV = strJV + "'" + dr["COMP_REF_NO"].ToString() + "'" + ",";
                }
                dr.Close();
                if (strJV != "")
                {
                    strJV = Utility.Mid(strJV, 0, strJV.Length - 1);
                }
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month9) ";
                strSQL = strSQL + "SELECT VOUCHER_REVERSE_LEDGER, sum(VOUCHER_CREDIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=9 and VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by VOUCHER_REVERSE_LEDGER ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //New 
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month9) ";
                strSQL = strSQL + "SELECT LEDGER_NAME, sum(VOUCHER_DEBIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=9 and VOUCHER_REVERSE_LEDGER = 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //*********
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month9) ";
                strSQL = strSQL + "select V.LEDGER_NAME,ABS(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                strSQL = strSQL + "and Month(v.COMP_VOUCHER_DATE)=9 ";
                strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                strSQL = strSQL + "group by V.LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month9) ";
                strSQL = strSQL + "select V.VOUCHER_REVERSE_LEDGER,abs(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME and l.LEDGER_GROUP <> 101  and v.COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "and l.LEDGER_GROUP =100 AND year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=9 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND V.AUTOJV=0 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                strSQL = strSQL + " AND  V.VOUCHER_REVERSE_LEDGER IN (SELECT LEDGER_NAME FROM ACC_LEDGER WHERE LEDGER_GROUP =100) ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and V.LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "group by V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                if (strJV != "")
                {
                    strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month9) ";
                    strSQL = strSQL + "select V.LEDGER_NAME,sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "AND  Month(v.COMP_VOUCHER_DATE)=9 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase','Bkash Non Active' ) ";
                    strSQL = strSQL + " and v.COMP_REF_NO in (" + strJV + ")";
                    strSQL = strSQL + "AND V.AUTOJV=0 ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    strSQL = strSQL + "group by  V.LEDGER_NAME,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) > 0 ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }

                //OCTOBER
                strJV = "";
                strSQL = "SELECT DISTINCT ACC_VOUCHER.COMP_REF_NO FROM ACC_VOUCHER,ACC_LEDGER WHERE ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_LEDGER.LEDGER_GROUP IN (100,101) AND COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_REVERSE_LEDGER = 'As per Details' AND  ACC_VOUCHER.AUTOJV=0  AND Month(ACC_VOUCHER.COMP_VOUCHER_DATE)=10 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY='Cr' ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    strJV = strJV + "'" + dr["COMP_REF_NO"].ToString() + "'" + ",";
                }
                dr.Close();
                if (strJV != "")
                {
                    strJV = Utility.Mid(strJV, 0, strJV.Length - 1);
                }
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month10) ";
                strSQL = strSQL + "SELECT VOUCHER_REVERSE_LEDGER, sum(VOUCHER_CREDIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=10 and VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by VOUCHER_REVERSE_LEDGER ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //New 
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month10) ";
                strSQL = strSQL + "SELECT LEDGER_NAME, sum(VOUCHER_DEBIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=10 and VOUCHER_REVERSE_LEDGER = 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //*********
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month10) ";
                strSQL = strSQL + "select V.LEDGER_NAME,ABS(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                strSQL = strSQL + "and Month(v.COMP_VOUCHER_DATE)=10 ";
                strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                strSQL = strSQL + "group by V.LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month10) ";
                strSQL = strSQL + "select V.VOUCHER_REVERSE_LEDGER,abs(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME and l.LEDGER_GROUP <> 101  and v.COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "and l.LEDGER_GROUP =100 AND year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=10 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND V.AUTOJV=0 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                strSQL = strSQL + " AND  V.VOUCHER_REVERSE_LEDGER IN (SELECT LEDGER_NAME FROM ACC_LEDGER WHERE LEDGER_GROUP =100) ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and V.LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "group by V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                if (strJV != "")
                {
                    strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month10) ";
                    strSQL = strSQL + "select V.LEDGER_NAME,sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "AND  Month(v.COMP_VOUCHER_DATE)=10 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase','Bkash Non Active' ) ";
                    strSQL = strSQL + " and v.COMP_REF_NO in (" + strJV + ")";
                    strSQL = strSQL + "AND V.AUTOJV=0 ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    strSQL = strSQL + "group by  V.LEDGER_NAME,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) > 0 ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }

                //NOVE
                strJV = "";
                strSQL = "SELECT DISTINCT ACC_VOUCHER.COMP_REF_NO FROM ACC_VOUCHER,ACC_LEDGER WHERE ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_LEDGER.LEDGER_GROUP IN (100,101) AND COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_REVERSE_LEDGER = 'As per Details' AND  ACC_VOUCHER.AUTOJV=0  AND Month(ACC_VOUCHER.COMP_VOUCHER_DATE)=11 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY='Cr' ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    strJV = strJV + "'" + dr["COMP_REF_NO"].ToString() + "'" + ",";
                }
                dr.Close();
                if (strJV != "")
                {
                    strJV = Utility.Mid(strJV, 0, strJV.Length - 1);
                }
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month11) ";
                strSQL = strSQL + "SELECT VOUCHER_REVERSE_LEDGER, sum(VOUCHER_CREDIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=11 and VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by VOUCHER_REVERSE_LEDGER ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //New 
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month11) ";
                strSQL = strSQL + "SELECT LEDGER_NAME, sum(VOUCHER_DEBIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=11 and VOUCHER_REVERSE_LEDGER = 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //*********
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month11) ";
                strSQL = strSQL + "select V.LEDGER_NAME,ABS(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                strSQL = strSQL + "and Month(v.COMP_VOUCHER_DATE)=11 ";
                strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                strSQL = strSQL + "group by V.LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month11) ";
                strSQL = strSQL + "select V.VOUCHER_REVERSE_LEDGER,abs(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME and l.LEDGER_GROUP <> 101  and v.COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "and l.LEDGER_GROUP =100 AND year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=11 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND V.AUTOJV=0 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                strSQL = strSQL + " AND  V.VOUCHER_REVERSE_LEDGER IN (SELECT LEDGER_NAME FROM ACC_LEDGER WHERE LEDGER_GROUP =100) ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and V.LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "group by V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                if (strJV != "")
                {
                    strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month11) ";
                    strSQL = strSQL + "select V.LEDGER_NAME,sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "AND  Month(v.COMP_VOUCHER_DATE)=11 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase','Bkash Non Active' ) ";
                    strSQL = strSQL + " and v.COMP_REF_NO in (" + strJV + ")";
                    strSQL = strSQL + "AND V.AUTOJV=0 ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    strSQL = strSQL + "group by  V.LEDGER_NAME,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) > 0 ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                ///DEC
                strJV = "";
                strSQL = "SELECT DISTINCT ACC_VOUCHER.COMP_REF_NO FROM ACC_VOUCHER,ACC_LEDGER WHERE ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_LEDGER.LEDGER_GROUP IN (100,101) AND COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_REVERSE_LEDGER = 'As per Details' AND  ACC_VOUCHER.AUTOJV=0  AND Month(ACC_VOUCHER.COMP_VOUCHER_DATE)=12 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY='Cr' ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    strJV = strJV + "'" + dr["COMP_REF_NO"].ToString() + "'" + ",";
                }
                dr.Close();
                if (strJV != "")
                {
                    strJV = Utility.Mid(strJV, 0, strJV.Length - 1);
                }
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month12) ";
                strSQL = strSQL + "SELECT VOUCHER_REVERSE_LEDGER, sum(VOUCHER_CREDIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=12 and VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by VOUCHER_REVERSE_LEDGER ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //New 
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month12) ";
                strSQL = strSQL + "SELECT LEDGER_NAME, sum(VOUCHER_DEBIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=12 and VOUCHER_REVERSE_LEDGER = 'As per Details' ";
                strSQL = strSQL + "AND AUTOJV=0 ";
                strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "Group by LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //*********
                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month12) ";
                strSQL = strSQL + "select V.LEDGER_NAME,ABS(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                strSQL = strSQL + "and Month(v.COMP_VOUCHER_DATE)=12 ";
                strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                strSQL = strSQL + "group by V.LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month12) ";
                strSQL = strSQL + "select V.VOUCHER_REVERSE_LEDGER,abs(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME and l.LEDGER_GROUP <> 101  and v.COMP_VOUCHER_TYPE in (3) ";
                strSQL = strSQL + "and l.LEDGER_GROUP =100 AND year(COMP_VOUCHER_DATE)='" + strYear + "' and Month(COMP_VOUCHER_DATE)=12 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                strSQL = strSQL + "AND V.AUTOJV=0 ";
                strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                strSQL = strSQL + " AND  V.VOUCHER_REVERSE_LEDGER IN (SELECT LEDGER_NAME FROM ACC_LEDGER WHERE LEDGER_GROUP =100) ";
                if (intmode == 1)
                {
                    strSQL = strSQL + "and V.LEDGER_NAME ='Cash Of Head Office' ";
                }

                strSQL = strSQL + "group by V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                if (strJV != "")
                {
                    strSQL = "INSERT INTO Payment_Summary_Monthly_Temp(LEDGER_NAME,Month12) ";
                    strSQL = strSQL + "select V.LEDGER_NAME,sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "AND  Month(v.COMP_VOUCHER_DATE)=12 and year(COMP_VOUCHER_DATE)='" + strYear + "'";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase','Bkash Non Active' ) ";
                    strSQL = strSQL + " and v.COMP_REF_NO in (" + strJV + ")";
                    strSQL = strSQL + "AND V.AUTOJV=0 ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    strSQL = strSQL + "group by  V.LEDGER_NAME,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) > 0 ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }

                
                cmdInsert.Transaction.Commit();
                //strSQL = "SELECT LEDGER_NAME, Month1, Month2, Month3, Month4, Month5, Month6, Month7, Month8, Month9 ";
                //strSQL = strSQL + ", Month10, Month11, Month12 FROM Payment_Summary_Monthly_Temp ";
                strSQL = "SELECT LEDGER_NAME, sum(Month1)as Month1, sum(Month2)as Month2, sum(Month3)as Month3, sum(Month4)as Month4, sum(Month5)as Month5, ";
                strSQL = strSQL + "sum(Month6)as Month6, sum(Month7)as Month7, sum(Month8)as Month8, sum(Month9)as Month9, ";
                strSQL = strSQL + "sum(Month10)as Month10, sum(Month11)as Month11, sum(Month12)as Month12 FROM Payment_Summary_Monthly_Temp ";
                strSQL = strSQL + "group by LEDGER_NAME ";
                strSQL = strSQL + "order by LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

             


                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RoPaymentSummaryMonthly oLedg = new RoPaymentSummaryMonthly();
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    if (dr["Month1"].ToString() != "")
                    {
                        oLedg.dbl1stMonthAmount = Convert.ToDouble(dr["Month1"].ToString());
                    }
                    else
                    {
                        oLedg.dbl1stMonthAmount = 0;
                    }
                    if (dr["Month2"].ToString() != "")
                    {
                        oLedg.dbl2ndMonthAmount = Convert.ToDouble(dr["Month2"].ToString());
                    }
                    else
                    {
                        oLedg.dbl2ndMonthAmount = 0;
                    }
                    if (dr["Month3"].ToString() != "")
                    {
                        oLedg.dbl3rdMonthAmount = Convert.ToDouble(dr["Month3"].ToString());
                    }
                    else
                    {
                        oLedg.dbl3rdMonthAmount = 0;
                    }
                    if (dr["Month4"].ToString() != "")
                    {
                        oLedg.dbl4thMonthAmount = Convert.ToDouble(dr["Month4"].ToString());
                    }
                    else
                    {
                        oLedg.dbl4thMonthAmount = 0;
                    }
                    if (dr["Month5"].ToString() != "")
                    {
                        oLedg.dbl5thMonthAmount = Convert.ToDouble(dr["Month5"].ToString());
                    }
                    else
                    {
                        oLedg.dbl5thMonthAmount = 0;
                    }
                    if (dr["Month6"].ToString() != "")
                    {
                        oLedg.dbl6thMonthAmount = Convert.ToDouble(dr["Month6"].ToString());
                    }
                    else
                    {
                        oLedg.dbl6thMonthAmount = 0;
                    }
                    if (dr["Month7"].ToString() != "")
                    {
                        oLedg.dbl7tMonthAmount = Convert.ToDouble(dr["Month7"].ToString());
                    }
                    else
                    {
                        oLedg.dbl7tMonthAmount = 0;
                    }
                    if (dr["Month8"].ToString() != "")
                    {
                        oLedg.dbl8thMonthAmount = Convert.ToDouble(dr["Month8"].ToString());
                    }
                    else
                    {
                        oLedg.dbl8thMonthAmount = 0;
                    }
                    if (dr["Month9"].ToString() != "")
                    {
                        oLedg.dbl9thMonthAmount = Convert.ToDouble(dr["Month9"].ToString());
                    }
                    else
                    {
                        oLedg.dbl9thMonthAmount = 0;
                    }
                    if (dr["Month10"].ToString() != "")
                    {
                        oLedg.dbl10thhMonthAmount = Convert.ToDouble(dr["Month10"].ToString());
                    }
                    else
                    {
                        oLedg.dbl10thhMonthAmount = 0;
                    }
                    if (dr["Month11"].ToString() != "")
                    {
                        oLedg.dbl11thMonthAmount = Convert.ToDouble(dr["Month11"].ToString());
                    }
                    else
                    {
                        oLedg.dbl11thMonthAmount = 0;
                    }
                    if (dr["Month12"].ToString() != "")
                    {
                        oLedg.dbl12thMonthAmount = Convert.ToDouble(dr["Month12"].ToString());
                    }
                    else
                    {
                        oLedg.dbl12thMonthAmount = 0;
                    }
                    ooAccLedger.Add(oLedg);

                }

                if (!dr.HasRows)
                {
                    RoPaymentSummaryMonthly oLedg = new RoPaymentSummaryMonthly();
                    oLedg.dbl1stMonthAmount = 0;
                    oLedg.dbl2ndMonthAmount = 0;
                    oLedg.dbl3rdMonthAmount = 0;
                    oLedg.dbl5thMonthAmount = 0;
                    oLedg.dbl6thMonthAmount = 0;
                    oLedg.dbl7tMonthAmount = 0;
                    oLedg.dbl8thMonthAmount = 0;
                    oLedg.dbl10thhMonthAmount = 0;
                    oLedg.dbl10thhMonthAmount = 0;
                    oLedg.dbl10thhMonthAmount = 0;
                    oLedg.dbl10thhMonthAmount = 0;
                    oLedg.dbl10thhMonthAmount = 0;
                    ooAccLedger.Add(oLedg);
                }

                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;

            }
        }
        public List<RoPaymentSummaryearly> mGetPaymentSummaryYearly(string strDeComID, string strYear1, int intmode)
        {

            string strSQL = "";
            int intmode1 = 0, intmode2 = 0, intmode3 = 0, intmode4 = 0;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
               

                List<RoPaymentSummaryearly> ooPaymentsummaryYear = new List<RoPaymentSummaryearly>();

                strSQL = "SELECT LEDGER_NAME,sum(Year1) as Year1 , SUM(Value1) AS Value1,sum(Year2) as Year2, ";
                strSQL = strSQL + "SUM(Value2) AS Value2, sum(Year3) as Year3,SUM(Value3) AS Value3 ,sum(Year4) as Year4, ";
                strSQL = strSQL + "SUM(Value4) AS Value4 FROM PAYMENT_SUMMARY_TEMP ";
                //strSQL = strSQL + "where LEDGER_NAME='Accurade Salary. B' ";
                strSQL = strSQL + "GROUP BY LEDGER_NAME ";

                cmdInsert.CommandText = strSQL;
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RoPaymentSummaryearly oLedg = new RoPaymentSummaryearly();
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();

                    if (Convert.ToInt32(dr["Year1"].ToString()) != 0)
                    {
                        oLedg.IntYear1 = Convert.ToInt32(dr["Year1"].ToString());
                        intmode1 = Convert.ToInt32(dr["Year1"].ToString());
                    }
                    else
                    {
                        oLedg.IntYear1 = intmode1;
                    }
                    if (dr["Value1"].ToString() != "")
                    {
                        oLedg.dbl1stYearAmont = Convert.ToDouble(dr["Value1"].ToString());
                    }
                    else
                    {
                        oLedg.dbl1stYearAmont = 0;
                    }
                    if (Convert.ToInt32(dr["Year2"].ToString()) != 0)
                    {
                        oLedg.IntYear2 = Convert.ToInt32(dr["Year2"].ToString());
                        intmode2 = Convert.ToInt32(dr["Year2"].ToString());
                    }
                    else
                    {
                        oLedg.IntYear2 = intmode2;
                    }

                    if (dr["Value2"].ToString() != "")
                    {
                        oLedg.dbl2ndYearAmont = Convert.ToDouble(dr["Value2"].ToString());
                    }
                    else
                    {
                        oLedg.dbl2ndYearAmont = 0;
                    }
                    if (Convert.ToInt32(dr["Year3"].ToString()) != 0)
                    {
                        oLedg.IntYear3 = Convert.ToInt32(dr["Year3"].ToString());
                        intmode3 = Convert.ToInt32(dr["Year3"].ToString());
                    }
                    else
                    {
                        oLedg.IntYear3 = intmode3;
                    }

                    if (dr["Value3"].ToString() != "")
                    {
                        oLedg.dbl3rdYearAmont = Convert.ToDouble(dr["Value3"].ToString());
                    }
                    else
                    {
                        oLedg.dbl3rdYearAmont = 0;
                    }
                    if (Convert.ToInt32(dr["Year4"].ToString()) != 0)
                    {

                        oLedg.IntYear4 = Convert.ToInt32(dr["Year4"].ToString());
                        intmode4 = Convert.ToInt32(dr["Year4"].ToString());
                    }
                    else
                    {
                        oLedg.IntYear4 = intmode4;
                    }


                    if (dr["Value4"].ToString() != "")
                    {
                        oLedg.dbl4thYearAmont = Convert.ToDouble(dr["Value4"].ToString());
                    }
                    else
                    {
                        oLedg.dbl4thYearAmont = 0;
                    }
                    ooPaymentsummaryYear.Add(oLedg);

                }

                if (!dr.HasRows)
                {
                    RoPaymentSummaryearly oLedg = new RoPaymentSummaryearly();
                    oLedg.dbl1stYearAmont = 0;
                    oLedg.dbl2ndYearAmont = 0;
                    oLedg.dbl3rdYearAmont = 0;
                    oLedg.dbl4thYearAmont = 0;
                    ooPaymentsummaryYear.Add(oLedg);
                }

                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooPaymentsummaryYear;


               
            }
        }

        #endregion
        #region "Daily Collection New"
        public List<RoDayliCollection> mgetDailyCollectionN(string strDeComID)
        {

            SqlDataReader dr;
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            List<RoDayliCollection> ooAccLed = new List<RoDayliCollection>();

            strSQL = "select D.Voucher_Date, sum(D.BKashAccount) as BKashAccount, ";
            strSQL = strSQL + "sum(D.BkashNonActive) as BkashNonActive,sum(D.CashOfHeadOffice) as CashOfHeadOffice, ";
            strSQL = strSQL + "sum(D.PBL01341SND) as PBL01341SND ";
            strSQL = strSQL + ",sum(D.PubaliBankLimitedHerbalSND1260) as PubaliBankLimitedHerbalSND1260, ";
            strSQL = strSQL + "sum(D.SNDIBBL0028) as SNDIBBL0028, ";
            strSQL = strSQL + "sum(D.SoutheastBankSNdAC) as SoutheastBankSNdAC ";
            strSQL = strSQL + "from DAYLI_COLLECTION_TEMP D ";
            strSQL = strSQL + "group by D.Voucher_Date  Order by D.Voucher_Date";
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RoDayliCollection oaccLed = new RoDayliCollection();
                    oaccLed.strdate = Convert.ToDateTime(dr["Voucher_Date"]).ToString("dd-MM-yyyy");
                    if (dr["BKashAccount"].ToString() != "")
                    {
                        oaccLed.dblBKashAccount = Convert.ToDouble(dr["BKashAccount"].ToString());
                    }
                    else
                    {
                        oaccLed.dblBKashAccount = 0;
                    }
                    if (dr["BkashNonActive"].ToString() != "")
                    {
                        oaccLed.dblBkashNonActive = Convert.ToDouble(dr["BkashNonActive"].ToString());
                    }
                    else
                    {
                        oaccLed.dblBkashNonActive = 0;
                    }
                    if (dr["CashOfHeadOffice"].ToString() != "")
                    {
                        oaccLed.dblCashOfHeadOffice = Convert.ToDouble(dr["CashOfHeadOffice"].ToString());
                    }
                    else
                    {
                        oaccLed.dblCashOfHeadOffice = 0;
                    }
                    if (dr["PBL01341SND"].ToString() != "")
                    {
                        oaccLed.dblPBL01341SND = Convert.ToDouble(dr["PBL01341SND"].ToString());
                    }
                    else
                    {
                        oaccLed.dblPBL01341SND = 0;
                    }
                    if (dr["PubaliBankLimitedHerbalSND1260"].ToString() != "")
                    {
                        oaccLed.dblPubaliBankLimitedHerbalSND1260 = Convert.ToDouble(dr["PubaliBankLimitedHerbalSND1260"].ToString());
                    }
                    else
                    {
                        oaccLed.dblPubaliBankLimitedHerbalSND1260 = 0;
                    }
                    if (dr["SNDIBBL0028"].ToString() != "")
                    {
                        oaccLed.dblSNDIBBL0028 = Convert.ToDouble(dr["SNDIBBL0028"].ToString());
                    }
                    else
                    {
                        oaccLed.dblSNDIBBL0028 = 0;
                    }
                    if (dr["SoutheastBankSNdAC"].ToString() != "")
                    {
                        oaccLed.dblSouthestbank = Convert.ToDouble(dr["SoutheastBankSNdAC"].ToString());
                    }
                    else
                    {
                        oaccLed.dblSouthestbank = 0;
                    }
                    ooAccLed.Add(oaccLed);
                }
                if (!dr.HasRows)
                {
                    RoDayliCollection oaccLed = new RoDayliCollection();
                    oaccLed.dblBKashAccount = 0;
                    oaccLed.dblBkashNonActive = 0;
                    oaccLed.dblSouthestbank = 0;
                    oaccLed.dblSNDIBBL0028 = 0;
                    oaccLed.dblPubaliBankLimitedHerbalSND1260 = 0;
                    oaccLed.dblPBL01341SND = 0;
                    oaccLed.dblCashOfHeadOffice = 0;
                    ooAccLed.Add(oaccLed);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLed;
            }
        }
        #endregion
        #region "PF_HL"

        public List<RoPFHL> mGetMpoClosingValue(string strDeComID, string strFate, string strBranchID, string strPartyName, int intstatus)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;
                strSQL = "DELETE FROM ACC_BANK_TEMP ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                //HL
                //Opening
                strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,DEBIT) ";
                strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_OPENING_BALANCE *-1 FROM ACC_LEDGER ";
                strSQL = strSQL + "WHERE LEDGER_NAME lIKE'%HL%' ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,DEBIT) ";
                strSQL = strSQL + "select l.LEDGER_NAME_MERZE,sum(VOUCHER_DEBIT_AMOUNT-VOUCHER_CREDIT_AMOUNT ) as CREDIT ";
                strSQL = strSQL + "From ACC_VOUCHER V,ACC_LEDGER L  where  V.LEDGER_NAME=L.HL_LEDGER_NAME ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND V.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "group by L.LEDGER_NAME_MERZE  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //PF
               
                strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,CREDIT) ";
                strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_OPENING_BALANCE  FROM ACC_LEDGER WHERE LEDGER_NAME lIKE'%PF%'  ORDER BY LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,CREDIT) ";
                strSQL = strSQL + " select l.LEDGER_NAME_MERZE,sum(VOUCHER_CREDIT_AMOUNT )  ";
                strSQL = strSQL + " From ACC_VOUCHER V,ACC_LEDGER L  where  V.LEDGER_NAME=L.PF_LEDGER_NAME   ";
                strSQL = strSQL + "group by L.LEDGER_NAME_MERZE  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //Previous Dues
                strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,OPENING) ";
                strSQL = strSQL + "SELECT l.LEDGER_NAME_MERZE, isnull(sum(l.LEDGER_OPENING_BALANCE),0) *-1 PDUES   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP ";
                if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }
                strSQL = strSQL + "group by l.LEDGER_NAME_MERZE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //Current Month
                strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,OPENING) ";
                strSQL = strSQL + "select l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0)) SALES_CURRENT_MONTH   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND  C.COMP_VOUCHER_TYPE =16 ";
                if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }

                strSQL = strSQL + "group by l.LEDGER_NAME_MERZE";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //Return
                strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,OPENING) ";
                strSQL = strSQL + "select l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0))*-1 RETURN_AMOUNT ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND  C.COMP_VOUCHER_TYPE =13 ";
                if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }

                strSQL = strSQL + "group by l.LEDGER_NAME_MERZE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //Debit Amount
                strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,OPENING) ";
                strSQL = strSQL + "select l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0)) DEBIT_AMOUNT   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                strSQL = strSQL + " AND  C.AUTOJV =0 ";
                strSQL = strSQL + " AND  C.DISABLE_VOUCHER =0 ";
                if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }

                strSQL = strSQL + "group by l.LEDGER_NAME_MERZE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //Modified_24-11-19
                strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,OPENING) ";
                strSQL = strSQL + "select l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "abs(ISNULL(SUM(av.VOUCHER_DEBIT_AMOUNT-av.VOUCHER_CREDIT_AMOUNT),0)) DEBIT_AMOUNT  ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                strSQL = strSQL + " AND  C.DISABLE_VOUCHER =1 ";
                strSQL = strSQL + " AND  C.AUTOJV =0 ";
                if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }

                strSQL = strSQL + "group by l.LEDGER_NAME_MERZE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //Credit Amount
                strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,OPENING) ";
                strSQL = strSQL + "SELECT  l.LEDGER_NAME_MERZE, isnull(SUM(v.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT),0) *-1 ";
                strSQL = strSQL + "FROM ACC_LEDGER_Z_D_A ZDA ,ACC_VOUCHER v,ACC_LEDGER L,ACC_COMPANY_VOUCHER c  WHERE L.LEDGER_NAME =ZDA.LEDGER_NAME AND V.LEDGER_NAME =L.LEDGER_NAME  and c.COMP_REF_NO =v.COMP_REF_NO ";
                strSQL = strSQL + "AND (V.COMP_VOUCHER_DATE <  ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + ") ";
                strSQL = strSQL + "AND V.COMP_VOUCHER_TYPE=3 ";
                strSQL = strSQL + "and c.SP_JOURNAL =0 ";
                strSQL = strSQL + "and v.VOUCHER_TOBY ='Cr' ";

                if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }

                strSQL = strSQL + " GROUP BY l.LEDGER_NAME_MERZE";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                //Cash
                strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,OPENING) ";
                strSQL = strSQL + "select l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + " abs(ISNULL(SUM(av.VOUCHER_CREDIT_AMOUNT),0)) *-1 COLL_CASH_TT ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av  ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO  ";
                strSQL = strSQL + "AND av.COMP_VOUCHER_TYPE=" + (int)Utility.VOUCHER_TYPE.vtRECEIPT_VOUCHER + " ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }

                strSQL = strSQL + "group by l.LEDGER_NAME_MERZE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //SP Journal
                strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,OPENING) ";
                strSQL = strSQL + "select l.LEDGER_NAME_MERZE,";
                strSQL = strSQL + "ABS(ISNULL(SUM(aV.VOUCHER_CREDIT_AMOUNT-aV.VOUCHER_DEBIT_AMOUNT),0)) *-1 COLL_VOUCHER   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.COMP_VOUCHER_TYPE =3 and c.SP_JOURNAL=1 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND  C.AUTOJV =0 ";
                if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
                }

                strSQL = strSQL + "group by l.LEDGER_NAME_MERZE";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //New minus pf HL 17_07_20
                strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,OPENING) ";
                strSQL = strSQL + "SELECT  Z.LEDGER_NAME_MERZE ,ISNULL(SUM(v.VOUCHER_DEBIT_AMOUNT-V.VOUCHER_CREDIT_AMOUNT),0) *-1 ";
                strSQL = strSQL + " FROM ACC_LEDGER_Z_D_A Z,ACC_VOUCHER V WHERE Z.LEDGER_NAME=V.REVERSE_LEDGER1  AND V.COMP_VOUCHER_TYPE=3 ";
                strSQL = strSQL + "AND V.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND  V.AUTOJV=1";
                if (strPartyName != "")
                {
                    strSQL = strSQL + "AND Z.LEDGER_NAME ='" + strPartyName + "' ";
                }

                strSQL = strSQL + "GROUP by  Z.LEDGER_NAME_MERZE";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "UPDATE  ACC_BANK_TEMP SET LEDGER_NAME =ACC_LEDGER.LEDGER_NAME_MERZE ";
                strSQL = strSQL + "FROM  ACC_BANK_TEMP,ACC_LEDGER WHERE ACC_LEDGER.PF_LEDGER_NAME  =ACC_BANK_TEMP.LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "UPDATE  ACC_BANK_TEMP SET LEDGER_NAME =ACC_LEDGER.LEDGER_NAME_MERZE ";
                strSQL = strSQL + "FROM  ACC_BANK_TEMP,ACC_LEDGER WHERE ACC_LEDGER.HL_LEDGER_NAME   =ACC_BANK_TEMP.LEDGER_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                cmdInsert.Transaction.Commit();

                List<RoPFHL> ooAccLedger = new List<RoPFHL>();
                strSQL = "select L.TERITORRY_CODE,  T.LEDGER_NAME, sum(OPENING) as OPENING, sum(DEBIT)as DEBIT,sum(CREDIT)as CREDIT from ACC_BANK_TEMP T,";
                strSQL = strSQL + "ACC_LEDGER L where T.LEDGER_NAME=L.LEDGER_NAME_MERZE  ";
                if (strPartyName != "")
                {
                    strSQL = strSQL + "AND L.LEDGER_NAME ='" + strPartyName + "' ";
                }

                if (intstatus > 0)
                {
                    if (intstatus == 1)
                    {
                        strSQL = strSQL + " AND L.LEDGER_STATUS in (1,2) ";
                    }
                    else
                    {
                        strSQL = strSQL + " AND L.LEDGER_STATUS in (0,1,2) ";
                    }
                }
                else if (intstatus == 0)
                {
                    strSQL = strSQL + " AND L.LEDGER_STATUS in (0) ";
                }
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND L.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "group by L.TERITORRY_CODE,T.LEDGER_NAME  ";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RoPFHL oLedg = new RoPFHL();
                    if (dr["TERITORRY_CODE"].ToString() != "")
                    {
                        oLedg.strTC = dr["TERITORRY_CODE"].ToString();
                    }

                    if (dr["LEDGER_NAME"].ToString() != "")
                    {
                        oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    }
                    else
                    {
                        oLedg.strLedgerName = "";
                    }

                    if (dr["OPENING"].ToString() != "")
                    {
                        oLedg.dblopening = Convert.ToDouble(dr["OPENING"].ToString());
                    }
                    else
                    {
                        oLedg.dblopening = 0;
                    }

                    if (dr["DEBIT"].ToString() != "")
                    {
                        oLedg.dblHLAmount = Convert.ToDouble(dr["DEBIT"].ToString());
                    }
                    else
                    {
                        oLedg.dblHLAmount = 0;
                    }
                    if (dr["CREDIT"].ToString() != "")
                    {
                        oLedg.dblPFAmount = Convert.ToDouble(dr["CREDIT"].ToString());
                    }
                    else
                    {
                        oLedg.dblPFAmount = 0;
                    }
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RoPFHL oLedg = new RoPFHL();
                    oLedg.strLedgerName = "";
                    oLedg.dblopening = 0;
                    oLedg.dblHLAmount = 0;
                    oLedg.dblPFAmount = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }
        public List<RoPFHL> mGetPFHL(string strDeComID, string strFdate, string strTDate, string strBranchId, string strLedgername)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RoPFHL> ooAccPFHL = new List<RoPFHL>();
                strSQL = "select V.LEDGER_NAME_MERZE,V.TERITORRY_CODE, ";
                strSQL = strSQL + "sum((case when A.LEDG_PREFIX ='PF' then A.VOUCHER_CREDIT_AMOUNT else 0 end ))as PF, ";
                strSQL = strSQL + "sum((case when A.LEDG_PREFIX ='HL' then A.VOUCHER_CREDIT_AMOUNT else 0 end ))as HL ";
                strSQL = strSQL + "from ACC_VOUCHER A, ACC_LEDGER_Z_D_A V ";
                strSQL = strSQL + "where A.AUTOJV=1 and A.REVERSE_LEDGER1= V.LEDGER_NAME ";
                strSQL = strSQL + "AND A.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + "  ";
                strSQL = strSQL + "AND " + Utility.cvtSQLDateString(strTDate) + " ";
                if (strBranchId != "")
                {
                    strSQL = strSQL + "AND (A.BRANCH_ID = '" + strBranchId + "') ";
                }
                if (strLedgername != "")
                {
                    strSQL = strSQL + "AND (V.LEDGER_NAME= '" + strLedgername + "') ";
                }

                strSQL = strSQL + "Group by V.LEDGER_NAME_MERZE,V.TERITORRY_CODE ";
                strSQL = strSQL + "order by V.LEDGER_NAME_MERZE ";

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {

                    RoPFHL oLedg = new RoPFHL();
                    oLedg.strTC = dr["TERITORRY_CODE"].ToString();
                    oLedg.strLedgerName = dr["LEDGER_NAME_MERZE"].ToString();
                    oLedg.dblPFAmount = Math.Abs(Convert.ToDouble(dr["PF"].ToString()));
                    oLedg.dblHLAmount = Math.Abs(Convert.ToDouble(dr["HL"].ToString()));
                    ooAccPFHL.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RoPFHL oLedg = new RoPFHL();
                    oLedg.strTC = "";
                    oLedg.strLedgerName = "";
                    oLedg.dblPFAmount = 0;
                    oLedg.dblHLAmount = 0;
                    ooAccPFHL.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccPFHL;
            }
        }
        #endregion
        #region "Collection Statement"
        public List<RoDayliCollection> mGetCollectionStatement(string strDeComID, string strFdate, string strTDate, string strBranchId, string strString, int intmode,
                                                        bool blngAccessControl, string strUserName, double dblValue, string strValOption, string strReportOption, int intStatus)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;


                if (strReportOption != "")
                {
                    strSQL = "ALTER VIEW  collectionStatement_v as ";
                    if (strReportOption == "MPO")
                    {
                        strSQL = strSQL + "SELECT  G.ZONE,G.DIVISION ,G.AREA,G.TERITORRY_CODE,G.TERRITORRY_NAME,G.LEDGER_NAME_MERZE,  isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) AS Bill_amount,0 AS HL ";
                    }
                    else if (strReportOption == "AM")
                    {
                        strSQL = strSQL + "SELECT  G.ZONE,G.DIVISION ,G.AREA,  isnull(SUM(v.VOUCHER_CREDIT_AMOUNT),0) AS Bill_amount,0 AS HL ";
                    }
                    else if (strReportOption == "DSM")
                    {
                        strSQL = strSQL + "SELECT  G.ZONE,G.DIVISION , isnull(SUM(v.VOUCHER_CREDIT_AMOUNT),0) AS Bill_amount,0 AS HL ";
                    }
                    else if (strReportOption == "ZONE")
                    {
                        strSQL = strSQL + "SELECT  G.ZONE,  isnull(SUM(v.VOUCHER_CREDIT_AMOUNT),0) AS Bill_amount,0 AS HL ";
                    }
                    else
                    {
                        strSQL = strSQL + "SELECT  G.ZONE,G.DIVISION ,G.AREA,G.TERITORRY_CODE,G.TERRITORRY_NAME,G.LEDGER_NAME_MERZE,  isnull(SUM(v.VOUCHER_CREDIT_AMOUNT),0) AS Bill_amount,0 AS HL ";
                    }

                    strSQL = strSQL + " FROM ACC_LEDGER_Z_D_A G ,ACC_VOUCHER v,ACC_LEDGER L ";
                    strSQL = strSQL + "WHERE L.LEDGER_NAME =G.LEDGER_NAME AND V.LEDGER_NAME =L.LEDGER_NAME  ";
                    strSQL = strSQL + "AND (V.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ") ";
                    if (strBranchId != "")
                    {
                        strSQL = strSQL + " AND L.BRANCH_ID ='" + strBranchId + "' ";
                    }
                    strSQL = strSQL + "AND V.COMP_VOUCHER_TYPE=1  ";
                    if (intStatus > 0)
                    {
                        if (intStatus == 1)
                        {
                            strSQL = strSQL + " AND G.LEDGER_STATUS in (1,2) ";
                        }
                        else
                        {
                            strSQL = strSQL + " AND G.LEDGER_STATUS in (0,1,2) ";
                        }
                    }
                    else if (intStatus == 0)
                    {
                        strSQL = strSQL + " AND G.LEDGER_STATUS in (0) ";
                    }
                    if (strReportOption == "MPO")
                    {
                        if (blngAccessControl == true)
                        {
                            strSQL = strSQL + " AND  G.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
                        }
                        strSQL = strSQL + " Group by   G.ZONE,G.DIVISION ,G.AREA,G.TERITORRY_CODE,G.TERRITORRY_NAME,G.LEDGER_NAME_MERZE ";
                        if (dblValue != 0)
                        {
                            if (strValOption == "<")
                            {
                                strSQL = strSQL + "Having   isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) < " + dblValue + " ";
                            }
                            else
                            {
                                strSQL = strSQL + "Having   isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) > " + dblValue + " ";
                            }
                        }

                    }
                    else if (strReportOption == "AM")
                    {
                        if (blngAccessControl == true)
                        {
                            strSQL = strSQL + " AND  G.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
                        }
                        strSQL = strSQL + "group by   G.ZONE,G.DIVISION,G.AREA ";
                        if (dblValue != 0)
                        {
                            if (strValOption == "<")
                            {
                                strSQL = strSQL + "Having   isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) < " + dblValue + " ";
                            }
                            else
                            {
                                strSQL = strSQL + "Having   isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) > " + dblValue + " ";
                            }
                        }


                    }
                    else if (strReportOption == "DSM")
                    {
                        if (blngAccessControl == true)
                        {
                            strSQL = strSQL + " AND  G.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
                        }
                        strSQL = strSQL + "group by   G.ZONE,G.DIVISION ";
                        if (dblValue != 0)
                        {
                            if (strValOption == "<")
                            {
                                strSQL = strSQL + "Having   isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) < " + dblValue + " ";
                            }
                            else
                            {
                                strSQL = strSQL + "Having   isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) > " + dblValue + " ";
                            }
                        }

                    }
                    else if (strReportOption == "ZONE")
                    {
                        if (blngAccessControl == true)
                        {
                            strSQL = strSQL + " AND  G.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
                        }
                        strSQL = strSQL + "group by   G.ZONE ";
                        if (dblValue != 0)
                        {
                            if (strValOption == "<")
                            {
                                strSQL = strSQL + "Having   isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) < " + dblValue + " ";
                            }
                            else
                            {
                                strSQL = strSQL + "Having  isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) > " + dblValue + " ";
                            }
                        }


                    }
                    else
                    {
                        if (blngAccessControl == true)
                        {
                            strSQL = strSQL + " AND  G.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
                        }
                        strSQL = strSQL + "group by   G.ZONE,G.DIVISION,G.AREA,G.TERITORRY_CODE,G.TERRITORRY_NAME,G.LEDGER_NAME_MERZE ";
                        if (dblValue != 0)
                        {
                            if (strValOption == "<")
                            {
                                strSQL = strSQL + "Having  isnull(SUM(A.VOUCHER_DEBIT_AMOUNT-A.VOUCHER_CREDIT_AMOUNT),0) < " + dblValue + " ";
                            }
                            else
                            {
                                strSQL = strSQL + "Having   isnull(SUM(A.VOUCHER_DEBIT_AMOUNT-V.VOUCHER_CREDIT_AMOUNT),0) > " + dblValue + " ";
                            }
                        }


                    }

                    //Honda L

                    strSQL = strSQL + "UNION ALL ";

                    if (strReportOption == "MPO")
                    {
                        strSQL = strSQL + "select V.ZONE,V.DIVISION,V.AREA,V.TERITORRY_CODE,V.TERRITORRY_NAME, V.LEDGER_NAME_MERZE, 0 AS Bill_amount , ";
                        strSQL = strSQL + "sum((case when A.LEDG_PREFIX ='HL' then A.VOUCHER_CREDIT_AMOUNT else 0 end )) + ";
                        strSQL = strSQL + "sum((case when A.LEDG_PREFIX ='PF' then A.VOUCHER_CREDIT_AMOUNT else 0 end ))as HL ";
                    }
                    else if (strReportOption == "AM")
                    {
                        strSQL = strSQL + "select V.ZONE,V.DIVISION,V.AREA, 0 AS Bill_amount , ";
                        strSQL = strSQL + "sum((case when A.LEDG_PREFIX ='HL' then A.VOUCHER_CREDIT_AMOUNT else 0 end )) + ";
                        strSQL = strSQL + "sum((case when A.LEDG_PREFIX ='PF' then A.VOUCHER_CREDIT_AMOUNT else 0 end ))as HL ";
                    }
                    else if (strReportOption == "DSM")
                    {
                        strSQL = strSQL + "select V.ZONE,V.DIVISION,  0 AS Bill_amount , ";
                        strSQL = strSQL + "sum((case when A.LEDG_PREFIX ='HL' then A.VOUCHER_CREDIT_AMOUNT else 0 end )) + ";
                        strSQL = strSQL + "sum((case when A.LEDG_PREFIX ='PF' then A.VOUCHER_CREDIT_AMOUNT else 0 end ))as HL ";
                    }
                    else if (strReportOption == "ZONE")
                    {
                        strSQL = strSQL + "select V.ZONE,  0 AS Bill_amount , ";
                        strSQL = strSQL + "sum((case when A.LEDG_PREFIX ='HL' then A.VOUCHER_CREDIT_AMOUNT else 0 end )) + ";
                        strSQL = strSQL + "sum((case when A.LEDG_PREFIX ='PF' then A.VOUCHER_CREDIT_AMOUNT else 0 end ))as HL ";
                    }
                    else
                    {
                        //strSQL = "SELECT  G.ZONE,G.DIVISION ,G.AREA,G.TERITORRY_CODE,G.TERRITORRY_NAME,G.LEDGER_NAME_MERZE,  isnull(SUM(v.VOUCHER_CREDIT_AMOUNT),0) AS Bill_amount ";
                        //strSQL = strSQL + "select V.ZONE,V.DIVISION,V.AREA,V.TERITORRY_CODE,V.LEDGER_NAME, V.LEDGER_NAME_MERZE, 0 AS Bill_amount , ";
                        //strSQL = strSQL + "sum((case when A.LEDG_PREFIX ='HL' then A.VOUCHER_CREDIT_AMOUNT else 0 end ))as HL  ";
                    }

                    strSQL = strSQL + "from ACC_VOUCHER A, ACC_LEDGER_Z_D_A V where A.AUTOJV=1 ";
                    strSQL = strSQL + "and A.REVERSE_LEDGER1= V.LEDGER_NAME AND A.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND " + Utility.cvtSQLDateString(strTDate) + " ";
                    if (strBranchId != "")
                    {
                        strSQL = strSQL + "AND (A.BRANCH_ID = '" + strBranchId + "') ";
                    }


                    if (intStatus > 0)
                    {
                        if (intStatus == 1)
                        {
                            strSQL = strSQL + " AND V.LEDGER_STATUS in (1,2) ";
                        }
                        else
                        {
                            strSQL = strSQL + " AND V.LEDGER_STATUS in (0,1,2) ";
                        }
                    }
                    else if (intStatus == 0)
                    {
                        strSQL = strSQL + " AND V.LEDGER_STATUS in (0) ";
                    }
                    if (strReportOption == "MPO")
                    {
                        if (blngAccessControl == true)
                        {
                            strSQL = strSQL + " AND  V.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
                        }
                        strSQL = strSQL + "group by   V.ZONE,V.DIVISION,V.AREA,V.TERITORRY_CODE,V.TERRITORRY_NAME,V.TERRITORRY_NAME,V.LEDGER_NAME_MERZE ";
                        if (dblValue != 0)
                        {
                            if (strValOption == "<")
                            {
                                strSQL = strSQL + "Having   isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) < " + dblValue + " ";
                            }
                            else
                            {
                                strSQL = strSQL + "Having   isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) > " + dblValue + " ";
                            }
                        }

                    }


                    else if (strReportOption == "AM")
                    {

                        if (blngAccessControl == true)
                        {
                            strSQL = strSQL + " AND  V.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
                        }
                        strSQL = strSQL + "group by   V.ZONE,V.DIVISION,V.AREA ";
                        if (dblValue != 0)
                        {
                            if (strValOption == "<")
                            {
                                strSQL = strSQL + "Having   isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) < " + dblValue + " ";
                            }
                            else
                            {
                                strSQL = strSQL + "Having   isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) > " + dblValue + " ";
                            }
                        }


                    }
                    else if (strReportOption == "DSM")
                    {
                        if (blngAccessControl == true)
                        {
                            strSQL = strSQL + " AND  V.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
                        }
                        strSQL = strSQL + "group by   V.ZONE,V.DIVISION ";
                        if (dblValue != 0)
                        {
                            if (strValOption == "<")
                            {
                                strSQL = strSQL + "Having   isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) < " + dblValue + " ";
                            }
                            else
                            {
                                strSQL = strSQL + "Having   isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) > " + dblValue + " ";
                            }
                        }

                    }
                    else if (strReportOption == "ZONE")
                    {
                        if (blngAccessControl == true)
                        {
                            strSQL = strSQL + " AND  V.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
                        }
                        strSQL = strSQL + "group by   V.ZONE";
                        if (dblValue != 0)
                        {
                            if (strValOption == "<")
                            {
                                strSQL = strSQL + "Having   isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) < " + dblValue + " ";
                            }
                            else
                            {
                                strSQL = strSQL + "Having  isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) > " + dblValue + " ";
                            }
                        }

                    }
                }

                else
                {
                    strSQL = "ALTER VIEW  collectionStatement_v as ";
                    strSQL = strSQL + "SELECT  G.ZONE,G.DIVISION ,G.AREA,G.TERITORRY_CODE,G.TERRITORRY_NAME,G.LEDGER_NAME_MERZE,  isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) AS Bill_amount,0 AS HL ";
                    strSQL = strSQL + " FROM ACC_LEDGER_Z_D_A G ,ACC_VOUCHER v,ACC_LEDGER L ";
                    strSQL = strSQL + "WHERE L.LEDGER_NAME =G.LEDGER_NAME AND V.LEDGER_NAME =L.LEDGER_NAME  ";
                    strSQL = strSQL + "AND (V.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ") ";
                    strSQL = strSQL + "AND V.COMP_VOUCHER_TYPE=1 ";
                    if (strBranchId != "")
                    {
                        strSQL = strSQL + "AND L.BRANCH_ID ='" + strBranchId + "' ";
                    }
                    if (intStatus > 0)
                    {
                        if (intStatus == 1)
                        {
                            strSQL = strSQL + " AND G.LEDGER_STATUS in (1,2) ";
                        }
                        else
                        {
                            strSQL = strSQL + " AND G.LEDGER_STATUS in (0,1,2) ";
                        }
                    }
                    else if (intStatus == 0)
                    {
                        strSQL = strSQL + " AND G.LEDGER_STATUS in (0) ";
                    }

                    if (blngAccessControl == true)
                    {
                        strSQL = strSQL + " AND  G.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
                    }
                    strSQL = strSQL + " Group by   G.ZONE,G.DIVISION ,G.AREA,G.TERITORRY_CODE,G.TERRITORRY_NAME,G.LEDGER_NAME_MERZE ";
                    if (dblValue != 0)
                    {
                        if (strValOption == "<")
                        {
                            strSQL = strSQL + "Having   isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) < " + dblValue + " ";
                        }
                        else
                        {
                            strSQL = strSQL + "Having   isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) > " + dblValue + " ";
                        }
                    }


                    //Honda L

                    strSQL = strSQL + "UNION ALL ";
                    strSQL = strSQL + "select V.ZONE,V.DIVISION,V.AREA,V.TERITORRY_CODE,V.TERRITORRY_NAME, V.LEDGER_NAME_MERZE, 0 AS Bill_amount , ";
                    strSQL = strSQL + "sum((case when A.LEDG_PREFIX ='HL' then A.VOUCHER_CREDIT_AMOUNT else 0 end )) + ";
                    strSQL = strSQL + "sum((case when A.LEDG_PREFIX ='PF' then A.VOUCHER_CREDIT_AMOUNT else 0 end ))as HL ";
                    strSQL = strSQL + "from ACC_VOUCHER A, ACC_LEDGER_Z_D_A V where A.AUTOJV=1 ";
                    strSQL = strSQL + "and A.REVERSE_LEDGER1= V.LEDGER_NAME AND A.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND " + Utility.cvtSQLDateString(strTDate) + " ";
                    if (strBranchId != "")
                    {
                        strSQL = strSQL + "AND (A.BRANCH_ID = '" + strBranchId + "') ";
                    }

                    if (intStatus > 0)
                    {
                        if (intStatus == 1)
                        {
                            strSQL = strSQL + " AND V.LEDGER_STATUS in (1,2) ";
                        }
                        else
                        {
                            strSQL = strSQL + " AND V.LEDGER_STATUS in (0,1,2) ";
                        }
                    }
                    else if (intStatus == 0)
                    {
                        strSQL = strSQL + " AND V.LEDGER_STATUS in (0) ";
                    }

                    if (blngAccessControl == true)
                    {
                        strSQL = strSQL + " AND  V.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
                    }
                    strSQL = strSQL + "group by   V.ZONE,V.DIVISION,V.AREA,V.TERITORRY_CODE,V.TERRITORRY_NAME,V.TERRITORRY_NAME,V.LEDGER_NAME_MERZE ";
                    if (dblValue != 0)
                    {
                        if (strValOption == "<")
                        {
                            strSQL = strSQL + "Having   isnull(SUM(A.VOUCHER_DEBIT_AMOUNT-A.VOUCHER_CREDIT_AMOUNT),0) < " + dblValue + " ";
                        }
                        else
                        {
                            strSQL = strSQL + "Having   isnull(SUM(A.VOUCHER_DEBIT_AMOUNT-A.VOUCHER_CREDIT_AMOUNT),0) > " + dblValue + " ";
                        }
                    }

                }


                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                cmdInsert.Transaction.Commit();
                List<RoDayliCollection> ooAccLedger = new List<RoDayliCollection>();
                cmdInsert.Connection = gcnMain;

                if (strReportOption == "MPO")
                {
                    strSQL = "select V.ZONE,V.DIVISION,v.AREA, V.TERITORRY_CODE,V.TERRITORRY_NAME,V.LEDGER_NAME_MERZE, ";
                    strSQL = strSQL + "sum(V.Bill_amount) as Bill_amount, sum(V.HL) as HL  ";
                    strSQL = strSQL + "from collectionStatement_v V ";
                    strSQL = strSQL + "group by V.TERITORRY_CODE,V.TERRITORRY_NAME,V.LEDGER_NAME_MERZE,V.ZONE,V.DIVISION,v.AREA ";
                    strSQL = strSQL + "order by TERITORRY_CODE ";
                }
                else if (strReportOption == "AM")
                {
                    strSQL = "select V.ZONE,V.DIVISION,v.AREA, ";
                    strSQL = strSQL + "sum(V.Bill_amount) as Bill_amount, sum(V.HL) as HL  ";
                    strSQL = strSQL + "from collectionStatement_v V ";
                    strSQL = strSQL + "group by V.ZONE,V.DIVISION,v.AREA ";
                    strSQL = strSQL + "order by V.ZONE,V.DIVISION,v.AREA  ";
                }
                else if (strReportOption == "DSM")
                {
                    strSQL = "select V.ZONE,V.DIVISION, ";
                    strSQL = strSQL + "sum(V.Bill_amount) as Bill_amount, sum(V.HL) as HL  ";
                    strSQL = strSQL + "from collectionStatement_v V ";
                    strSQL = strSQL + "group by V.ZONE,V.DIVISION ";
                    strSQL = strSQL + "order by V.ZONE,V.DIVISION  ";
                }
                else if (strReportOption == "ZONE")
                {
                    strSQL = "select V.ZONE, ";
                    strSQL = strSQL + "sum(V.Bill_amount) as Bill_amount, sum(V.HL) as HL  ";
                    strSQL = strSQL + "from collectionStatement_v V ";
                    strSQL = strSQL + "group by V.ZONE ";
                    strSQL = strSQL + "order by V.ZONE ";
                }
                else
                {
                    strSQL = "select V.ZONE,V.DIVISION,v.AREA, V.TERITORRY_CODE,V.TERRITORRY_NAME,V.LEDGER_NAME_MERZE, ";
                    strSQL = strSQL + "sum(V.Bill_amount) as Bill_amount, sum(V.HL) as HL  ";
                    strSQL = strSQL + "from collectionStatement_v V ";
                    strSQL = strSQL + "group by V.TERITORRY_CODE,V.TERRITORRY_NAME,V.LEDGER_NAME_MERZE,V.ZONE,V.DIVISION,v.AREA ";
                    strSQL = strSQL + "order by TERITORRY_CODE ";
                }
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RoDayliCollection oLedg = new RoDayliCollection();
                    if (strReportOption == "MPO")
                    {
                        oLedg.strTerritoryCode = dr["TERITORRY_CODE"].ToString();
                        oLedg.strLedgerName = dr["LEDGER_NAME_MERZE"].ToString();
                        oLedg.strTerritory = dr["TERRITORRY_NAME"].ToString();
                        oLedg.dblBillAmount = Math.Abs(Convert.ToDouble(dr["Bill_amount"].ToString()));
                        oLedg.strLedgerGroupParent = dr["ZONE"].ToString();
                        oLedg.strLedgerGroupPrimary = dr["DIVISION"].ToString();
                        oLedg.strGroupAMFM = dr["AREA"].ToString();
                        oLedg.dblPFHL = Convert.ToDouble(dr["HL"].ToString()) * -1;
                    }
                    else if (strReportOption == "AM")
                    {
                        oLedg.dblBillAmount = Math.Abs(Convert.ToDouble(dr["Bill_amount"].ToString()));
                        oLedg.strLedgerGroupParent = dr["ZONE"].ToString();
                        oLedg.strLedgerGroupPrimary = dr["DIVISION"].ToString();
                        oLedg.strGroupAMFM = dr["AREA"].ToString();
                        oLedg.dblPFHL = Convert.ToDouble(dr["HL"].ToString()) * -1;
                    }
                    else if (strReportOption == "DSM")
                    {

                        oLedg.dblBillAmount = Math.Abs(Convert.ToDouble(dr["Bill_amount"].ToString()));
                        oLedg.strLedgerGroupParent = dr["ZONE"].ToString();
                        oLedg.strLedgerGroupPrimary = dr["DIVISION"].ToString();
                        oLedg.dblPFHL = Convert.ToDouble(dr["HL"].ToString()) * -1;

                    }
                    else if (strReportOption == "ZONE")
                    {
                        oLedg.dblBillAmount = Math.Abs(Convert.ToDouble(dr["Bill_amount"].ToString()));
                        oLedg.strLedgerGroupParent = dr["ZONE"].ToString();
                        oLedg.dblPFHL = Convert.ToDouble(dr["HL"].ToString()) * -1;

                    }
                    else
                    {

                        oLedg.strTerritoryCode = dr["TERITORRY_CODE"].ToString();
                        oLedg.strLedgerName = dr["LEDGER_NAME_MERZE"].ToString();
                        oLedg.strTerritory = dr["TERRITORRY_NAME"].ToString();
                        oLedg.dblBillAmount = Math.Abs(Convert.ToDouble(dr["Bill_amount"].ToString()));
                        oLedg.strLedgerGroupParent = dr["ZONE"].ToString();
                        oLedg.strLedgerGroupPrimary = dr["DIVISION"].ToString();
                        oLedg.strGroupAMFM = dr["AREA"].ToString();
                        oLedg.dblPFHL = Convert.ToDouble(dr["HL"].ToString()) * -1;

                    }

                    ooAccLedger.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RoDayliCollection oLedg = new RoDayliCollection();
                    oLedg.strTerritoryCode = "";
                    oLedg.strLedgerName = "";
                    oLedg.strTerritory = "";
                    oLedg.dblBillAmount = 0;
                    oLedg.strLedgerGroupParent = "";
                    oLedg.strLedgerGroupPrimary = "";
                    oLedg.strGroupAMFM = "";
                    oLedg.dblPFHL = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                //cmd.Dispose();
                return ooAccLedger;
            }
        }

        public List<RoDayliCollection> mGetCollectionStatementIndividual(string strDeComID, string strFdate, string strTDate, string strBranchId, string strLedgername)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RoDayliCollection> ooAccLedger = new List<RoDayliCollection>();
                strSQL = "SELECT ACC_COMPANY_VOUCHER.COMP_REF_NO, ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE, ";
                strSQL = strSQL + "(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT-ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT) as COMP_VOUCHER_NET_AMOUNT, ACC_COMPANY_VOUCHER.ORDER_NO, ";
                strSQL = strSQL + "ACC_BRANCH.BRANCH_NAME, ACC_LEDGER.TERITORRY_CODE, ACC_LEDGER.TERRITORRY_NAME, ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER.LEDGER_NAME, ISNULL(Customer.LEDGER_CODE, '') AS LEDGER_CODE, ";
                strSQL = strSQL + "ISNULL(ACC_COMPANY_VOUCHER.SALES_REP, '') + '-' + ISNULL(Customer.HOMOEO_HALL, '') + '-' + ISNULL(Customer.LEDGER_ADDRESS1, '') + ' ' + ISNULL(Customer.LEDGER_ADDRESS2, '') ";
                strSQL = strSQL + "AS Customeradddress, ACC_COMPANY_VOUCHER.PREPARED_DATE, ACC_VOUCHER.VOUCHER_REVERSE_LEDGER, ACC_VOUCHER.COMP_VOUCHER_TYPE ";
                strSQL = strSQL + "FROM ACC_COMPANY_VOUCHER AS ACC_COMPANY_VOUCHER INNER JOIN ";
                strSQL = strSQL + "ACC_BRANCH ON ACC_COMPANY_VOUCHER.BRANCH_ID = ACC_BRANCH.BRANCH_ID INNER JOIN ";
                strSQL = strSQL + "ACC_LEDGER ON ACC_COMPANY_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME AND ACC_BRANCH.BRANCH_ID = ACC_LEDGER.BRANCH_ID INNER JOIN ";
                strSQL = strSQL + "ACC_VOUCHER ON ACC_COMPANY_VOUCHER.COMP_REF_NO = ACC_VOUCHER.COMP_REF_NO AND ACC_COMPANY_VOUCHER.BRANCH_ID = ACC_VOUCHER.BRANCH_ID AND  ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER.LEDGER_NAME = ACC_VOUCHER.LEDGER_NAME LEFT OUTER JOIN ";
                strSQL = strSQL + "(SELECT LEDGER_CODE, LEDGER_NAME, LEDGER_ADDRESS1, LEDGER_ADDRESS2, HOMOEO_HALL ";
                strSQL = strSQL + "FROM  ACC_LEDGER AS ACC_LEDGER_1 ";
                strSQL = strSQL + "WHERE (LEDGER_GROUP = '204')) AS Customer ON ACC_COMPANY_VOUCHER.SALES_REP = Customer.LEDGER_NAME ";
                strSQL = strSQL + "WHERE ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND " + Utility.cvtSQLDateString(strTDate) + " AND (ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = 1) ";
                if (strBranchId != "")
                {
                    strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.BRANCH_ID = '" + strBranchId + "') ";
                }
                if (strBranchId != "")
                {
                    strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.LEDGER_NAME = '" + strLedgername + "') ";
                }
                strSQL = strSQL + "AND (ACC_VOUCHER.COMP_VOUCHER_TYPE = 1) ";
                strSQL = strSQL + "ORDER BY ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE ";

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {

                    RoDayliCollection oLedg = new RoDayliCollection();
                    oLedg.strRefNo = dr["COMP_REF_NO"].ToString();
                    oLedg.strInvDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.strOrderNo = dr["ORDER_NO"].ToString();
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.strTerritoryCode = dr["TERITORRY_CODE"].ToString();
                    oLedg.strTerritory = dr["TERRITORRY_NAME"].ToString();
                    oLedg.strAddress1 = dr["VOUCHER_REVERSE_LEDGER"].ToString();
                    oLedg.strStockGroupName = dr["LEDGER_CODE"].ToString();
                    oLedg.dblBillAmount = Math.Abs(Convert.ToDouble(dr["COMP_VOUCHER_NET_AMOUNT"].ToString()));
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }


        #endregion

        #region "Stock In"
        public List<RoStockRequisition> mGetStockIn(string strDeComID, string strRefNo)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RoStockRequisition> oooSamplePrint = new List<RoStockRequisition>();

                strSQL = "SELECT  tb1.INV_NARRATIONS, tb1.INV_UOM, tb1.INV_REF_NO, tb1.AGNST_COMP, tb1.INV_DATE, tb1.STOCKITEM_NAME, tb1.GODOWNS_NAM, tb1.INV_TRAN_QUANTITY, tb1.INV_TRAN_RATE, tb1.INV_TRAN_AMOUNT, ";
                strSQL = strSQL + "tb1.INV_LOG_NO, tb1.PROCESS_NAME, tb1.INV_TRAN_KEY, tb1.AGNST_COMP_REF_NO, tb1.GODOWNS_NAME, tb1.BRANCH_ID, tb2.GODOWNS_NAME AS AgnGODOWNS_NAME, ";
                strSQL = strSQL + "INV_STOCKITEM.STOCKITEM_ALIAS, ACC_BRANCH.BRANCH_NAME ";
                strSQL = strSQL + "FROM (SELECT T.INV_REF_NO, M.AGNST_COMP_REF_NO AS AGNST_COMP, T.INV_DATE, T.STOCKITEM_NAME, T.GODOWNS_NAME AS GODOWNS_NAM, T.INV_TRAN_QUANTITY, T.INV_TRAN_RATE, ";
                strSQL = strSQL + "T.INV_TRAN_AMOUNT, T.INV_LOG_NO, M.PROCESS_NAME, T.INV_TRAN_KEY, M.AGNST_COMP_REF_NO, T.GODOWNS_NAME, T.BRANCH_ID, T.INV_UOM, M.INV_NARRATIONS ";
                strSQL = strSQL + "FROM INV_MASTER AS M INNER JOIN ";
                strSQL = strSQL + "INV_TRAN AS T ON M.INV_REF_NO = T.INV_REF_NO ";
                strSQL = strSQL + "WHERE (T.INV_REF_NO = '" + strRefNo + "')) AS tb1 INNER JOIN ";
                strSQL = strSQL + "INV_STOCKITEM ON tb1.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME INNER JOIN ";
                strSQL = strSQL + "ACC_BRANCH ON tb1.BRANCH_ID = ACC_BRANCH.BRANCH_ID LEFT OUTER JOIN ";
                strSQL = strSQL + "(SELECT DISTINCT GODOWNS_NAME, INV_REF_NO AS AG ";
                strSQL = strSQL + "FROM INV_TRAN) AS tb2 ON tb1.AGNST_COMP = tb2.AG ";

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {

                    RoStockRequisition oLedg = new RoStockRequisition();
                    oLedg.strRefNo = dr["INV_REF_NO"].ToString();
                    oLedg.strAgnRefNo = dr["AGNST_COMP"].ToString();
                    oLedg.strInvDate = Convert.ToDateTime(dr["INV_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.strNarration = dr["INV_NARRATIONS"].ToString();
                    oLedg.strProcessName = dr["Process_name"].ToString();
                    oLedg.dblQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                    oLedg.dblRate = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                    oLedg.dblAmnt = Convert.ToDouble(dr["INV_TRAN_AMOUNT"].ToString());
                    oLedg.strItemAlias = dr["STOCKITEM_ALIAS"].ToString();
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.strLocationName = dr["GODOWNS_NAM"].ToString();
                    oLedg.strToLocationName = dr["AgnGODOWNS_NAME"].ToString();
                    oLedg.strUnit = dr["INV_UOM"].ToString();
                    oLedg.strBranchName = "Branch Name :" + dr["BRANCH_NAME"].ToString();
                    oooSamplePrint.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RoStockRequisition oLedg = new RoStockRequisition();
                    oLedg.strRefNo = "";
                    oLedg.strInvDate = "";
                    oLedg.strNarration = "";
                    oLedg.strProcessName = "";
                    oLedg.strGroupParent = "";
                    oLedg.strGroupPrimary = "";
                    oLedg.dblQty = 0;
                    oLedg.dblRate = 0;
                    oLedg.dblAmnt = 0;
                    oLedg.strItemName = "";
                    oLedg.strUnit = "";
                    oLedg.strLocationName = "";
                    oooSamplePrint.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return oooSamplePrint;
            }
        }

        #endregion
        #region "Stock Out"
        public List<RoStockRequisition> mGetStockOut(string strDeComID, string strRefNo)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RoStockRequisition> oooSamplePrint = new List<RoStockRequisition>();
                strSQL = "SELECT SUBSTRING(M.INV_REF_NO,7,30) as INV_REF_NO,B.BRANCH_NAME ,T.INV_DATE,I.STOCKITEM_ALIAS, T.INV_INOUT_FLAG,T.STOCKITEM_NAME,T.GODOWNS_NAME,T.INV_TRAN_QUANTITY, ";
                strSQL = strSQL + "T.INV_TRAN_QUANTITY,INV_TRAN_RATE,INV_TRAN_AMOUNT,T.INV_LOG_NO,M.PROCESS_NAME,M.INV_NARRATIONS, T.INV_UOM, ";
                strSQL = strSQL + "T.INV_TRAN_KEY,SUBSTRING(M.AGNST_COMP_REF_NO,7,30) as AgnINV_REF_NO ,R.GODOWNS_NAME ToGod ";
                strSQL = strSQL + "FROM INV_TRAN T,INV_MASTER M,INV_STOCK_REQUISITION_MASTER R, ACC_BRANCH B ,INV_STOCKITEM I WHERE  ";
                strSQL = strSQL + "T.BRANCH_ID=m.BRANCH_ID and T.INV_REF_NO=M.INV_REF_NO ";
                strSQL = strSQL + "and M.AGNST_COMP_REF_NO =R.REQUISITION_NO and M.BRANCH_ID=B.BRANCH_ID and T.STOCKITEM_NAME=I.STOCKITEM_NAME  ";
                strSQL = strSQL + "AND T.INV_REF_NO= '" + strRefNo + "' ";
                //strSQL = strSQL + "and T.INV_REF_NO = 'IT0001ST#004628' ";

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {

                    RoStockRequisition oLedg = new RoStockRequisition();
                    oLedg.strRefNo = dr["INV_REF_NO"].ToString();
                    oLedg.strAgnRefNo = dr["AgnINV_REF_NO"].ToString();
                    oLedg.strInvDate = Convert.ToDateTime(dr["INV_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.strNarration = dr["INV_NARRATIONS"].ToString();
                    oLedg.strProcessName = dr["Process_name"].ToString();
                    oLedg.dblQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                    oLedg.dblRate = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                    oLedg.dblAmnt = Convert.ToDouble(dr["INV_TRAN_AMOUNT"].ToString());
                    oLedg.strItemAlias = dr["STOCKITEM_ALIAS"].ToString();
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.strLocationName = dr["GODOWNS_NAME"].ToString();
                    oLedg.strToLocationName = dr["ToGod"].ToString();
                    oLedg.strUnit = dr["INV_UOM"].ToString();
                    oLedg.strBranchName = "Branch Name :" + dr["BRANCH_NAME"].ToString();
                    oooSamplePrint.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RoStockRequisition oLedg = new RoStockRequisition();
                    oLedg.strRefNo = "";
                    oLedg.strInvDate = "";
                    oLedg.strNarration = "";
                    oLedg.strProcessName = "";
                    oLedg.strGroupParent = "";
                    oLedg.strGroupPrimary = "";
                    oLedg.dblQty = 0;
                    oLedg.dblRate = 0;
                    oLedg.dblAmnt = 0;
                    oLedg.strItemName = "";
                    oLedg.strUnit = "";
                    oLedg.strLocationName = "";
                    oooSamplePrint.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return oooSamplePrint;
            }
        }

        #endregion
        #region "Stock Requisition"
        public List<RoStockRequisition> mGetStockRequisition(string strDeComID, string strRefNo)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RoStockRequisition> oooSamplePrint = new List<RoStockRequisition>();

                strSQL = "SELECT I.STOCKITEM_ALIAS,I.STOCKITEM_NAME,M.BRANCH_ID,M.INVOICE_DATE,M.NET_TOTAL,M.NARRATIONS,M.GODOWNS_NAME,M.Process_name,R.UNIT, ";
                strSQL = strSQL + "SUBSTRING(R.REQUISITION_NO,7,30) AS COMP_REF_NO,B.BRANCH_NAME,R.ITEM_QTY,R.ITEM_RATE,R.ITEM_AMOUNT ";
                strSQL = strSQL + "from INV_STOCK_REQUISITION_CHILD R,INV_STOCKITEM I,INV_STOCK_REQUISITION_MASTER M,ACC_BRANCH B ";
                strSQL = strSQL + "WHERE R.STOCKITEM_NAME=I.STOCKITEM_NAME AND R.REQUISITION_NO=M.REQUISITION_NO AND M.BRANCH_ID=B.BRANCH_ID ";
                strSQL = strSQL + "AND (SUBSTRING(R.REQUISITION_NO,7,30)= '" + strRefNo + "') ";
                strSQL = strSQL + "ORDER BY I.STOCKITEM_NAME ";

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {

                    RoStockRequisition oLedg = new RoStockRequisition();
                    oLedg.strRefNo = dr["COMP_REF_NO"].ToString();
                    oLedg.strInvDate = Convert.ToDateTime(dr["INVOICE_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.strNarration = dr["NARRATIONS"].ToString();
                    oLedg.strProcessName = dr["Process_name"].ToString();
                    oLedg.dblQty = Convert.ToDouble(dr["ITEM_QTY"].ToString());
                    oLedg.dblRate = Convert.ToDouble(dr["ITEM_RATE"].ToString());
                    oLedg.dblAmnt = Convert.ToDouble(dr["ITEM_AMOUNT"].ToString());
                    oLedg.strItemAlias = dr["STOCKITEM_ALIAS"].ToString();
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.strLocationName = dr["GODOWNS_NAME"].ToString();
                    oLedg.strUnit = dr["UNIT"].ToString();
                    oLedg.strBranchName = "Branch Name :" + dr["BRANCH_NAME"].ToString();
                    oooSamplePrint.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RoStockRequisition oLedg = new RoStockRequisition();
                    oLedg.strRefNo = "";
                    oLedg.strInvDate = "";
                    oLedg.strNarration = "";
                    oLedg.strProcessName = "";
                    oLedg.strGroupParent = "";
                    oLedg.strGroupPrimary = "";
                    oLedg.dblQty = 0;
                    oLedg.dblRate = 0;
                    oLedg.dblAmnt = 0;
                    oLedg.strItemName = "";
                    oLedg.strUnit = "";
                    oLedg.strLocationName = "";
                    oooSamplePrint.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return oooSamplePrint;
            }
        }

        #endregion
    }
}
