
using Dutility;
using JA.Modulecontrolar.JACCMS;
using JA.Modulecontrolar.JINVMS;
using JA.Modulecontrolar.JRPT;
using JA.Modulecontrolar.JSAPUR;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;

namespace JA.Modulecontrolar
{
    public class SPWOIS
    {
        private string connstring;
        #region TC Wise Sales/Coll
        public List<RAccountsGroup> GetrptTCWisweSalesCollection(string strDeComID, string strBranchID, string strSelection, string strFate, string strTDate,
                                                                            int inttype, string strTCCode, string gstrUserName)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;

                strSQL = "DELETE from ACC_SAL_COLL_TARGET_ACHIEVE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO  ACC_SAL_COLL_TARGET_ACHIEVE(LEDGER_GROUP_NAME,LEDGER_NAME,SAL_ACHIEVE) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP ,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0) ACHIEVE  from ACC_LEDGER l,ACC_COMPANY_VOUCHER c , ACC_LEDGER_Z_D_A LG ";
                strSQL = strSQL + "where  l.LEDGER_NAME =c.LEDGER_NAME  and L.LEDGER_NAME=LG.LEDGER_NAME  ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSALES_INVOICE + " ";
                strSQL = strSQL + "AND (C.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                
                if (strTCCode != "")
                {
                    strSQL = strSQL + " AND l.TERITORRY_CODE='" + strTCCode + "' ";
                }

                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND l.BRANCH_ID='" + strBranchID + "' ";
                }

                strSQL = strSQL + "GROUP by  l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                strSQL = "INSERT INTO  ACC_SAL_COLL_TARGET_ACHIEVE(LEDGER_GROUP_NAME,LEDGER_NAME,COLL_ACHIEVE) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP ,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "ISNULL(SUM(av.VOUCHER_CREDIT_AMOUNT-av.VOUCHER_DEBIT_AMOUNT),0) COLLECTION_AMNT  FROM ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av, ACC_LEDGER_Z_D_A LG  ";
                strSQL = strSQL + "where l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO AND  L.LEDGER_NAME=LG.LEDGER_NAME   ";
                strSQL = strSQL + "AND aV.COMP_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtRECEIPT_VOUCHER + " ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                if (strTCCode != "")
                {
                    strSQL = strSQL + " AND l.TERITORRY_CODE='" + strTCCode + "' ";
                }

                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND l.BRANCH_ID='" + strBranchID + "' ";
                }

                strSQL = strSQL + "GROUP by  l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE HAVING  SUM(av.VOUCHER_CREDIT_AMOUNT-av.VOUCHER_DEBIT_AMOUNT) > 0";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO  ACC_SAL_COLL_TARGET_ACHIEVE(LEDGER_GROUP_NAME,LEDGER_NAME,COLL_ACHIEVE) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP ,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "ISNULL(SUM(av.VOUCHER_DEBIT_AMOUNT-av.VOUCHER_CREDIT_AMOUNT),0) COLLECTION_AMNT  FROM ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av, ACC_LEDGER_Z_D_A LG  ";
                strSQL = strSQL + " where l.LEDGER_NAME =av.REVERSE_LEDGER1  and c.COMP_REF_NO =av.COMP_REF_NO AND  L.LEDGER_NAME=av.REVERSE_LEDGER1  AND  L.LEDGER_NAME=LG.LEDGER_NAME ";
                strSQL = strSQL + "AND aV.COMP_VOUCHER_TYPE =" + (int)Utility.VOUCHER_TYPE.vtJOURNAL_VOUCHER + " ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + " AND aV.AUTOJV=1 ";
                if (strTCCode != "")
                {
                    strSQL = strSQL + " AND l.TERITORRY_CODE='" + strTCCode + "' ";
                }

                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND l.BRANCH_ID='" + strBranchID + "' ";
                }

                strSQL = strSQL + "GROUP by  l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE HAVING  SUM(av.VOUCHER_DEBIT_AMOUNT-av.VOUCHER_CREDIT_AMOUNT) < 0";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "DELETE FROM ACC_SAL_COLL_TARGET_ACHIEVE WHERE (COLL_ACHIEVE + COLL_TARGET + SAL_TARGET + SAL_ACHIEVE)=0 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                cmdInsert.Transaction.Commit();

                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();

                strSQL = "SELECT TT.LEDGER_NAME,SAL_ACHIEVE, COLL_ACHIEVE,LG.TERITORRY_CODE ";
                strSQL = strSQL + "FROM  ACC_SAL_COLL_TARGET_ACHIEVE_VIEW TT, ACC_LEDGER_Z_D_A LG ";
                strSQL = strSQL + "WHERE TT.LEDGER_NAME= LG.LEDGER_NAME_MERZE ";
                strSQL = strSQL + " AND DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + gstrUserName + "')";
                if (inttype == 1)
                {
                    strSQL = strSQL + "ORDER BY  TT.LEDGER_NAME ";
                }
                else
                {
                    strSQL = strSQL + "ORDER BY TT.LEDGER_NAME ";
                }

                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.dblSaltargetAchieve = Convert.ToDouble(dr["SAL_ACHIEVE"]);
                    oLedg.dblCollAcieve = Convert.ToDouble(dr["COLL_ACHIEVE"]);
                    oLedg.strTerritoryCode = dr["TERITORRY_CODE"].ToString();
                    ooAccLedger.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strLedgerName = "";
                    oLedg.dblSalTarget = 0;
                    oLedg.dblSaltargetAchieve = 0;
                    ooAccLedger.Add(oLedg);
                }


                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }
        #endregion
        #region "DayliCollection"
        public string mInsertDayliCollectionN(string strDeComID, string strDate, int intmode, string strBranchID)
        {

            string strSQL = "";

            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                try
                {
                    gcnMain.Open();

                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;

                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;
                    if (intmode == 1)
                    {
                        strSQL = "Delete DAYLI_COLLECTION_TEMP ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }


                    strSQL = "INSERT INTO DAYLI_COLLECTION_TEMP ";
                    strSQL = strSQL + "(Voucher_Date, BKashAccount) ";
                    strSQL = strSQL + "Select  +" + Utility.cvtSQLDateString(strDate) + " ,  ISNULL(sum(V.VOUCHER_DEBIT_AMOUNT),0) as amt from ACC_VOUCHER V  ";
                    strSQL = strSQL + "where   V.LEDGER_NAME='BKash Account' and V.VOUCHER_TOBY='Dr'  ";
                    strSQL = strSQL + "and   v.COMP_VOUCHER_DATE = " + Utility.cvtSQLDateString(strDate) + " ";
                    strSQL = strSQL + "AND v.COMP_VOUCHER_TYPE=1 ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND v.BRANCH_ID='" + strBranchID + "' ";
                    }
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO DAYLI_COLLECTION_TEMP ";
                    strSQL = strSQL + "(Voucher_Date, BkashNonActive) ";
                    strSQL = strSQL + "Select  +" + Utility.cvtSQLDateString(strDate) + " ,  ISNULL(sum(V.VOUCHER_DEBIT_AMOUNT),0) as amt from ACC_VOUCHER V  ";
                    strSQL = strSQL + "where   V.LEDGER_NAME='Bkash Non Active' and V.VOUCHER_TOBY='Dr'  ";
                    strSQL = strSQL + "and   v.COMP_VOUCHER_DATE = " + Utility.cvtSQLDateString(strDate) + " ";
                    strSQL = strSQL + "AND v.COMP_VOUCHER_TYPE=1 ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND v.BRANCH_ID='" + strBranchID + "' ";
                    }
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO DAYLI_COLLECTION_TEMP ";
                    strSQL = strSQL + "(Voucher_Date, CashOfHeadOffice) ";
                    strSQL = strSQL + "Select  +" + Utility.cvtSQLDateString(strDate) + " ,  ISNULL(sum(V.VOUCHER_DEBIT_AMOUNT),0) as amt from ACC_VOUCHER V  ";
                    strSQL = strSQL + "where   V.LEDGER_NAME='Cash Of Head Office' and V.VOUCHER_TOBY='Dr'  ";
                    strSQL = strSQL + "and   v.COMP_VOUCHER_DATE = " + Utility.cvtSQLDateString(strDate) + " ";
                    //strSQL = strSQL + "and V.TRANSFER_TYPE= 0 ";
                    strSQL = strSQL + "AND v.COMP_VOUCHER_TYPE IN (1,3) ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND v.BRANCH_ID='" + strBranchID + "' ";
                    }
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO DAYLI_COLLECTION_TEMP ";
                    strSQL = strSQL + "(Voucher_Date, PBL01341SND) ";
                    strSQL = strSQL + "Select  +" + Utility.cvtSQLDateString(strDate) + " ,  ISNULL(sum(V.VOUCHER_DEBIT_AMOUNT),0) as amt from ACC_VOUCHER V  ";
                    strSQL = strSQL + "where   V.LEDGER_NAME='PBL (01341)-SND' and V.VOUCHER_TOBY='Dr'  ";
                    strSQL = strSQL + "and   v.COMP_VOUCHER_DATE = " + Utility.cvtSQLDateString(strDate) + " ";
                    strSQL = strSQL + "AND v.COMP_VOUCHER_TYPE=1 ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND v.BRANCH_ID='" + strBranchID + "' ";
                    }
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO DAYLI_COLLECTION_TEMP ";
                    strSQL = strSQL + "(Voucher_Date, PubaliBankLimitedHerbalSND1260) ";
                    strSQL = strSQL + "Select  +" + Utility.cvtSQLDateString(strDate) + " ,  ISNULL(sum(V.VOUCHER_DEBIT_AMOUNT),0) as amt from ACC_VOUCHER V  ";
                    strSQL = strSQL + "where   V.LEDGER_NAME='Pubali Bank Limited (Herbal SND-1260)' and V.VOUCHER_TOBY='Dr'  ";
                    strSQL = strSQL + "and   v.COMP_VOUCHER_DATE = " + Utility.cvtSQLDateString(strDate) + " ";
                    strSQL = strSQL + "AND v.COMP_VOUCHER_TYPE=1 ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND v.BRANCH_ID='" + strBranchID + "' ";
                    }
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO DAYLI_COLLECTION_TEMP ";
                    strSQL = strSQL + "(Voucher_Date, SNDIBBL0028) ";
                    strSQL = strSQL + "Select  +" + Utility.cvtSQLDateString(strDate) + " ,  ISNULL(sum(V.VOUCHER_DEBIT_AMOUNT),0) as amt from ACC_VOUCHER V  ";
                    strSQL = strSQL + "where   V.LEDGER_NAME='SND-IBBL (0028)' and V.VOUCHER_TOBY='Dr'  ";
                    strSQL = strSQL + "and   v.COMP_VOUCHER_DATE = " + Utility.cvtSQLDateString(strDate) + " ";
                    strSQL = strSQL + "AND v.COMP_VOUCHER_TYPE=1 ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND v.BRANCH_ID='" + strBranchID + "' ";
                    }
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO DAYLI_COLLECTION_TEMP ";
                    strSQL = strSQL + "(Voucher_Date, SoutheastBankSNdAC) ";
                    strSQL = strSQL + "Select  +" + Utility.cvtSQLDateString(strDate) + " ,  ISNULL(sum(V.VOUCHER_DEBIT_AMOUNT),0) as amt from ACC_VOUCHER V  ";
                    strSQL = strSQL + "where   V.LEDGER_NAME='SBL-SND (02213)' and V.VOUCHER_TOBY='Dr'  ";
                    strSQL = strSQL + "and   v.COMP_VOUCHER_DATE = " + Utility.cvtSQLDateString(strDate) + " ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND v.BRANCH_ID='" + strBranchID + "' ";
                    }
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    cmdInsert.Transaction.Commit();
                    cmdInsert.Dispose();
                    return "1";
                }
                catch (Exception ex)
                {
                    return ex.ToString();
                }

            }
        }

        #endregion
        #region "CheckProcess"
        public string gsterGecheckProcess(string strDeComID, string vstrMonthID)
        {
            string strSQL = null;
            string connstring;


            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                cmdInsert.Connection = gcnMain;

                strSQL = "SELECT AUTOJV FROM ACC_COMPANY_VOUCHER  ";
                strSQL = strSQL + "WHERE upper(COMP_VOUCHER_MONTH_ID) = '" + vstrMonthID.ToUpper() + "' ";
                strSQL = strSQL + "AND AUTOJV  = 1 ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    return "Already Process Done";
                }
                else
                {
                    return "";
                }
                dr.Close();
            }
        }
        #endregion
        #region "CheckJV"
        public string gCheckJV(string strDeComID, string strRefNo)
        {
            string strSQL = null;
            string connstring;


            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                cmdInsert.Connection = gcnMain;

                strSQL = "SELECT COMP_REF_NO FROM ACC_COMPANY_VOUCHER  ";
                strSQL = strSQL + "WHERE COMP_REF_NO = '" + strRefNo + "' ";
                strSQL = strSQL + "AND COMP_VOUCHER_TYPE  = 3 ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    return "Duplicate";
                }
                else
                {
                    return "";
                }
                dr.Close();
            }
        }
        #endregion
        #region "Default Date"
        public DataTable GetDefalterData(string strDeComID, string vstrLedgerName,string strVdate)
        {
            string query = "";


            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            DataTable dt = new DataTable();
            query = "SELECT COMP_VOUCHER_DATE FROM ACC_DEFAULTER_LEDGER ";
            query += "WHERE LEDGER_NAME='" + vstrLedgerName.Replace("'", "''") + "' ";
            query += "AND  COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strVdate) + " ";
            query += "AND  DEF_STATUS =0 ";

            using (SqlConnection con = new SqlConnection(connstring))
            {
                using (SqlCommand cmd = new SqlCommand(query))
                {
                    using (SqlDataAdapter sda = new SqlDataAdapter())
                    {
                        cmd.CommandType = CommandType.Text;
                        cmd.Connection = con;
                        sda.SelectCommand = cmd;
                        sda.Fill(dt);
                    }
                }
                return dt;
            }
        }
        public DataTable GetTemplateData(string strDeComID,string vstrLedgerName)
        {
            string query = "";
            
                                                                
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            DataTable dt = new DataTable();
            query = "SELECT TOP 1 LEDGER_NAME,TEMPLATE_NAME,INSTALLMET_NAME,DUE_DATE ,MONTHLY_AMOUNT FROM ACC_PAYMENT_SCHEDULE ";
            query += "WHERE LEDGER_NAME='" + vstrLedgerName.Replace("'", "''") + "' ";
            query += "AND  INSTALL_STATUS=0 ORDER BY INSTALLMET_NAME ASC ";

            using (SqlConnection con = new SqlConnection(connstring))
            {
                using (SqlCommand cmd = new SqlCommand(query))
                {
                    using (SqlDataAdapter sda = new SqlDataAdapter())
                    {
                        cmd.CommandType = CommandType.Text;
                        cmd.Connection = con;
                        sda.SelectCommand = cmd;
                        sda.Fill(dt);
                    }
                }
                return dt;
            }
        }
        #endregion
        #region "Edit"
        public List<Invoice> mfillPartyNameNewEdit(string strDeComID, string strBranchID, bool blngAccessControl, string strUserID, int intStatus, string strMode, string strKey)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<Invoice> oogrp = new List<Invoice>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            if (blngAccessControl == true)
            {
                strSQL = "select DISTINCT l.TERITORRY_CODE,l.TERRITORRY_NAME,l.LEDGER_NAME,l.LEDGER_NAME_MERZE ";
                strSQL = strSQL + "from ACC_LEDGER  L,ACC_LEDGERGROUP g ,ACC_TERITORRY t,MPO_COMM_MAN_PARENT_CHILD m  where m.LEDGER_NAME =l.LEDGER_NAME AND g.GR_NAME =l.LEDGER_PARENT_GROUP  AND t.TERITORRY_CODE=l.TERITORRY_CODE ";
                if (intStatus == 0)
                {
                    strSQL = strSQL + "AND m.COMM_MANUAL_KEY ='" + strKey + "' ";
                    strSQL = strSQL + "and l.LEDGER_STATUS=" + intStatus + " ";
                }
                else
                {
                    strSQL = strSQL + "and l.LEDGER_STATUS in (1,2) ";
                }
                if (strMode == "X")
                {
                    strSQL = strSQL + "and Upper(LEDGER_NAME)  not like 'X%' ";
                }
                strSQL = strSQL + " and  l.LEDGER_GROUP <= 203 ";
                strSQL = strSQL + "and g.GR_PARENT in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserID + "')";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "and l.BRANCH_ID = '" + strBranchID + "' ";
                }
            }
            else
            {
                strSQL = "SELECT l.TERITORRY_CODE,l.TERRITORRY_NAME,l.LEDGER_NAME,l.LEDGER_NAME_MERZE from ACC_TERITORRY t,ACC_LEDGER l where t.TERITORRY_CODE=l.TERITORRY_CODE ";

                if (intStatus == 0)
                {
                    strSQL = strSQL + "and l.LEDGER_STATUS=" + intStatus + " ";
                }
                else
                {
                    strSQL = strSQL + "and l.LEDGER_STATUS in (1,2) ";
                }
                if (strMode == "X")
                {
                    strSQL = strSQL + "and Upper(LEDGER_NAME)  not like 'X%' ";
                }
                else
                {
                    strSQL = strSQL + "and Upper(LEDGER_NAME)  not like 'X%' ";
                    strSQL = strSQL + "and len(l.TERITORRY_CODE ) >=3 ";
                }
                strSQL = strSQL + "and l.LEDGER_GROUP <= 203 ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "and l.BRANCH_ID = '" + strBranchID + "' ";
                }
            }
            strSQL = strSQL + "ORDER BY l.TERITORRY_CODE ";

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    Invoice ogrp = new Invoice();
                    if (drGetGroup["TERITORRY_CODE"].ToString() != "")
                    {
                        ogrp.strTeritorryCode = drGetGroup["TERITORRY_CODE"].ToString();
                    }
                    else
                    {
                        ogrp.strTeritorryCode = "";
                    }
                    if (drGetGroup["TERRITORRY_NAME"].ToString() != "")
                    {
                        ogrp.strTeritorryName = drGetGroup["TERRITORRY_NAME"].ToString();
                    }
                    else
                    {
                        ogrp.strTeritorryName = "";
                    }

                    ogrp.strLedgerName = drGetGroup["LEDGER_NAME"].ToString();
                    ogrp.strMereString = drGetGroup["LEDGER_NAME_MERZE"].ToString();
                    oogrp.Add(ogrp);
                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return oogrp;

            }
        }
        #endregion
        #region "PF"
        public double dblGetPFAmount(string strDeComID, string vstrLedgerName)
        {
            string strSQL = null;
            string connstring;
            double dblclosing = 0;

            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                cmdInsert.Connection = gcnMain;

                strSQL = "SELECT PF_AMOUNT AS OPENING FROM ACC_LEDGER ";
                strSQL = strSQL + "WHERE LEDGER_NAME = '" + vstrLedgerName + "' ";


                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblclosing = Convert.ToDouble(dr["OPENING"].ToString());
                }
                dr.Close();


                gcnMain.Close();
                cmdInsert.Dispose();
                return dblclosing;

            }
        }
        #endregion
        #region "Closing"
        public double gGetdblLedgerClosingBalance(string strDeComID, string strFdate, string strTDate,
                                                  string vstrLedgerName, string strBranchID)
        {
            string strSQL = null;
            string connstring;
            double dblBackYearOpening = 0, dblOPening = 0, dblYearOpening = 0, dblclosing = 0;

            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                cmdInsert.Connection = gcnMain;
                if (strBranchID == "")
                {
                    strSQL = "SELECT LEDGER_OPENING_BALANCE *-1 AS OPENING FROM ACC_LEDGER ";
                    strSQL = strSQL + "WHERE LEDGER_NAME = '" + vstrLedgerName + "' ";
                }
                else
                {
                    strSQL = "SELECT BRANCH_LEDGER_OPENING_BALANCE AS OPENING FROM ACC_BRANCH_LEDGER_OPENING ";
                    strSQL = strSQL + "WHERE LEDGER_NAME = '" + vstrLedgerName.Replace("'", "''") + "' ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND BRANCH_ID = '" + strBranchID + "' ";
                    }
                }

                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblOPening = Convert.ToDouble(dr["OPENING"].ToString());
                }
                dr.Close();

                strSQL = "SELECT ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) *-1  AS OPENING ";
                strSQL = strSQL + "FROM ACC_VOUCHER ";
                strSQL = strSQL + "INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME= ACC_LEDGER.LEDGER_NAME ";
                strSQL = strSQL + "WHERE ACC_VOUCHER.LEDGER_NAME = '" + vstrLedgerName + "' ";
                strSQL = strSQL + "AND COMP_VOUCHER_DATE >= ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(Utility.gstrFinicialYearFrom) + "";
                strSQL = strSQL + " AND  ";
                strSQL = strSQL + " ACC_VOUCHER.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID = '" + strBranchID + "' ";
                }
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblYearOpening = Convert.ToDouble(dr["OPENING"].ToString());
                }
                dr.Close();

                strSQL = "SELECT ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0)  AS OPENING ";
                strSQL = strSQL + "FROM ACC_VOUCHER ";
                strSQL = strSQL + " INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME= ACC_LEDGER.LEDGER_NAME ";
                strSQL = strSQL + "WHERE ACC_VOUCHER.LEDGER_NAME = '" + vstrLedgerName + "' ";
                strSQL = strSQL + "AND COMP_VOUCHER_DATE < ";
                strSQL = strSQL + Utility.cvtSQLDateString(Utility.gstrFinicialYearFrom) + " ";
                strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE = " + (int)Utility.LEDGER_PRM_TYPE.lgrASSET + " OR ACC_LEDGER.LEDGER_PRIMARY_TYPE = " + (int)Utility.LEDGER_PRM_TYPE.lgrLIABILITY + " ) ";

                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID = '" + strBranchID + "' ";
                }
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblBackYearOpening = Convert.ToDouble(dr["OPENING"].ToString());
                }
                dr.Close();


                dblOPening = dblYearOpening + dblBackYearOpening + dblOPening;

                if (dblOPening < 0)
                {
                    dblclosing = dblOPening;
                }
                else
                {
                    dblclosing = dblOPening;
                }

                //strSQL = "SELECT ISNULL(SUM(VOUCHER_CREDIT_AMOUNT),0) AS TOTAL_CREDIT,";
                //strSQL = strSQL + "ISNULL(SUM(VOUCHER_DEBIT_AMOUNT),0) AS TOTAL_DEBIT ";
                //strSQL = strSQL + "FROM ACC_VOUCHER ";
                //strSQL = strSQL + "WHERE LEDGER_NAME = '" + vstrLedgerName + "' ";
                //strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN ";
                //strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                //strSQL = strSQL + "AND ";
                //strSQL = strSQL + " " + Utility.cvtSQLDateString(strTDate) + ") ";
                //if (strBranchID != "")
                //{
                //    strSQL = strSQL + "AND BRANCH_ID = '" + strBranchID + "' ";
                //}
                //cmdInsert.CommandText = strSQL;
                //dr = cmdInsert.ExecuteReader();
                //if (dr.Read())
                //{
                //    dblTotalCredit = Convert.ToDouble(dr["TOTAL_CREDIT"].ToString());
                //    dblTotalDebit = Convert.ToDouble(dr["TOTAL_DEBIT"].ToString());
                //}
                //dr.Close();
                //dblclosing = dblOPening + (dblTotalCredit - dblTotalDebit);

                //dr.Close();
                gcnMain.Close();
                cmdInsert.Dispose();
                return dblclosing;

            }
        }
        #endregion
        #region "Mpo Commission"
        public List<RAccountsGroup> mGetMpoCommissionSP(string strDeComID, int intVtype, int intSummDetails, string strRefNo, 
                                                        string strBranchID, string strFDate, string strTDate,string strPfDare,
                                                        string strPTDate, string VstrUserName,string strPmonthid)
        {

            string strSQL = null, strMonthID = "", strDuration = "", strLedgerName = "", strComRefNo = "", strComRefNo2 = "", strFdate = "", strTdate = "", strParttyName = "";
            DateTime dteFdate;
            double dblCommitment = 0, dblCasCollection, dblVoucherCollection, dblTotal = 0;

            string strComRefNoAll = "";

            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmd = new SqlCommand();
                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;

                strSQL = "SELECT COMP_REF_NO,REF_NO,COMP_VOUCHER_TYPE,COMP_VOUCHER_DATE,LEDGER_NAME , BRANCH_NAME, COMP_VOUCHER_AMOUNT, ";
                strSQL = strSQL + "COMP_VOUCHER_NET_AMOUNT,LEDGER_CODE,LEDGER_NAME_MERZE,'' VOUCHER_REVERSE_LEDGER From ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER_BRANCH_VIEW WHERE COMP_VOUCHER_TYPE = 3  AND SP_JOURNAL= 1  ";
                strSQL = strSQL + "AND SAMPLE_STATUS=0 ";
                strSQL = strSQL + "AND ACC_COMPANY_VOUCHER_BRANCH_VIEW.COMP_VOUCHER_DATE BETWEEN ";
                strSQL = strSQL + Utility.cvtSQLDateString(strFDate) + " ";
                strSQL = strSQL + "AND ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "AND COMP_REF_NO like '%%'AND BRANCH_ID in ";
                strSQL = strSQL + "(select BRANCH_ID from USER_PRIVILEGES_BRANCH where USER_LOGIN_NAME  ='" + VstrUserName + "')  ";
                strSQL = strSQL + "ORDER By REF_NO,TERITORRY_CODE,LEDGER_CODE,LEDGER_NAME   ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    if (dr["COMP_REF_NO"].ToString() != "")
                    {

                        strComRefNo2 = dr["COMP_REF_NO"].ToString();
                        strComRefNo = dr["REF_NO"].ToString();
                    }
                    else
                    {
                        strComRefNoAll = "";
                    }
                    strComRefNoAll = strComRefNoAll + dr["COMP_REF_NO"].ToString() + "|" + dr["REF_NO"].ToString() + "~";

                }
                dr.Close();


                if (strComRefNoAll != "")
                {

                    string[] words = strComRefNoAll.Split('~');
                    foreach (string ooassets in words)
                    {
                        string[] oAssets = ooassets.Split('|');
                        if (oAssets.ToString() != "")
                        {

                            strSQL = "SELECT AGNST_COMP_REF_NO,COMP_VOUCHER_DATE,LEDGER_NAME from ACC_COMPANY_VOUCHER WHERE COMP_REF_NO='" + oAssets[0].ToString() + "'";
                            cmdInsert.CommandText = strSQL;
                            dr = cmdInsert.ExecuteReader();
                            if (dr.Read())
                            {
                                strLedgerName = dr["LEDGER_NAME"].ToString();
                                strMonthID = dr["AGNST_COMP_REF_NO"].ToString();
                            }
                            else
                            {
                                dteFdate = DateTime.Now;
                            }
                            dr.Close();
                            strSQL = "SELECT FROM_DATE,TO_DATE from ACC_MONTH_SETUP WHERE MONTH_ID='" + strMonthID + "' ";
                            cmdInsert.CommandText = strSQL;
                            dr = cmdInsert.ExecuteReader();
                            if (dr.Read())
                            {
                                strFdate = Convert.ToDateTime(dr["FROM_DATE"]).ToString("dd/MM/yyyy");
                                strTdate = Convert.ToDateTime(dr["TO_DATE"]).ToString("dd/MM/yyyy");
                                strDuration = "Period: " + strMonthID + " (" + Convert.ToDateTime(dr["FROM_DATE"]).ToString("dd-MM-yyyy") + " to " + Convert.ToDateTime(dr["TO_DATE"]).ToString("dd-MM-yyyy") + ")";
                            }
                            dr.Close();
                            strSQL = "SELECT LEDGER_NAME, COLL_TARGET_FROM_DATE, COLL_TARGET_TO_DATE, COLL_TARGET_OPENING, MONTH_ID AS COLL_TARGET_MONTH_ID, COLL_TARGET_COLL_PER, COL_POS, ROW_POS,  ";
                            strSQL = strSQL + "COLL_TARGET_COLL_AMT  ";
                            strSQL = strSQL + "FROM  SALES_COLL_TARGET_TRAN  ";
                            strSQL = strSQL + "WHERE (MONTH_ID ='" + strMonthID + "' ) AND (LEDGER_NAME = '" + strLedgerName + "')  ";
                            strSQL = strSQL + "ORDER BY COLL_TARGET_DETAIL_SERIAL  ";
                            cmdInsert.CommandText = strSQL;
                            dr = cmdInsert.ExecuteReader(); ;
                            if (dr.Read())
                            {
                                dblCommitment = Convert.ToDouble(dr["COLL_TARGET_COLL_AMT"]);
                            }
                            dr.Close();
                            strSQL = "SELECT LEDGER_NAME_MERZE from ACC_LEDGER WHERE LEDGER_NAME='" + strLedgerName + "' ";
                            cmdInsert.CommandText = strSQL;
                            dr = cmdInsert.ExecuteReader();
                            if (dr.Read())
                            {
                                strParttyName = dr["LEDGER_NAME_MERZE"].ToString();
                            }
                            dr.Close();

                            //string strPreMonth = Convert.ToDateTime(strTdate).AddMonths(-1).ToString("MMMyy").ToUpper();
                            dblCasCollection = Utility.gGetReceiptAmountOfParty(strDeComID, strLedgerName, 1, 0, strFdate, strTdate);
                            dblVoucherCollection = Utility.gGetReceiptAmountVoucher(strDeComID, strLedgerName, 3, 1, strPfDare, strTdate, strPmonthid);
                            dblTotal = dblCasCollection + dblVoucherCollection;

                            List<RAccountsGroup> ooAccLedgerr = new List<RAccountsGroup>();
                            strSQL = "SELECT ACC_COMPANY_VOUCHER.COMP_REF_NO,ACC_COMPANY_VOUCHER.LEDGER_NAME AS MRNAME,ACC_COMPANY_VOUCHER.BRANCH_ID, ";
                            strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE,ACC_VOUCHER.AGNST_COMP_REF_NO,";
                            strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION,";
                            strSQL = strSQL + "ACC_VOUCHER.LEDGER_NAME,ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT,";
                            strSQL = strSQL + "ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT, ACC_VOUCHER.VOUCHER_TOBY ";
                            strSQL = strSQL + "FROM ";
                            strSQL = strSQL + "ACC_COMPANY_VOUCHER ACC_COMPANY_VOUCHER ";
                            strSQL = strSQL + "INNER JOIN ACC_VOUCHER ACC_VOUCHER ON ";
                            strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_REF_NO = ACC_VOUCHER.COMP_REF_NO ";
                            strSQL = strSQL + "WHERE ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = " + intVtype + " ";
                            strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT <> 0 ";
                            strSQL = strSQL + " AND ACC_COMPANY_VOUCHER.COMP_REF_NO='" + oAssets[0].ToString() + "'";

                            strSQL = strSQL + "Order By ";
                            strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_DATE ASC, ";
                            strSQL = strSQL + "ACC_VOUCHER.VOUCHER_TOBY ASC,";
                            strSQL = strSQL + "SUBSTRING(ACC_VOUCHER.COMP_REF_NO,7,30) Asc,";
                            strSQL = strSQL + "ACC_VOUCHER.LEDGER_NAME ASC";
                            //}

                            cmdInsert.CommandText = strSQL;
                            cmdInsert.Connection = gcnMain;
                            dr = cmdInsert.ExecuteReader();
                            while (dr.Read())
                            {
                                RAccountsGroup oLedg = new RAccountsGroup();
                                oLedg.strRefNo = Utility.Mid(dr["COMP_REF_NO"].ToString(), 6, dr["COMP_REF_NO"].ToString().Length - 6);
                                oLedg.strGrName = strParttyName;
                                oLedg.strBranchId = "Branch : " + Utility.gstrGetBranchName(strDeComID, dr["BRANCH_ID"].ToString());
                                oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                                oLedg.stVouchertoby = dr["VOUCHER_TOBY"].ToString();
                                oLedg.strDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd-MM-yyyy");
                                oLedg.dblDebit = Convert.ToDouble(dr["VOUCHER_CREDIT_AMOUNT"].ToString());
                                oLedg.dblCredit = Convert.ToDouble(dr["VOUCHER_DEBIT_AMOUNT"].ToString());
                                if (dr["COMP_VOUCHER_NARRATION"].ToString() != "")
                                {
                                    oLedg.strNarration = dr["COMP_VOUCHER_NARRATION"].ToString();
                                }
                                else
                                {
                                    oLedg.strNarration = "";
                                }
                                oLedg.strPeriod = strDuration;
                                oLedg.dblColltarget = dblCommitment;
                                oLedg.dblCashOpn = dblCasCollection;
                                oLedg.dblCollAcieve = dblVoucherCollection;
                                oLedg.dblAmount = dblTotal;
                                ooAccLedger.Add(oLedg);

                            }

                            //if (!dr.HasRows)
                            //{
                            //    RAccountsGroup oLedg = new RAccountsGroup();
                            //    oLedg.strRefNo = "";
                            //    oLedg.strLedgerName = "";
                            //    oLedg.stVouchertoby = "";
                            //    oLedg.strDate = "";
                            //    oLedg.dblDebit = 0;
                            //    oLedg.dblCredit = 0;
                            //    oLedg.strNarration = "";
                            //    ooAccLedger.Add(oLedg);
                            //}
                            dr.Close();
                        }

                    }

                }
                else
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strRefNo = "";
                    oLedg.strLedgerName = "";
                    oLedg.stVouchertoby = "";
                    oLedg.strDate = "";
                    oLedg.dblDebit = 0;
                    oLedg.dblCredit = 0;
                    oLedg.strNarration = "";
                    ooAccLedger.Add(oLedg);
                }
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }

        }

        #endregion
        #region "Sales StatementQty"
        //public List<RSalesPurchase> mGetMpoProductSalesStatementQty(string strDeComID, int intMode, string strLedgerGroup,
        //                                                            string strProduct, string strFdate, string strTDate, string strStockGroup,
        //                                                            bool blngAccessControl, string strUserName)
        //{
        //    string strSQL = null;
        //    connstring = Utility.SQLConnstringComSwitch(strDeComID);
        //    using (SqlConnection gcnMain = new SqlConnection(connstring))
        //    {
        //        if (gcnMain.State == ConnectionState.Open)
        //        {
        //            gcnMain.Close();
        //        }
        //        gcnMain.Open();
        //        SqlDataReader dr;

        //        List<RSalesPurchase> ooAccLedger = new List<RSalesPurchase>();
        //        if (intMode == 1)
        //        {
        //            SqlTransaction myTrans;
        //            SqlCommand cmdInsert = new SqlCommand();
        //            myTrans = gcnMain.BeginTransaction();
        //            cmdInsert.Connection = gcnMain;
        //            cmdInsert.Transaction = myTrans;

        //            strSQL = "DELETE FROM SAL_PRODUCT_SALES_STATEMENT_TEMP ";
        //            cmdInsert.CommandText = strSQL;
        //            cmdInsert.ExecuteNonQuery();
        //            strSQL = "INSERT INTO SAL_PRODUCT_SALES_STATEMENT_TEMP( LedgerName, StockGroup,ItemName,PackSize,BillQty) ";
        //            strSQL = strSQL + "select LG.ZONE as Ledger,I.STOCKGROUP_NAME,B.STOCKITEM_NAME,I.STOCKCATEGORY_NAME ,sum(B.BILL_QUANTITY) AS BILLQTY from ACC_COMP_BILL_TRAN_QRY B,ACC_LEDGER_Z_D_A LG , INV_STOCKITEM I ";
        //            strSQL = strSQL + "WHERE B.LEDGER_NAME= LG.LEDGER_NAME and ";
        //            strSQL = strSQL + "B.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ";
        //            strSQL = strSQL + "AND (B.COMP_VOUCHER_TYPE = 16) and  B.STOCKITEM_NAME =I.STOCKITEM_NAME ";
        //            strSQL = strSQL + "AND (I.STOCKGROUP_NAME<>'Mother Tincture' AND I.STOCKGROUP_NAME<>'Trituration Tablet' AND I.STOCKGROUP_NAME<>'Bio-Laid' AND I.STOCKGROUP_NAME<>'Bio-Chemic' AND I.STOCKGROUP_NAME<>'Dilution') ";
        //            strSQL = strSQL + "AND (B.BRANCH_ID = '0001')  ";
        //            if (strLedgerGroup != "")
        //            {
        //                strSQL = strSQL + "AND LG.ZONE  IN (" + strLedgerGroup + ") ";
        //            }
        //            if (strProduct != "")
        //            {

        //                if (strStockGroup == "G")
        //                {
        //                    strSQL = strSQL + "AND I.STOCKGROUP_NAME IN (" + strProduct + ")  ";
        //                }
        //                else
        //                {
        //                    strSQL = strSQL + "AND B.STOCKITEM_NAME IN (" + strProduct + ")  ";
        //                }
        //            }

        //            strSQL = strSQL + "group by LG.ZONE,B.STOCKITEM_NAME,I.STOCKGROUP_NAME,I.STOCKCATEGORY_NAME ";
        //            strSQL = strSQL + "order by LG.ZONE,I.STOCKGROUP_NAME,B.STOCKITEM_NAME ";
        //            cmdInsert.CommandText = strSQL;
        //            cmdInsert.ExecuteNonQuery();
        //            strSQL = "INSERT INTO SAL_PRODUCT_SALES_STATEMENT_TEMP( LedgerName,StockGroup, ItemName,PackSize,BillQty) ";
        //            strSQL = strSQL + "select LG.ZONE as Ledger,I.STOCKGROUP_NAME,I.STOCKCATEGORY_NAME,I.STOCKCATEGORY_NAME ,sum(B.BILL_QUANTITY) AS BILLQTY from ACC_COMP_BILL_TRAN_QRY B,ACC_LEDGER_Z_D_A LG , INV_STOCKITEM I ";
        //            strSQL = strSQL + "WHERE B.LEDGER_NAME= LG.LEDGER_NAME and ";
        //            strSQL = strSQL + "B.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ";
        //            strSQL = strSQL + "AND (B.COMP_VOUCHER_TYPE = 16) and  B.STOCKITEM_NAME =I.STOCKITEM_NAME ";
        //            strSQL = strSQL + "AND I.STOCKGROUP_NAME in ('Bio-Laid','Bio-Chemic','Dilution','Mother Tincture','Trituration Tablet' ) ";
        //            strSQL = strSQL + "AND (B.BRANCH_ID = '0001')  ";
        //            if (strLedgerGroup != "")
        //            {
        //                strSQL = strSQL + "AND LG.ZONE  IN (" + strLedgerGroup + ") ";
        //            }
        //            if (strProduct != "")
        //            {

        //                if (strStockGroup == "G")
        //                {
        //                    strSQL = strSQL + "AND I.STOCKGROUP_NAME IN (" + strProduct + ")  ";
        //                }
        //                else
        //                {
        //                    strSQL = strSQL + "AND B.STOCKITEM_NAME IN (" + strProduct + ")  ";
        //                }
        //            }
        //            strSQL = strSQL + "group by LG.ZONE,B.STOCKITEM_NAME,I.STOCKGROUP_NAME,I.STOCKCATEGORY_NAME ";
        //            strSQL = strSQL + "order by LG.ZONE,I.STOCKGROUP_NAME,B.STOCKITEM_NAME ";
        //            cmdInsert.CommandText = strSQL;
        //            cmdInsert.ExecuteNonQuery();
        //            cmdInsert.Transaction.Commit();

        //        }

        //        if (intMode == 2)
        //        {
        //            SqlTransaction myTrans;
        //            SqlCommand cmdInsert = new SqlCommand();
        //            myTrans = gcnMain.BeginTransaction();
        //            cmdInsert.Connection = gcnMain;
        //            cmdInsert.Transaction = myTrans;

        //            strSQL = "DELETE FROM SAL_PRODUCT_SALES_STATEMENT_TEMP ";
        //            cmdInsert.CommandText = strSQL;
        //            cmdInsert.ExecuteNonQuery();
        //            strSQL = "INSERT INTO SAL_PRODUCT_SALES_STATEMENT_TEMP(LedgerName,StockGroup,ItemName,PackSize,BillQty) ";
        //            strSQL = strSQL + "select LG.DIVISION as Ledger,I.STOCKGROUP_NAME,B.STOCKITEM_NAME ,I.STOCKCATEGORY_NAME,sum(B.BILL_QUANTITY) AS BILLQTY from ACC_COMP_BILL_TRAN_QRY B,ACC_LEDGER_Z_D_A LG, INV_STOCKITEM I ";
        //            strSQL = strSQL + "WHERE B.LEDGER_NAME= LG.LEDGER_NAME and ";
        //            strSQL = strSQL + "B.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ";
        //            strSQL = strSQL + "AND (B.COMP_VOUCHER_TYPE = 16) and  B.STOCKITEM_NAME =I.STOCKITEM_NAME ";
        //            strSQL = strSQL + "AND (I.STOCKGROUP_NAME<>'Mother Tincture' AND I.STOCKGROUP_NAME<>'Trituration Tablet' AND I.STOCKGROUP_NAME<>'Bio-Laid' AND I.STOCKGROUP_NAME<>'Bio-Chemic' AND I.STOCKGROUP_NAME<>'Dilution') ";
        //            strSQL = strSQL + "AND (B.BRANCH_ID = '0001')  ";
        //            if (strLedgerGroup != "")
        //            {
        //                strSQL = strSQL + "AND LG.DIVISION  IN (" + strLedgerGroup + ") ";
        //            }
        //            if (strProduct != "")
        //            {
        //                if (strStockGroup == "G")
        //                {
        //                    strSQL = strSQL + "AND I.STOCKGROUP_NAME IN (" + strProduct + ")  ";
        //                }
        //                else
        //                {
        //                    strSQL = strSQL + "AND B.STOCKITEM_NAME IN (" + strProduct + ")  ";
        //                }
        //            }
        //            strSQL = strSQL + "group by LG.DIVISION,B.STOCKITEM_NAME,I.STOCKGROUP_NAME,I.STOCKCATEGORY_NAME ";
        //            strSQL = strSQL + "order by LG.DIVISION,I.STOCKGROUP_NAME,B.STOCKITEM_NAME ";
        //            cmdInsert.CommandText = strSQL;
        //            cmdInsert.ExecuteNonQuery();

        //            strSQL = "INSERT INTO SAL_PRODUCT_SALES_STATEMENT_TEMP(LedgerName,StockGroup,ItemName,PackSize,BillQty) ";
        //            strSQL = strSQL + "select LG.DIVISION as Ledger,I.STOCKGROUP_NAME,I.STOCKCATEGORY_NAME ,I.STOCKCATEGORY_NAME,sum(B.BILL_QUANTITY) AS BILLQTY from ACC_COMP_BILL_TRAN_QRY B,ACC_LEDGER_Z_D_A LG, INV_STOCKITEM I ";
        //            strSQL = strSQL + "WHERE B.LEDGER_NAME= LG.LEDGER_NAME and ";
        //            strSQL = strSQL + "B.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ";
        //            strSQL = strSQL + "AND (B.COMP_VOUCHER_TYPE = 16) and  B.STOCKITEM_NAME =I.STOCKITEM_NAME ";
        //            strSQL = strSQL + "AND I.STOCKGROUP_NAME in ('Bio-Laid','Bio-Chemic','Dilution','Mother Tincture','Trituration Tablet' ) ";
        //            strSQL = strSQL + "AND (B.BRANCH_ID = 0001)  ";
        //            if (strLedgerGroup != "")
        //            {
        //                strSQL = strSQL + "AND LG.DIVISION  IN (" + strLedgerGroup + ") ";
        //            }
        //            if (strProduct != "")
        //            {
        //                if (strStockGroup == "G")
        //                {
        //                    strSQL = strSQL + "AND I.STOCKGROUP_NAME IN (" + strProduct + ")  ";
        //                }
        //                else
        //                {
        //                    strSQL = strSQL + "AND B.STOCKITEM_NAME IN (" + strProduct + ")  ";
        //                }
        //            }
        //            strSQL = strSQL + "group by LG.DIVISION,B.STOCKITEM_NAME,I.STOCKGROUP_NAME,I.STOCKCATEGORY_NAME ";
        //            strSQL = strSQL + "order by LG.DIVISION,I.STOCKGROUP_NAME,B.STOCKITEM_NAME ";
        //            cmdInsert.CommandText = strSQL;
        //            cmdInsert.ExecuteNonQuery();
        //            cmdInsert.Transaction.Commit();

        //        }
        //        if (intMode == 3)
        //        {
        //            SqlTransaction myTrans;
        //            SqlCommand cmdInsert = new SqlCommand();
        //            myTrans = gcnMain.BeginTransaction();
        //            cmdInsert.Connection = gcnMain;
        //            cmdInsert.Transaction = myTrans;

        //            strSQL = "DELETE FROM SAL_PRODUCT_SALES_STATEMENT_TEMP ";
        //            cmdInsert.CommandText = strSQL;
        //            cmdInsert.ExecuteNonQuery();
        //            strSQL = "INSERT INTO SAL_PRODUCT_SALES_STATEMENT_TEMP( LedgerName, StockGroup,ItemName,PackSize,BillQty) ";
        //            strSQL = strSQL + "select LG.Area as Ledger,I.STOCKGROUP_NAME,B.STOCKITEM_NAME,I.STOCKCATEGORY_NAME ,sum(B.BILL_QUANTITY) AS BILLQTY from ACC_COMP_BILL_TRAN_QRY B,ACC_LEDGER_Z_D_A LG , INV_STOCKITEM I ";
        //            strSQL = strSQL + "WHERE B.LEDGER_NAME= LG.LEDGER_NAME and ";
        //            strSQL = strSQL + "B.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ";
        //            strSQL = strSQL + "AND (B.COMP_VOUCHER_TYPE = 16) and  B.STOCKITEM_NAME =I.STOCKITEM_NAME ";
        //            strSQL = strSQL + "AND (I.STOCKGROUP_NAME<>'Mother Tincture' AND I.STOCKGROUP_NAME<>'Trituration Tablet' AND I.STOCKGROUP_NAME<>'Bio-Laid' AND I.STOCKGROUP_NAME<>'Bio-Chemic' AND I.STOCKGROUP_NAME<>'Dilution') ";
        //            strSQL = strSQL + "AND (B.BRANCH_ID = '0001')  ";
        //            if (strLedgerGroup != "")
        //            {
        //                strSQL = strSQL + "AND LG.Area  IN (" + strLedgerGroup + ") ";
        //            }
        //            if (strProduct != "")
        //            {

        //                if (strStockGroup == "G")
        //                {
        //                    strSQL = strSQL + "AND I.STOCKGROUP_NAME IN (" + strProduct + ")  ";
        //                }
        //                else
        //                {
        //                    strSQL = strSQL + "AND B.STOCKITEM_NAME IN (" + strProduct + ")  ";
        //                }
        //            }

        //            strSQL = strSQL + "group by LG.Area ,B.STOCKITEM_NAME,I.STOCKGROUP_NAME,I.STOCKCATEGORY_NAME ";
        //            strSQL = strSQL + "order by LG.Area ,I.STOCKGROUP_NAME,B.STOCKITEM_NAME ";
        //            cmdInsert.CommandText = strSQL;
        //            cmdInsert.ExecuteNonQuery();
        //            strSQL = "INSERT INTO SAL_PRODUCT_SALES_STATEMENT_TEMP( LedgerName,StockGroup, ItemName,PackSize,BillQty) ";
        //            strSQL = strSQL + "select LG.Area as Ledger,I.STOCKGROUP_NAME,I.STOCKCATEGORY_NAME,I.STOCKCATEGORY_NAME ,sum(B.BILL_QUANTITY) AS BILLQTY from ACC_COMP_BILL_TRAN_QRY B,ACC_LEDGER_Z_D_A LG , INV_STOCKITEM I ";
        //            strSQL = strSQL + "WHERE B.LEDGER_NAME= LG.LEDGER_NAME and ";
        //            strSQL = strSQL + "B.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ";
        //            strSQL = strSQL + "AND (B.COMP_VOUCHER_TYPE = 16) and  B.STOCKITEM_NAME =I.STOCKITEM_NAME ";
        //            strSQL = strSQL + "AND I.STOCKGROUP_NAME in ('Bio-Laid','Bio-Chemic','Dilution','Mother Tincture','Trituration Tablet' ) ";
        //            strSQL = strSQL + "AND (B.BRANCH_ID = '0001')  ";
        //            if (strLedgerGroup != "")
        //            {
        //                strSQL = strSQL + "AND LG.Area  IN (" + strLedgerGroup + ") ";
        //            }
        //            if (strProduct != "")
        //            {

        //                if (strStockGroup == "G")
        //                {
        //                    strSQL = strSQL + "AND I.STOCKGROUP_NAME IN (" + strProduct + ")  ";
        //                }
        //                else
        //                {
        //                    strSQL = strSQL + "AND B.STOCKITEM_NAME IN (" + strProduct + ")  ";
        //                }
        //            }

        //            strSQL = strSQL + "group by LG.Area ,B.STOCKITEM_NAME,I.STOCKGROUP_NAME,I.STOCKCATEGORY_NAME ";
        //            strSQL = strSQL + "order by LG.Area ,I.STOCKGROUP_NAME,B.STOCKITEM_NAME ";
        //            cmdInsert.CommandText = strSQL;
        //            cmdInsert.ExecuteNonQuery();
        //            cmdInsert.Transaction.Commit();

        //        }

        //        if (intMode == 4)
        //        {
        //            SqlTransaction myTrans;
        //            SqlCommand cmdInsert = new SqlCommand();
        //            myTrans = gcnMain.BeginTransaction();
        //            cmdInsert.Connection = gcnMain;
        //            cmdInsert.Transaction = myTrans;

        //            strSQL = "DELETE FROM SAL_PRODUCT_SALES_STATEMENT_TEMP ";
        //            cmdInsert.CommandText = strSQL;
        //            cmdInsert.ExecuteNonQuery();
        //            strSQL = "INSERT INTO SAL_PRODUCT_SALES_STATEMENT_TEMP(LedgerName, StockGroup,ItemName,PackSize, BillQty) ";
        //            strSQL = strSQL + "select LG.LEDGER_NAME_MERZE as Ledger,I.STOCKGROUP_NAME,B.STOCKITEM_NAME,I.STOCKCATEGORY_NAME ,sum(B.BILL_QUANTITY) AS BILLQTY from ACC_COMP_BILL_TRAN_QRY B,ACC_LEDGER_Z_D_A LG, INV_STOCKITEM I ";
        //            strSQL = strSQL + "WHERE B.LEDGER_NAME= LG.LEDGER_NAME and ";
        //            strSQL = strSQL + "B.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ";
        //            strSQL = strSQL + "AND (B.COMP_VOUCHER_TYPE = 16) and  B.STOCKITEM_NAME =I.STOCKITEM_NAME  ";
        //            strSQL = strSQL + "AND (I.STOCKGROUP_NAME<>'Mother Tincture' AND I.STOCKGROUP_NAME<>'Trituration Tablet' AND I.STOCKGROUP_NAME<>'Bio-Laid' AND I.STOCKGROUP_NAME<>'Bio-Chemic' AND I.STOCKGROUP_NAME<>'Dilution') ";
        //            strSQL = strSQL + "AND (B.BRANCH_ID = 0001)  ";
        //            if (strLedgerGroup != "")
        //            {
        //                strSQL = strSQL + "AND LG.LEDGER_NAME_MERZE  IN (" + strLedgerGroup + ") ";
        //            }
        //            if (strProduct != "")
        //            {
        //                if (strStockGroup == "G")
        //                {
        //                    strSQL = strSQL + "AND I.STOCKGROUP_NAME IN (" + strProduct + ")  ";
        //                }
        //                else
        //                {
        //                    strSQL = strSQL + "AND B.STOCKITEM_NAME IN (" + strProduct + ")  ";
        //                }
        //            }
        //            strSQL = strSQL + "group by LG.LEDGER_NAME_MERZE,I.STOCKGROUP_NAME,B.STOCKITEM_NAME,I.STOCKCATEGORY_NAME ";
        //            strSQL = strSQL + "order by LG.LEDGER_NAME_MERZE,I.STOCKGROUP_NAME,B.STOCKITEM_NAME ";
        //            cmdInsert.CommandText = strSQL;
        //            cmdInsert.ExecuteNonQuery();

        //            strSQL = "INSERT INTO SAL_PRODUCT_SALES_STATEMENT_TEMP(LedgerName, StockGroup,ItemName,PackSize, BillQty) ";
        //            strSQL = strSQL + "select LG.LEDGER_NAME_MERZE as Ledger,I.STOCKGROUP_NAME,I.STOCKCATEGORY_NAME,I.STOCKCATEGORY_NAME ,sum(B.BILL_QUANTITY) AS BILLQTY from ACC_COMP_BILL_TRAN_QRY B,ACC_LEDGER_Z_D_A LG, INV_STOCKITEM I ";
        //            strSQL = strSQL + "WHERE B.LEDGER_NAME= LG.LEDGER_NAME and ";
        //            strSQL = strSQL + "B.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ";
        //            strSQL = strSQL + "AND (B.COMP_VOUCHER_TYPE = 16) and  B.STOCKITEM_NAME =I.STOCKITEM_NAME  ";
        //            strSQL = strSQL + "AND I.STOCKGROUP_NAME in ('Bio-Laid','Bio-Chemic','Dilution','Mother Tincture','Trituration Tablet' ) ";
        //            strSQL = strSQL + "AND (B.BRANCH_ID = 0001)  ";
        //            if (strLedgerGroup != "")
        //            {
        //                strSQL = strSQL + "AND LG.LEDGER_NAME_MERZE  IN (" + strLedgerGroup + ") ";
        //            }
        //            if (strProduct != "")
        //            {
        //                if (strStockGroup == "G")
        //                {
        //                    strSQL = strSQL + "AND I.STOCKGROUP_NAME IN (" + strProduct + ")  ";
        //                }
        //                else
        //                {
        //                    strSQL = strSQL + "AND B.STOCKITEM_NAME IN (" + strProduct + ")  ";
        //                }
        //            }
        //            strSQL = strSQL + "group by LG.LEDGER_NAME_MERZE,I.STOCKGROUP_NAME,B.STOCKITEM_NAME,I.STOCKCATEGORY_NAME ";
        //            strSQL = strSQL + "order by LG.LEDGER_NAME_MERZE,I.STOCKGROUP_NAME,B.STOCKITEM_NAME ";
        //            cmdInsert.CommandText = strSQL;
        //            cmdInsert.ExecuteNonQuery();
        //            cmdInsert.Transaction.Commit();

        //        }
        //        if (intMode == 5)
        //        {

        //            SqlTransaction myTrans;
        //            SqlCommand cmdInsert = new SqlCommand();
        //            myTrans = gcnMain.BeginTransaction();
        //            cmdInsert.Connection = gcnMain;
        //            cmdInsert.Transaction = myTrans;

        //            strSQL = "DELETE FROM SAL_PRODUCT_SALES_STATEMENT_TEMP ";
        //            cmdInsert.CommandText = strSQL;
        //            cmdInsert.ExecuteNonQuery();
        //            strSQL = "INSERT INTO SAL_PRODUCT_SALES_STATEMENT_TEMP( Zone, Division, Area, LedgerName, StockGroup, ItemName, PackSize, BillQty) ";
        //            strSQL = strSQL + "select LG.ZONE ,lg.DIVISION,lg.AREA , LG.LEDGER_NAME_MERZE Ledger,s.STOCKGROUP_NAME,B.STOCKITEM_NAME,s.STOCKCATEGORY_NAME ,sum(B.BILL_QUANTITY) AS BILLQTY from ACC_COMP_BILL_TRAN_QRY B,ACC_LEDGER_Z_D_A LG ,INV_STOCKITEM s ";
        //            strSQL = strSQL + "WHERE B.LEDGER_NAME= LG.LEDGER_NAME and s.STOCKITEM_NAME =b.STOCKITEM_NAME  ";
        //            strSQL = strSQL + "AND B.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ";
        //            strSQL = strSQL + "AND (B.COMP_VOUCHER_TYPE = 16)  AND (B.BRANCH_ID = 0001) ";
        //            strSQL = strSQL + "AND (S.STOCKGROUP_NAME<>'Mother Tincture' AND S.STOCKGROUP_NAME<>'Trituration Tablet' AND S.STOCKGROUP_NAME<>'Bio-Laid' AND S.STOCKGROUP_NAME<>'Bio-Chemic' AND S.STOCKGROUP_NAME<>'Dilution') ";
        //            strSQL = strSQL + "group by LG.ZONE,lg.DIVISION,lg.AREA,s.STOCKGROUP_NAME, s.STOCKCATEGORY_NAME ,B.STOCKITEM_NAME, LG.LEDGER_NAME_MERZE order by LG.ZONE,B.STOCKITEM_NAME  ";
        //            cmdInsert.CommandText = strSQL;
        //            cmdInsert.ExecuteNonQuery();
        //            strSQL = "INSERT INTO SAL_PRODUCT_SALES_STATEMENT_TEMP( Zone, Division, Area, LedgerName, StockGroup, ItemName, PackSize, BillQty) ";
        //            strSQL = strSQL + "select LG.ZONE ,lg.DIVISION,lg.AREA , LG.LEDGER_NAME_MERZE Ledger,s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME,s.STOCKCATEGORY_NAME ,sum(B.BILL_QUANTITY) AS BILLQTY from ACC_COMP_BILL_TRAN_QRY B,ACC_LEDGER_Z_D_A LG ,INV_STOCKITEM s ";
        //            strSQL = strSQL + "WHERE B.LEDGER_NAME= LG.LEDGER_NAME and s.STOCKITEM_NAME =b.STOCKITEM_NAME  ";
        //            strSQL = strSQL + "AND B.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ";
        //            strSQL = strSQL + "AND (B.COMP_VOUCHER_TYPE = 16)  AND (B.BRANCH_ID = 0001) ";
        //            strSQL = strSQL + "AND S.STOCKGROUP_NAME in ('Bio-Laid','Bio-Chemic','Dilution','Mother Tincture','Trituration Tablet' ) ";
        //            strSQL = strSQL + "group by LG.ZONE,lg.DIVISION,lg.AREA,s.STOCKGROUP_NAME, s.STOCKCATEGORY_NAME ,B.STOCKITEM_NAME, LG.LEDGER_NAME_MERZE order by LG.ZONE,B.STOCKITEM_NAME  ";
        //            cmdInsert.CommandText = strSQL;
        //            cmdInsert.ExecuteNonQuery();
        //            cmdInsert.Transaction.Commit();
        //        }
        //        if (intMode == 4)
        //        {
        //            strSQL = "SELECT DISTINCT SAL_PRODUCT_SALES_STATEMENT_TEMP.Zone, SAL_PRODUCT_SALES_STATEMENT_TEMP.Division, SAL_PRODUCT_SALES_STATEMENT_TEMP.Area, SAL_PRODUCT_SALES_STATEMENT_TEMP.LedgerName, SAL_PRODUCT_SALES_STATEMENT_TEMP.StockGroup, ";
        //            strSQL = strSQL + "SAL_PRODUCT_SALES_STATEMENT_TEMP.ItemName, SAL_PRODUCT_SALES_STATEMENT_TEMP.PackSize, SAL_PRODUCT_SALES_STATEMENT_TEMP.BillQty FROM  SAL_PRODUCT_SALES_STATEMENT_TEMP,ACC_LEDGER_Z_D_A ";
        //            strSQL = strSQL + "WHERE  ACC_LEDGER_Z_D_A.LEDGER_NAME_MERZE =SAL_PRODUCT_SALES_STATEMENT_TEMP.LedgerName ";
        //            if (blngAccessControl == true)
        //            {
        //                strSQL = strSQL + " AND  ACC_LEDGER_Z_D_A.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
        //            }
        //        }
        //        else if (intMode == 5)
        //        {
        //            strSQL = "SELECT DISTINCT SAL_PRODUCT_SALES_STATEMENT_TEMP.Zone, SAL_PRODUCT_SALES_STATEMENT_TEMP.Division, SAL_PRODUCT_SALES_STATEMENT_TEMP.Area, SAL_PRODUCT_SALES_STATEMENT_TEMP.LedgerName, SAL_PRODUCT_SALES_STATEMENT_TEMP.StockGroup, ";
        //            strSQL = strSQL + "SAL_PRODUCT_SALES_STATEMENT_TEMP.ItemName, SAL_PRODUCT_SALES_STATEMENT_TEMP.PackSize, SAL_PRODUCT_SALES_STATEMENT_TEMP.BillQty FROM  SAL_PRODUCT_SALES_STATEMENT_TEMP,ACC_LEDGER_Z_D_A ";
        //            strSQL = strSQL + "WHERE  ACC_LEDGER_Z_D_A.LEDGER_NAME_MERZE =SAL_PRODUCT_SALES_STATEMENT_TEMP.LedgerName ";
        //            if (blngAccessControl == true)
        //            {
        //                strSQL = strSQL + " AND  ACC_LEDGER_Z_D_A.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
        //            }
        //        }
        //        else if (intMode == 3)
        //        {
        //            strSQL = "SELECT  DISTINCT SAL_PRODUCT_SALES_STATEMENT_TEMP.Zone, SAL_PRODUCT_SALES_STATEMENT_TEMP.Division, SAL_PRODUCT_SALES_STATEMENT_TEMP.Area, SAL_PRODUCT_SALES_STATEMENT_TEMP.LedgerName, SAL_PRODUCT_SALES_STATEMENT_TEMP.StockGroup, ";
        //            strSQL = strSQL + "SAL_PRODUCT_SALES_STATEMENT_TEMP.ItemName, SAL_PRODUCT_SALES_STATEMENT_TEMP.PackSize, SAL_PRODUCT_SALES_STATEMENT_TEMP.BillQty FROM  SAL_PRODUCT_SALES_STATEMENT_TEMP,ACC_LEDGER_Z_D_A ";
        //            strSQL = strSQL + "WHERE  ACC_LEDGER_Z_D_A.AREA =SAL_PRODUCT_SALES_STATEMENT_TEMP.LedgerName ";
        //            if (blngAccessControl == true)
        //            {
        //                strSQL = strSQL + " AND  ACC_LEDGER_Z_D_A.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
        //            }
        //        }
        //        else if (intMode == 2)
        //        {
        //            strSQL = "SELECT DISTINCT SAL_PRODUCT_SALES_STATEMENT_TEMP.Zone, SAL_PRODUCT_SALES_STATEMENT_TEMP.Division, SAL_PRODUCT_SALES_STATEMENT_TEMP.Area, SAL_PRODUCT_SALES_STATEMENT_TEMP.LedgerName, SAL_PRODUCT_SALES_STATEMENT_TEMP.StockGroup, ";
        //            strSQL = strSQL + "SAL_PRODUCT_SALES_STATEMENT_TEMP.ItemName, SAL_PRODUCT_SALES_STATEMENT_TEMP.PackSize, SAL_PRODUCT_SALES_STATEMENT_TEMP.BillQty FROM  SAL_PRODUCT_SALES_STATEMENT_TEMP,ACC_LEDGER_Z_D_A ";
        //            strSQL = strSQL + "WHERE  ACC_LEDGER_Z_D_A.DIVISION =SAL_PRODUCT_SALES_STATEMENT_TEMP.LedgerName ";
        //            if (blngAccessControl == true)
        //            {
        //                strSQL = strSQL + " AND  ACC_LEDGER_Z_D_A.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
        //            }
        //        }
        //        else if (intMode == 1)
        //        {
        //            strSQL = "SELECT DISTINCT SAL_PRODUCT_SALES_STATEMENT_TEMP.Zone, SAL_PRODUCT_SALES_STATEMENT_TEMP.Division, SAL_PRODUCT_SALES_STATEMENT_TEMP.Area, SAL_PRODUCT_SALES_STATEMENT_TEMP.LedgerName, SAL_PRODUCT_SALES_STATEMENT_TEMP.StockGroup, ";
        //            strSQL = strSQL + "SAL_PRODUCT_SALES_STATEMENT_TEMP.ItemName, SAL_PRODUCT_SALES_STATEMENT_TEMP.PackSize, SAL_PRODUCT_SALES_STATEMENT_TEMP.BillQty FROM  SAL_PRODUCT_SALES_STATEMENT_TEMP,ACC_LEDGER_Z_D_A ";
        //            strSQL = strSQL + "WHERE  ACC_LEDGER_Z_D_A.ZONE =SAL_PRODUCT_SALES_STATEMENT_TEMP.LedgerName ";
        //            if (blngAccessControl == true)
        //            {
        //                strSQL = strSQL + " AND  ACC_LEDGER_Z_D_A.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
        //            }
        //        }

        //        else
        //        {
        //            strSQL = "SELECT DISTINCT SAL_PRODUCT_SALES_STATEMENT_TEMP.Zone, SAL_PRODUCT_SALES_STATEMENT_TEMP.Division, SAL_PRODUCT_SALES_STATEMENT_TEMP.Area, SAL_PRODUCT_SALES_STATEMENT_TEMP.LedgerName, SAL_PRODUCT_SALES_STATEMENT_TEMP.StockGroup, ";
        //            strSQL = strSQL + "SAL_PRODUCT_SALES_STATEMENT_TEMP.ItemName, SAL_PRODUCT_SALES_STATEMENT_TEMP.PackSize, SAL_PRODUCT_SALES_STATEMENT_TEMP.BillQty FROM  SAL_PRODUCT_SALES_STATEMENT_TEMP,ACC_LEDGER_Z_D_A ";
        //            strSQL = strSQL + "WHERE  ACC_LEDGER_Z_D_A.LEDGER_NAME_MERZE =SAL_PRODUCT_SALES_STATEMENT_TEMP.LedgerName ";
        //            if (blngAccessControl == true)
        //            {
        //                strSQL = strSQL + " AND  ACC_LEDGER_Z_D_A.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
        //            }
        //        }

        //        //strSQL = "SELECT Zone, Division, Area, LedgerName, StockGroup, ItemName, PackSize, BillQty ";
        //        //strSQL = strSQL + "FROM  SAL_PRODUCT_SALES_STATEMENT_TEMP ";
        //        //if (blngAccessControl == true)
        //        //{
        //        //    strSQL = strSQL + " WHERE  Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
        //        //}
        //        SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
        //        dr = cmd.ExecuteReader();
        //        while (dr.Read())
        //        {

        //            if (intMode == 5)
        //            {
        //                RSalesPurchase oLedg = new RSalesPurchase();
        //                oLedg.strZone = dr["Zone"].ToString();
        //                oLedg.srtDisvision = dr["Division"].ToString();
        //                oLedg.strArea = dr["Area"].ToString();
        //                oLedg.strGRName = dr["StockGroup"].ToString();
        //                oLedg.strLedgerName = dr["LedgerName"].ToString();
        //                oLedg.strItemName = dr["ItemName"].ToString();
        //                oLedg.StrSing = dr["PackSize"].ToString();
        //                oLedg.dblBilQty = Convert.ToDouble(dr["BillQty"].ToString());
        //                ooAccLedger.Add(oLedg);
        //            }
        //            else
        //            {
        //                RSalesPurchase oLedg = new RSalesPurchase();
        //                oLedg.strLedgerName = dr["LedgerName"].ToString();
        //                oLedg.strItemName = dr["ItemName"].ToString();
        //                oLedg.strGRName = dr["StockGroup"].ToString();
        //                oLedg.dblBilQty = Convert.ToDouble(dr["BillQty"].ToString());
        //                oLedg.StrSing = dr["PackSize"].ToString();
        //                ooAccLedger.Add(oLedg);
        //            }
        //        }
        //        dr.Close();
        //        gcnMain.Close();
        //        cmd.Dispose();
        //        return ooAccLedger;
        //    }
        //}
      
        public List<RSalesPurchase> mGetMpoProductSalesStatementQty(string strDeComID, int intMode, string strLedgerGroup,
                                                                    string strProduct, string strFdate, string strTDate, string strStockGroup,
                                                                    bool blngAccessControl, string strUserName)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RSalesPurchase> ooAccLedger = new List<RSalesPurchase>();
                if (intMode == 1)
                {
                    SqlTransaction myTrans;
                    SqlCommand cmdInsert = new SqlCommand();
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    strSQL = "DELETE FROM SAL_PRODUCT_SALES_STATEMENT_TEMP ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO SAL_PRODUCT_SALES_STATEMENT_TEMP( LedgerName,Division, StockGroup,ItemName,PackSize,BillQty) ";
                    strSQL = strSQL + "select LG.ZONE as Ledger,LG.DIVISION,I.STOCKGROUP_NAME,B.STOCKITEM_NAME,I.STOCKCATEGORY_NAME ,sum(B.BILL_QUANTITY) AS BILLQTY from ACC_COMP_BILL_TRAN_QRY B,ACC_LEDGER_Z_D_A LG , INV_STOCKITEM I ";
                    strSQL = strSQL + "WHERE B.LEDGER_NAME= LG.LEDGER_NAME and ";
                    strSQL = strSQL + "B.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ";
                    strSQL = strSQL + "AND (B.COMP_VOUCHER_TYPE = 16) and  B.STOCKITEM_NAME =I.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND (I.STOCKGROUP_NAME<>'Mother Tincture' AND I.STOCKGROUP_NAME<>'Trituration Tablet' AND I.STOCKGROUP_NAME<>'Bio-Laid' AND I.STOCKGROUP_NAME<>'Bio-Chemic' AND I.STOCKGROUP_NAME<>'Dilution') ";
                    strSQL = strSQL + "AND (B.BRANCH_ID = '0001')  ";
                    if (strLedgerGroup != "")
                    {
                        strSQL = strSQL + "AND LG.ZONE  IN (" + strLedgerGroup + ") ";
                    }
                    if (strProduct != "")
                    {

                        if (strStockGroup == "G")
                        {
                            strSQL = strSQL + "AND I.STOCKGROUP_NAME IN (" + strProduct + ")  ";
                        }
                        else
                        {
                            strSQL = strSQL + "AND B.STOCKITEM_NAME IN (" + strProduct + ")  ";
                        }
                    }

                    strSQL = strSQL + "group by LG.ZONE,B.STOCKITEM_NAME,I.STOCKGROUP_NAME,I.STOCKCATEGORY_NAME,LG.DIVISION ";
                    strSQL = strSQL + "order by LG.ZONE,I.STOCKGROUP_NAME,B.STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO SAL_PRODUCT_SALES_STATEMENT_TEMP( LedgerName,Division,StockGroup, ItemName,PackSize,BillQty) ";
                    strSQL = strSQL + "select LG.ZONE as Ledger,LG.DIVISION,I.STOCKGROUP_NAME,I.STOCKCATEGORY_NAME,I.STOCKCATEGORY_NAME ,sum(B.BILL_QUANTITY) AS BILLQTY from ACC_COMP_BILL_TRAN_QRY B,ACC_LEDGER_Z_D_A LG , INV_STOCKITEM I ";
                    strSQL = strSQL + "WHERE B.LEDGER_NAME= LG.LEDGER_NAME and ";
                    strSQL = strSQL + "B.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ";
                    strSQL = strSQL + "AND (B.COMP_VOUCHER_TYPE = 16) and  B.STOCKITEM_NAME =I.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND I.STOCKGROUP_NAME in ('Bio-Laid','Bio-Chemic','Dilution','Mother Tincture','Trituration Tablet' ) ";
                    strSQL = strSQL + "AND (B.BRANCH_ID = '0001')  ";
                    if (strLedgerGroup != "")
                    {
                        strSQL = strSQL + "AND LG.ZONE  IN (" + strLedgerGroup + ") ";
                    }
                    if (strProduct != "")
                    {

                        if (strStockGroup == "G")
                        {
                            strSQL = strSQL + "AND I.STOCKGROUP_NAME IN (" + strProduct + ")  ";
                        }
                        else
                        {
                            strSQL = strSQL + "AND B.STOCKITEM_NAME IN (" + strProduct + ")  ";
                        }
                    }
                    strSQL = strSQL + "group by LG.ZONE,B.STOCKITEM_NAME,I.STOCKGROUP_NAME,I.STOCKCATEGORY_NAME,LG.DIVISION ";
                    strSQL = strSQL + "order by LG.ZONE,I.STOCKGROUP_NAME,B.STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();

                }

                if (intMode == 2)
                {
                    SqlTransaction myTrans;
                    SqlCommand cmdInsert = new SqlCommand();
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    strSQL = "DELETE FROM SAL_PRODUCT_SALES_STATEMENT_TEMP ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO SAL_PRODUCT_SALES_STATEMENT_TEMP(LedgerName,StockGroup,ItemName,PackSize,BillQty) ";
                    strSQL = strSQL + "select LG.DIVISION as Ledger,I.STOCKGROUP_NAME,B.STOCKITEM_NAME ,I.STOCKCATEGORY_NAME,sum(B.BILL_QUANTITY) AS BILLQTY from ACC_COMP_BILL_TRAN_QRY B,ACC_LEDGER_Z_D_A LG, INV_STOCKITEM I ";
                    strSQL = strSQL + "WHERE B.LEDGER_NAME= LG.LEDGER_NAME and ";
                    strSQL = strSQL + "B.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ";
                    strSQL = strSQL + "AND (B.COMP_VOUCHER_TYPE = 16) and  B.STOCKITEM_NAME =I.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND (I.STOCKGROUP_NAME<>'Mother Tincture' AND I.STOCKGROUP_NAME<>'Trituration Tablet' AND I.STOCKGROUP_NAME<>'Bio-Laid' AND I.STOCKGROUP_NAME<>'Bio-Chemic' AND I.STOCKGROUP_NAME<>'Dilution') ";
                    strSQL = strSQL + "AND (B.BRANCH_ID = '0001')  ";
                    if (strLedgerGroup != "")
                    {
                        strSQL = strSQL + "AND LG.DIVISION  IN (" + strLedgerGroup + ") ";
                    }
                    if (strProduct != "")
                    {
                        if (strStockGroup == "G")
                        {
                            strSQL = strSQL + "AND I.STOCKGROUP_NAME IN (" + strProduct + ")  ";
                        }
                        else
                        {
                            strSQL = strSQL + "AND B.STOCKITEM_NAME IN (" + strProduct + ")  ";
                        }
                    }
                    strSQL = strSQL + "group by LG.DIVISION,B.STOCKITEM_NAME,I.STOCKGROUP_NAME,I.STOCKCATEGORY_NAME ";
                    strSQL = strSQL + "order by LG.DIVISION,I.STOCKGROUP_NAME,B.STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO SAL_PRODUCT_SALES_STATEMENT_TEMP(LedgerName,StockGroup,ItemName,PackSize,BillQty) ";
                    strSQL = strSQL + "select LG.DIVISION as Ledger,I.STOCKGROUP_NAME,I.STOCKCATEGORY_NAME ,I.STOCKCATEGORY_NAME,sum(B.BILL_QUANTITY) AS BILLQTY from ACC_COMP_BILL_TRAN_QRY B,ACC_LEDGER_Z_D_A LG, INV_STOCKITEM I ";
                    strSQL = strSQL + "WHERE B.LEDGER_NAME= LG.LEDGER_NAME and ";
                    strSQL = strSQL + "B.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ";
                    strSQL = strSQL + "AND (B.COMP_VOUCHER_TYPE = 16) and  B.STOCKITEM_NAME =I.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND I.STOCKGROUP_NAME in ('Bio-Laid','Bio-Chemic','Dilution','Mother Tincture','Trituration Tablet' ) ";
                    strSQL = strSQL + "AND (B.BRANCH_ID = 0001)  ";
                    if (strLedgerGroup != "")
                    {
                        strSQL = strSQL + "AND LG.DIVISION  IN (" + strLedgerGroup + ") ";
                    }
                    if (strProduct != "")
                    {
                        if (strStockGroup == "G")
                        {
                            strSQL = strSQL + "AND I.STOCKGROUP_NAME IN (" + strProduct + ")  ";
                        }
                        else
                        {
                            strSQL = strSQL + "AND B.STOCKITEM_NAME IN (" + strProduct + ")  ";
                        }
                    }
                    strSQL = strSQL + "group by LG.DIVISION,B.STOCKITEM_NAME,I.STOCKGROUP_NAME,I.STOCKCATEGORY_NAME ";
                    strSQL = strSQL + "order by LG.DIVISION,I.STOCKGROUP_NAME,B.STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();

                }
                if (intMode == 3)
                {
                    SqlTransaction myTrans;
                    SqlCommand cmdInsert = new SqlCommand();
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    strSQL = "DELETE FROM SAL_PRODUCT_SALES_STATEMENT_TEMP ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO SAL_PRODUCT_SALES_STATEMENT_TEMP( LedgerName,Division, StockGroup,ItemName,PackSize,BillQty) ";
                    strSQL = strSQL + "select LG.Area as Ledger,LG.DIVISION,I.STOCKGROUP_NAME,B.STOCKITEM_NAME,I.STOCKCATEGORY_NAME ,sum(B.BILL_QUANTITY) AS BILLQTY from ACC_COMP_BILL_TRAN_QRY B,ACC_LEDGER_Z_D_A LG , INV_STOCKITEM I ";
                    strSQL = strSQL + "WHERE B.LEDGER_NAME= LG.LEDGER_NAME and ";
                    strSQL = strSQL + "B.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ";
                    strSQL = strSQL + "AND (B.COMP_VOUCHER_TYPE = 16) and  B.STOCKITEM_NAME =I.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND (I.STOCKGROUP_NAME<>'Mother Tincture' AND I.STOCKGROUP_NAME<>'Trituration Tablet' AND I.STOCKGROUP_NAME<>'Bio-Laid' AND I.STOCKGROUP_NAME<>'Bio-Chemic' AND I.STOCKGROUP_NAME<>'Dilution') ";
                    strSQL = strSQL + "AND (B.BRANCH_ID = '0001')  ";
                    if (strLedgerGroup != "")
                    {
                        strSQL = strSQL + "AND LG.Area  IN (" + strLedgerGroup + ") ";
                    }
                    if (strProduct != "")
                    {

                        if (strStockGroup == "G")
                        {
                            strSQL = strSQL + "AND I.STOCKGROUP_NAME IN (" + strProduct + ")  ";
                        }
                        else
                        {
                            strSQL = strSQL + "AND B.STOCKITEM_NAME IN (" + strProduct + ")  ";
                        }
                    }

                    strSQL = strSQL + "group by LG.Area ,B.STOCKITEM_NAME,I.STOCKGROUP_NAME,I.STOCKCATEGORY_NAME,LG.DIVISION ";
                    strSQL = strSQL + "order by LG.Area ,I.STOCKGROUP_NAME,B.STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO SAL_PRODUCT_SALES_STATEMENT_TEMP( LedgerName,Division,StockGroup, ItemName,PackSize,BillQty) ";
                    strSQL = strSQL + "select LG.Area as Ledger,LG.DIVISION,I.STOCKGROUP_NAME,I.STOCKCATEGORY_NAME,I.STOCKCATEGORY_NAME ,sum(B.BILL_QUANTITY) AS BILLQTY from ACC_COMP_BILL_TRAN_QRY B,ACC_LEDGER_Z_D_A LG , INV_STOCKITEM I ";
                    strSQL = strSQL + "WHERE B.LEDGER_NAME= LG.LEDGER_NAME and ";
                    strSQL = strSQL + "B.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ";
                    strSQL = strSQL + "AND (B.COMP_VOUCHER_TYPE = 16) and  B.STOCKITEM_NAME =I.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND I.STOCKGROUP_NAME in ('Bio-Laid','Bio-Chemic','Dilution','Mother Tincture','Trituration Tablet' ) ";
                    strSQL = strSQL + "AND (B.BRANCH_ID = '0001')  ";
                    if (strLedgerGroup != "")
                    {
                        strSQL = strSQL + "AND LG.Area  IN (" + strLedgerGroup + ") ";
                    }
                    if (strProduct != "")
                    {

                        if (strStockGroup == "G")
                        {
                            strSQL = strSQL + "AND I.STOCKGROUP_NAME IN (" + strProduct + ")  ";
                        }
                        else
                        {
                            strSQL = strSQL + "AND B.STOCKITEM_NAME IN (" + strProduct + ")  ";
                        }
                    }

                    strSQL = strSQL + "group by LG.Area ,B.STOCKITEM_NAME,I.STOCKGROUP_NAME,I.STOCKCATEGORY_NAME,LG.DIVISION ";
                    strSQL = strSQL + "order by LG.Area ,I.STOCKGROUP_NAME,B.STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();

                }

                if (intMode == 4)
                {
                    SqlTransaction myTrans;
                    SqlCommand cmdInsert = new SqlCommand();
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    strSQL = "DELETE FROM SAL_PRODUCT_SALES_STATEMENT_TEMP ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO SAL_PRODUCT_SALES_STATEMENT_TEMP(LedgerName,Division, StockGroup,ItemName,PackSize, BillQty) ";
                    strSQL = strSQL + "select LG.LEDGER_NAME_MERZE as Ledger,LG.DIVISION,I.STOCKGROUP_NAME,B.STOCKITEM_NAME,I.STOCKCATEGORY_NAME ,sum(B.BILL_QUANTITY) AS BILLQTY from ACC_COMP_BILL_TRAN_QRY B,ACC_LEDGER_Z_D_A LG, INV_STOCKITEM I ";
                    strSQL = strSQL + "WHERE B.LEDGER_NAME= LG.LEDGER_NAME and ";
                    strSQL = strSQL + "B.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ";
                    strSQL = strSQL + "AND (B.COMP_VOUCHER_TYPE = 16) and  B.STOCKITEM_NAME =I.STOCKITEM_NAME  ";
                    strSQL = strSQL + "AND (I.STOCKGROUP_NAME<>'Mother Tincture' AND I.STOCKGROUP_NAME<>'Trituration Tablet' AND I.STOCKGROUP_NAME<>'Bio-Laid' AND I.STOCKGROUP_NAME<>'Bio-Chemic' AND I.STOCKGROUP_NAME<>'Dilution') ";
                    strSQL = strSQL + "AND (B.BRANCH_ID = 0001)  ";
                    if (strLedgerGroup != "")
                    {
                        strSQL = strSQL + "AND LG.LEDGER_NAME_MERZE  IN (" + strLedgerGroup + ") ";
                    }
                    if (strProduct != "")
                    {
                        if (strStockGroup == "G")
                        {
                            strSQL = strSQL + "AND I.STOCKGROUP_NAME IN (" + strProduct + ")  ";
                        }
                        else
                        {
                            strSQL = strSQL + "AND B.STOCKITEM_NAME IN (" + strProduct + ")  ";
                        }
                    }
                    strSQL = strSQL + "group by LG.LEDGER_NAME_MERZE,I.STOCKGROUP_NAME,B.STOCKITEM_NAME,I.STOCKCATEGORY_NAME,LG.DIVISION ";
                    strSQL = strSQL + "order by LG.LEDGER_NAME_MERZE,I.STOCKGROUP_NAME,B.STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO SAL_PRODUCT_SALES_STATEMENT_TEMP(LedgerName,Division, StockGroup,ItemName,PackSize, BillQty) ";
                    strSQL = strSQL + "select LG.LEDGER_NAME_MERZE as Ledger,LG.DIVISION,I.STOCKGROUP_NAME,I.STOCKCATEGORY_NAME,I.STOCKCATEGORY_NAME ,sum(B.BILL_QUANTITY) AS BILLQTY from ACC_COMP_BILL_TRAN_QRY B,ACC_LEDGER_Z_D_A LG, INV_STOCKITEM I ";
                    strSQL = strSQL + "WHERE B.LEDGER_NAME= LG.LEDGER_NAME and ";
                    strSQL = strSQL + "B.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ";
                    strSQL = strSQL + "AND (B.COMP_VOUCHER_TYPE = 16) and  B.STOCKITEM_NAME =I.STOCKITEM_NAME  ";
                    strSQL = strSQL + "AND I.STOCKGROUP_NAME in ('Bio-Laid','Bio-Chemic','Dilution','Mother Tincture','Trituration Tablet' ) ";
                    strSQL = strSQL + "AND (B.BRANCH_ID = 0001)  ";
                    if (strLedgerGroup != "")
                    {
                        strSQL = strSQL + "AND LG.LEDGER_NAME_MERZE  IN (" + strLedgerGroup + ") ";
                    }
                    if (strProduct != "")
                    {
                        if (strStockGroup == "G")
                        {
                            strSQL = strSQL + "AND I.STOCKGROUP_NAME IN (" + strProduct + ")  ";
                        }
                        else
                        {
                            strSQL = strSQL + "AND B.STOCKITEM_NAME IN (" + strProduct + ")  ";
                        }
                    }
                    strSQL = strSQL + "group by LG.LEDGER_NAME_MERZE,I.STOCKGROUP_NAME,B.STOCKITEM_NAME,I.STOCKCATEGORY_NAME,LG.DIVISION ";
                    strSQL = strSQL + "order by LG.LEDGER_NAME_MERZE,I.STOCKGROUP_NAME,B.STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();

                }
                if (intMode == 5)
                {

                    SqlTransaction myTrans;
                    SqlCommand cmdInsert = new SqlCommand();
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    strSQL = "DELETE FROM SAL_PRODUCT_SALES_STATEMENT_TEMP ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO SAL_PRODUCT_SALES_STATEMENT_TEMP( Zone, Division, Area, LedgerName, StockGroup, ItemName, PackSize, BillQty) ";
                    strSQL = strSQL + "select LG.ZONE ,lg.DIVISION,lg.AREA , LG.LEDGER_NAME_MERZE Ledger,s.STOCKGROUP_NAME,B.STOCKITEM_NAME,s.STOCKCATEGORY_NAME ,sum(B.BILL_QUANTITY) AS BILLQTY from ACC_COMP_BILL_TRAN_QRY B,ACC_LEDGER_Z_D_A LG ,INV_STOCKITEM s ";
                    strSQL = strSQL + "WHERE B.LEDGER_NAME= LG.LEDGER_NAME and s.STOCKITEM_NAME =b.STOCKITEM_NAME  ";
                    strSQL = strSQL + "AND B.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ";
                    strSQL = strSQL + "AND (B.COMP_VOUCHER_TYPE = 16)  AND (B.BRANCH_ID = 0001) ";
                    strSQL = strSQL + "AND (S.STOCKGROUP_NAME<>'Mother Tincture' AND S.STOCKGROUP_NAME<>'Trituration Tablet' AND S.STOCKGROUP_NAME<>'Bio-Laid' AND S.STOCKGROUP_NAME<>'Bio-Chemic' AND S.STOCKGROUP_NAME<>'Dilution') ";
                    strSQL = strSQL + "group by LG.ZONE,lg.DIVISION,lg.AREA,s.STOCKGROUP_NAME, s.STOCKCATEGORY_NAME ,B.STOCKITEM_NAME, LG.LEDGER_NAME_MERZE order by LG.ZONE,B.STOCKITEM_NAME  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO SAL_PRODUCT_SALES_STATEMENT_TEMP( Zone, Division, Area, LedgerName, StockGroup, ItemName, PackSize, BillQty) ";
                    strSQL = strSQL + "select LG.ZONE ,lg.DIVISION,lg.AREA , LG.LEDGER_NAME_MERZE Ledger,s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME,s.STOCKCATEGORY_NAME ,sum(B.BILL_QUANTITY) AS BILLQTY from ACC_COMP_BILL_TRAN_QRY B,ACC_LEDGER_Z_D_A LG ,INV_STOCKITEM s ";
                    strSQL = strSQL + "WHERE B.LEDGER_NAME= LG.LEDGER_NAME and s.STOCKITEM_NAME =b.STOCKITEM_NAME  ";
                    strSQL = strSQL + "AND B.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ";
                    strSQL = strSQL + "AND (B.COMP_VOUCHER_TYPE = 16)  AND (B.BRANCH_ID = 0001) ";
                    strSQL = strSQL + "AND S.STOCKGROUP_NAME in ('Bio-Laid','Bio-Chemic','Dilution','Mother Tincture','Trituration Tablet' ) ";
                    strSQL = strSQL + "group by LG.ZONE,lg.DIVISION,lg.AREA,s.STOCKGROUP_NAME, s.STOCKCATEGORY_NAME ,B.STOCKITEM_NAME, LG.LEDGER_NAME_MERZE order by LG.ZONE,B.STOCKITEM_NAME  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();
                }
                if (intMode == 4)
                {

                    strSQL = "select  T.LedgerName,T.StockGroup,T.ItemName, T.PackSize ,sum(T.BillQty) as BillQty from SAL_PRODUCT_SALES_STATEMENT_TEMP T ";
                    strSQL = strSQL + "where  T.Division in  ";
                    strSQL = strSQL + "(SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "') ";
                    strSQL = strSQL + "group by T.LedgerName,T.PackSize,T.StockGroup,T.ItemName ";
                }
                else if (intMode == 5)
                {
                    strSQL = "SELECT DISTINCT SAL_PRODUCT_SALES_STATEMENT_TEMP.Zone, SAL_PRODUCT_SALES_STATEMENT_TEMP.Division, SAL_PRODUCT_SALES_STATEMENT_TEMP.Area, SAL_PRODUCT_SALES_STATEMENT_TEMP.LedgerName, SAL_PRODUCT_SALES_STATEMENT_TEMP.StockGroup, ";
                    strSQL = strSQL + "SAL_PRODUCT_SALES_STATEMENT_TEMP.ItemName, SAL_PRODUCT_SALES_STATEMENT_TEMP.PackSize, SAL_PRODUCT_SALES_STATEMENT_TEMP.BillQty FROM  SAL_PRODUCT_SALES_STATEMENT_TEMP,ACC_LEDGER_Z_D_A ";
                    strSQL = strSQL + "WHERE  ACC_LEDGER_Z_D_A.LEDGER_NAME_MERZE =SAL_PRODUCT_SALES_STATEMENT_TEMP.LedgerName ";
                    if (blngAccessControl == true)
                    {
                        strSQL = strSQL + " AND  ACC_LEDGER_Z_D_A.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
                    }
                }
                else if (intMode == 3)
                {

                    strSQL = "select  T.LedgerName,T.StockGroup,T.ItemName, T.PackSize ,sum(T.BillQty) as BillQty from SAL_PRODUCT_SALES_STATEMENT_TEMP T ";
                    strSQL = strSQL + "where  T.Division in  ";
                    strSQL = strSQL + "(SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "') ";
                    strSQL = strSQL + "group by T.LedgerName,T.PackSize,T.StockGroup,T.ItemName ";
                }
                else if (intMode == 2)
                {

                    strSQL = "select  T.LedgerName,T.StockGroup,T.ItemName, T.PackSize ,sum(T.BillQty) as BillQty from SAL_PRODUCT_SALES_STATEMENT_TEMP T ";
                    strSQL = strSQL + "where  T.LedgerName in  ";
                    strSQL = strSQL + "(SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "') ";
                    strSQL = strSQL + "group by T.LedgerName,T.PackSize,T.StockGroup,T.ItemName ";
                }
                else if (intMode == 1)
                {

                    strSQL = "select  T.LedgerName, T.PackSize,T.ItemName ,sum(T.BillQty) as BillQty,T.StockGroup from SAL_PRODUCT_SALES_STATEMENT_TEMP T ";
                    strSQL = strSQL + "where  T.Division in  ";
                    strSQL = strSQL + "(SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "') ";
                    strSQL = strSQL + "group by T.LedgerName,T.PackSize,T.StockGroup,T.ItemName ";

                }

                else
                {
                    strSQL = "SELECT DISTINCT SAL_PRODUCT_SALES_STATEMENT_TEMP.Zone, SAL_PRODUCT_SALES_STATEMENT_TEMP.Division, SAL_PRODUCT_SALES_STATEMENT_TEMP.Area, SAL_PRODUCT_SALES_STATEMENT_TEMP.LedgerName, SAL_PRODUCT_SALES_STATEMENT_TEMP.StockGroup, ";
                    strSQL = strSQL + "SAL_PRODUCT_SALES_STATEMENT_TEMP.ItemName, SAL_PRODUCT_SALES_STATEMENT_TEMP.PackSize, SAL_PRODUCT_SALES_STATEMENT_TEMP.BillQty FROM  SAL_PRODUCT_SALES_STATEMENT_TEMP,ACC_LEDGER_Z_D_A ";
                    strSQL = strSQL + "WHERE  ACC_LEDGER_Z_D_A.LEDGER_NAME_MERZE =SAL_PRODUCT_SALES_STATEMENT_TEMP.LedgerName ";
                    if (blngAccessControl == true)
                    {
                        strSQL = strSQL + " AND  ACC_LEDGER_Z_D_A.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
                    }
                }


                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {

                    if (intMode == 5)
                    {
                        RSalesPurchase oLedg = new RSalesPurchase();
                        oLedg.strZone = dr["Zone"].ToString();
                        oLedg.srtDisvision = dr["Division"].ToString();
                        oLedg.strArea = dr["Area"].ToString();
                        oLedg.strGRName = dr["StockGroup"].ToString();
                        oLedg.strLedgerName = dr["LedgerName"].ToString();
                        oLedg.strItemName = dr["ItemName"].ToString();
                        oLedg.StrSing = dr["PackSize"].ToString();
                        oLedg.dblBilQty = Convert.ToDouble(dr["BillQty"].ToString());
                        ooAccLedger.Add(oLedg);
                    }
                    else
                    {
                        RSalesPurchase oLedg = new RSalesPurchase();
                        oLedg.strLedgerName = dr["LedgerName"].ToString();
                        oLedg.strItemName = dr["ItemName"].ToString();
                        oLedg.strGRName = dr["StockGroup"].ToString();
                        oLedg.dblBilQty = Convert.ToDouble(dr["BillQty"].ToString());
                        oLedg.StrSing = dr["PackSize"].ToString();
                        ooAccLedger.Add(oLedg);
                    }
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }
       
        #endregion
        #region "SP Commission2"
        public List<RFinalStatement> GetrptSPCommission2(string strDeComID, string strFate, string strTDate)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                List<RFinalStatement> ooAccLedger = new List<RFinalStatement>();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                cmdInsert.Connection = gcnMain;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Transaction = myTrans;


                strSQL = "DELETE from SP_COMMITION_TEMP ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO  SP_COMMITION_TEMP (AREA, LEDGER_NAME_MARZE, VOUCHER_LEDGER, COMM_REF_NO, AMOUNT1)";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,  v.LEDGER_NAME,c.COMP_REF_NO,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) amnt ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v , ";
                strSQL = strSQL + "ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and  ";
                strSQL = strSQL + "l.LEDGER_NAME =c.LEDGER_NAME   and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "and  v.LEDGER_NAME='Bonus By Voucher'  ";
                //strSQL = strSQL + "and l.LEDGER_NAME_MERZE='100-Saddam Hossain-Mehendiganj' ";
                strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,c.COMP_REF_NO , l.LEDGER_NAME_MERZE  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                strSQL = "INSERT INTO  SP_COMMITION_TEMP (AREA, LEDGER_NAME_MARZE, VOUCHER_LEDGER, COMM_REF_NO, AMOUNT2)";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,  v.LEDGER_NAME,c.COMP_REF_NO ,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) amnt ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v , ";
                strSQL = strSQL + "ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and  ";
                strSQL = strSQL + "l.LEDGER_NAME =c.LEDGER_NAME   and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "and  v.LEDGER_NAME='Carton Cost' ";
                strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,c.COMP_REF_NO , l.LEDGER_NAME_MERZE  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO  SP_COMMITION_TEMP (AREA, LEDGER_NAME_MARZE, VOUCHER_LEDGER, COMM_REF_NO,AMOUNT3) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,  v.LEDGER_NAME,c.COMP_REF_NO,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) amnt ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v , ";
                strSQL = strSQL + "ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and  ";
                strSQL = strSQL + "l.LEDGER_NAME =c.LEDGER_NAME   and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "and  v.LEDGER_NAME='Commission For Delivery 5%' ";
                strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,c.COMP_REF_NO , l.LEDGER_NAME_MERZE  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO  SP_COMMITION_TEMP (AREA, LEDGER_NAME_MARZE, VOUCHER_LEDGER, COMM_REF_NO, AMOUNT4) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,  v.LEDGER_NAME,c.COMP_REF_NO ,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) amnt ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v , ";
                strSQL = strSQL + "ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and  ";
                strSQL = strSQL + "l.LEDGER_NAME =c.LEDGER_NAME   and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "and  v.LEDGER_NAME='Commission On Collection 10%' ";
                strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,c.COMP_REF_NO , l.LEDGER_NAME_MERZE  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO  SP_COMMITION_TEMP (AREA, LEDGER_NAME_MARZE, VOUCHER_LEDGER, COMM_REF_NO, AMOUNT5 )";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,  v.LEDGER_NAME,c.COMP_REF_NO ,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) amnt ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v , ";
                strSQL = strSQL + "ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and  ";
                strSQL = strSQL + "l.LEDGER_NAME =c.LEDGER_NAME   and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "and  v.LEDGER_NAME='Delivery By Voucher' ";
                strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,c.COMP_REF_NO , l.LEDGER_NAME_MERZE  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO  SP_COMMITION_TEMP (AREA, LEDGER_NAME_MARZE, VOUCHER_LEDGER, COMM_REF_NO, AMOUNT6) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,  v.LEDGER_NAME,c.COMP_REF_NO ,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) amnt ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v , ";
                strSQL = strSQL + "ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and  ";
                strSQL = strSQL + "l.LEDGER_NAME =c.LEDGER_NAME   and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "and  v.LEDGER_NAME='Gift On Request' ";
                strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,c.COMP_REF_NO , l.LEDGER_NAME_MERZE  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO  SP_COMMITION_TEMP (AREA, LEDGER_NAME_MARZE, VOUCHER_LEDGER, COMM_REF_NO, AMOUNT7) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,  v.LEDGER_NAME,c.COMP_REF_NO ,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) amnt ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v , ";
                strSQL = strSQL + "ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and ";
                strSQL = strSQL + "l.LEDGER_NAME =c.LEDGER_NAME   and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "and  v.LEDGER_NAME='Incentive  For Value Target'";
                strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,c.COMP_REF_NO , l.LEDGER_NAME_MERZE  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO  SP_COMMITION_TEMP (AREA, LEDGER_NAME_MARZE, VOUCHER_LEDGER, COMM_REF_NO, AMOUNT8 ) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,  v.LEDGER_NAME,c.COMP_REF_NO ,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v , ";
                strSQL = strSQL + "ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and  ";
                strSQL = strSQL + "l.LEDGER_NAME =c.LEDGER_NAME   and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "and  v.LEDGER_NAME='MISC By Voucher' ";
                strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,c.COMP_REF_NO , l.LEDGER_NAME_MERZE  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO  SP_COMMITION_TEMP (AREA, LEDGER_NAME_MARZE, VOUCHER_LEDGER, COMM_REF_NO, AMOUNT9) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,  v.LEDGER_NAME,c.COMP_REF_NO,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) amnt ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v , ";
                strSQL = strSQL + "ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and  ";
                strSQL = strSQL + "l.LEDGER_NAME =c.LEDGER_NAME   and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "and  v.LEDGER_NAME='MPO Zonal Meeting Expenses' ";
                strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,c.COMP_REF_NO , l.LEDGER_NAME_MERZE  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO  SP_COMMITION_TEMP (AREA, LEDGER_NAME_MARZE, VOUCHER_LEDGER, COMM_REF_NO, AMOUNT10) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,  v.LEDGER_NAME,c.COMP_REF_NO ,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0)amt ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v , ";
                strSQL = strSQL + "ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and  ";
                strSQL = strSQL + "l.LEDGER_NAME =c.LEDGER_NAME   and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "and  v.LEDGER_NAME='Punishement By Voucher' ";
                strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,c.COMP_REF_NO , l.LEDGER_NAME_MERZE  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO  SP_COMMITION_TEMP (AREA, LEDGER_NAME_MARZE, VOUCHER_LEDGER, COMM_REF_NO, AMOUNT11) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,  v.LEDGER_NAME,c.COMP_REF_NO ,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) amnt ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v , ";
                strSQL = strSQL + "ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and  ";
                strSQL = strSQL + "l.LEDGER_NAME =c.LEDGER_NAME   and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "and  v.LEDGER_NAME='S.A. Voucher Payment' ";
                strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,c.COMP_REF_NO , l.LEDGER_NAME_MERZE  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO  SP_COMMITION_TEMP (AREA, LEDGER_NAME_MARZE, VOUCHER_LEDGER, COMM_REF_NO, AMOUNT12) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,  v.LEDGER_NAME,c.COMP_REF_NO ,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) amnt ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v , ";
                strSQL = strSQL + "ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and  ";
                strSQL = strSQL + "l.LEDGER_NAME =c.LEDGER_NAME   and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "and  v.LEDGER_NAME='Salary By Voucher' ";
                strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,c.COMP_REF_NO , l.LEDGER_NAME_MERZE  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO  SP_COMMITION_TEMP (AREA, LEDGER_NAME_MARZE, VOUCHER_LEDGER, COMM_REF_NO,  AMOUNT13) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,  v.LEDGER_NAME,c.COMP_REF_NO ,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) amnt ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v , ";
                strSQL = strSQL + "ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and  ";
                strSQL = strSQL + "l.LEDGER_NAME =c.LEDGER_NAME   and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "and  v.LEDGER_NAME='TT/DD Cost By Voucher' ";
                strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,c.COMP_REF_NO , l.LEDGER_NAME_MERZE  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO  SP_COMMITION_TEMP (AREA, LEDGER_NAME_MARZE, VOUCHER_LEDGER, COMM_REF_NO, AMOUNT14) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,  v.LEDGER_NAME,c.COMP_REF_NO ,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) amnt ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v , ";
                strSQL = strSQL + "ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and  ";
                strSQL = strSQL + "l.LEDGER_NAME =c.LEDGER_NAME   and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "and  v.LEDGER_NAME='Convayance Allowance' ";
                strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,c.COMP_REF_NO , l.LEDGER_NAME_MERZE  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO  SP_COMMITION_TEMP (AREA, LEDGER_NAME_MARZE, VOUCHER_LEDGER, COMM_REF_NO, AMOUNT15) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,  v.LEDGER_NAME,c.COMP_REF_NO ,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) amnt ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v , ";
                strSQL = strSQL + "ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and  ";
                strSQL = strSQL + "l.LEDGER_NAME =c.LEDGER_NAME   and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "and  v.LEDGER_NAME='Conveyence Cost By Voucher' ";
                //strSQL = strSQL + "and  v.LEDGER_NAME='Doctor Factory Visit Expenses' ";
                strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,c.COMP_REF_NO , l.LEDGER_NAME_MERZE  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO  SP_COMMITION_TEMP (AREA, LEDGER_NAME_MARZE, VOUCHER_LEDGER, COMM_REF_NO, AMOUNT16) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,  v.LEDGER_NAME,c.COMP_REF_NO ,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) amnt ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v , ";
                strSQL = strSQL + "ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and  ";
                strSQL = strSQL + "l.LEDGER_NAME =c.LEDGER_NAME   and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "and  v.LEDGER_NAME='Dress Alowance By Voucher' ";
                strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,c.COMP_REF_NO , l.LEDGER_NAME_MERZE  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO  SP_COMMITION_TEMP (AREA, LEDGER_NAME_MARZE, VOUCHER_LEDGER, COMM_REF_NO,AMOUNT17) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,  v.LEDGER_NAME,c.COMP_REF_NO ,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) amnt ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v , ";
                strSQL = strSQL + "ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and  ";
                strSQL = strSQL + "l.LEDGER_NAME =c.LEDGER_NAME   and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "and  v.LEDGER_NAME='Medical Expenses'  ";
                strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,c.COMP_REF_NO , l.LEDGER_NAME_MERZE  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO  SP_COMMITION_TEMP (AREA, LEDGER_NAME_MARZE, VOUCHER_LEDGER, COMM_REF_NO, AMOUNT18) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,  v.LEDGER_NAME,c.COMP_REF_NO ,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) amnt ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v , ";
                strSQL = strSQL + "ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and  ";
                strSQL = strSQL + "l.LEDGER_NAME =c.LEDGER_NAME   and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "and  v.LEDGER_NAME='Training Allowance By Voucher' ";
                strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,c.COMP_REF_NO, l.LEDGER_NAME_MERZE   ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO  SP_COMMITION_TEMP (AREA, LEDGER_NAME_MARZE, VOUCHER_LEDGER, COMM_REF_NO, AMOUNT19) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,  v.LEDGER_NAME,c.COMP_REF_NO ,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) amnt  ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v , ";
                strSQL = strSQL + "ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and ";
                strSQL = strSQL + "l.LEDGER_NAME =c.LEDGER_NAME   and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "and  v.LEDGER_NAME='Yearly Conferance Expenses' ";
                strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,c.COMP_REF_NO, l.LEDGER_NAME_MERZE   ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO  SP_COMMITION_TEMP (AREA, LEDGER_NAME_MARZE, VOUCHER_LEDGER, COMM_REF_NO, AMOUNT20) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,  v.LEDGER_NAME,c.COMP_REF_NO ,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) amnt  ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v , ";
                strSQL = strSQL + "ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and ";
                strSQL = strSQL + "l.LEDGER_NAME =c.LEDGER_NAME   and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "and  v.LEDGER_NAME='Gift For Product Target' ";
                strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,c.COMP_REF_NO, l.LEDGER_NAME_MERZE   ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                cmdInsert.Transaction.Commit();

                strSQL = "SELECT SP_COMMITION_TEMP.AREA, SP_COMMITION_TEMP.LEDGER_NAME_MARZE,SP_COMMITION_TEMP. VOUCHER_LEDGER,substring(SP_COMMITION_TEMP.COMM_REF_NO,7,30) COMM_REF_NO  , ";
                strSQL = strSQL + "SP_COMMITION_TEMP.AMOUNT1, SP_COMMITION_TEMP.AMOUNT2, SP_COMMITION_TEMP.AMOUNT3, ";
                strSQL = strSQL + "SP_COMMITION_TEMP.AMOUNT4, SP_COMMITION_TEMP.AMOUNT5, SP_COMMITION_TEMP.AMOUNT6, SP_COMMITION_TEMP.AMOUNT7, SP_COMMITION_TEMP.AMOUNT8,";
                strSQL = strSQL + "SP_COMMITION_TEMP.AMOUNT9, SP_COMMITION_TEMP.AMOUNT10, SP_COMMITION_TEMP.AMOUNT11, SP_COMMITION_TEMP.AMOUNT12,  ";
                strSQL = strSQL + "SP_COMMITION_TEMP.AMOUNT13, SP_COMMITION_TEMP.AMOUNT14, SP_COMMITION_TEMP.AMOUNT15, SP_COMMITION_TEMP.AMOUNT16, SP_COMMITION_TEMP.AMOUNT17, ";
                strSQL = strSQL + "SP_COMMITION_TEMP.AMOUNT18, SP_COMMITION_TEMP.AMOUNT19,SP_COMMITION_TEMP.AMOUNT18, SP_COMMITION_TEMP.AMOUNT20 ";
                strSQL = strSQL + "FROM SP_COMMITION_TEMP,ACC_LEDGER_Z_D_A WHERE ACC_LEDGER_Z_D_A.LEDGER_NAME_MERZE  = SP_COMMITION_TEMP.LEDGER_NAME_MARZE ";
                strSQL = strSQL + "ORDER BY ACC_LEDGER_Z_D_A.GR_PARENT_POSITION ,ACC_LEDGER_Z_D_A.DIVISION,SP_COMMITION_TEMP.AREA,SP_COMMITION_TEMP.LEDGER_NAME_MARZE  ";
                cmdInsert.CommandText = strSQL;
                //cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RFinalStatement oLedg = new RFinalStatement();
                    oLedg.strArea = dr["AREA"].ToString();
                    oLedg.strLedger = dr["LEDGER_NAME_MARZE"].ToString();
                    oLedg.strVoucherLedger = dr["VOUCHER_LEDGER"].ToString();
                    oLedg.strCustomer = dr["COMM_REF_NO"].ToString();
                    oLedg.dblBonusByVoucher = Convert.ToDouble(dr["AMOUNT1"].ToString());
                    oLedg.dblCartonCost = Convert.ToDouble(dr["AMOUNT2"].ToString());
                    oLedg.dblCommissionForDV = Convert.ToDouble(dr["AMOUNT3"].ToString());
                    oLedg.dblCommiONCollV = Convert.ToDouble(dr["AMOUNT4"].ToString());
                    oLedg.dblDeliveryByVoucher = Convert.ToDouble(dr["AMOUNT5"].ToString());
                    oLedg.dblGiftONRequest = Convert.ToDouble(dr["AMOUNT6"].ToString());
                    oLedg.dblIncenticeForValueTarget = Convert.ToDouble(dr["AMOUNT7"].ToString());
                    oLedg.dblMiscByVoucher = Convert.ToDouble(dr["AMOUNT8"].ToString());
                    oLedg.dblMPOZonalMeeting = Convert.ToDouble(dr["AMOUNT9"].ToString());
                    oLedg.dblPunishment = Convert.ToDouble(dr["AMOUNT10"].ToString());
                    oLedg.dblSAVoucherPayment = Convert.ToDouble(dr["AMOUNT11"].ToString());
                    oLedg.dblSalarybyVoucher = Convert.ToDouble(dr["AMOUNT12"].ToString());
                    oLedg.dblTTDDCostV = Convert.ToDouble(dr["AMOUNT13"].ToString());
                    oLedg.dblConvayanceAllowance = Convert.ToDouble(dr["AMOUNT14"].ToString());
                    oLedg.dblConveyenceCostByVoucher = Convert.ToDouble(dr["AMOUNT15"].ToString());
                    oLedg.dblDressAlowanceByVoucher = Convert.ToDouble(dr["AMOUNT16"].ToString());
                    oLedg.dblMedicalExpenses = Convert.ToDouble(dr["AMOUNT17"].ToString());
                    oLedg.dblTrainingAllowanceByVoucher = Convert.ToDouble(dr["AMOUNT18"].ToString());
                    oLedg.dblYearlyConferanceExpenses = Convert.ToDouble(dr["AMOUNT19"].ToString());
                    oLedg.dblGiftForProductTarget = Convert.ToDouble(dr["AMOUNT20"].ToString());
                    ooAccLedger.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RFinalStatement oLedg = new RFinalStatement();
                    oLedg.strArea = "";
                    oLedg.strLedger = "";
                    oLedg.strVoucherLedger = "";
                    oLedg.strCustomer = "";
                    oLedg.dblBonusByVoucher = 0;
                    oLedg.dblCartonCost = 0;
                    oLedg.dblCommissionForDV = 0;
                    oLedg.dblCommiONCollV = 0;
                    oLedg.dblDeliveryByVoucher = 0;
                    oLedg.dblGiftONRequest = 0;
                    oLedg.dblIncenticeForValueTarget = 0;
                    oLedg.dblMiscByVoucher = 0;
                    oLedg.dblMPOZonalMeeting = 0;
                    oLedg.dblPunishment = 0;
                    oLedg.dblSAVoucherPayment = 0;
                    oLedg.dblSalarybyVoucher = 0;
                    oLedg.dblTTDDCostV = 0;
                    oLedg.dblConvayanceAllowance = 0;
                    oLedg.dblConveyenceCostByVoucher = 0;
                    oLedg.dblDressAlowanceByVoucher = 0; ;
                    oLedg.dblMedicalExpenses = 0;
                    oLedg.dblTrainingAllowanceByVoucher = 0;
                    oLedg.dblYearlyConferanceExpenses = 0;
                    oLedg.dblGiftForProductTarget = 0;
                    ooAccLedger.Add(oLedg);
                }


                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }
        #endregion
        #region "Print Accounts Voucher"
        public List<RAccountsGroup> mGetAccountsvoucher(string strDeComID, string strFdate, string strTDate,
                                                       int intVtype, int intSummDetails,
                                                       string strRefNo, string strBranchID, int intMpoComm)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                strSQL = "SELECT ACC_COMPANY_VOUCHER.COMP_REF_NO, ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE, ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION,";
                strSQL = strSQL + "ACC_LEDGER.LEDGER_NAME_MERZE LEDGER_NAME,ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT,";
                strSQL = strSQL + "ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT, ACC_VOUCHER.VOUCHER_TOBY,ACC_VOUCHER.VOUCHER_CHEQUE_NUMBER,ACC_VOUCHER.VOUCHER_CHEQUE_DATE, ACC_VOUCHER.VOUCHER_CHEQUE_DRAWN_ON ";
                strSQL = strSQL + "FROM ACC_COMPANY_VOUCHER,ACC_VOUCHER ACC_VOUCHER ,ACC_LEDGER  ";
                strSQL = strSQL + "WHERE ACC_COMPANY_VOUCHER.COMP_REF_NO = ACC_VOUCHER.COMP_REF_NO AND ACC_LEDGER.LEDGER_NAME=ACC_VOUCHER.LEDGER_NAME ";
                if (intVtype == (int)Utility.VOUCHER_TYPE.vtPAYMENT_VOUCHER)
                {
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = " + intVtype + " ";
                    if (intSummDetails == 0)
                    {
                        strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY <> 'Cr' ";
                    }
                }
                else if (intVtype == (int)Utility.VOUCHER_TYPE.vtRECEIPT_VOUCHER)
                {
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = " + intVtype + " ";
                    if (intSummDetails == 0)
                    {
                        strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY <> 'Dr' ";
                    }
                }
                else if (intVtype == (int)Utility.VOUCHER_TYPE.vtJOURNAL_VOUCHER)
                {
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = " + intVtype + " ";
                    if (intSummDetails == 0)
                    {
                        strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY <> 'Dr' ";
                    }
                }
                else if (intVtype == (int)Utility.VOUCHER_TYPE.vtCONTRA_VOUCHER)
                {
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = " + intVtype + " ";
                    if (intSummDetails == 0)
                    {
                        strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY <> 'Cr' ";
                    }
                }

                if (strFdate != "")
                {
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE >= " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE <= " + Utility.cvtSQLDateString(strTDate) + " ";
                }
                if (strRefNo != "")
                {
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_REF_NO = '" + strRefNo + "' ";
                }


                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.SP_JOURNAL =" + intMpoComm + " ";
                if (intSummDetails == 0)
                {
                    strSQL = strSQL + "Order By ";
                    strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_DATE ASC, ";
                    strSQL = strSQL + "SUBSTRING(ACC_COMPANY_VOUCHER.COMP_REF_NO,7,30) ASC, ";
                    strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_POSITION ASC ";
                }
                else
                {
                    if (intVtype == 2)
                    {
                        strSQL = strSQL + "Order By ";
                        strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_DATE ASC, ";
                        strSQL = strSQL + "ACC_VOUCHER.VOUCHER_TOBY Desc,";
                        strSQL = strSQL + "SUBSTRING(ACC_VOUCHER.COMP_REF_NO,7,30) Asc,";
                        strSQL = strSQL + "ACC_VOUCHER.LEDGER_NAME ASC";
                    }
                    else if (intVtype == 3)
                    {
                        if (intMpoComm == 0)
                        {
                            strSQL = strSQL + "Order By ";
                            strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_DATE ASC, ";
                            strSQL = strSQL + "ACC_VOUCHER.VOUCHER_TOBY Desc,";
                            strSQL = strSQL + "SUBSTRING(ACC_VOUCHER.COMP_REF_NO,7,30) Asc,";
                            strSQL = strSQL + "ACC_VOUCHER.LEDGER_NAME ASC";
                        }
                        else
                        {
                            strSQL = strSQL + "Order By ";
                            strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_DATE ASC,COMP_VOUCHER_POSITION ASC, ";
                            strSQL = strSQL + "ACC_VOUCHER.VOUCHER_TOBY Desc, ";
                            strSQL = strSQL + "SUBSTRING(ACC_VOUCHER.COMP_REF_NO,7,30) Asc,";
                            strSQL = strSQL + "ACC_VOUCHER.LEDGER_NAME ASC";
                        }
                    }
                    else
                    {
                        strSQL = strSQL + "Order By ";
                        strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_DATE ASC, ";
                        strSQL = strSQL + "ACC_VOUCHER.VOUCHER_TOBY ASC,";
                        strSQL = strSQL + "SUBSTRING(ACC_VOUCHER.COMP_REF_NO,7,30) Asc,";
                        strSQL = strSQL + "ACC_VOUCHER.LEDGER_NAME ASC";
                    }
                }


                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strRefNo = Utility.Mid(dr["COMP_REF_NO"].ToString(), 6, dr["COMP_REF_NO"].ToString().Length - 6);
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.stVouchertoby = dr["VOUCHER_TOBY"].ToString();
                    oLedg.strDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.dblDebit = Convert.ToDouble(dr["VOUCHER_DEBIT_AMOUNT"].ToString());
                    oLedg.dblCredit = Convert.ToDouble(dr["VOUCHER_CREDIT_AMOUNT"].ToString());
                    if (dr["COMP_VOUCHER_NARRATION"].ToString() != "")
                    {
                        oLedg.strNarration = dr["COMP_VOUCHER_NARRATION"].ToString();
                    }
                    else
                    {
                        oLedg.strNarration = "";
                    }
                    if (dr["VOUCHER_CHEQUE_NUMBER"].ToString() != "")
                    {
                        oLedg.strCheuqueNo = dr["VOUCHER_CHEQUE_NUMBER"].ToString();
                    }
                    else
                    {
                        oLedg.strCheuqueNo = "";
                    }
                    if (dr["VOUCHER_CHEQUE_DATE"].ToString() != "")
                    {
                        oLedg.strChequeDate = Convert.ToDateTime(dr["VOUCHER_CHEQUE_DATE"]).ToString("dd-MM-yyyy");
                    }
                    else
                    {
                        oLedg.strChequeDate = "";
                    }
                    if (dr["VOUCHER_CHEQUE_DRAWN_ON"].ToString() != "")
                    {
                        oLedg.strDrawnOn = dr["VOUCHER_CHEQUE_DRAWN_ON"].ToString();
                    }
                    else
                    {
                        oLedg.strDrawnOn = "";
                    }
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strRefNo = "";
                    oLedg.strLedgerName = "";
                    oLedg.stVouchertoby = "";
                    oLedg.strDate = "";
                    oLedg.dblDebit = 0;
                    oLedg.dblCredit = 0;
                    oLedg.strNarration = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }

        public List<RAccountsGroup> mGetAccountsvoucherSP(string strDeComID, int intVtype, int intSummDetails, string strRefNo,
                                                            string strBranchID, string strPFDate, string strPTdate, string strPMonthID)
        {
            string strSQL = null, strMonthID = "", strDuration = "", strLedgerName = "", strFdate = "", strTdate = "", strParttyName = "";
            DateTime dteFdate;
            double dblCommitment = 0, dblCasCollection, dblVoucherCollection, dblTotal = 0;

            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmd = new SqlCommand();
                cmd.Connection = gcnMain;
                //strSQL = "SELECT COMP_VOUCHER_DATE,LEDGER_NAME from ACC_COMPANY_VOUCHER WHERE COMP_REF_NO='" + strRefNo + "' ";
                //cmd.CommandText = strSQL;
                //dr = cmd.ExecuteReader();
                //if (dr.Read())
                //{
                //    strLedgerName = dr["LEDGER_NAME"].ToString();
                //    dteFdate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]);
                //}

                strSQL = "SELECT AGNST_COMP_REF_NO,COMP_VOUCHER_DATE,LEDGER_NAME from ACC_COMPANY_VOUCHER WHERE COMP_REF_NO='" + strRefNo + "' ";
                cmd.CommandText = strSQL;
                dr = cmd.ExecuteReader();
                if (dr.Read())
                {
                    strLedgerName = dr["LEDGER_NAME"].ToString();
                    //strMonthID =Convert.ToDateTime( dr["AGNST_COMP_REF_NO"]).ToString();
                    strMonthID = dr["AGNST_COMP_REF_NO"].ToString();
                }
                else
                {
                    dteFdate = DateTime.Now;
                }
                dr.Close();

                //strMonthID = dteFdate.ToString("MMMyy").ToUpper();
                strSQL = "SELECT FROM_DATE,TO_DATE from ACC_MONTH_SETUP WHERE MONTH_ID='" + strMonthID + "' ";
                cmd.CommandText = strSQL;
                dr = cmd.ExecuteReader();
                if (dr.Read())
                {
                    strFdate = Convert.ToDateTime(dr["FROM_DATE"]).ToString("dd/MM/yyyy");
                    strTdate = Convert.ToDateTime(dr["TO_DATE"]).ToString("dd/MM/yyyy");
                    strDuration = "Period: " + strMonthID + " (" + Convert.ToDateTime(dr["FROM_DATE"]).ToString("dd-MM-yyyy") + " to " + Convert.ToDateTime(dr["TO_DATE"]).ToString("dd-MM-yyyy") + ")";
                }
                dr.Close();
                //strSQL = "SELECT isnull(sum(TARGET_ACHIEVE_AMOUNT),0) as TARGET_ACHIEVE_AMOUNT from SALES_TARGET_ACHIEVEMENT WHERE TARGET_ACHIEVE_MONTH_ID='" + strMonthID + "' ";
                //strSQL = strSQL + "AND LEDGER_NAME='" + strLedgerName + "' ";
                //cmd.CommandText = strSQL;
                //dr = cmd.ExecuteReader();
                //if (dr.Read())
                //{
                //    dblCommitment = Convert.ToDouble(dr["TARGET_ACHIEVE_AMOUNT"]);
                //}
                strSQL = "SELECT LEDGER_NAME, COLL_TARGET_FROM_DATE, COLL_TARGET_TO_DATE, COLL_TARGET_OPENING, MONTH_ID AS COLL_TARGET_MONTH_ID, COLL_TARGET_COLL_PER, COL_POS, ROW_POS,  ";
                strSQL = strSQL + "COLL_TARGET_COLL_AMT  ";
                strSQL = strSQL + "FROM  SALES_COLL_TARGET_TRAN  ";
                strSQL = strSQL + "WHERE (MONTH_ID ='" + strMonthID + "' ) AND (LEDGER_NAME = '" + strLedgerName + "')  ";
                strSQL = strSQL + "ORDER BY COLL_TARGET_DETAIL_SERIAL  ";
                cmd.CommandText = strSQL;
                dr = cmd.ExecuteReader();
                if (dr.Read())
                {
                    dblCommitment = Convert.ToDouble(dr["COLL_TARGET_COLL_AMT"]);
                }
                dr.Close();
                strSQL = "SELECT LEDGER_NAME_MERZE from ACC_LEDGER WHERE LEDGER_NAME='" + strLedgerName + "' ";
                cmd.CommandText = strSQL;
                dr = cmd.ExecuteReader();
                if (dr.Read())
                {
                    strParttyName = dr["LEDGER_NAME_MERZE"].ToString();
                }
                dr.Close();

                dblCasCollection = Utility.gGetReceiptAmountOfParty(strDeComID, strLedgerName, 1, 0, strFdate, strTdate);
                dblVoucherCollection = Utility.gGetReceiptAmountVoucher(strDeComID, strLedgerName, 3, 1, strPFDate, strPTdate, strPMonthID);
                dblTotal = dblCasCollection + dblVoucherCollection;

                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                strSQL = "SELECT ACC_COMPANY_VOUCHER.COMP_REF_NO,ACC_COMPANY_VOUCHER.LEDGER_NAME AS MRNAME,ACC_COMPANY_VOUCHER.BRANCH_ID, ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE,ACC_VOUCHER.AGNST_COMP_REF_NO,";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION,";
                strSQL = strSQL + "ACC_VOUCHER.LEDGER_NAME,ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT,";
                strSQL = strSQL + "ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT, ACC_VOUCHER.VOUCHER_TOBY ";
                strSQL = strSQL + "FROM ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER ACC_COMPANY_VOUCHER ";
                strSQL = strSQL + "INNER JOIN ACC_VOUCHER ACC_VOUCHER ON ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_REF_NO = ACC_VOUCHER.COMP_REF_NO ";
                strSQL = strSQL + "WHERE ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = " + intVtype + " ";
                strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT <> 0 ";
                if (intSummDetails == 0)
                {
                    strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY <> 'Dr' ";
                }
                strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_REF_NO = '" + strRefNo + "' ";

                if (intSummDetails == 0)
                {
                    strSQL = strSQL + "Order By ";
                    //'strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_DATE ASC, "
                    strSQL = strSQL + "SUBSTRING(ACC_COMPANY_VOUCHER.COMP_REF_NO,7,30) ASC, ";
                    strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_POSITION ASC ";
                }
                else
                {
                    strSQL = strSQL + "Order By ";
                    strSQL = strSQL + "ACC_VOUCHER.COMP_VOUCHER_DATE ASC, ";
                    strSQL = strSQL + "ACC_VOUCHER.VOUCHER_TOBY ASC,";
                    strSQL = strSQL + "SUBSTRING(ACC_VOUCHER.COMP_REF_NO,7,30) Asc,";
                    strSQL = strSQL + "ACC_VOUCHER.LEDGER_NAME ASC";
                }

                cmd.CommandText = strSQL;
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strRefNo = Utility.Mid(dr["COMP_REF_NO"].ToString(), 6, dr["COMP_REF_NO"].ToString().Length - 6);
                    oLedg.strGrName = strParttyName;
                    //oLedg.strBranchId = Utility.gstrGetBranchName(strDeComID, dr["BRANCH_ID"].ToString());
                    oLedg.strBranchId = "Branch : " + Utility.gstrGetBranchName(strDeComID, dr["BRANCH_ID"].ToString());
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.stVouchertoby = dr["VOUCHER_TOBY"].ToString();
                    oLedg.strDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.dblDebit = Convert.ToDouble(dr["AGNST_COMP_REF_NO"].ToString());
                    oLedg.dblCredit = Convert.ToDouble(dr["VOUCHER_DEBIT_AMOUNT"].ToString());
                    if (dr["COMP_VOUCHER_NARRATION"].ToString() != "")
                    {
                        oLedg.strNarration = dr["COMP_VOUCHER_NARRATION"].ToString();
                    }
                    else
                    {
                        oLedg.strNarration = "";
                    }
                    oLedg.strPeriod = strDuration;
                    oLedg.dblColltarget = dblCommitment;
                    oLedg.dblCashOpn = dblCasCollection;
                    oLedg.dblCollAcieve = dblVoucherCollection;
                    oLedg.dblAmount = dblTotal;
                    ooAccLedger.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strRefNo = "";
                    oLedg.strLedgerName = "";
                    oLedg.stVouchertoby = "";
                    oLedg.strDate = "";
                    oLedg.dblDebit = 0;
                    oLedg.dblCredit = 0;
                    oLedg.strNarration = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }
        #endregion
        #region "Voucher List"
        public List<AccountsVoucher> mOpenTable(string strDeComID, int mintVType, string strFind, string strExpression, string strUserName,
                                                        string mdteVFromDate = "", string mdteVToDate = "", int intSPJ = 0, string strmySql = "", int intAreaStaus = 0)
        {
            string strSQL = null;
            SqlDataReader dr;
            List<AccountsVoucher> ooAccLedger = new List<AccountsVoucher>();
            SqlCommand cmdInsert = new SqlCommand();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                cmdInsert.Connection = gcnMain;
                if (strmySql == "")
                {
                    if (mintVType == 1)
                    {

                        strSQL = "SELECT ACC_COMPANY_VOUCHER.COMP_REF_NO ,ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE,ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE,ACC_LEDGER.LEDGER_NAME_MERZE ,ACC_LEDGER.LEDGER_NAME  ,";
                        strSQL = strSQL + "RV_VOUCHER_VIEW.LEDGER_NAME VOUCHER_REVERSE_LEDGER,  ACC_BRANCH.BRANCH_NAME, ACC_COMPANY_VOUCHER.COMP_VOUCHER_NET_AMOUNT, ACC_COMPANY_VOUCHER.COMP_VOUCHER_NET_AMOUNT, ";
                        strSQL = strSQL + " ACC_LEDGER.LEDGER_NAME_MERZE,ACC_COMPANY_VOUCHER.APP_STATUS  ";
                        strSQL = strSQL + " FROM RV_VOUCHER_VIEW,ACC_BRANCH,ACC_LEDGER,ACC_COMPANY_VOUCHER  WHERE ACC_COMPANY_VOUCHER.COMP_REF_NO =RV_VOUCHER_VIEW.COMP_REF_NO AND ACC_LEDGER.LEDGER_NAME =ACC_COMPANY_VOUCHER.LEDGER_NAME  AND ";
                        strSQL = strSQL + " ACC_BRANCH.BRANCH_ID =ACC_COMPANY_VOUCHER.BRANCH_ID ";
                        strSQL = strSQL + " AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = " + mintVType + " ";
                        strSQL = strSQL + " AND ACC_COMPANY_VOUCHER.SP_JOURNAL= " + intSPJ + " ";
                        strSQL = strSQL + " AND ACC_COMPANY_VOUCHER.SAMPLE_STATUS=0 ";
                        if (strFind == "Voucher Number")
                        {
                            strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_REF_NO like '%" + strExpression + "%'";
                        }
                        else if (strFind == "Voucher Date")
                        {
                            strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
                            strSQL = strSQL + Utility.cvtSQLDateString(mdteVFromDate) + " ";
                            strSQL = strSQL + "AND ";
                            strSQL = strSQL + " " + Utility.cvtSQLDateString(mdteVToDate) + " ";
                        }
                        else if (strFind == "Ledger Name")
                        {
                            strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.LEDGER_NAME = '" + strExpression + "'";
                        }
                        else if (strFind == "Branch Name")
                        {
                            strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.BRANCH_NAME =  '" + Utility.gstrGetBranchName(strDeComID, strExpression) + "'";
                        }
                        else if (strFind == "Amount")
                        {
                            if (strExpression != "")
                            {
                                strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_NET_AMOUNT like '%" + strExpression + "%'";
                            }
                        }
                        else if (strFind == "Narrations")
                        {
                            strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION = '" + strExpression + "'";
                        }
                        else
                        {
                            strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
                            strSQL = strSQL + Utility.cvtSQLDateString(mdteVFromDate) + " ";
                            strSQL = strSQL + "AND ";
                            strSQL = strSQL + " " + Utility.cvtSQLDateString(mdteVToDate) + " ";
                        }
                        strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.BRANCH_ID in (select BRANCH_ID from USER_PRIVILEGES_BRANCH where USER_LOGIN_NAME  ='" + strUserName + "')";
                        strSQL = strSQL + " ORDER By ACC_COMPANY_VOUCHER.COMP_REF_NO,ACC_LEDGER.TERITORRY_CODE,ACC_LEDGER.LEDGER_CODE,ACC_LEDGER.LEDGER_NAME  ";

                    }
                    else if (mintVType == 12)
                    {
                        strSQL = "SELECT ACC_COMPANY_VOUCHER_BRANCH_VIEW.COMP_REF_NO,ACC_COMPANY_VOUCHER_BRANCH_VIEW.REF_NO,ACC_COMPANY_VOUCHER_BRANCH_VIEW.COMP_VOUCHER_TYPE,ACC_COMPANY_VOUCHER_BRANCH_VIEW.COMP_VOUCHER_DATE,";
                        strSQL = strSQL + "ACC_COMPANY_VOUCHER_BRANCH_VIEW.LEDGER_NAME , ACC_COMPANY_VOUCHER_BRANCH_VIEW.BRANCH_NAME, ACC_COMPANY_VOUCHER_BRANCH_VIEW.COMP_VOUCHER_AMOUNT, ";
                        strSQL = strSQL + "ACC_COMPANY_VOUCHER_BRANCH_VIEW.COMP_VOUCHER_NET_AMOUNT,ACC_COMPANY_VOUCHER_BRANCH_VIEW.LEDGER_CODE,ACC_COMPANY_VOUCHER_BRANCH_VIEW.LEDGER_NAME_MERZE,'' VOUCHER_REVERSE_LEDGER ";
                        strSQL = strSQL + ",APP_STATUS From ACC_COMPANY_VOUCHER_BRANCH_VIEW,ACC_LEDGER_Z_D_A WHERE ACC_LEDGER_Z_D_A.LEDGER_NAME =ACC_COMPANY_VOUCHER_BRANCH_VIEW.LEDGER_NAME  ";
                        strSQL = strSQL + " AND ACC_COMPANY_VOUCHER_BRANCH_VIEW.COMP_VOUCHER_TYPE = " + mintVType + " ";
                        strSQL = strSQL + " AND ACC_COMPANY_VOUCHER_BRANCH_VIEW.SP_JOURNAL= " + intSPJ + " ";
                        strSQL = strSQL + " AND ACC_COMPANY_VOUCHER_BRANCH_VIEW.SAMPLE_STATUS=0 ";
                        if (mintVType == (int)Utility.VOUCHER_TYPE.vtSALES_ORDER)
                        {
                            if (intAreaStaus == 1)
                            {
                                strSQL = strSQL + " AND ACC_COMPANY_VOUCHER_BRANCH_VIEW.APP_STATUS =0 ";
                            }
                            else
                            {
                                strSQL = strSQL + " AND ACC_COMPANY_VOUCHER_BRANCH_VIEW.APP_STATUS =1 ";
                            }
                        }
                        if (strFind == "Voucher Number")
                        {
                            strSQL = strSQL + "AND ACC_COMPANY_VOUCHER_BRANCH_VIEW.COMP_REF_NO like '%" + strExpression + "%'";
                        }
                        else if (strFind == "Voucher Date")
                        {
                            strSQL = strSQL + "AND ACC_COMPANY_VOUCHER_BRANCH_VIEW.COMP_VOUCHER_DATE BETWEEN ";
                            strSQL = strSQL + Utility.cvtSQLDateString(mdteVFromDate) + " ";
                            strSQL = strSQL + "AND ";
                            strSQL = strSQL + " " + Utility.cvtSQLDateString(mdteVToDate) + " ";
                        }
                        else if (strFind == "Ledger Name")
                        {
                            strSQL = strSQL + "AND ACC_COMPANY_VOUCHER_BRANCH_VIEW.LEDGER_NAME = '" + strExpression + "'";
                        }
                        else if (strFind == "Branch Name")
                        {
                            strSQL = strSQL + "AND ACC_COMPANY_VOUCHER_BRANCH_VIEW.BRANCH_NAME =  '" + Utility.gstrGetBranchName(strDeComID, strExpression) + "'";
                        }
                        else if (strFind == "Amount")
                        {
                            if (strExpression != "")
                            {
                                strSQL = strSQL + "AND ACC_COMPANY_VOUCHER_BRANCH_VIEW.COMP_VOUCHER_NET_AMOUNT like '%" + strExpression + "%'";
                            }
                        }
                        else if (strFind == "Narrations")
                        {
                            strSQL = strSQL + "AND ACC_COMPANY_VOUCHER_BRANCH_VIEW.COMP_VOUCHER_NARRATION = '" + strExpression + "'";
                        }
                        else
                        {
                            strSQL = strSQL + "AND ACC_COMPANY_VOUCHER_BRANCH_VIEW.COMP_VOUCHER_DATE BETWEEN ";
                            strSQL = strSQL + Utility.cvtSQLDateString(mdteVFromDate) + " ";
                            strSQL = strSQL + "AND ";
                            strSQL = strSQL + " " + Utility.cvtSQLDateString(mdteVToDate) + " ";
                        }
                        strSQL = strSQL + "AND ACC_COMPANY_VOUCHER_BRANCH_VIEW.BRANCH_ID in (select BRANCH_ID from USER_PRIVILEGES_BRANCH where USER_LOGIN_NAME  ='" + strUserName + "')";
                        strSQL = strSQL + " AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + strUserName + "')";
                        strSQL = strSQL + " ORDER By ACC_COMPANY_VOUCHER_BRANCH_VIEW.REF_NO,ACC_COMPANY_VOUCHER_BRANCH_VIEW.TERITORRY_CODE,ACC_COMPANY_VOUCHER_BRANCH_VIEW.LEDGER_CODE,ACC_COMPANY_VOUCHER_BRANCH_VIEW.LEDGER_NAME  ";
                       
                    }

                    else
                    {
                        strSQL = "SELECT COMP_REF_NO,REF_NO,COMP_VOUCHER_TYPE,COMP_VOUCHER_DATE,";
                        strSQL = strSQL + "LEDGER_NAME , BRANCH_NAME, COMP_VOUCHER_AMOUNT, COMP_VOUCHER_NET_AMOUNT,LEDGER_CODE,LEDGER_NAME_MERZE,'' VOUCHER_REVERSE_LEDGER ";
                        strSQL = strSQL + ",APP_STATUS From ACC_COMPANY_VOUCHER_BRANCH_VIEW ";
                        strSQL = strSQL + "WHERE COMP_VOUCHER_TYPE = " + mintVType + " ";
                        strSQL = strSQL + " AND SP_JOURNAL= " + intSPJ + " ";
                        strSQL = strSQL + " AND SAMPLE_STATUS=0 ";
                        if (mintVType == (int)Utility.VOUCHER_TYPE.vtSALES_ORDER)
                        {
                            if (intAreaStaus == 1)
                            {
                                strSQL = strSQL + " AND APP_STATUS =0 ";
                            }
                            else
                            {
                                strSQL = strSQL + " AND APP_STATUS =1 ";
                            }
                        }
                        if (strFind == "Voucher Number")
                        {
                            strSQL = strSQL + "AND COMP_REF_NO like '%" + strExpression + "%'";
                        }
                        else if (strFind == "Voucher Date")
                        {
                            strSQL = strSQL + "AND COMP_VOUCHER_DATE BETWEEN ";
                            strSQL = strSQL + Utility.cvtSQLDateString(mdteVFromDate) + " ";
                            strSQL = strSQL + "AND ";
                            strSQL = strSQL + " " + Utility.cvtSQLDateString(mdteVToDate) + " ";
                        }
                        else if (strFind == "Ledger Name")
                        {
                            strSQL = strSQL + "AND LEDGER_NAME = '" + strExpression + "'";
                        }
                        else if (strFind == "Branch Name")
                        {
                            strSQL = strSQL + "AND BRANCH_NAME =  '" + Utility.gstrGetBranchName(strDeComID, strExpression) + "'";
                        }
                        else if (strFind == "Amount")
                        {
                            if (strExpression != "")
                            {
                                strSQL = strSQL + "AND COMP_VOUCHER_NET_AMOUNT like '%" + strExpression + "%'";
                            }
                        }
                        else if (strFind == "Narrations")
                        {
                            strSQL = strSQL + "AND COMP_VOUCHER_NARRATION = '" + strExpression + "'";
                        }
                        else
                        {
                            strSQL = strSQL + "AND COMP_VOUCHER_DATE BETWEEN ";
                            strSQL = strSQL + Utility.cvtSQLDateString(mdteVFromDate) + " ";
                            strSQL = strSQL + "AND ";
                            strSQL = strSQL + " " + Utility.cvtSQLDateString(mdteVToDate) + " ";
                        }
                        strSQL = strSQL + "AND BRANCH_ID in (select BRANCH_ID from USER_PRIVILEGES_BRANCH where USER_LOGIN_NAME  ='" + strUserName + "')";
                        strSQL = strSQL + " ORDER By REF_NO,TERITORRY_CODE,LEDGER_CODE,LEDGER_NAME  ";
                    }
                }
                else
                {
                    strSQL = strmySql;
                }

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    AccountsVoucher oLedg = new AccountsVoucher();
                    oLedg.strVoucherNo = dr["COMP_REF_NO"].ToString();
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.strBranchName = dr["BRANCH_NAME"].ToString();
                    oLedg.strTranDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd/MM/yyyy");
                    oLedg.dblAmount = Convert.ToDouble(dr["COMP_VOUCHER_NET_AMOUNT"].ToString());
                    //if (mintVType == 1)
                    //{
                    //    //////oLedg.strReverseLegder = Utility.gGetRVReverseLedger(strDeComID, oLedg.strVoucherNo);
                    //    oLedg.strReverseLegder = dr["VOUCHER_REVERSE_LEDGER"].ToString();
                    //}
                    //else
                    //{
                    if (dr["VOUCHER_REVERSE_LEDGER"].ToString() != "")
                    {
                        oLedg.strReverseLegder = dr["VOUCHER_REVERSE_LEDGER"].ToString();
                    }
                    else
                    {
                        oLedg.strReverseLegder = "";
                    }
                    //}
                    oLedg.strMerzeName = dr["LEDGER_NAME_MERZE"].ToString();
                    oLedg.intAppStatus = Convert.ToInt16(dr["APP_STATUS"].ToString());
                    oLedg.strPreserveSQL = strSQL;
                    ooAccLedger.Add(oLedg);
                }
                return ooAccLedger;
                dr.Close();
                gcnMain.Close();
                gcnMain.Dispose();
            }

        }
        #endregion
        #region "Bank Reconcilation"
        public string mInserRPBank(string strDeComID, string strFdate, string strTdate,string strBranchID)
        {

            string strSQL, strString = "", strLedgerName = "";
            double dblOpn = 0;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }

                try
                {
                    gcnMain.Open();
                    SqlDataReader dr;



                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    strSQL = "DELETE FROM ACC_RP_VOCUHER_TEMP ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO ACC_RP_VOCUHER_TEMP(LEDGER_NAME,REVERSE_LEDGER,AMOUNT,VOUCHER_TO_BY,VOUCHER_TYPE,VOUCHER_POSITION) ";
                    strSQL = strSQL + "select l.LEDGER_NAME,  v.VOUCHER_REVERSE_LEDGER , ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) *-1 As Amnt,v.VOUCHER_TOBY, 1,1";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + "and v.VOUCHER_TOBY ='Dr' ";
                    strSQL = strSQL + "AND v.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND " + Utility.cvtSQLDateString(strTdate) + " ";
                    strSQL = strSQL + "and l.LEDGER_GROUP =100 ";
                    strSQL = strSQL + "and l.LEDGER_ONE_DOWN ='Bank Accounts' ";
                    if (strBranchID !="")
                    {
                        strSQL = strSQL + "and V.BRANCH_ID='" + strBranchID + "' ";
                    }
                    strSQL = strSQL + "group by v.COMP_REF_NO,l.LEDGER_NAME,v.VOUCHER_REVERSE_LEDGER,v.VOUCHER_TOBY order by l.LEDGER_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();


                    strSQL = "INSERT INTO ACC_RP_VOCUHER_TEMP(LEDGER_NAME,REVERSE_LEDGER,AMOUNT,VOUCHER_TO_BY,VOUCHER_TYPE,VOUCHER_POSITION) ";
                    strSQL = strSQL + "select l.LEDGER_NAME,  v.VOUCHER_REVERSE_LEDGER , ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) As Amnt,v.VOUCHER_TOBY,2,2 ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + "and v.VOUCHER_TOBY ='Cr' ";
                    strSQL = strSQL + "AND v.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND " + Utility.cvtSQLDateString(strTdate) + " ";
                    strSQL = strSQL + "and l.LEDGER_GROUP =100 ";
                    strSQL = strSQL + "and l.LEDGER_ONE_DOWN ='Bank Accounts' ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "and V.BRANCH_ID='" + strBranchID + "' ";
                    }
                    strSQL = strSQL + "group by l.LEDGER_NAME,v.VOUCHER_REVERSE_LEDGER,v.VOUCHER_TOBY order by l.LEDGER_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "SELECT DISTINCT LEDGER_NAME  from ACC_RP_VOCUHER_TEMP ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        strString = strString + dr["LEDGER_NAME"].ToString() + "~";
                    }
                    dr.Close();
                    string[] words = strString.Split('~');
                    foreach (string ooLoca in words)
                    {
                        if (ooLoca != "")
                        {
                            strLedgerName = ooLoca.ToString();
                            dblOpn = Convert.ToDouble(Utility.dblLedgerOpBalanceNew(strDeComID, strFdate, strTdate, strLedgerName, "")) * -1;

                            strSQL = "INSERT INTO ACC_RP_VOCUHER_TEMP(LEDGER_NAME,REVERSE_LEDGER,VOUCHER_TYPE,AMOUNT)";
                            strSQL = strSQL + "VALUES(";
                            strSQL = strSQL + "'" + strLedgerName.Replace("'", "''") + "' ";
                            strSQL = strSQL + ",' Opening'";
                            if (dblOpn > 0)
                            {
                                strSQL = strSQL + ",1";
                                strSQL = strSQL + "," + dblOpn + " ";
                                //strSQL = strSQL + ",0 ";
                            }
                            else
                            {
                                strSQL = strSQL + ",2";
                                //strSQL = strSQL + ",0 ";
                                strSQL = strSQL + "," + dblOpn + " ";
                            }

                            strSQL = strSQL + ")";
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();
                        }
                    }

                    dr.Close();

                    strSQL = "UPDATE ACC_RP_VOCUHER_TEMP set ACC_RP_VOCUHER_TEMP.REVERSE_LEDGER  = 'Received from MPO' ";
                    strSQL = strSQL + "FROM ACC_RP_VOCUHER_TEMP,ACC_LEDGER WHERE ACC_LEDGER.LEDGER_NAME =ACC_RP_VOCUHER_TEMP.REVERSE_LEDGER AND ACC_LEDGER.LEDGER_GROUP =202 ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "UPDATE ACC_RP_VOCUHER_TEMP set REVERSE_LEDGER  = 'Received from MPO' ";
                    strSQL = strSQL + "FROM ACC_RP_VOCUHER_TEMP WHERE LEDGER_NAME in ('BKash Account') ";
                    strSQL = strSQL + " AND VOUCHER_TO_BY ='Dr' and LEDGER_NAME NOT IN (' Opening')";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "UPDATE ACC_RP_VOCUHER_TEMP set REVERSE_LEDGER  = 'Received from MPO' ";
                    strSQL = strSQL + "FROM ACC_RP_VOCUHER_TEMP WHERE LEDGER_NAME in ('PBL (01341)-SND') ";
                    strSQL = strSQL + " AND VOUCHER_TO_BY ='Dr' and LEDGER_NAME not in (' Opening','Interest on bank deposit') ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "UPDATE ACC_RP_VOCUHER_TEMP set REVERSE_LEDGER  = 'Received from '  + LEDGER_NAME ";
                    strSQL = strSQL + "FROM ACC_RP_VOCUHER_TEMP WHERE REVERSE_LEDGER LIKE 'HL%' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM ACC_RP_VOCUHER_TEMP WHERE REVERSE_LEDGER='Bkash Charge (L)'";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO ACC_RP_VOCUHER_TEMP(LEDGER_NAME,REVERSE_LEDGER,AMOUNT,VOUCHER_TO_BY,VOUCHER_TYPE,VOUCHER_POSITION) ";
                    strSQL = strSQL + "SELECT 'BKash Account','Bkash Charge (L)',ISNULL(sum(VOUCHER_DEBIT_AMOUNT -VOUCHER_CREDIT_AMOUNT),0),'Cr',2,2 FROM ACC_VOUCHER WHERE LEDGER_NAME = 'Bkash Charge (L)' ";
                    strSQL = strSQL + "AND  COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND " + Utility.cvtSQLDateString(strTdate) + " ";
                    strSQL = strSQL + "AND  COMP_VOUCHER_TYPE  =3 ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "and BRANCH_ID='" + strBranchID + "' ";
                    }
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    cmdInsert.Transaction.Commit();
                    gcnMain.Close();

                    return "Inseretd...";
                }
                catch (Exception ex)
                {
                    return (ex.ToString());
                }
                finally
                {
                    gcnMain.Close();
                }
            }
        }
        public List<RAccountsGroup> mGetBankwiseQuery(string strDeComID, int intType, string strFdate, string strTdate,string VstrBranchID)
        {
            string strSQL = null;
            SqlDataReader dr;

            List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmdInsert = new SqlCommand();

                if (intType == 0)
                {
                    //strSQL = "SELECT LEDGER_NAME,REVERSE_LEDGER ,SUM(AMOUNT) RAMOUNT, 0 PAMOUNT FROM ACC_RP_VOCUHER_TEMP  WHERE VOUCHER_TYPE =1 GROUP bY LEDGER_NAME,REVERSE_LEDGER,VOUCHER_POSITION  ";
                    //strSQL = strSQL + "union all ";
                    //strSQL = strSQL + "Select LEDGER_NAME,REVERSE_LEDGER ,0 RAMOUNT,SUM(AMOUNT) PAMOUNT FROM ACC_RP_VOCUHER_TEMP  WHERE VOUCHER_TYPE =2  GROUP bY LEDGER_NAME,REVERSE_LEDGER,VOUCHER_POSITION  ";

                    strSQL = "select LEDGER_NAME,REVERSE_LEDGER,ISNULL(SUM(RAMOUNT),0) RAMOUNT, ISNULL(SUM(PAMOUNT),0) PAMOUNT from ACC_BANK_WISE_COLLECTION ";
                    strSQL = strSQL + "GROUP bY LEDGER_NAME,REVERSE_LEDGER ORDER BY LEDGER_NAME ";
                }
                else
                {
                   

                    strSQL =  "select  l.LEDGER_NAME  ,'' REVERSE_LEDGER, ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) As RAMOUNT,0 PAMOUNT from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME and v.VOUCHER_TOBY ='Dr' ";
                    strSQL = strSQL + "AND v.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND " + Utility.cvtSQLDateString(strTdate) + " ";
                    strSQL = strSQL + " and l.LEDGER_GROUP IN (100,101)  AND v.COMP_VOUCHER_TYPE =1 ";
                    if (VstrBranchID !="")
                    {
                        strSQL = strSQL + " and v.BRANCH_ID='" + VstrBranchID + "' ";
                    }
                    strSQL = strSQL + "group by l.LEDGER_NAME ORDER BY LEDGER_NAME ASC";

                }
                cmdInsert.Connection = gcnMain;
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.strReverseLedger = dr["REVERSE_LEDGER"].ToString();
                    if (intType == 0)
                    {
                        oLedg.dblAmount = Math.Abs(Convert.ToDouble(dr["RAMOUNT"]));
                    }
                    else
                    {
                        oLedg.dblAmount = (Convert.ToDouble(dr["RAMOUNT"]));
                    }
                    oLedg.dblMnauAmount = Math.Abs(Convert.ToDouble(dr["PAMOUNT"]));
                    ooAccLedger.Add(oLedg);
                }



                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strGrName = "";
                    oLedg.strLedgerName = "";
                    oLedg.strReverseLedger = "";
                    oLedg.dblAmount = 0;
                    oLedg.dblMnauAmount = 0;
                    oLedg.intvoucherType = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;
            }
        }
        public List<RAccountsGroup> mGetBankwiseHLPF(string strDeComID, int intType, string strFdate, string strTdate, string vstrBranchID)
        {
            string strSQL = null;
            SqlDataReader dr;

            List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmdInsert = new SqlCommand();


                strSQL = "ALTER VIEW BANCK_STATEMENT_V AS ";
                strSQL = strSQL + "SELECT  'Honda Loan' LEDGER_NAME  , ISNULL(sum(v.VOUCHER_CREDIT_AMOUNT),0) *-1 As RAMOUNT from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.REVERSE_LEDGER1 and v.VOUCHER_TOBY ='Cr' ";
                strSQL = strSQL + "AND v.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND " + Utility.cvtSQLDateString(strTdate) + " ";
                strSQL = strSQL + " AND v.COMP_VOUCHER_TYPE =3 AND v.AUTOJV=1 and v.LEDG_PREFIX='HL' ";
                if (vstrBranchID != "")
                {
                    strSQL = strSQL + " AND v.BRANCH_ID='" + vstrBranchID + "' ";
                }
                ////strSQL = strSQL + "group by l.LEDGER_NAME  ";
                strSQL = strSQL + "UNION ALL ";
                strSQL = strSQL + "SELECT  'Provident Fund' LEDGER_NAME ,ISNULL(sum(v.VOUCHER_CREDIT_AMOUNT),0) *-1 As RAMOUNT from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.REVERSE_LEDGER1 and v.VOUCHER_TOBY ='Cr' ";
                strSQL = strSQL + "AND v.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND " + Utility.cvtSQLDateString(strTdate) + " ";
                strSQL = strSQL + " AND v.COMP_VOUCHER_TYPE =3 AND v.AUTOJV=1 and v.LEDG_PREFIX='PF' ";
                if (vstrBranchID != "")
                {
                    strSQL = strSQL + " AND v.BRANCH_ID='" + vstrBranchID + "' ";
                }
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                cmdInsert.ExecuteNonQuery();

                strSQL = "SELECT  LEDGER_NAME,RAMOUNT FROM BANCK_STATEMENT_V ";



                cmdInsert.Connection = gcnMain;
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.dblAmount = Math.Abs(Convert.ToDouble(dr["RAMOUNT"]));
                    ooAccLedger.Add(oLedg);
                }



                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strGrName = "";
                    oLedg.strLedgerName = "";
                    oLedg.strReverseLedger = "";
                    oLedg.dblAmount = 0;
                    oLedg.dblMnauAmount = 0;
                    oLedg.intvoucherType = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;
            }
        }
        #endregion
        #region "Fg Item"
        public List<StockItem> mloadAddStockItemFgNew(string strDeComID, string strRawLocation)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<StockItem> oogrp = new List<StockItem>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            if (strRawLocation != "")
            {
                //strSQL = "SELECT STOCKITEM_NAME,STOCKITEM_ALIAS,STOCKITEM_CLOSING_BALANCE,STOCKITEM_BASEUNITS FROM INV_MANUFACTURE_ITEM_QRY ";
                //strSQL = strSQL + "WHERE STOCKGROUP_PRIMARY_TYPE IN(3) ";
                //strSQL = strSQL + "AND GODOWNS_NAME= '" + strRawLocation + "' ";
                strSQL = "SELECT INV_STOCKITEM_CLOSING.STOCKITEM_NAME,INV_STOCKITEM_CLOSING.STOCKITEM_CLOSING_BALANCE,INV_STOCKITEM.STOCKITEM_BASEUNITS ";
                strSQL = strSQL + "FROM INV_STOCKITEM_CLOSING INNER JOIN INV_STOCKITEM ON INV_STOCKITEM_CLOSING.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME ";
                strSQL = strSQL + "WHERE INV_STOCKITEM_CLOSING.GODOWNS_NAME = '" + strRawLocation + "' ";
                strSQL = strSQL + " AND INV_STOCKITEM.STOCKITEM_STATUS = 0 AND STOCKITEM_PRIMARY_GROUP = 'Finished Goods' ";
                strSQL = strSQL + "ORDER BY INV_STOCKITEM_CLOSING.STOCKITEM_NAME ";
            }
            else
            {
                strSQL = "SELECT STOCKITEM_NAME,STOCKITEM_ALIAS,sum(STOCKITEM_CLOSING_BALANCE) as STOCKITEM_CLOSING_BALANCE ,STOCKITEM_BASEUNITS FROM INV_MANUFACTURE_ITEM_QRY ";
                strSQL = strSQL + "WHERE STOCKGROUP_PRIMARY_TYPE IN(3) ";
                strSQL = strSQL + "GROUP by STOCKITEM_NAME,STOCKITEM_ALIAS,STOCKITEM_BASEUNITS ";
                strSQL = strSQL + "ORDER BY STOCKITEM_NAME ";
            }

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    StockItem ogrp = new StockItem();
                    if (Utility.gblnStockItemAlias)
                    {
                        ogrp.strItemName = drGetGroup["STOCKITEM_ALIAS"].ToString() + " " + drGetGroup["STOCKITEM_NAME"].ToString();
                    }
                    else
                    {
                        ogrp.strItemName = drGetGroup["STOCKITEM_NAME"].ToString();
                    }
                    ogrp.dblClsBalance = Convert.ToDouble(drGetGroup["STOCKITEM_CLOSING_BALANCE"]);
                    ogrp.strUnit = drGetGroup["STOCKITEM_BASEUNITS"].ToString();
                    oogrp.Add(ogrp);
                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return oogrp;

            }
        }
        #endregion
        #region "Fill StockItem"
        public List<StockItem> gFillStockItemNew(string strDeComID, string vstrRoot, string vstrGodown)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<StockItem> oogrp = new List<StockItem>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            strSQL = "SELECT INV_STOCKITEM.STOCKITEM_NAME,INV_STOCKITEM.STOCKITEM_BASEUNITS,SUM(INV_TRAN.INV_TRAN_QUANTITY) CLS";
            strSQL = strSQL + " FROM INV_TRAN ,INV_STOCKITEM WHERE INV_STOCKITEM.STOCKITEM_NAME =INV_TRAN.STOCKITEM_NAME ";
            if (vstrRoot != "")
            {
                strSQL = strSQL + " AND INV_STOCKITEM.STOCKGROUP_NAME = '" + vstrRoot + "' ";
            }
            strSQL = strSQL + " AND INV_TRAN.GODOWNS_NAME='" + vstrGodown + "' ";
            strSQL = strSQL + "AND INV_STOCKITEM.STOCKITEM_STATUS=0 ";
            strSQL = strSQL + "GROUP BY INV_STOCKITEM.STOCKITEM_NAME,INV_STOCKITEM.STOCKITEM_BASEUNITS  ORDER by INV_STOCKITEM.STOCKITEM_NAME ASc ";


            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    StockItem ogrp = new StockItem();
                    ogrp.strItemName = drGetGroup["STOCKITEM_NAME"].ToString();
                    ogrp.strUnit = drGetGroup["STOCKITEM_BASEUNITS"].ToString();
                    ogrp.dblClsBalance = Convert.ToDouble(drGetGroup["CLS"].ToString());
                    oogrp.Add(ogrp);
                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return oogrp;

            }
        }
        public List<StockItem> gFillStockItem(string strDeComID, string vstrGodown)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<StockItem> oogrp = new List<StockItem>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            strSQL = "SELECT STOCKITEM_NAME,STOCKITEM_CLOSING_BALANCE,STOCKITEM_BASEUNITS FROM INV_STOCK_CLOSING_QRY ";
            strSQL = strSQL + "WHERE GODOWNS_NAME='" + vstrGodown + "' ";
            strSQL = strSQL + "ORDER BY STOCKITEM_NAME ASC";


            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    StockItem ogrp = new StockItem();
                    ogrp.strItemName = drGetGroup["STOCKITEM_NAME"].ToString();
                    ogrp.strUnit = drGetGroup["STOCKITEM_BASEUNITS"].ToString();
                    ogrp.dblClsBalance = Convert.ToDouble(drGetGroup["STOCKITEM_CLOSING_BALANCE"].ToString());
                    oogrp.Add(ogrp);
                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return oogrp;

            }
        }
        #endregion
        #region "mfillLedger"
        public List<AccountsLedger> mFillLedger(string strDeComID, int vIntGroup, string vstrPrefix, string vstrPrefix1, int intStatus,int intbkash,string vstruserName,string vstrBranchID)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<AccountsLedger> ooLed = new List<AccountsLedger>();
            strSQL = "SELECT LEDGER_NAME,LEDGER_NAME_MERZE FROM ACC_LEDGER";
            strSQL = strSQL + " WHERE LEDGER_STATUS=" + intStatus + " ";
            if (vIntGroup == 1)
            {
                if (vstrPrefix1 == "Cr")
                {
                    strSQL = strSQL + " AND LEDGER_GROUP = 202 ";
                   
                }
                else
                {
                    strSQL = strSQL + " AND LEDGER_GROUP <= 101 ";
                    if (intbkash == 1)
                    {
                        strSQL = strSQL + " AND LEDGER_NAME like '%BKash Account%'";
                    }
                }
            }
            else if (vIntGroup == 3)
            {
                strSQL = strSQL + " AND LEDGER_GROUP >= 100 ";
            }
            strSQL = strSQL + " AND LEDGER_GROUP <> 204 ";
            
            strSQL = strSQL + " and LEDGER_NAME in (SELECT  LEDGER_NAME FROM  USER_PRIVILEGES_LEDGER WHERE USER_LOGIN_NAME='" + vstruserName + "')";
            if (vIntGroup == 1)
            {
                if (vstrPrefix1 == "Cr")
                {
                    strSQL = strSQL + "AND BRANCH_ID='" + vstrBranchID + "' ";
                }
            }
            strSQL = strSQL + " ORDER BY LEDGER_NAME_MERZE ";
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    AccountsLedger ogrp = new AccountsLedger();
                    ogrp.strLedgerName = drGetGroup["LEDGER_NAME"].ToString();
                    ogrp.strmerzeString = drGetGroup["LEDGER_NAME_MERZE"].ToString();
                    ooLed.Add(ogrp);

                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return ooLed;

            }
        }
        public List<AccountsLedger> mFillJVLedger(string strDeComID, int vIntGroup, string vstrPrefix, string vstrPrefix1, int intStatus, int intbkash, string vstruserName, string vstrBranchID)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<AccountsLedger> ooLed = new List<AccountsLedger>();
            strSQL = "SELECT LEDGER_NAME,LEDGER_NAME_MERZE FROM ACC_LEDGER";
            strSQL = strSQL + " WHERE LEDGER_STATUS=" + intStatus + " ";
            strSQL = strSQL + " AND LEDGER_GROUP >= 100 ";
            strSQL = strSQL + " AND LEDGER_GROUP not in(204) ";
            strSQL = strSQL + " and LEDGER_NAME in (SELECT  LEDGER_NAME FROM  USER_PRIVILEGES_LEDGER WHERE USER_LOGIN_NAME='" + vstruserName + "')";
            strSQL = strSQL + "AND BRANCH_ID='" + vstrBranchID + "' ";
            strSQL = strSQL + "union all ";
            strSQL = strSQL + "SELECT LEDGER_NAME,LEDGER_NAME_MERZE FROM ACC_LEDGER";
            strSQL = strSQL + " WHERE LEDGER_STATUS=" + intStatus + " ";
            strSQL = strSQL + " AND LEDGER_GROUP >= 100 ";
            strSQL = strSQL + " AND LEDGER_GROUP not in(202, 204) ";
            strSQL = strSQL + " and LEDGER_NAME in (SELECT  LEDGER_NAME FROM  USER_PRIVILEGES_LEDGER WHERE USER_LOGIN_NAME='" + vstruserName + "')";
            strSQL = strSQL + " ORDER BY LEDGER_NAME_MERZE ";
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    AccountsLedger ogrp = new AccountsLedger();
                    ogrp.strLedgerName = drGetGroup["LEDGER_NAME"].ToString();
                    ogrp.strmerzeString = drGetGroup["LEDGER_NAME_MERZE"].ToString();
                    ooLed.Add(ogrp);

                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return ooLed;

            }
        }
        #endregion
        #region "Stattementview"
        public List<RStockInformation> mGetProductStatementNew(string strDeComID, string strFdate, string strstring, string strBranchID)
        {
            string strSQL = null;
            SqlDataReader dr;
            List<RStockInformation> ooAccLedger = new List<RStockInformation>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;

                strSQL = "DELETE FROM INV_STOCK_STATEMENT ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //---OPening
                strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_QTY) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,(isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                strSQL = strSQL + "and t.INV_VOUCHER_TYPE not in (15) ";
                if (strstring != "")
                {
                    strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                }
                strSQL = strSQL + "AND s.STOCKITEM_STATUS =0 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_QTY) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,isnull(sum(t.BILL_QUANTITY+t.BILL_QUANTITY_BONUS ),0)*-1 as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                //strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
                strSQL = strSQL + " and t.COMP_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSALES_INVOICE + " ";
                strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                if (strstring != "")
                {
                    strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                }
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_QTY) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, ( isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                strSQL = strSQL + " AND  c.COMP_REF_NO=t.INV_REF_NO AND t.INV_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + " AND c.SAMPLE_STATUS=1 ";
                strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                if (strstring != "")
                {
                    strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                }
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_QTY) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, ( isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                strSQL = strSQL + " AND  c.COMP_REF_NO=t.INV_REF_NO AND t.INV_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + " AND t.BILL_TRAN_AGST_VOUCHER_TYPE=50 ";// sample class
                strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                if (strstring != "")
                {
                    strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                }
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //strSQL = " INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,STOCKITEM_ALIAS,CONVERT_QTY) ";
                //strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS,  (isnull(sum(t.INV_TRAN_QUANTITY),0))  as opn   ";
                //strSQL = strSQL + " from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                //strSQL = strSQL + "AND t.INV_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
                //strSQL = strSQL + "and t.INV_INOUT_FLAG ='O' ";
                //strSQL = strSQL + "and t.CONVERSION_TYPE =1 ";
                //strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                //if (strstring != "")
                //{
                //    strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                //}
                //strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS ";
                //cmdInsert.CommandText = strSQL;
                //cmdInsert.ExecuteNonQuery();

                //--PRODUCTION_QTY
                strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,PRODUCTION_QTY) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, (isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "and t.INV_VOUCHER_TYPE in (27,29) ";
                strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                if (strstring != "")
                {
                    strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                }
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,STOCKITEM_ALIAS,PRODUCTION_QTY) ";
                //strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS,  (isnull(sum(t.INV_TRAN_QUANTITY),0)) *-1  as opn   ";
                //strSQL = strSQL + " from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                //strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                //strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                //strSQL = strSQL + "and t.INV_INOUT_FLAG ='O' ";
                //strSQL = strSQL + "and t.CONVERSION_TYPE =1 ";
                //strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                //if (strstring != "")
                //{
                //    strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                //}
                //strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS ";
                //cmdInsert.CommandText = strSQL;
                //cmdInsert.ExecuteNonQuery();

                //--SALES_QTY
                strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,SALES_QTY) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs(isnull(sum(t.BILL_QUANTITY+t.BILL_QUANTITY_BONUS ),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strFdate) + " ";
                //strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
                strSQL = strSQL + " and t.COMP_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSALES_INVOICE + " ";
                strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                if (strstring != "")
                {
                    strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                }
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //--SAMPLE_QTY
                strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,SAMPLE_QTY) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs( isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                strSQL = strSQL + " AND  c.COMP_REF_NO=t.INV_REF_NO AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + " AND c.SAMPLE_STATUS=1 ";
                strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                if (strstring != "")
                {
                    strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                }
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,SAMPLE_QTY) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs( isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                strSQL = strSQL + " AND  c.COMP_REF_NO=t.INV_REF_NO AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + " AND t.BILL_TRAN_AGST_VOUCHER_TYPE=50 ";// sample class
                strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                if (strstring != "")
                {
                    strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                }
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                //--RETURN_QTY
                strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,RETURN_QTY) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  abs(isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + " and t.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSALES_RETURN + " ";
                strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                if (strstring != "")
                {
                    strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                }
                strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //--CONVERT_QTY
                strSQL = " INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,CONVERT_QTY) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  (isnull(sum(t.INV_TRAN_QUANTITY),0))  as opn   ";
                strSQL = strSQL + " from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "and t.INV_INOUT_FLAG ='O' ";
                strSQL = strSQL + "and t.CONVERSION_TYPE =1 ";
                strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                if (strstring != "")
                {
                    strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                }
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //--BROKEN_QTY
                strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,BROKEN_QTY)  ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  (isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + " and t.INV_VOUCHER_TYPE  =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE + " ";
                strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                if (strstring != "")
                {
                    strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                }
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //--PHY_STOCK_QTY
                //if (intPhyType == 1)
                //{
                strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,PHY_STOCK_QTY)  ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  (isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn   ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + " and t.INV_VOUCHER_TYPE  =" + (int)Utility.VOUCHER_TYPE.vtSTOCK_PHYSICAL + " ";
                strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                if (strstring != "")
                {
                    strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                }
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                //--STOCK_TRANSFER_QTY
                strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,STOCK_TRANSFER_QTY)  ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  abs(isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn   ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strFdate) + " ";
                //strSQL = strSQL + "and t.INV_VOUCHER_TYPE =23 ";
                strSQL = strSQL + " and t.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                strSQL = strSQL + "and t.INV_INOUT_FLAG ='O'  ";
                strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                if (strstring != "")
                {
                    strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                }
                strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                //--STOCK_TRANSFER_QTY
                strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,STOCK_TRANSFER_IN_QTY)  ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  abs(isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn   ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strFdate) + " ";
                //strSQL = strSQL + "and t.INV_VOUCHER_TYPE =23 ";
                strSQL = strSQL + " and t.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                strSQL = strSQL + "and t.INV_INOUT_FLAG ='I'  ";
                strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                if (strstring != "")
                {
                    strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                }
                strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //}

                //--CONSUMPTION_QTY
                strSQL = "INSERT INTO INV_STOCK_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,CONSUMPTION_QTY)  ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  (isnull(sum(t.INV_TRAN_QUANTITY),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME  ";
                strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strFdate) + " ";
                //strSQL = strSQL + "and t.INV_VOUCHER_TYPE =26  ";
                strSQL = strSQL + " and t.INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION + " ";
                strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                strSQL = strSQL + "AND  t.CONVERSION_TYPE =0 ";
                if (strstring != "")
                {
                    strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                }
                strSQL = strSQL + " group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();




                cmdInsert.Transaction.Commit();


                strSQL = "SELECT  ITEM_NAME,OPENING_QTY,PRODUCTION_QTY,SALES_QTY,SAMPLE_QTY,";
                strSQL = strSQL + "RETURN_QTY,CONVERT_QTY,BROKEN_QTY,PHY_STOCK_QTY,STOCK_TRANSFER_QTY,STOCK_TRANSFER_IN_QTY,CONSUMPTION_QTY from INV_STOCK_STATEMENT_VIEW";
                //if (intAliasSorting == 0)
                //{
                //    strSQL = strSQL + " ORDER by ITEM_NAME ";
                //}
                //else
                //{
                //    strSQL = strSQL + " ORDER by STOCKITEM_ALIAS ";
                //}

                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    //oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();
                    string strUnit = Utility.gGetBaseUOM(strDeComID, dr["ITEM_NAME"].ToString());
                    oLedg.strItemName = dr["ITEM_NAME"].ToString();



                    //oLedg.strItemAlias = dr["STOCKITEM_ALIAS"].ToString();
                    oLedg.dblOpnQty = Math.Abs(Convert.ToDouble(dr["OPENING_QTY"])) + Math.Abs(Convert.ToDouble(dr["PRODUCTION_QTY"])) + Math.Abs(Convert.ToDouble(dr["RETURN_QTY"])) + Math.Abs(Convert.ToDouble(dr["STOCK_TRANSFER_QTY"]));
                    //oLedg.dblInwQty = Math.Abs(Convert.ToDouble(dr["PRODUCTION_QTY"]));
                    oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["SALES_QTY"])) + Math.Abs(Convert.ToDouble(dr["STOCK_TRANSFER_QTY"])) + Math.Abs(Convert.ToDouble(dr["SAMPLE_QTY"]) + Math.Abs((Convert.ToDouble(dr["BROKEN_QTY"]))) + Math.Abs((Convert.ToDouble(dr["CONVERT_QTY"]))) + Math.Abs(Convert.ToDouble(dr["CONSUMPTION_QTY"])));

                    oLedg.strClosing = (oLedg.dblOpnQty + (Convert.ToDouble(dr["PHY_STOCK_QTY"])) + oLedg.dblOutWardQty) + " " + strUnit;
                    //oLedg.dblSampleQty = Math.Abs(Convert.ToDouble(dr["SAMPLE_QTY"]));
                    //oLedg.dblReturnQty = Math.Abs(Convert.ToDouble(dr["RETURN_QTY"]));
                    //oLedg.dblConvertQty = (Convert.ToDouble(dr["CONVERT_QTY"]));
                    //oLedg.dblBroken = (Convert.ToDouble(dr["BROKEN_QTY"]));
                    //oLedg.dblPhyStockQty = (Convert.ToDouble(dr["PHY_STOCK_QTY"]));
                    //oLedg.dblTranserOutQty = Math.Abs(Convert.ToDouble(dr["STOCK_TRANSFER_QTY"]));
                    //oLedg.dblStockTranserQty = Math.Abs(Convert.ToDouble(dr["STOCK_TRANSFER_IN_QTY"]));
                    //oLedg.dblConsumptionQty = Math.Abs(Convert.ToDouble(dr["CONSUMPTION_QTY"]));

                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RStockInformation oLedg = new RStockInformation();
                    //oLedg.strGroupName = "";
                    oLedg.strItemName = "";
                    //oLedg.strItemAlias = "";
                    oLedg.dblOpnQty = 0;
                    oLedg.dblInwQty = 0;
                    oLedg.dblOutWardQty = 0;
                    oLedg.dblSampleQty = 0;
                    oLedg.dblReturnQty = 0;
                    oLedg.dblConvertQty = 0;
                    oLedg.dblBroken = 0;
                    oLedg.dblPhyStockQty = 0;
                    oLedg.dblStockTranserQty = 0;
                    oLedg.dblConsumptionQty = 0;
                    oLedg.dblclsQty = 0;
                    oLedg.strClosing = "0";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;
            }
        }
        #endregion
        #region "Production Statement View"
        public List<StockItem> mGetProductStatementView(string strDeComID, string strGroupName, string strBranchID,string strGodowns,string vstrNotGroupName)
        {
            string strSQL = null;
            SqlDataReader dr;
            List<StockItem> ooAccLedger = new List<StockItem>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmdInsert = new SqlCommand();
                cmdInsert.Connection = gcnMain;
                strSQL = "SELECT  STOCKITEM_NAME,ITEM_CODE, STOCKITEM_BASEUNITS,isnull(SUM(QNTY),0) CLS ";
                strSQL = strSQL + "FROM STOCK_STATEMENT_VIEW ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + " WHERE BRANCH_ID='" + strBranchID + "' ";
                }
                if (strGodowns != "")
                {
                    strSQL = strSQL + " AND GODOWNS_NAME='" + strGodowns + "' ";
                }
                if (strGroupName != "")
                {
                    strSQL = strSQL + "  AND STOCKGROUP_NAME='" + strGroupName + "' ";
                }
                if (vstrNotGroupName != "")
                {

                    strSQL = strSQL + " AND STOCKGROUP_NAME  NOT IN (SELECT STOCKGROUP_NAME  FROM INV_STOCKGROUP WHERE (STOCKGROUP_PRIMARY_TYPE =3 AND STOCKGROUP_SECONDARY_TYPE =0))";

                }
                strSQL = strSQL + "GROUP bY STOCKITEM_NAME,ITEM_CODE,STOCKITEM_BASEUNITS ";
                strSQL = strSQL + " ORDER by STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    StockItem oLedg = new StockItem();
                    if (dr["ITEM_CODE"].ToString() != "")
                    {
                        oLedg.strItemcode = dr["ITEM_CODE"].ToString();
                    }
                    else
                    {
                        oLedg.strItemcode = "";
                    }
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                    if (Convert.ToDouble(dr["CLS"].ToString()) < 0)
                    {
                        oLedg.dblClsBalance = 0;
                    }
                    else
                    {
                        oLedg.dblClsBalance = Convert.ToDouble(dr["CLS"].ToString());
                    }
                    oLedg.strUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    StockItem oLedg = new StockItem();
                    //oLedg.strGroupName = "";
                    oLedg.strItemName = "";
                    oLedg.dblClsBalance = 0;
                    oLedg.strUnit = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;
            }
        }
        #endregion
        #region "Ledger"
        public List<AccountsLedger> mLedgerAdditemMr(string strDeComID, int intstatus, string strMpo, string strUserName)
        {

            SqlDataReader dr;
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            List<AccountsLedger> ooAccLed = new List<AccountsLedger>();
            if (strMpo == "")
            {
                strSQL = "SELECT LEDGER_NAME,LEDGER_NAME_MERZE FROM ACC_LEDGER ";
                strSQL = strSQL + "WHERE LEDGER_STATUS = " + intstatus + " ";
                strSQL = strSQL + "AND LEDGER_GROUP > 101 ";
                strSQL = strSQL + "AND LEDGER_GROUP <> 204 ";
                strSQL = strSQL + " ORDER by TERITORRY_CODE ";
            }
            else
            {
                //strSQL = "SELECT LEDGER_NAME,LEDGER_NAME_MERZE FROM ACC_LEDGER ";
                //strSQL = strSQL + "WHERE LEDGER_GROUP =202 ";
                //strSQL = strSQL + "AND LEDGER_STATUS = " + intstatus + " ";
                //strSQL = strSQL + " ORDER by TERITORRY_CODE ";
                strSQL = "select ACC_LEDGER.LEDGER_NAME,ACC_LEDGER.LEDGER_NAME_MERZE from ACC_LEDGER,ACC_LEDGER_Z_D_A where ACC_LEDGER.LEDGER_NAME =ACC_LEDGER_Z_D_A.LEDGER_NAME ";
                strSQL = strSQL + "and ACC_LEDGER.LEDGER_GROUP =202 and ACC_LEDGER.LEDGER_STATUS =" + intstatus + " ";
                strSQL = strSQL + "and ACC_LEDGER_Z_D_A.DIVISION in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
                strSQL = strSQL + " ORDER by ACC_LEDGER.TERITORRY_CODE ";
            }
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    AccountsLedger oaccLed = new AccountsLedger();
                    oaccLed.strmerzeString = dr["LEDGER_NAME_MERZE"].ToString();
                    oaccLed.strLedgerName = dr["LEDGER_NAME"].ToString();
                    ooAccLed.Add(oaccLed);
                }
                dr.Close();
                return ooAccLed;
            }

        }
        public List<AccountsLedger> mLedgerAdditemMrNew(string strDeComID)
        {

            SqlDataReader dr;
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            List<AccountsLedger> ooAccLed = new List<AccountsLedger>();
            strSQL = "SELECT LEDGER_NAME,LEDGER_NAME_MERZE FROM ACC_LEDGER ";
            strSQL = strSQL + "WHERE ";
            strSQL = strSQL + " LEDGER_GROUP <> 204 ";
            strSQL = strSQL + " ORDER by TERITORRY_CODE ";
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    AccountsLedger oaccLed = new AccountsLedger();
                    oaccLed.strmerzeString = dr["LEDGER_NAME_MERZE"].ToString();
                    oaccLed.strLedgerName = dr["LEDGER_NAME"].ToString();
                    ooAccLed.Add(oaccLed);
                }
                dr.Close();
                return ooAccLed;
            }

        }
        #endregion
        #region "mAddStockItem"
        public List<StockItem> mloadAddStockItemSI(string strDeComID, string vstrRoot, string strLocation)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<StockItem> oogrp = new List<StockItem>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            // strSQL = "SELECT STOCKITEM_NAME,STOCKITEM_ALIAS FROM INV_STOCKITEM ";
            //strSQL = strSQL + "WHERE STOCKGROUP_NAME = '" + vstrRoot + "' ";
            strSQL = "SELECT STOCKITEM_CLOSING_VIEW.STOCKITEM_NAME,ISNULL(SUM(STOCKITEM_CLOSING_VIEW.STOCKITEM_CLOSING_BALANCE-STOCKITEM_CLOSING_VIEW.STOCKITEM_SALE_BALANCE),0) CLS,STOCKITEM_CLOSING_VIEW.STOCKITEM_BASEUNITS ";
            strSQL = strSQL + "from STOCKITEM_CLOSING_VIEW,INV_STOCKITEM where  INV_STOCKITEM.STOCKITEM_NAME=STOCKITEM_CLOSING_VIEW.STOCKITEM_NAME ";
            strSQL = strSQL + "AND STOCKGROUP_NAME = '" + vstrRoot + "' ";
            strSQL = strSQL + "AND GODOWNS_NAME='" + strLocation + "' ";
            strSQL = strSQL + "GROUP by STOCKITEM_CLOSING_VIEW.STOCKITEM_NAME,STOCKITEM_CLOSING_VIEW.STOCKITEM_BASEUNITS ";

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    StockItem ogrp = new StockItem();
                    if (Utility.gblnStockItemAlias)
                    {
                        ogrp.strItemName = drGetGroup["STOCKITEM_ALIAS"].ToString() + " " + drGetGroup["STOCKITEM_NAME"].ToString();
                    }
                    else
                    {
                        ogrp.strItemName = drGetGroup["STOCKITEM_NAME"].ToString();
                    }
                    ogrp.dblClsBalance = Convert.ToDouble(drGetGroup["CLS"]);
                    ogrp.strUnit = drGetGroup["STOCKITEM_BASEUNITS"].ToString();

                    oogrp.Add(ogrp);
                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return oogrp;


            }
        }
        #endregion
        #region "SP Commission"
        public List<RAccountsGroup> GetrptSPCommission(string strDeComID, string strFate, string strTDate)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;

                strSQL = "DELETE from ACC_SP_CROSS_JV ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO  ACC_SP_CROSS_JV(TERITORY_NAME,MR_NAME,LEDGER_NAME,AMOUNT,COMP_REF_NO) ";
                strSQL = strSQL + "SELECT l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + " v.LEDGER_NAME,ISNULL(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) amnt ,c.COMP_REF_NO ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER c,ACC_VOUCHER v ,ACC_LEDGER l,ACC_EXPENSE_CONFIG_MASTER E where c.COMP_REF_NO=v.COMP_REF_NO and  l.LEDGER_NAME =c.LEDGER_NAME   ";
                strSQL = strSQL + "and v.LEDGER_NAME =e.LEDGER_NAME AND c.SP_JOURNAL=1  ";
                strSQL = strSQL + "AND (c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "group by l.LEDGER_PARENT_GROUP,v.LEDGER_NAME,l.LEDGER_NAME_MERZE,c.COMP_REF_NO ";
                //strSQL = strSQL + "having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) >0 ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.CommandTimeout = 0;
                cmdInsert.ExecuteNonQuery();
                cmdInsert.Transaction.Commit();

                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                strSQL = "SELECT TERITORY_NAME,MR_NAME,LEDGER_NAME,substring(COMP_REF_NO,7,30) COMP_REF_NO ,AMOUNT  FROM ACC_SP_CROSS_JV ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strGrName = dr["MR_NAME"].ToString();
                    oLedg.strGrParent = dr["TERITORY_NAME"].ToString();
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.strRefNo = dr["COMP_REF_NO"].ToString();
                    oLedg.dblAmount = Convert.ToDouble(dr["AMOUNT"]);
                    //oLedg.strGrParent = dr["GR_PARENT"].ToString();
                    ooAccLedger.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strGrName = "";
                    oLedg.strGrParent = "";
                    oLedg.strLedgerName = "";
                    oLedg.strRefNo = "";
                    oLedg.dblAmount = 0;
                    ooAccLedger.Add(oLedg);
                }


                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }
        #endregion
        #region "FinalStatemnetSP"
        public List<RFinalStatement> mGetFinalStattemnetCustomer(string strDeComID, string strFate, string strTDate, string strBranchID, string strGroupName, string strPartyName, int intstatus, string CustomerGroup, string strCustomer)
        {
            string strSQL = null, strSelection = "";
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;
                strSQL = "DELETE FROM ACC_FINAL_STATEMENT ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                if (strGroupName != "")
                {
                    strSelection = strGroupName.Substring(0, 1).ToUpper();
                }


                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,DOCTOR_CUSTOMER,PREVIOUS_DUES_GOODS) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME ,l.TERITORRY_CODE,l.LEDGER_NAME_MERZE,c.SALES_REP, ";
                strSQL = strSQL + "ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0)  PDUES   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND c.SALES_REP is not null ";
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME_MERZE ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,c.SALES_REP";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //Current Month Sales

                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,SALES_CURRENT_MONTH,DOCTOR_CUSTOMER) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME , l.TERITORRY_CODE,l.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0) SALES_CURRENT_MONTH,c.SALES_REP   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                strSQL = strSQL + "AND  C.COMP_VOUCHER_TYPE =16 ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME_MERZE ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,c.SALES_REP";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //Return
                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,DOCTOR_CUSTOMER,RETURN_AMOUNT) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME,l.TERITORRY_CODE, l.LEDGER_NAME_MERZE,c.SALES_REP, ";
                strSQL = strSQL + "ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0) COLL_CASH_TT ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av  ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO  ";
                strSQL = strSQL + "AND av.COMP_VOUCHER_TYPE=" + (int)Utility.VOUCHER_TYPE.vtSALES_RETURN + " ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND c.SALES_REP is not null ";
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME_MERZE ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,c.SALES_REP ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                //Cash
                strSQL = "INSERT INTO ACC_FINAL_STATEMENT(ZONE,DIVISION,AREA,TERITORY_NAME,TERITORY_CODE,MEDICAL_REPRESENTATIVE,DOCTOR_CUSTOMER,COLL_CASH_TT) ";
                strSQL = strSQL + "select g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area,l.TERRITORRY_NAME,l.TERITORRY_CODE, l.LEDGER_NAME_MERZE,c.SALES_REP, ";
                strSQL = strSQL + "ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0) COLL_CASH_TT ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av  ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO  ";
                strSQL = strSQL + "AND av.COMP_VOUCHER_TYPE=" + (int)Utility.VOUCHER_TYPE.vtRECEIPT_VOUCHER + " ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND c.SALES_REP is not null ";
                if (strGroupName != "")
                {
                    if (strSelection == "Z")
                    {
                        strSQL = strSQL + "AND g.GR_PARENT ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "D")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "R")
                    {
                        strSQL = strSQL + "AND g.GR_NAME ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "A")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "F")
                    {
                        strSQL = strSQL + "AND l.LEDGER_PARENT_GROUP ='" + strGroupName + "' ";
                    }
                    else if (strSelection == "S")
                    {
                        strSQL = strSQL + "AND g.GR_ONE_DOWN ='" + strGroupName + "' ";
                    }
                }
                else if (strPartyName != "")
                {
                    strSQL = strSQL + "AND l.LEDGER_NAME_MERZE ='" + strPartyName + "' ";
                }
                if (intstatus < 2)
                {
                    strSQL = strSQL + "AND l.LEDGER_STATUS =" + intstatus + " ";
                }
                strSQL = strSQL + "group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,c.SALES_REP ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                cmdInsert.Transaction.Commit();


                List<RFinalStatement> ooAccLedger = new List<RFinalStatement>();

                strSQL = "SELECT ACC_FINAL_STATEMENT_VIEW.ZONE, ACC_FINAL_STATEMENT_VIEW.DIVISION, ACC_FINAL_STATEMENT_VIEW.AREA, ACC_FINAL_STATEMENT_VIEW.TERITORY_NAME, ACC_FINAL_STATEMENT_VIEW.TERITORY_CODE, ";
                strSQL = strSQL + "ACC_FINAL_STATEMENT_VIEW.MEDICAL_REPRESENTATIVE, ACC_FINAL_STATEMENT_VIEW.DOCTOR_CUSTOMER, ACC_FINAL_STATEMENT_VIEW.PREVIOUS_DUES_GOODS, ";
                strSQL = strSQL + "ACC_FINAL_STATEMENT_VIEW.PREVIOUS_DUES_SHORT, ACC_FINAL_STATEMENT_VIEW.SALES_CURRENT_MONTH, ACC_FINAL_STATEMENT_VIEW.COLL_ON_COMMIT, ACC_FINAL_STATEMENT_VIEW.RETURN_AMOUNT, ";
                strSQL = strSQL + "ACC_FINAL_STATEMENT_VIEW.DEBIT_AMOUNT, ACC_FINAL_STATEMENT_VIEW.CREDIT_AMOUNT, ACC_FINAL_STATEMENT_VIEW.COMMITMENT, ACC_FINAL_STATEMENT_VIEW.COLL_CASH_TT, ";
                strSQL = strSQL + "ACC_FINAL_STATEMENT_VIEW.COLL_VOUCHER, ACC_FINAL_STATEMENT_VIEW.CP_COMMISSION, ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_PARENT_GROUP, ";
                strSQL = strSQL + "ACC_LEDGER.LEDGER_PRIMARY_GROUP ";
                strSQL = strSQL + "FROM ACC_FINAL_STATEMENT_VIEW INNER JOIN ";
                strSQL = strSQL + "ACC_LEDGER ON ACC_FINAL_STATEMENT_VIEW.DOCTOR_CUSTOMER = ACC_LEDGER.LEDGER_NAME ";
                if (CustomerGroup != "")
                {
                    strSQL = strSQL + " WHERE ";
                    if (CustomerGroup == "Customer")
                    {
                        strSQL = strSQL + "  (ACC_LEDGER.LEDGER_PRIMARY_GROUP = '" + CustomerGroup + "') ";
                    }
                    if (CustomerGroup != "Customer")
                    {
                        strSQL = strSQL + " (ACC_LEDGER.LEDGER_PARENT_GROUP = '" + CustomerGroup + "') ";
                    }
                    if (strCustomer != "")
                    {
                        strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_NAME_MERZE IN (" + strCustomer + ")) ";
                    }
                }


                strSQL = strSQL + "ORDER BY ACC_FINAL_STATEMENT_VIEW.MEDICAL_REPRESENTATIVE ";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RFinalStatement oLedg = new RFinalStatement();
                    if (dr["ZONE"].ToString() != "")
                    {
                        oLedg.strZone = dr["ZONE"].ToString();
                    }
                    else
                    {
                        oLedg.strZone = "";
                    }

                    if (dr["DIVISION"].ToString() != "")
                    {
                        oLedg.strDivision = dr["DIVISION"].ToString();
                    }
                    else
                    {
                        oLedg.strDivision = "";
                    }

                    if (dr["AREA"].ToString() != "")
                    {
                        oLedg.strArea = dr["AREA"].ToString();
                    }
                    else
                    {
                        oLedg.strArea = "";
                    }

                    if (dr["TERITORY_NAME"].ToString() != "")
                    {
                        oLedg.strteritorryname = dr["TERITORY_NAME"].ToString();
                    }
                    else
                    {
                        oLedg.strteritorryname = "";
                    }

                    if (dr["TERITORY_CODE"].ToString() != "")
                    {
                        oLedg.strTeritorryCode = dr["TERITORY_CODE"].ToString();
                    }
                    else
                    {
                        oLedg.strTeritorryCode = "";
                    }

                    if (dr["MEDICAL_REPRESENTATIVE"].ToString() != "")
                    {
                        oLedg.strMrname = dr["MEDICAL_REPRESENTATIVE"].ToString();
                    }
                    else
                    {
                        oLedg.strMrname = "";
                    }
                    if (dr["LEDGER_NAME_MERZE"].ToString() != "")
                    {
                        oLedg.strCustomer = dr["LEDGER_NAME_MERZE"].ToString();
                    }
                    else
                    {
                        oLedg.strCustomer = "";
                    }
                    oLedg.dblPreviousDues = Convert.ToDouble(dr["PREVIOUS_DUES_GOODS"].ToString());
                    //oLedg.dblsh = Convert.ToDouble(dr["PREVIOUS_DUES_SHORT"].ToString());
                    oLedg.dblCurrentSales = Convert.ToDouble(dr["SALES_CURRENT_MONTH"].ToString());
                    oLedg.dblcollecCommi = Convert.ToDouble(dr["COLL_ON_COMMIT"].ToString());
                    oLedg.dblSalesReturn = Convert.ToDouble(dr["RETURN_AMOUNT"].ToString());
                    oLedg.dblDebit = Convert.ToDouble(dr["DEBIT_AMOUNT"].ToString());
                    oLedg.dblCredit = Convert.ToDouble(dr["CREDIT_AMOUNT"].ToString());
                    oLedg.dblCommitment = Convert.ToDouble(dr["COMMITMENT"].ToString());
                    oLedg.dblCash = Convert.ToDouble(dr["COLL_CASH_TT"].ToString());
                    oLedg.dblSpVoucher = Convert.ToDouble(dr["COLL_VOUCHER"].ToString());
                    //oLedg.dblcp = Convert.ToDouble(dr["CP_COMMISSION"].ToString());
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RFinalStatement oLedg = new RFinalStatement();
                    oLedg.strZone = "";

                    oLedg.strDivision = "";
                    oLedg.strArea = "";
                    oLedg.strteritorryname = "";
                    oLedg.strTeritorryCode = "";
                    oLedg.strMrname = "";
                    oLedg.dblPreviousDues = 0;
                    oLedg.dblCurrentSales = 0;
                    oLedg.dblcollecCommi = 0;
                    oLedg.dblSalesReturn = 0;
                    oLedg.dblDebit = 0;
                    oLedg.dblCredit = 0;
                    oLedg.dblCommitment = 0;
                    oLedg.dblCash = 0;
                    oLedg.dblSpVoucher = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }
        #endregion
        #region Statistical Product Sales
        public List<RProductSales> mGetStatisticalProductSales(string strDeComID, string strFdate, string strTDate, string strBranchId, string strString, int intMode, bool blngAccessControl, string strUserName)
        {
            int intMode2 = 0;
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RProductSales> ooAccLedger = new List<RProductSales>();

                if (intMode == 1)
                {
                    SqlTransaction myTrans;
                    SqlCommand cmdInsert = new SqlCommand();
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;
                    strSQL = "DELETE FROM INV_STOCK_STATTISTICAL_TEMP ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_STATTISTICAL_TEMP(STOCKITEM_NAME,STOCKGROUP_NAME,STOCKCATEGORY_NAME,BILL_QUANTITY,BILL_QUANTITY_BONUS,GR_PARENT,LEDGER_NAME_MERZE,SEQ_NO) ";
                    strSQL = strSQL + "SELECT INV_STOCKITEM.STOCKITEM_NAME, INV_STOCKITEM.STOCKGROUP_NAME, INV_STOCKITEM.STOCKCATEGORY_NAME, sum(ACC_BILL_TRAN.BILL_QUANTITY) BILL_QUANTITY, ";
                    strSQL = strSQL + "SUM(ACC_BILL_TRAN.BILL_QUANTITY_BONUS) BILL_QUANTITY_BONUS,ACC_LEDGERGROUP.GR_PARENT, ACC_LEDGER.LEDGER_NAME_MERZE as LEDGER_NAME,1   FROM ACC_BILL_TRAN,ACC_LEDGER,INV_STOCKITEM,ACC_COMPANY_VOUCHER ,ACC_LEDGERGROUP ";
                    strSQL = strSQL + "WHERE INV_STOCKITEM.STOCKITEM_NAME =ACC_BILL_TRAN.STOCKITEM_NAME  AND ACC_LEDGER.LEDGER_NAME =ACC_COMPANY_VOUCHER.LEDGER_NAME  ";
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_REF_NO=ACC_BILL_TRAN.COMP_REF_NO AND ACC_LEDGERGROUP.GR_NAME =ACC_LEDGER.LEDGER_PARENT_GROUP ";
                    strSQL = strSQL + "AND (ACC_BILL_TRAN.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) AND (ACC_BILL_TRAN.COMP_VOUCHER_TYPE = 16) AND ";
                    strSQL = strSQL + "(ACC_BILL_TRAN.BRANCH_ID = '" + strBranchId + "') ";
                    strSQL = strSQL + "AND (ACC_BILL_TRAN.COMP_VOUCHER_TYPE = 16) ";
                    strSQL = strSQL + "AND (INV_STOCKITEM.STOCKGROUP_NAME<>'Mother Tincture' AND INV_STOCKITEM.STOCKGROUP_NAME<>'Trituration Tablet' AND INV_STOCKITEM.STOCKGROUP_NAME<>'Bio-Laid' AND INV_STOCKITEM.STOCKGROUP_NAME<>'Bio-Chemic' AND INV_STOCKITEM.STOCKGROUP_NAME<>'Dilution') ";
                    if (blngAccessControl == true)
                    {
                        strSQL = strSQL + " AND  ACC_LEDGERGROUP.GR_PARENT in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
                    }
                    if (strString != "")
                    {
                        //strSQL = strSQL + "AND (ACC_VOUCHER.LEDGER_NAME = '" + strString + "') ";
                        strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.LEDGER_NAME = '" + strString + "') ";
                    }
                    strSQL = strSQL + " GROUP BY INV_STOCKITEM.STOCKITEM_NAME, INV_STOCKITEM.STOCKGROUP_NAME, INV_STOCKITEM.STOCKCATEGORY_NAME,ACC_COMPANY_VOUCHER.LEDGER_NAME,ACC_LEDGERGROUP.GR_PARENT, ACC_LEDGER.LEDGER_NAME_MERZE ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_STATTISTICAL_TEMP(STOCKITEM_NAME,STOCKGROUP_NAME,STOCKCATEGORY_NAME,BILL_QUANTITY,BILL_QUANTITY_BONUS,GR_PARENT,LEDGER_NAME_MERZE,SEQ_NO) ";
                    strSQL = strSQL + "SELECT INV_STOCKITEM.STOCKCATEGORY_NAME, INV_STOCKITEM.STOCKGROUP_NAME, INV_STOCKITEM.STOCKCATEGORY_NAME, sum(ACC_BILL_TRAN.BILL_QUANTITY) BILL_QUANTITY, ";
                    strSQL = strSQL + "SUM(ACC_BILL_TRAN.BILL_QUANTITY_BONUS) BILL_QUANTITY_BONUS,ACC_LEDGERGROUP.GR_PARENT, ACC_LEDGER.LEDGER_NAME_MERZE as LEDGER_NAME,2   FROM ACC_BILL_TRAN,ACC_LEDGER,INV_STOCKITEM,ACC_COMPANY_VOUCHER ,ACC_LEDGERGROUP ";
                    strSQL = strSQL + "WHERE INV_STOCKITEM.STOCKITEM_NAME =ACC_BILL_TRAN.STOCKITEM_NAME  AND ACC_LEDGER.LEDGER_NAME =ACC_COMPANY_VOUCHER.LEDGER_NAME  ";
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_REF_NO=ACC_BILL_TRAN.COMP_REF_NO AND ACC_LEDGERGROUP.GR_NAME =ACC_LEDGER.LEDGER_PARENT_GROUP ";
                    strSQL = strSQL + "AND (ACC_BILL_TRAN.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) AND (ACC_BILL_TRAN.COMP_VOUCHER_TYPE = 16) AND ";
                    strSQL = strSQL + "(ACC_BILL_TRAN.BRANCH_ID = '" + strBranchId + "') ";
                    strSQL = strSQL + "AND (ACC_BILL_TRAN.COMP_VOUCHER_TYPE = 16) ";
                    strSQL = strSQL + "AND INV_STOCKITEM.STOCKGROUP_NAME in ('Bio-Laid','Bio-Chemic','Dilution','Mother Tincture','Trituration Tablet' ) ";
                    if (blngAccessControl == true)
                    {
                        strSQL = strSQL + " AND  ACC_LEDGERGROUP.GR_PARENT in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
                    }
                    if (strString != "")
                    {
                        //strSQL = strSQL + "AND (ACC_VOUCHER.LEDGER_NAME = '" + strString + "') ";
                        strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.LEDGER_NAME = '" + strString + "') ";
                    }
                    strSQL = strSQL + " GROUP BY  INV_STOCKITEM.STOCKGROUP_NAME, INV_STOCKITEM.STOCKCATEGORY_NAME,ACC_COMPANY_VOUCHER.LEDGER_NAME,ACC_LEDGERGROUP.GR_PARENT, ACC_LEDGER.LEDGER_NAME_MERZE ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();

                    strSQL = "SELECT STOCKITEM_NAME,STOCKGROUP_NAME,STOCKCATEGORY_NAME,BILL_QUANTITY,BILL_QUANTITY_BONUS,GR_PARENT,LEDGER_NAME_MERZE LEDGER_NAME,SEQ_NO FROM INV_STOCK_STATTISTICAL_TEMP ";
                    strSQL = strSQL + "ORDER BY STOCKGROUP_NAME,STOCKCATEGORY_NAME,SEQ_NO ASC ";


                }

                else
                {
                    if (strString != "")
                    {
                        if (strString.Substring(0, 2).ToUpper() == "DH")
                        {
                            intMode2 = 2;
                        }

                        else if (strString.Substring(0, 2).ToUpper() == "AH")
                        {
                            intMode2 = 5;
                        }
                        //else if (Utility.Right(strString, 4).ToUpper() == "ZONE")
                        else if (strString.Contains("ZONE") == true)
                        {
                            intMode2 = 4;
                        }
                        else if (strString == "Sundry Debtors")
                        {
                            intMode2 = 0;
                        }
                        else
                        {
                            intMode2 = 6;
                        }
                    }
                    SqlTransaction myTrans;
                    SqlCommand cmdInsert = new SqlCommand();
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;
                    strSQL = "DELETE FROM INV_STOCK_STATTISTICAL_TEMP ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_STATTISTICAL_TEMP(ZONE,DIVISION,AREA,STOCKITEM_NAME,STOCKGROUP_NAME,STOCKCATEGORY_NAME,BILL_QUANTITY,BILL_QUANTITY_BONUS,LEDGER_NAME_MERZE,BRANCH_ID,SEQ_NO) ";
                    strSQL = strSQL + "SELECT MpoGroup.zone, MpoGroup.Division, MpoGroup.area, RTbl.STOCKITEM_NAME, RTbl.STOCKGROUP_NAME, RTbl.STOCKCATEGORY_NAME, RTbl.BILL_QUANTITY, RTbl.BILL_QUANTITY_BONUS, RTbl.LEDGER_NAME,   RTbl.BRANCH_ID,1 seq FROM ";
                    strSQL = strSQL + "(SELECT TOP (100) PERCENT g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area, l.LEDGER_NAME ";
                    strSQL = strSQL + "FROM  ACC_LEDGERGROUP AS g INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGERGROUP_CATEGORY_VIEW AS v ON g.GR_NAME = v.GR_PARENT INNER JOIN  ACC_LEDGER AS l ON v.GR_NAME = l.LEDGER_PARENT_GROUP ";
                    strSQL = strSQL + "WHERE (l.BRANCH_ID = '" + strBranchId + "') ";
                    strSQL = strSQL + "ORDER BY l.TERITORRY_CODE) AS MpoGroup INNER JOIN ";
                    strSQL = strSQL + "(SELECT INV_STOCKITEM.STOCKITEM_NAME, INV_STOCKITEM.STOCKGROUP_NAME, INV_STOCKITEM.STOCKCATEGORY_NAME, ACC_BILL_TRAN.BILL_QUANTITY, ACC_BILL_TRAN.BILL_QUANTITY_BONUS, ACC_VOUCHER.LEDGER_NAME, ACC_BILL_TRAN.BRANCH_ID,1 seq ";
                    strSQL = strSQL + "FROM  INV_STOCKITEM AS INV_STOCKITEM INNER JOIN ";
                    strSQL = strSQL + "ACC_BILL_TRAN AS ACC_BILL_TRAN ON INV_STOCKITEM.STOCKITEM_NAME = ACC_BILL_TRAN.STOCKITEM_NAME INNER JOIN ";
                    strSQL = strSQL + "ACC_VOUCHER AS ACC_VOUCHER ON ACC_BILL_TRAN.COMP_REF_NO = ACC_VOUCHER.COMP_REF_NO INNER JOIN ";
                    strSQL = strSQL + " ACC_LEDGER AS ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_BILL_TRAN.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) AND (ACC_BILL_TRAN.COMP_VOUCHER_TYPE = 16) AND ";
                    strSQL = strSQL + " INV_STOCKITEM.STOCKGROUP_NAME not in ('Bio-Laid','Bio-Chemic','Dilution','Mother Tincture','Trituration Tablet' ) AND ";
                    strSQL = strSQL + "(ACC_BILL_TRAN.BRANCH_ID = '" + strBranchId + "') AND (ACC_VOUCHER.LEDGER_NAME <> 'Sales Account') ) AS RTbl ON MpoGroup.LEDGER_NAME = RTbl.LEDGER_NAME ";

                    if (intMode2 == 6)
                    {
                        //strSQL = strSQL + "WHERE (MpoGroup.Division = 'DSM-Zillur Rahman-Comilla') ";
                        //strSQL = strSQL + "WHERE (MpoGroup.zone = '" + strString + "') ";
                    }
                    if (intMode2 == 4)
                    {
                        strSQL = strSQL + "WHERE (MpoGroup.zone = '" + strString + "') ";
                    }
                    if (intMode2 == 2)
                    {
                        strSQL = strSQL + "WHERE (MpoGroup.Division = '" + strString + "') ";
                    }
                    if (intMode2 == 3)
                    {
                        strSQL = strSQL + "WHERE (MpoGroup.Division = '" + strString + "') ";
                    }
                    if (intMode2 == 5)
                    {
                        strSQL = strSQL + "WHERE (MpoGroup.area = '" + strString + "') ";
                    }
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_STATTISTICAL_TEMP(ZONE,DIVISION,AREA,STOCKITEM_NAME,STOCKGROUP_NAME,STOCKCATEGORY_NAME,BILL_QUANTITY,BILL_QUANTITY_BONUS,LEDGER_NAME_MERZE,BRANCH_ID,SEQ_NO) ";
                    strSQL = strSQL + "SELECT MpoGroup.zone, MpoGroup.Division, MpoGroup.area,  RTbl.STOCKCATEGORY_NAME STOCKITEM_NAME, RTbl.STOCKGROUP_NAME, RTbl.STOCKCATEGORY_NAME, RTbl.BILL_QUANTITY, RTbl.BILL_QUANTITY_BONUS, RTbl.LEDGER_NAME,   RTbl.BRANCH_ID,2 seq FROM ";
                    strSQL = strSQL + "(SELECT TOP (100) PERCENT g.GR_PARENT AS zone, g.GR_NAME AS Division, l.LEDGER_PARENT_GROUP AS area, l.LEDGER_NAME ";
                    strSQL = strSQL + "FROM  ACC_LEDGERGROUP AS g INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGERGROUP_CATEGORY_VIEW AS v ON g.GR_NAME = v.GR_PARENT INNER JOIN  ACC_LEDGER AS l ON v.GR_NAME = l.LEDGER_PARENT_GROUP ";
                    strSQL = strSQL + "WHERE (l.BRANCH_ID = '" + strBranchId + "') ";
                    strSQL = strSQL + "ORDER BY l.TERITORRY_CODE) AS MpoGroup INNER JOIN ";
                    strSQL = strSQL + "(SELECT INV_STOCKITEM.STOCKCATEGORY_NAME STOCKITEM_NAME, INV_STOCKITEM.STOCKGROUP_NAME, INV_STOCKITEM.STOCKCATEGORY_NAME, ACC_BILL_TRAN.BILL_QUANTITY, ACC_BILL_TRAN.BILL_QUANTITY_BONUS, ACC_VOUCHER.LEDGER_NAME, ACC_BILL_TRAN.BRANCH_ID,2 seq ";
                    strSQL = strSQL + "FROM  INV_STOCKITEM AS INV_STOCKITEM INNER JOIN ";
                    strSQL = strSQL + "ACC_BILL_TRAN AS ACC_BILL_TRAN ON INV_STOCKITEM.STOCKITEM_NAME = ACC_BILL_TRAN.STOCKITEM_NAME INNER JOIN ";
                    strSQL = strSQL + "ACC_VOUCHER AS ACC_VOUCHER ON ACC_BILL_TRAN.COMP_REF_NO = ACC_VOUCHER.COMP_REF_NO INNER JOIN ";
                    strSQL = strSQL + " ACC_LEDGER AS ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_BILL_TRAN.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) AND (ACC_BILL_TRAN.COMP_VOUCHER_TYPE = 16) AND ";
                    strSQL = strSQL + " INV_STOCKITEM.STOCKGROUP_NAME in ('Bio-Laid','Bio-Chemic','Dilution','Mother Tincture','Trituration Tablet' ) AND ";
                    strSQL = strSQL + "(ACC_BILL_TRAN.BRANCH_ID = '" + strBranchId + "') AND (ACC_VOUCHER.LEDGER_NAME <> 'Sales Account')) AS RTbl ON MpoGroup.LEDGER_NAME = RTbl.LEDGER_NAME ";
                    if (intMode2 == 6)
                    {
                        //strSQL = strSQL + "WHERE (MpoGroup.Division = 'DSM-Zillur Rahman-Comilla') ";
                    }
                    if (intMode2 == 4)
                    {
                        strSQL = strSQL + "WHERE (MpoGroup.zone = '" + strString + "') ";
                    }
                    if (intMode2 == 2)
                    {
                        strSQL = strSQL + "WHERE (MpoGroup.Division = '" + strString + "') ";
                    }
                    if (intMode2 == 3)
                    {
                        strSQL = strSQL + "WHERE (MpoGroup.Division = '" + strString + "') ";
                    }
                    if (intMode2 == 5)
                    {
                        strSQL = strSQL + "WHERE (MpoGroup.area = '" + strString + "') ";
                    }
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();
                    strSQL = "SELECT ZONE,DIVISION,AREA,STOCKITEM_NAME,STOCKGROUP_NAME,STOCKCATEGORY_NAME,BILL_QUANTITY,BILL_QUANTITY_BONUS,GR_PARENT,LEDGER_NAME_MERZE LEDGER_NAME,SEQ_NO FROM INV_STOCK_STATTISTICAL_TEMP ";
                    strSQL = strSQL + "ORDER BY STOCKGROUP_NAME,STOCKCATEGORY_NAME,SEQ_NO ASC ";


                }

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();

                while (dr.Read())
                {
                    RProductSales oLedg = new RProductSales();
                    oLedg.strStockGroupName = dr["STOCKGROUP_NAME"].ToString();
                    oLedg.strStockCategoryName = dr["STOCKCATEGORY_NAME"].ToString();
                    oLedg.DblBillQty = Convert.ToDouble(dr["BILL_QUANTITY"].ToString());
                    oLedg.DblBillQtyBonus = Convert.ToDouble(dr["BILL_QUANTITY_BONUS"].ToString());
                    oLedg.strStockItemName = dr["STOCKITEM_NAME"].ToString();
                    if (intMode2 == 6)
                    {
                        oLedg.strLedgername = "Sundry Debtors";
                    }
                    else if (intMode2 == 5)
                    {
                        oLedg.strLedgername = dr["zone"].ToString();
                    }
                    else if (intMode2 == 4)
                    {
                        oLedg.strLedgername = dr["Division"].ToString();
                    }
                    else if (intMode2 == 3)
                    {
                        oLedg.strLedgername = dr["area"].ToString();
                    }
                    else
                        oLedg.strLedgername = dr["LEDGER_NAME"].ToString();
                    ooAccLedger.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RProductSales oLedg = new RProductSales();
                    oLedg.strStockGroupName = "";
                    oLedg.strStockCategoryName = "";
                    oLedg.DblBillQty = 0;
                    oLedg.DblBillQtyBonus = 0;
                    oLedg.strStockItemName = "";
                    oLedg.strLedgername = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }
        #endregion
        #region Sales  statement Pack Size
        public List<RProductSales> mGetSalesStatementPackSize(string strDeComID, string strFdate, string strTDate, string strSelction2, int intMode, bool blngAccessControl, string strUserName)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RProductSales> ooAccLedger = new List<RProductSales>();
                strSQL = "SELECT ";
                strSQL = strSQL + "ACC_LEDGER.LEDGER_NAME_MERZE,";
                strSQL = strSQL + "SUM(ACC_BILL_TRAN.BILL_QUANTITY) BILL_QUANTITY, SUM(ACC_BILL_TRAN.BILL_QUANTITY_BONUS) BILL_QUANTITY_BONUS, ";
                strSQL = strSQL + "INV_STOCKITEM.STOCKGROUP_NAME, INV_STOCKITEM.STOCKCATEGORY_NAME,";
                strSQL = strSQL + "ACC_LEDGER_Z_D_A.AREA  , ACC_LEDGER_Z_D_A.DIVISION , ACC_LEDGER_Z_D_A.ZONE  ";
                strSQL = strSQL + "FROM ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER ACC_COMPANY_VOUCHER INNER JOIN ACC_LEDGER ACC_LEDGER ON ACC_COMPANY_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME INNER JOIN ACC_BILL_TRAN ACC_BILL_TRAN ON  ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_REF_NO = ACC_BILL_TRAN.COMP_REF_NO INNER JOIN ACC_LEDGER_Z_D_A ACC_LEDGER_Z_D_A ON ACC_LEDGER.LEDGER_NAME = ACC_LEDGER_Z_D_A.LEDGER_NAME INNER JOIN ";
                strSQL = strSQL + "INV_STOCKITEM INV_STOCKITEM ON ACC_BILL_TRAN.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME ";
                //strSQL = strSQL + "WHERE(ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN convert(datetime,'01-03-2019',103)  AND convert(datetime,'31-03-2019',103) )";
                strSQL = strSQL + "WHERE ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + "  AND " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE=16 ";
                strSQL = strSQL + "AND INV_STOCKITEM.STOCKGROUP_NAME<>'Mother Patent' AND INV_STOCKITEM.STOCKGROUP_NAME<>'Unani Patent' ";

                if (intMode == 1)
                {
                    strSQL = strSQL + "AND ACC_LEDGER.LEDGER_NAME ='" + strSelction2 + "' ";
                }
                if (blngAccessControl == true)
                {
                    strSQL = strSQL + "AND  ACC_LEDGER_Z_D_A.DIVISION in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "') ";
                }

                strSQL = strSQL + "GROUP BY ACC_LEDGER.LEDGER_NAME_MERZE,";
                strSQL = strSQL + "INV_STOCKITEM.STOCKGROUP_NAME, INV_STOCKITEM.STOCKCATEGORY_NAME,";
                strSQL = strSQL + "ACC_LEDGER_Z_D_A.AREA  , ACC_LEDGER_Z_D_A.DIVISION , ACC_LEDGER_Z_D_A.ZONE ";
                strSQL = strSQL + "ORDER BY ";
                strSQL = strSQL + "ACC_LEDGER_Z_D_A.AREA , ACC_LEDGER_Z_D_A.DIVISION, ACC_LEDGER_Z_D_A.ZONE, ACC_LEDGER.LEDGER_NAME_MERZE, INV_STOCKITEM.STOCKGROUP_NAME, INV_STOCKITEM.STOCKCATEGORY_NAME ";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {

                    RProductSales oLedg = new RProductSales();
                    oLedg.strLedgerGroupPrimary = dr["ZONE"].ToString();
                    oLedg.strLedgerGroupParent = dr["DIVISION"].ToString();
                    oLedg.strLedgerGroupName = dr["AREA"].ToString();
                    oLedg.strLedgername = dr["LEDGER_NAME_MERZE"].ToString();
                    oLedg.strStockCategoryName = dr["STOCKCATEGORY_NAME"].ToString();
                    oLedg.strStockGroupName = dr["STOCKGROUP_NAME"].ToString();
                    oLedg.DblBillQty = Convert.ToDouble(dr["BILL_QUANTITY"].ToString());
                    oLedg.DblBillQtyBonus = Convert.ToDouble(dr["BILL_QUANTITY_BONUS"].ToString());
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RProductSales oLedg = new RProductSales();
                    oLedg.strLedgerGroupPrimary = "";
                    oLedg.strLedgerGroupParent = "";
                    oLedg.strLedgerGroupName = "";
                    oLedg.strLedgername = "";
                    oLedg.strStockCategoryName = "";
                    oLedg.strStockGroupName = "";
                    oLedg.DblBillQty = 0;
                    oLedg.DblBillQtyBonus = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }
        #endregion
        #region Designation Category
        public List<RProductSales> mGetDesignationCategory(string strDeComID, string strFdate, string strTDate, string strBranchId, string strString, int intMode, bool blngAccessControl, string strUserName)
        {
            //1=intmode
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;


                if (strString != null)
                {
                    if (Utility.Left(strString, 2).ToUpper() == "DS" || Utility.Left(strString, 2).ToUpper() == "RS")
                    {
                        intMode = 2;
                    }
                    else if (Utility.Left(strString, 2).ToUpper() == "AM" || Utility.Left(strString, 2).ToUpper() == "FM" || Utility.Left(strString, 2).ToUpper() == "AH")
                    {
                        intMode = 5;
                    }

                    else if (strString.Contains("ZONE") == true)
                    {
                        intMode = 4;
                    }
                    else if (strString == "Sundry Debtors")
                    {
                        intMode = 0;
                    }
                    else
                    {
                        intMode = 6;
                    }
                }
                List<RProductSales> ooAccLedger = new List<RProductSales>();

                strSQL = "SELECT INV_STOCKITEM.STOCKITEM_NAME, INV_STOCKITEM.STOCKITEM_ALIAS,INV_STOCKITEM.POWER_CLASS, INV_STOCKITEM.STOCKGROUP_NAME, INV_STOCKITEM.STOCKCATEGORY_NAME, ";
                strSQL = strSQL + "SUM(ACC_BILL_TRAN.BILL_QUANTITY) AS BILL_QUANTITY, SUM(ACC_BILL_TRAN.BILL_QUANTITY_BONUS) AS BILL_QUANTITY_BONUS, ACC_LEDGER.LEDGER_PARENT_GROUP  ";
                strSQL = strSQL + "FROM ";
                strSQL = strSQL + "INV_STOCKITEM INV_STOCKITEM INNER JOIN ACC_BILL_TRAN ACC_BILL_TRAN ON INV_STOCKITEM.STOCKITEM_NAME = ACC_BILL_TRAN.STOCKITEM_NAME INNER JOIN ACC_VOUCHER ACC_VOUCHER ";
                strSQL = strSQL + "ON ACC_BILL_TRAN.COMP_REF_NO = ACC_VOUCHER.COMP_REF_NO INNER JOIN ACC_LEDGER ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME INNER JOIN ACC_LEDGER_Z_D_A ACC_LEDGER_Z_D_A ";
                strSQL = strSQL + "ON ACC_LEDGER.LEDGER_NAME = ACC_LEDGER_Z_D_A.LEDGER_NAME  ";
                strSQL = strSQL + " AND (ACC_BILL_TRAN.BRANCH_ID = '" + strBranchId + "') AND (ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN(" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "AND ACC_BILL_TRAN.COMP_VOUCHER_TYPE=16 AND (ACC_LEDGER.LEDGER_GROUP_NAME <>'' or  ACC_LEDGER.LEDGER_GROUP_NAME is null) ";


                //if (strString != "")
                //{
                //    if (intMode == 1)
                //    {
                //        strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_PARENT_GROUP = '" + strString + "') ";
                //    }
                //    else if (intMode == 2)
                //    {
                //        strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A.AREA  = '" + strString + "') ";
                //    }
                //    else if (intMode == 3)
                //    {
                //        strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A.DIVISION   = '" + strString + "') ";
                //    }
                //    else if (intMode == 4)
                //    {

                //        strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A.ZONE = '" + strString + "') ";
                //    }

                //    //strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A.GR_NAME = '" + strString + "') ";
                //}
                if (strString != "")
                {
                    if (intMode == 2)
                    {
                        strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A.DIVISION  = '" + strString + "') ";
                    }
                    else if (intMode == 1)
                    {
                        strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_PARENT_GROUP = '" + strString + "') ";
                    }
                    else if (intMode == 5)
                    {
                        strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A.AREA  = '" + strString + "') ";
                    }
                    else if (intMode == 3)
                    {
                        strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_NAME   = '" + strString + "') ";
                    }
                    else if (intMode == 4)
                    {

                        strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A.ZONE = '" + strString + "') ";
                    }

                    //strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A.GR_NAME = '" + strString + "') ";
                }
                strSQL = strSQL + "GROUP BY INV_STOCKITEM.STOCKITEM_NAME,INV_STOCKITEM.STOCKITEM_ALIAS, INV_STOCKITEM.POWER_CLASS, INV_STOCKITEM.STOCKGROUP_NAME, INV_STOCKITEM.STOCKCATEGORY_NAME,ACC_LEDGER.LEDGER_PARENT_GROUP ";
                strSQL = strSQL + "ORDER BY INV_STOCKITEM.STOCKGROUP_NAME,INV_STOCKITEM.STOCKITEM_ALIAS,INV_STOCKITEM.STOCKITEM_NAME ";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RProductSales oLedg = new RProductSales();

                    oLedg.strStockItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.strStockGroupName = dr["STOCKGROUP_NAME"].ToString();
                    oLedg.strPowrClass = dr["POWER_CLASS"].ToString();
                    oLedg.strStockCategoryName = dr["STOCKCATEGORY_NAME"].ToString();
                    oLedg.DblBillQty = Convert.ToDouble(dr["BILL_QUANTITY"].ToString());
                    oLedg.DblBillQtyBonus = Convert.ToDouble(dr["BILL_QUANTITY_BONUS"].ToString());
                    oLedg.strLedgername = dr["LEDGER_PARENT_GROUP"].ToString();
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RProductSales oLedg = new RProductSales();
                    oLedg.strStockItemName = "";
                    oLedg.strStockGroupName = "";
                    oLedg.strPowrClass = "";
                    oLedg.strStockCategoryName = "";
                    oLedg.DblBillQty = 0;
                    oLedg.DblBillQtyBonus = 0;
                    oLedg.strLedgername = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }

        #endregion
        #region Product Sales
        public List<RSalesPurchase> mGetStatisticalProductSalesSummary(string strDeComID, string strFdate, string strTDate, string strBranchId, int intMode, bool blngAccessControl, string strUserName)
        {
            int intMode2 = 0;
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RSalesPurchase> ooAccLedger = new List<RSalesPurchase>();


                strSQL = "select V.LEDGER_NAME,G.ZONE,G.DIVISION,G.AREA,G.LEDGER_NAME_MERZE ,sum(t.BILL_QUANTITY) as SalesQty ,sum(t.BILL_QUANTITY_BONUS)as BonusQty ";
                strSQL = strSQL + "from ACC_COMPANY_VOUCHER V,ACC_LEDGER_Z_D_A G,ACC_BILL_TRAN T ";
                strSQL = strSQL + "WHERE(V.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") ";
                strSQL = strSQL + "AND (" + Utility.cvtSQLDateString(strTDate) + ")) AND V.COMP_VOUCHER_TYPE=16  and v.LEDGER_NAME= G.LEDGER_NAME and V.COMP_REF_NO= T.COMP_REF_NO and t.BRANCH_ID='" + strBranchId + "' ";
                strSQL = strSQL + "group by V.LEDGER_NAME,G.ZONE,G.DIVISION,G.AREA,G.LEDGER_NAME_MERZE ";


                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();

                while (dr.Read())
                {
                    RSalesPurchase oLedg = new RSalesPurchase();
                    oLedg.dblBilQty = Convert.ToDouble(dr["SalesQty"].ToString());
                    oLedg.dblBonusQty = Convert.ToDouble(dr["BonusQty"].ToString());
                    oLedg.strLedgerGroupParent = dr["ZONE"].ToString();
                    oLedg.strLedgerGroupPrimary = dr["DIVISION"].ToString();
                    oLedg.strGRName = dr["AREA"].ToString();
                    oLedg.strLedgerNameMerze = dr["LEDGER_NAME_MERZE"].ToString();
                    ooAccLedger.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RSalesPurchase oLedg = new RSalesPurchase();
                    oLedg.dblBilQty = 0;
                    oLedg.dblBonusQty = 0;
                    oLedg.strLedgerGroupParent = "";
                    oLedg.strLedgerGroupPrimary = "";
                    oLedg.strGRName = "";
                    oLedg.strLedgerNameMerze = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }
        public List<RSalesPurchase> mGetProductsales(string strDeComID, string strFdate, string strTDate, string strBranchId, string Strsting,
                                                     string Strsting2, string strSelction, int intmode, bool blngAccessControl, string strUserName)
        {
            ///intmode  STOCKITEM = 4, COMP_REF_NO=3 , SalesReport=5
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RSalesPurchase> ooAccLedger = new List<RSalesPurchase>();
                SqlCommand cmdInsert = new SqlCommand();


                if (intmode <= 4)
                {
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;
                    strSQL = "DELETE FROM INV_STOCK_STATTISTICAL_TEMP ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO INV_STOCK_STATTISTICAL_TEMP(ZONE,DIVISION,AREA,LEDGER_NAME_MERZE,BILL_QUANTITY,BILL_QUANTITY_BONUS,BILL_AMOUNT,LEDGER_ADDRESS1,STOCKITEM_NAME,POWER_CLASS,STOCKGROUP_NAME,STOCKCATEGORY_NAME,SEQ_NO) ";
                    strSQL = strSQL + "SELECT ";
                    strSQL = strSQL + "ACC_LEDGER_Z_D_A.ZONE,ACC_LEDGER_Z_D_A.DIVISION,ACC_LEDGER_Z_D_A.AREA , ACC_LEDGER.LEDGER_NAME_MERZE , sum(ACC_BILL_TRAN.BILL_QUANTITY)BILL_QUANTITY, ";
                    strSQL = strSQL + "sum(ACC_BILL_TRAN.BILL_QUANTITY_BONUS)BILL_QUANTITY_BONUS, sum(ACC_BILL_TRAN.BILL_AMOUNT) BILL_AMOUNT,";
                    strSQL = strSQL + "ACC_LEDGER.LEDGER_ADDRESS1, INV_STOCKITEM.STOCKITEM_NAME, INV_STOCKITEM.POWER_CLASS, INV_STOCKITEM.STOCKGROUP_NAME,INV_STOCKITEM.STOCKCATEGORY_NAME,'1'  ";
                    strSQL = strSQL + "FROM ACC_LEDGER,ACC_BILL_TRAN,ACC_COMPANY_VOUCHER,ACC_LEDGER_Z_D_A,INV_STOCKITEM WHERE ACC_LEDGER.LEDGER_NAME =ACC_LEDGER_Z_D_A.LEDGER_NAME AND ACC_LEDGER.LEDGER_NAME =ACC_COMPANY_VOUCHER.LEDGER_NAME ";
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_REF_NO =ACC_BILL_TRAN.COMP_REF_NO AND INV_STOCKITEM.STOCKITEM_NAME=ACC_BILL_TRAN.STOCKITEM_NAME   AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE=16 ";
                    strSQL = strSQL + " AND  ACC_LEDGER_Z_D_A.DIVISION in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "') ";
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.BRANCH_ID ='" + strBranchId + "' ";

                    if (Strsting2 != "")
                    {

                        if (intmode == 4)
                        {
                            strSQL = strSQL + "AND ACC_BILL_TRAN.STOCKITEM_NAME IN (" + Strsting2 + ") ";
                        }
                        else
                        {
                            strSQL = strSQL + "AND ACC_BILL_TRAN.COMP_REF_NO IN (" + Strsting2 + ") ";
                        }
                    }
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")  ";
                    if (strSelction != null)
                    {
                        strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.LEDGER_NAME_MERZE = '" + strSelction + "' ";
                    }
                    if (blngAccessControl == true)
                    {
                        strSQL = strSQL + " AND  Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
                    }

                    strSQL = strSQL + " AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE =16 ";
                    strSQL = strSQL + " AND ACC_BILL_TRAN.STOCKGROUP_NAME not in ('Dilution') ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE,ACC_LEDGER_Z_D_A.DIVISION,ACC_LEDGER_Z_D_A.AREA,ACC_LEDGER.LEDGER_NAME_MERZE,ACC_LEDGER.LEDGER_ADDRESS1, ";
                    strSQL = strSQL + "INV_STOCKITEM.STOCKITEM_NAME, INV_STOCKITEM.POWER_CLASS, INV_STOCKITEM.STOCKGROUP_NAME,INV_STOCKITEM.STOCKCATEGORY_NAME  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO INV_STOCK_STATTISTICAL_TEMP(ZONE,DIVISION,AREA,LEDGER_NAME_MERZE,BILL_QUANTITY,BILL_QUANTITY_BONUS,BILL_AMOUNT,LEDGER_ADDRESS1,STOCKITEM_NAME,POWER_CLASS,STOCKGROUP_NAME,STOCKCATEGORY_NAME,SEQ_NO) ";
                    strSQL = strSQL + "SELECT ";
                    strSQL = strSQL + "ACC_LEDGER_Z_D_A.ZONE,ACC_LEDGER_Z_D_A.DIVISION,ACC_LEDGER_Z_D_A.AREA , ACC_LEDGER.LEDGER_NAME_MERZE , sum(ACC_BILL_TRAN.BILL_QUANTITY)BILL_QUANTITY, ";
                    strSQL = strSQL + "sum(ACC_BILL_TRAN.BILL_QUANTITY_BONUS)BILL_QUANTITY_BONUS, sum(ACC_BILL_TRAN.BILL_AMOUNT) BILL_AMOUNT,";
                    strSQL = strSQL + "ACC_LEDGER.LEDGER_ADDRESS1,INV_STOCKITEM.POWER_CLASS,INV_STOCKITEM.POWER_CLASS, INV_STOCKITEM.STOCKGROUP_NAME,INV_STOCKITEM.STOCKCATEGORY_NAME,'2'  ";
                    strSQL = strSQL + "FROM ACC_LEDGER,ACC_BILL_TRAN,ACC_COMPANY_VOUCHER,ACC_LEDGER_Z_D_A,INV_STOCKITEM WHERE ACC_LEDGER.LEDGER_NAME =ACC_LEDGER_Z_D_A.LEDGER_NAME AND ACC_LEDGER.LEDGER_NAME =ACC_COMPANY_VOUCHER.LEDGER_NAME ";
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_REF_NO =ACC_BILL_TRAN.COMP_REF_NO AND INV_STOCKITEM.STOCKITEM_NAME=ACC_BILL_TRAN.STOCKITEM_NAME   AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE=16 ";
                    strSQL = strSQL + " AND  ACC_LEDGER_Z_D_A.DIVISION in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "') ";
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.BRANCH_ID ='" + strBranchId + "' ";

                    if (Strsting2 != "")
                    {
                        if (intmode == 4)
                        {
                            strSQL = strSQL + "AND ACC_BILL_TRAN.STOCKITEM_NAME IN (" + Strsting2 + ") ";
                        }
                        else
                        {
                            strSQL = strSQL + "AND ACC_BILL_TRAN.COMP_REF_NO IN (" + Strsting2 + ") ";
                        }
                    }
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")  ";
                    if (strSelction != null)
                    {
                        strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.LEDGER_NAME_MERZE = '" + strSelction + "' ";
                    }
                    if (blngAccessControl == true)
                    {
                        strSQL = strSQL + " AND  Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + strUserName + "')";
                    }

                    strSQL = strSQL + " AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE =16 ";
                    strSQL = strSQL + " AND ACC_BILL_TRAN.STOCKGROUP_NAME in ('Dilution') ";
                    strSQL = strSQL + "GROUP BY ACC_LEDGER_Z_D_A.ZONE,ACC_LEDGER_Z_D_A.DIVISION,ACC_LEDGER_Z_D_A.AREA,ACC_LEDGER.LEDGER_NAME_MERZE,ACC_LEDGER.LEDGER_ADDRESS1, ";
                    strSQL = strSQL + "INV_STOCKITEM.STOCKITEM_NAME, INV_STOCKITEM.POWER_CLASS, INV_STOCKITEM.STOCKGROUP_NAME,INV_STOCKITEM.STOCKCATEGORY_NAME  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();


                    strSQL = "SELECT ZONE,DIVISION,AREA,LEDGER_NAME_MERZE,BILL_QUANTITY,BILL_QUANTITY_BONUS,BILL_AMOUNT,LEDGER_ADDRESS1,STOCKITEM_NAME,POWER_CLASS,STOCKGROUP_NAME,STOCKCATEGORY_NAME,SEQ_NO FROM INV_STOCK_STATTISTICAL_TEMP ";
                    strSQL = strSQL + " ORDER BY ZONE,DIVISION,AREA , LEDGER_NAME_MERZE,STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        RSalesPurchase oLedg = new RSalesPurchase();
                        oLedg.strLedgerGroupParent = dr["ZONE"].ToString();
                        oLedg.strLedgerGroupPrimary = dr["DIVISION"].ToString();
                        oLedg.strGroupAMFM = dr["AREA"].ToString();
                        oLedg.strLedgerName = dr["LEDGER_NAME_MERZE"].ToString();
                        //oLedg.strTerritoryCode = dr["TERITORRY_CODE"].ToString();
                        //oLedg.strTerritory = dr["TERRITORRY_NAME"].ToString();
                        oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                        oLedg.strStockGroupName = dr["STOCKGROUP_NAME"].ToString();
                        oLedg.dblBilQty = Convert.ToDouble(dr["BILL_QUANTITY"].ToString());
                        oLedg.dblFROM_QTY = Convert.ToDouble(dr["BILL_QUANTITY_BONUS"].ToString());
                        oLedg.strBILL_Per = dr["STOCKCATEGORY_NAME"].ToString();
                        oLedg.dblBillAmount = Convert.ToDouble(dr["BILL_AMOUNT"].ToString());
                        oLedg.strLedgerNameMerze = dr["LEDGER_NAME_MERZE"].ToString();

                        ooAccLedger.Add(oLedg);

                    }
                    if (!dr.HasRows)
                    {
                        RSalesPurchase oLedg = new RSalesPurchase();
                        oLedg.strLedgerGroupPrimary = "";
                        oLedg.strLedgerGroupParent = "";
                        oLedg.strLedgerName = "";
                        oLedg.strTerritoryCode = "";
                        oLedg.strTerritory = "";
                        oLedg.strGroupAMFM = "";
                        oLedg.strItemName = "";
                        oLedg.strStockGroupName = "";
                        oLedg.dblBilQty = 0;
                        oLedg.dblBonusQty = 0;
                        oLedg.strBILL_Per = "";
                        oLedg.dblBillAmount = 0;
                        ooAccLedger.Add(oLedg);
                    }
                    dr.Close();
                    gcnMain.Close();
                    return ooAccLedger;
                }

                if (intmode == 5)
                {
                    strSQL = "SELECT C.COMP_REF_NO  FROM ACC_COMPANY_VOUCHER C,ACC_LEDGER L ";
                    strSQL = strSQL + "WHERE (L.LEDGER_NAME_MERZE = '" + strSelction + "') and  c.COMP_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSALES_INVOICE + " ";
                    strSQL = strSQL + "AND c.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") and C.LEDGER_NAME=L.LEDGER_NAME ";
                    strSQL = strSQL + " Order by C.COMP_REF_NO  ";
                }
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RSalesPurchase oLedg = new RSalesPurchase();
                    {
                        oLedg.strRefNo = dr["COMP_REF_NO"].ToString();
                        ooAccLedger.Add(oLedg);
                    }
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }
        #endregion
        #region MpoList
        public List<RSalesPurchase> mGetMpoListZone(string strDeComID)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                List<RSalesPurchase> ooAccLedger = new List<RSalesPurchase>();
                strSQL = "select 'Total Zone :' HEADING ,count(distinct ZONE ) total from MPOLIST_TEMP where ZONE like '%Zone%' ";
                strSQL = strSQL + "union all ";
                strSQL = strSQL + "SELECT  'Total Divisional Head :' HEADING , MPOLIST_ZONE.ZONE_TOTAL total ";
                strSQL = strSQL + " FROM MPOLIST_TEMP,MPOLIST_ZONE WHERE MPOLIST_TEMP.ZONE =MPOLIST_ZONE.ZONE ";
                strSQL = strSQL + "group  BY MPOLIST_TEMP.ZONE ,MPOLIST_ZONE.ZONE_TOTAL ";
                strSQL = strSQL + "union all ";
                strSQL = strSQL + "SELECT  'Total Area Head :' HEADING , MPOLIST_DIVISION.DIVISION_TOTAL total ";
                strSQL = strSQL + "FROM MPOLIST_TEMP,MPOLIST_DIVISION WHERE MPOLIST_TEMP.DIVISON =MPOLIST_DIVISION.DIVISON ";
                strSQL = strSQL + "group  BY MPOLIST_TEMP.DIVISON ,MPOLIST_DIVISION.DIVISION_TOTAL ";
                strSQL = strSQL + "union all ";
                strSQL = strSQL + " SELECT 'Total MPO :' HEADING,  count(MPOLIST_TEMP.LEDGER_NAME) total ";
                strSQL = strSQL + "FROM MPOLIST_TEMP   ";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RSalesPurchase oLedg = new RSalesPurchase();
                    oLedg.strLedgerGroupParent = dr["HEADING"].ToString();
                    oLedg.lngZoneTotal = Convert.ToInt64(dr["total"].ToString());
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RSalesPurchase oLedg = new RSalesPurchase();
                    oLedg.strLedgerGroupParent = "";
                    oLedg.lngZoneTotal = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }

        public List<RSalesPurchase> mGetMpoListNew(string strDeComID, string strFdate, string strTDate, string strBranchId, string strStrtring, int intmode, int intStatus)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                //1=Group,3=gropParent,2=primary
                if (strStrtring != null)
                {
                    if (Utility.Left(strStrtring, 1).ToUpper() == "D" || Utility.Left(strStrtring, 1).ToUpper() == "R")
                    {
                        intmode = 2;
                    }
                    else if (Utility.Left(strStrtring, 1).ToUpper() == "A")
                    {
                        intmode = 7;
                    }
                    else if (Utility.Left(strStrtring, 1).ToUpper() == "F")
                    {
                        intmode = 5;
                    }
                    else if (strStrtring.Contains("ZONE") == true)
                    {
                        intmode = 4;
                    }
                    else if (Utility.Left(strStrtring, 1).ToUpper() == "X")
                    {
                        intmode = 2;
                    }
                    else if (strStrtring == "Sundry Debtors")
                    {
                        intmode = 0;
                    }
                    else
                    {
                        intmode = 1;
                    }
                }

                List<RSalesPurchase> ooAccLedger = new List<RSalesPurchase>();

                if (intmode != 4)
                {
                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;
                    strSQL = "DELETE FROM MPOLIST_TEMP ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM MPOLIST_DIVISION ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM MPOLIST_ZONE ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM MPOLIST_AREA ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO MPOLIST_TEMP(ZONE,DIVISON,AREA,LEDGER_NAME,MOBILE1,MOBILE2,TERITORRY_CODE,TERITORRY_NAME,LEDGER_CLASS) ";
                    strSQL = strSQL + " SELECT v.ZONE  AS zone, v.DIVISION  AS Division, V.AREA  AS area, l.LEDGER_NAME,l.LEDGER_PHONE,l.LEDGER_CONTACT, l.TERITORRY_CODE, l.TERRITORRY_NAME, ";
                    strSQL = strSQL + "l.LEDGER_CLASS ";
                    strSQL = strSQL + "FROM ACC_LEDGER_Z_D_A v,ACC_LEDGER L  where l.LEDGER_NAME  =v.LEDGER_NAME ";
                    strSQL = strSQL + "AND  (l.BRANCH_ID = '" + strBranchId + "') AND (l.INSERT_DATE BETWEEN  (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ) ";
                    if (intStatus < 2)
                    {
                        strSQL = strSQL + " AND L.LEDGER_STATUS =" + intStatus + " ";
                    }
                    if (intmode == 1)
                    {
                        strSQL = strSQL + "AND (v.LEDGER_NAME = '" + strStrtring + "') ";
                    }
                    else if (intmode == 5)
                    {
                        strSQL = strSQL + "AND (v.AREA = '" + strStrtring + "') ";
                    }
                    else if (intmode == 7)
                    {
                        strSQL = strSQL + "AND (v.AREA = '" + strStrtring + "') ";
                    }
                    else if (intmode == 2)
                    {
                        //strSQL = strSQL + "AND (v.AREA  = '" + strStrtring + "') ";
                        strSQL = strSQL + "and (v.DIVISION  = '" + strStrtring + "') ";
                    }
                    else if (intmode == 3)
                    {
                        strSQL = strSQL + "AND (l.LEDGER_NAME   = '" + strStrtring + "') ";
                    }
                    else if (intmode == 4)
                    {

                        strSQL = strSQL + "AND (v.ZONE = '" + strStrtring + "') ";
                    }
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO MPOLIST_ZONE(ZONE,ZONE_TOTAL) ";
                    strSQL = strSQL + "select zone,COUNT(distinct division) from ACC_LEDGER_Z_D_A  ";
                    strSQL = strSQL + "group by zone ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();


                    strSQL = "INSERT INTO MPOLIST_DIVISION(DIVISON,DIVISION_TOTAL)";
                    strSQL = strSQL + " select division,COUNT(distinct area) from ACC_LEDGER_Z_D_A ";
                    strSQL = strSQL + "group by division";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();


                    strSQL = "INSERT INTO MPOLIST_AREA(AREA,AREA_TOTAL) ";
                    strSQL = strSQL + "SELECT  V.AREA , count(distinct l.LEDGER_NAME_MERZE) LEDGER_NAME ";
                    strSQL = strSQL + "FROM ACC_LEDGER_Z_D_A v,ACC_LEDGER L  where l.LEDGER_NAME  =v.LEDGER_NAME  ";
                    strSQL = strSQL + "group by V.AREA ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();
                    //strSQL = "SELECT MPOLIST_TEMP.ZONE  , MPOLIST_TEMP.DIVISON Division, MPOLIST_TEMP.AREA  , MPOLIST_TEMP.LEDGER_NAME,MPOLIST_TEMP.MOBILE1,MPOLIST_TEMP.MOBILE2, ";
                    //strSQL = strSQL + "MPOLIST_TEMP.MOBILE1 ,MPOLIST_TEMP.MOBILE2, MPOLIST_TEMP.TERITORRY_CODE, MPOLIST_TEMP.TERITORRY_NAME , ";
                    //strSQL = strSQL + "MPOLIST_TEMP.LEDGER_CLASS,MPOLIST_TEMP.CT ,MPOLIST_ZONE.ZONE_TOTAL ,MPOLIST_DIVISION.DIVISION_TOTAL   FROM MPOLIST_TEMP,MPOLIST_ZONE,MPOLIST_DIVISION ";
                    //strSQL = strSQL + "WHERE MPOLIST_TEMP.ZONE =MPOLIST_ZONE.ZONE AND MPOLIST_TEMP.DIVISON = MPOLIST_DIVISION.DIVISON ";



                    //if (intmode == 0)
                    //{
                    //    strSQL = strSQL + "ORDER BY MPOLIST_TEMP.ZONE, MPOLIST_TEMP.DIVISON,MPOLIST_TEMP.AREA,MPOLIST_TEMP.TERITORRY_CODE ";
                    //}
                    //else
                    //{
                    //    strSQL = strSQL + "ORDER BY MPOLIST_TEMP.TERITORRY_CODE ";
                    //}

                    strSQL = "SELECT MPOLIST_TEMP.ZONE, MPOLIST_TEMP.DIVISON AS Division, MPOLIST_TEMP.AREA, MPOLIST_TEMP.LEDGER_NAME, ";
                    strSQL = strSQL + "MPOLIST_TEMP.MOBILE1, MPOLIST_TEMP.MOBILE2, MPOLIST_TEMP.TERITORRY_CODE, ";
                    strSQL = strSQL + "MPOLIST_TEMP.TERITORRY_NAME, MPOLIST_TEMP.LEDGER_CLASS, MPOLIST_TEMP.CT, MPOLIST_ZONE.ZONE_TOTAL, ";
                    strSQL = strSQL + "MPOLIST_DIVISION.DIVISION_TOTAL , ZM.GR_MOBILE_NO AS ZoneCorporet,  ";
                    strSQL = strSQL + "ZM.GR_CONTACT_NO AS ZonePersonal, DM.GR_MOBILE_NO AS DSMCorporet, DM.GR_CONTACT_NO AS DSMPersonal, Area.GR_MOBILE_NO AS AreaCorporet, Area.GR_CONTACT_NO AS AreaPersonal ";
                    strSQL = strSQL + "FROM  MPOLIST_TEMP INNER JOIN ";
                    strSQL = strSQL + "MPOLIST_ZONE ON MPOLIST_TEMP.ZONE = MPOLIST_ZONE.ZONE INNER JOIN ";
                    strSQL = strSQL + "MPOLIST_DIVISION ON MPOLIST_TEMP.DIVISON = MPOLIST_DIVISION.DIVISON LEFT OUTER JOIN ";
                    strSQL = strSQL + "ACC_LEDGERGROUP AS Area ON MPOLIST_TEMP.AREA = Area.GR_NAME LEFT OUTER JOIN ";
                    strSQL = strSQL + "ACC_LEDGERGROUP AS DM ON MPOLIST_DIVISION.DIVISON = DM.GR_NAME LEFT OUTER JOIN ";
                    strSQL = strSQL + " ACC_LEDGERGROUP AS ZM ON MPOLIST_ZONE.ZONE = ZM.GR_NAME ";
                    if (intmode == 0)
                    {
                        strSQL = strSQL + "ORDER BY MPOLIST_TEMP.ZONE, MPOLIST_TEMP.DIVISON,MPOLIST_TEMP.AREA,MPOLIST_TEMP.TERITORRY_CODE ";
                    }
                    else if (intmode == 10)
                    {
                        strSQL = strSQL + "ORDER BY  MPOLIST_TEMP.LEDGER_CLASS, MPOLIST_TEMP.TERITORRY_CODE ";
                    }
                    else
                    {
                        strSQL = strSQL + "ORDER BY MPOLIST_TEMP.TERITORRY_CODE ";
                    }
                }
                else
                {

                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;
                    strSQL = "DELETE FROM MPOLIST_TEMP ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM MPOLIST_DIVISION ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM MPOLIST_ZONE ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM MPOLIST_AREA ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO MPOLIST_TEMP(ZONE,DIVISON,AREA,LEDGER_NAME,MOBILE1,MOBILE2,TERITORRY_CODE,TERITORRY_NAME,LEDGER_CLASS) ";
                    strSQL = strSQL + " SELECT v.ZONE  AS zone, v.DIVISION  AS Division, V.AREA  AS area, l.LEDGER_NAME,l.LEDGER_PHONE,l.LEDGER_CONTACT, l.TERITORRY_CODE, l.TERRITORRY_NAME, ";
                    strSQL = strSQL + "l.LEDGER_CLASS ";
                    strSQL = strSQL + "FROM ACC_LEDGER_Z_D_A v,ACC_LEDGER L  where l.LEDGER_NAME  =v.LEDGER_NAME ";
                    strSQL = strSQL + "AND  (l.BRANCH_ID = '" + strBranchId + "') AND (l.INSERT_DATE BETWEEN  (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ) ";
                    if (intStatus < 2)
                    {
                        strSQL = strSQL + " AND L.LEDGER_STATUS =" + intStatus + " ";
                    }
                    if (intmode == 1)
                    {
                        strSQL = strSQL + "AND (v.LEDGER_NAME = '" + strStrtring + "') ";
                    }
                    else if (intmode == 5)
                    {
                        strSQL = strSQL + "AND (v.AREA = '" + strStrtring + "') ";
                    }
                    else if (intmode == 2)
                    {
                        //strSQL = strSQL + "AND (v.AREA  = '" + strStrtring + "') ";
                        strSQL = strSQL + "and (v.DIVISION  = '" + strStrtring + "') ";
                    }
                    else if (intmode == 3)
                    {
                        strSQL = strSQL + "AND (l.LEDGER_NAME   = '" + strStrtring + "') ";
                    }
                    else if (intmode == 4)
                    {

                        strSQL = strSQL + "AND (v.ZONE = '" + strStrtring + "') ";
                    }
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO MPOLIST_ZONE(ZONE,ZONE_TOTAL) ";
                    strSQL = strSQL + "select zone,COUNT(distinct division) from ACC_LEDGER_Z_D_A  ";
                    strSQL = strSQL + "group by zone ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();


                    strSQL = "INSERT INTO MPOLIST_DIVISION(DIVISON,DIVISION_TOTAL)";
                    strSQL = strSQL + " select division,COUNT(distinct area) from ACC_LEDGER_Z_D_A ";
                    strSQL = strSQL + "group by division";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();


                    strSQL = "INSERT INTO MPOLIST_AREA(AREA,AREA_TOTAL) ";
                    strSQL = strSQL + "SELECT  V.AREA , count(distinct l.LEDGER_NAME_MERZE) LEDGER_NAME ";
                    strSQL = strSQL + "FROM ACC_LEDGER_Z_D_A v,ACC_LEDGER L  where l.LEDGER_NAME  =v.LEDGER_NAME  ";
                    strSQL = strSQL + "group by V.AREA ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();
                    //strSQL = "SELECT MPOLIST_TEMP.ZONE  , MPOLIST_TEMP.DIVISON Division, MPOLIST_TEMP.AREA  , MPOLIST_TEMP.LEDGER_NAME,MPOLIST_TEMP.MOBILE1,MPOLIST_TEMP.MOBILE2, ";
                    //strSQL = strSQL + "MPOLIST_TEMP.MOBILE1 ,MPOLIST_TEMP.MOBILE2, MPOLIST_TEMP.TERITORRY_CODE, MPOLIST_TEMP.TERITORRY_NAME , ";
                    //strSQL = strSQL + "MPOLIST_TEMP.LEDGER_CLASS,MPOLIST_TEMP.CT ,MPOLIST_ZONE.ZONE_TOTAL ,MPOLIST_DIVISION.DIVISION_TOTAL   FROM MPOLIST_TEMP,MPOLIST_ZONE,MPOLIST_DIVISION ";
                    //strSQL = strSQL + "WHERE MPOLIST_TEMP.ZONE =MPOLIST_ZONE.ZONE AND MPOLIST_TEMP.DIVISON = MPOLIST_DIVISION.DIVISON ";


                    strSQL = "SELECT MPOLIST_TEMP.ZONE, MPOLIST_TEMP.DIVISON AS Division, MPOLIST_TEMP.AREA, MPOLIST_TEMP.LEDGER_NAME, ";
                    strSQL = strSQL + "MPOLIST_TEMP.MOBILE1, MPOLIST_TEMP.MOBILE2, MPOLIST_TEMP.TERITORRY_CODE, ";
                    strSQL = strSQL + "MPOLIST_TEMP.TERITORRY_NAME, MPOLIST_TEMP.LEDGER_CLASS, MPOLIST_TEMP.CT, MPOLIST_ZONE.ZONE_TOTAL, ";
                    strSQL = strSQL + "MPOLIST_DIVISION.DIVISION_TOTAL , ZM.GR_MOBILE_NO AS ZoneCorporet,  ";
                    strSQL = strSQL + "ZM.GR_CONTACT_NO AS ZonePersonal, DM.GR_MOBILE_NO AS DSMCorporet, DM.GR_CONTACT_NO AS DSMPersonal, Area.GR_MOBILE_NO AS AreaCorporet, Area.GR_CONTACT_NO AS AreaPersonal ";
                    strSQL = strSQL + "FROM  MPOLIST_TEMP INNER JOIN ";
                    strSQL = strSQL + "MPOLIST_ZONE ON MPOLIST_TEMP.ZONE = MPOLIST_ZONE.ZONE INNER JOIN ";
                    strSQL = strSQL + "MPOLIST_DIVISION ON MPOLIST_TEMP.DIVISON = MPOLIST_DIVISION.DIVISON LEFT OUTER JOIN ";
                    strSQL = strSQL + "ACC_LEDGERGROUP AS Area ON MPOLIST_TEMP.AREA = Area.GR_NAME LEFT OUTER JOIN ";
                    strSQL = strSQL + "ACC_LEDGERGROUP AS DM ON MPOLIST_DIVISION.DIVISON = DM.GR_NAME LEFT OUTER JOIN ";
                    strSQL = strSQL + " ACC_LEDGERGROUP AS ZM ON MPOLIST_ZONE.ZONE = ZM.GR_NAME ";
                    if (intmode == 0)
                    {
                        strSQL = strSQL + "ORDER BY MPOLIST_TEMP.ZONE, MPOLIST_TEMP.DIVISON,MPOLIST_TEMP.AREA,MPOLIST_TEMP.TERITORRY_CODE ";
                    }
                    else
                    {
                        strSQL = strSQL + "ORDER BY MPOLIST_TEMP.TERITORRY_CODE ";
                    }

                }
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RSalesPurchase oLedg = new RSalesPurchase();
                    oLedg.strLedgerGroupParent = dr["ZONE"].ToString();
                    if (dr["ZoneCorporet"].ToString() != "")
                    {
                        oLedg.strZoneCorporetNumber = dr["ZoneCorporet"].ToString();
                    }
                    else
                    {
                        oLedg.strZoneCorporetNumber = "";
                    }
                    if (dr["ZonePersonal"].ToString() != "")
                    {
                        oLedg.strZonePersonalNumber = dr["ZonePersonal"].ToString();
                    }
                    else
                    {
                        oLedg.strZonePersonalNumber = "";
                    }
                    oLedg.strLedgerGroupPrimary = dr["Division"].ToString();
                    if (dr["DSMCorporet"].ToString() != "")
                    {
                        oLedg.strDSMCorporetNumber = dr["DSMCorporet"].ToString();
                    }
                    else
                    {
                        oLedg.strDSMCorporetNumber = "";
                    }
                    if (dr["DSMPersonal"].ToString() != "")
                    {
                        oLedg.strDSMPersonalNumber = dr["DSMPersonal"].ToString();
                    }
                    else
                    {
                        oLedg.strDSMPersonalNumber = "";
                    }
                    oLedg.strGroupAMFM = dr["AREA"].ToString();
                    if (dr["AreaCorporet"].ToString() != "")
                    {
                        oLedg.strAreaCorporetNumber = dr["AreaCorporet"].ToString();
                    }
                    else
                    {
                        oLedg.strAreaCorporetNumber = "";
                    }
                    if (dr["AreaPersonal"].ToString() != "")
                    {
                        oLedg.strAreaPersonalNumber = dr["AreaPersonal"].ToString();
                    }
                    else
                    {
                        oLedg.strAreaPersonalNumber = "";
                    }
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    if (dr["MOBILE1"].ToString() != "")
                    {
                        oLedg.strPhoneNumber = dr["MOBILE1"].ToString();
                    }
                    else
                    {
                        oLedg.strPhoneNumber = "";
                    }
                    if (dr["MOBILE2"].ToString() != "")
                    {
                        oLedg.strMobile = dr["MOBILE2"].ToString();
                    }
                    else
                    {
                        oLedg.strMobile = "";
                    }
                    oLedg.strTerritory = dr["TERITORRY_NAME"].ToString();
                    oLedg.strTerritoryCode = dr["TERITORRY_CODE"].ToString();
                    oLedg.strPowerClass = dr["LEDGER_CLASS"].ToString();
                    if (dr["CT"].ToString() != "")
                    {
                        oLedg.intRCount = Convert.ToDouble(dr["CT"].ToString());
                    }
                    else
                    {
                        oLedg.intRCount = 0;
                    }
                    oLedg.lngZoneTotal = Convert.ToInt64(dr["ZONE_TOTAL"].ToString());
                    oLedg.lngdivTotal = Convert.ToInt64(dr["DIVISION_TOTAL"].ToString());
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RSalesPurchase oLedg = new RSalesPurchase();
                    oLedg.strLedgerGroupParent = "";
                    oLedg.strLedgerGroupPrimary = "";
                    oLedg.strGroupAMFM = "";
                    oLedg.strLedgerName = "";
                    oLedg.strPhoneNumber = "";
                    oLedg.strTerritory = "";
                    oLedg.strTerritoryCode = "";
                    oLedg.strPowerClass = "";
                    oLedg.intRCount = 0;
                    oLedg.lngZoneTotal = 0;
                    oLedg.lngdivTotal = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }

        #endregion
        #region "RefreshLedger"
        public List<RAccountsGroup> RefreshLedger(string strDeComID, string strFdate, string strTDate,
                                                    string vstrLedgerName, string strBranchID, string strSelection,int intvoucher)
        {
            string strSQL = null;
            double dblBackYearOpening = 0, dblOPening = 0, dblYearOpening = 0, dblOpeningDr = 0, dblOpeningCr = 0,
                                       dblTotalCredit = 0, dblTotalDebit = 0, dblclosing = 0, dblClosingDebit = 0, dblClosingCredit = 0;
            int introw = 0;
            string strstringNew = "";
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmd = new SqlCommand();
                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;
                if (strSelection != "")
                {

                    strSQL = "DELETE FROM ACC_MONTHLY_SUMMARY ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM ACC_VOUCHER_PARENT ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.CommandTimeout = 0;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM ACC_VOUCHER_CHILD ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    if (strBranchID == "")
                    {
                        strSQL = "SELECT LEDGER_OPENING_BALANCE AS OPENING FROM ACC_LEDGER ";
                        strSQL = strSQL + "WHERE LEDGER_NAME = '" + vstrLedgerName.Replace("'", "''") + "' ";
                    }
                    else
                    {
                        strSQL = "SELECT BRANCH_LEDGER_OPENING_BALANCE AS OPENING FROM ACC_BRANCH_LEDGER_OPENING ";
                        strSQL = strSQL + "WHERE LEDGER_NAME = '" + vstrLedgerName.Replace("'", "''") + "' ";
                        if (strBranchID != "")
                        {
                            strSQL = strSQL + "AND BRANCH_ID = '" + strBranchID + "' ";
                        }
                    }

                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblOPening = Convert.ToDouble(dr["OPENING"].ToString());
                    }
                    dr.Close();

                    strSQL = "SELECT ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) AS OPENING ";
                    strSQL = strSQL + "FROM ACC_VOUCHER ";
                    strSQL = strSQL + "INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME= ACC_LEDGER.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE ACC_VOUCHER.LEDGER_NAME = '" + vstrLedgerName.Replace("'", "''") + "' ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE >= ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(Utility.gstrFinicialYearFrom) + "";
                    strSQL = strSQL + " AND  ";
                    strSQL = strSQL + " ACC_VOUCHER.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID = '" + strBranchID + "' ";
                    }
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblYearOpening = Convert.ToDouble(dr["OPENING"].ToString());
                    }
                    dr.Close();

                    strSQL = "SELECT ISNULL(SUM(VOUCHER_CREDIT_AMOUNT - VOUCHER_DEBIT_AMOUNT),0) AS OPENING ";
                    strSQL = strSQL + "FROM ACC_VOUCHER ";
                    strSQL = strSQL + " INNER JOIN ACC_LEDGER ON ACC_VOUCHER.LEDGER_NAME= ACC_LEDGER.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE ACC_VOUCHER.LEDGER_NAME = '" + vstrLedgerName.Replace("'", "''") + "' ";
                    strSQL = strSQL + "AND COMP_VOUCHER_DATE < ";
                    strSQL = strSQL + Utility.cvtSQLDateString(Utility.gstrFinicialYearFrom) + " ";
                    strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_PRIMARY_TYPE = " + (int)Utility.LEDGER_PRM_TYPE.lgrASSET + " OR ACC_LEDGER.LEDGER_PRIMARY_TYPE = " + (int)Utility.LEDGER_PRM_TYPE.lgrLIABILITY + " ) ";

                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID = '" + strBranchID + "' ";
                    }
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblBackYearOpening = Convert.ToDouble(dr["OPENING"].ToString());
                    }
                    dr.Close();


                    dblOPening = dblYearOpening + dblBackYearOpening + dblOPening;

                    if (dblOPening < 0)
                    {
                        dblOpeningDr = dblOPening;
                    }
                    else
                    {
                        dblOpeningCr = dblOPening;
                    }

                    strSQL = "SELECT ISNULL(SUM(VOUCHER_CREDIT_AMOUNT),0) AS TOTAL_CREDIT,";
                    strSQL = strSQL + "ISNULL(SUM(VOUCHER_DEBIT_AMOUNT),0) AS TOTAL_DEBIT ";
                    strSQL = strSQL + "FROM ACC_VOUCHER ";
                    strSQL = strSQL + "WHERE LEDGER_NAME = '" + vstrLedgerName.Replace("'", "''") + "' ";
                    strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + "AND ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strTDate) + ") ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND BRANCH_ID = '" + strBranchID + "' ";
                    }
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblTotalCredit = Convert.ToDouble(dr["TOTAL_CREDIT"].ToString());
                        dblTotalDebit = Convert.ToDouble(dr["TOTAL_DEBIT"].ToString());
                    }
                    dr.Close();


                    dblclosing = dblOPening + (dblTotalCredit - dblTotalDebit);

                    if (dblclosing > 0)
                    {
                        dblClosingDebit = dblclosing;
                    }
                    else
                    {
                        dblClosingCredit = dblclosing;
                    }
                    if (strSelection != "3")
                    {
                        strSQL = "INSERT INTO ACC_VOUCHER_PARENT(BRANCH_ID,COMP_REF_NO,COMP_VOUCHER_TYPE,COMP_VOUCHER_DATE,VOUCHER_TOBY,";
                        strSQL = strSQL + "LEDGER_NAME,VOUCHER_DEBIT_AMOUNT,VOUCHER_CREDIT_AMOUNT,VOUCHER_NARRATION,LEDGER_HEAD,LEDGER_NAME_MERZE) ";
                        strSQL = strSQL + "SELECT v.BRANCH_ID,v.COMP_REF_NO,v.COMP_VOUCHER_TYPE,v.COMP_VOUCHER_DATE,v.VOUCHER_TOBY,v.VOUCHER_REVERSE_LEDGER,SUM(v.VOUCHER_DEBIT_AMOUNT),";
                        strSQL = strSQL + "SUM(v.VOUCHER_CREDIT_AMOUNT),v.VOUCHER_NARRATION, '" + vstrLedgerName.Replace("'", "''") + "',l.LEDGER_NAME_MERZE ";
                        strSQL = strSQL + "FROM ACC_VOUCHER v,ACC_LEDGER L WHERE L.LEDGER_NAME=v.LEDGER_NAME  ";
                        strSQL = strSQL + "AND L.LEDGER_NAME = '" + vstrLedgerName.Replace("'", "''") + "' ";
                        strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN ";
                        strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                        strSQL = strSQL + "AND ";
                        strSQL = strSQL + " " + Utility.cvtSQLDateString(strTDate) + ") ";
                        if (strBranchID != "")
                        {
                            strSQL = strSQL + "AND v.BRANCH_ID = '" + strBranchID + "' ";
                        }
                        strSQL = strSQL + "GROUP BY v.BRANCH_ID,v.COMP_REF_NO,v.COMP_VOUCHER_TYPE,v.COMP_VOUCHER_DATE,";
                        strSQL = strSQL + "v.VOUCHER_TOBY,v.VOUCHER_REVERSE_LEDGER,v.VOUCHER_NARRATION,l.LEDGER_NAME_MERZE ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();

                        strSQL = "update  p set p.LEDGER_NAME=l.LEDGER_NAME_MERZE ";
                        strSQL = strSQL + "from ACC_VOUCHER_PARENT p,ACC_LEDGER L  where p.LEDGER_NAME =L.LEDGER_NAME  ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();



                        if (strstringNew != "")
                        {

                            string[] words = strstringNew.Split('~');
                            foreach (string ooassets in words)
                            {
                                string[] oAssets = ooassets.Split('|');
                                if (oAssets[0] != "")
                                {
                                    strSQL = "UPDATE ACC_VOUCHER_PARENT SET ";
                                    strSQL = strSQL + "CHEQUE_NO='" + oAssets[1].ToString() + "' ";
                                    if (oAssets[2].ToString() != "")
                                    {
                                        strSQL = strSQL + ",CHEQUE_DATE=" + Utility.cvtSQLDateString(oAssets[2].ToString()) + " ";
                                    }
                                    else
                                    {
                                        strSQL = strSQL + ",CHEQUE_DATE= null";
                                    }
                                    if (oAssets[3].ToString() != "")
                                    {
                                        strSQL = strSQL + ",CHEQUE_DRAWN_ON= '" + oAssets[3].ToString() + "' ";
                                    }
                                    else
                                    {
                                        strSQL = strSQL + ",CHEQUE_DRAWN_ON= null";
                                    }


                                    strSQL = strSQL + " WHERE COMP_REF_NO ='" + oAssets[0].ToString() + "' ";

                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();

                                    if (strSelection == "1")
                                    {
                                        strSQL = "UPDATE ACC_VOUCHER_PARENT SET LEDGER_NAME= (SELECT DISTINCT VOUCHER_REVERSE_LEDGER  FROM ACC_VOUCHER WHERE COMP_REF_NO ='" + oAssets[0].ToString() + "' ";
                                        strSQL = strSQL + " AND COMP_VOUCHER_POSITION < 2 AND  VOUCHER_REVERSE_LEDGER <> '" + vstrLedgerName.Trim().Replace("'", "''") + "')";
                                        strSQL = strSQL + " WHERE COMP_REF_NO ='" + oAssets[0].ToString() + "' ";
                                        cmdInsert.CommandText = strSQL;
                                        cmdInsert.ExecuteNonQuery();
                                    }
                                    if (strSelection == "2")
                                    {
                                        strSQL = "UPDATE ACC_VOUCHER_PARENT SET LEDGER_NAME= (SELECT DISTINCT VOUCHER_REVERSE_LEDGER  FROM ACC_VOUCHER WHERE COMP_REF_NO ='" + oAssets[0].ToString() + "' ";
                                        strSQL = strSQL + " AND COMP_VOUCHER_POSITION < 2 AND  VOUCHER_REVERSE_LEDGER <> '" + vstrLedgerName.Trim().Replace("'", "''") + "')";
                                        strSQL = strSQL + " WHERE COMP_REF_NO ='" + oAssets[0].ToString() + "' ";
                                        cmdInsert.CommandText = strSQL;
                                        cmdInsert.ExecuteNonQuery();
                                    }


                                }
                            }
                        }

                        strSQL = "INSERT INTO ACC_VOUCHER_CHILD(COMP_REF_NO,LEDGER_NAME,CHILD_AMOUNT,CHILD_TOBY,BRANCH_ID)";
                        strSQL = strSQL + "SELECT COMP_REF_NO,LEDGER_NAME,VOUCHER_DEBIT_AMOUNT+VOUCHER_CREDIT_AMOUNT,";
                        strSQL = strSQL + "VOUCHER_TOBY,BRANCH_ID FROM ACC_VOUCHER ";
                        strSQL = strSQL + "WHERE COMP_REF_NO IN(SELECT COMP_REF_NO FROM ACC_VOUCHER WHERE LEDGER_NAME = '" + vstrLedgerName + "') ";
                        strSQL = strSQL + "AND (COMP_VOUCHER_DATE BETWEEN ";
                        strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                        strSQL = strSQL + "AND ";
                        strSQL = strSQL + " " + Utility.cvtSQLDateString(strTDate) + ")  ";
                        strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER = '" + "As per Details' ";
                        if (strBranchID != "")
                        {
                            strSQL = strSQL + "AND BRANCH_ID = '" + strBranchID + "' ";
                        }
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();

                        strSQL = "DELETE FROM ACC_VOUCHER_CHILD WHERE LEDGER_NAME = '" + vstrLedgerName + "'";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();


                    }
                    else
                    {
                        strSQL = "INSERT INTO ACC_MONTHLY_SUMMARY(MONTH_ID,DEBIT,CREDIT) VALUES('000000'," + Math.Abs(dblOpeningDr) + "," + Math.Abs(dblOpeningCr) + ")";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();

                        strSQL = "INSERT INTO ACC_MONTHLY_SUMMARY(MONTH_ID,DEBIT,CREDIT)";
                        strSQL = strSQL + "SELECT RIGHT( '0000'+ Convert(varchar, year(COMP_VOUCHER_DATE)), 4) + RIGHT( '00'+ Convert(varchar, month(COMP_VOUCHER_DATE)), 2),  SUM(v.VOUCHER_DEBIT_AMOUNT) VOUCHER_DEBIT_AMOUNT, ";
                        strSQL = strSQL + "SUM(v.VOUCHER_CREDIT_AMOUNT) VOUCHER_CREDIT_AMOUNT FROM ACC_VOUCHER v ";
                        strSQL = strSQL + "WHERE v.LEDGER_NAME = '" + vstrLedgerName + "'";
                        strSQL = strSQL + "AND (V.COMP_VOUCHER_DATE BETWEEN ";
                        strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                        strSQL = strSQL + "AND ";
                        strSQL = strSQL + " " + Utility.cvtSQLDateString(strTDate) + ")  ";
                        strSQL = strSQL + "group by  RIGHT( '0000'+ Convert(varchar, year(COMP_VOUCHER_DATE)), 4) + RIGHT( '00'+ Convert(varchar, month(COMP_VOUCHER_DATE)), 2) ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();

                    }
                    cmdInsert.Transaction.Commit();

                    //strstringNew = "";

                    if (strSelection != "3")
                    {

                        strSQL = "UPDATE ACC_VOUCHER_CHILD SET ACC_VOUCHER_CHILD.LEDGER_NAME=ACC_LEDGER.LEDGER_NAME_MERZE ";
                        strSQL = strSQL + "from ACC_VOUCHER_CHILD,ACC_LEDGER WHERE ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER_CHILD.LEDGER_NAME ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                        strSQL = "";

                        strSQL = "SELECT ";
                        strSQL = strSQL + "substring(ACC_VOUCHER_PARENT.COMP_REF_NO,7,30) COMP_REF_NO , ACC_VOUCHER_PARENT.COMP_VOUCHER_TYPE, ACC_VOUCHER_PARENT.COMP_VOUCHER_DATE,'1' month, ";
                        if (strSelection == "2")
                        {
                            strSQL = strSQL + "ACC_VOUCHER_PARENT.LEDGER_NAME,";
                        }
                        else if (strSelection == "4")
                        {
                            strSQL = strSQL + "ACC_VOUCHER_PARENT.LEDGER_NAME,";
                        }
                        else if (strSelection == "1")
                        {
                            strSQL = strSQL + "ACC_VOUCHER_PARENT.LEDGER_NAME,";
                        }
                        else
                        {
                            strSQL = strSQL + "ACC_VOUCHER_PARENT.LEDGER_NAME_MERZE LEDGER_NAME,";
                        }
                        strSQL = strSQL + "ACC_VOUCHER_CHILD.LEDGER_NAME CHILDLEDGER, ACC_VOUCHER_CHILD.CHILD_AMOUNT, ACC_VOUCHER_CHILD.CHILD_TOBY,";
                        strSQL = strSQL + "ACC_VOUCHER_PARENT.VOUCHER_DEBIT_AMOUNT,ACC_VOUCHER_PARENT.VOUCHER_CREDIT_AMOUNT, ACC_VOUCHER_PARENT.VOUCHER_TOBY,";
                        strSQL = strSQL + "ACC_VOUCHER_CHILD.CHILD_AMOUNT,ACC_VOUCHER_CHILD.CHILD_TOBY,ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION,ACC_COMPANY_VOUCHER.COMP_VOUCHER_MONTH_ID ";
                        strSQL = strSQL + "FROM ";
                        strSQL = strSQL + "ACC_VOUCHER_PARENT ACC_VOUCHER_PARENT INNER JOIN ACC_COMPANY_VOUCHER ACC_COMPANY_VOUCHER ON ACC_VOUCHER_PARENT.COMP_REF_NO = ACC_COMPANY_VOUCHER.COMP_REF_NO LEFT OUTER JOIN ACC_VOUCHER_CHILD ACC_VOUCHER_CHILD ON ACC_VOUCHER_PARENT.COMP_REF_NO = ACC_VOUCHER_CHILD.COMP_REF_NO ";
                        strSQL = strSQL + "WHERE ";
                        strSQL = strSQL + "ACC_VOUCHER_PARENT.LEDGER_HEAD  = '" + vstrLedgerName + "'";
                        //strSQL = strSQL + "ORDER BY ";
                        //strSQL = strSQL + "ACC_VOUCHER_PARENT.COMP_VOUCHER_DATE,SUBSTRING(ACC_VOUCHER_PARENT.COMP_REF_NO, 7, 30) ASC ";
                        if (intvoucher == 5)
                        {
                            strSQL = strSQL + "ORDER BY ";
                            strSQL = strSQL + "ACC_VOUCHER_PARENT.COMP_VOUCHER_TYPE,ACC_VOUCHER_PARENT.COMP_VOUCHER_DATE,SUBSTRING(ACC_VOUCHER_PARENT.COMP_REF_NO, 7, 30) ASC ";
                        }
                        else
                        {

                            strSQL = strSQL + "ORDER BY ";
                            strSQL = strSQL + "ACC_VOUCHER_PARENT.COMP_VOUCHER_DATE,SUBSTRING(ACC_VOUCHER_PARENT.COMP_REF_NO, 7, 30) ASC ";
                        }
                        cmdInsert.CommandText = strSQL;
                    }
                    else
                    {
                        //strSQL = "SELECT '1' COMP_REF_NO,'1' LEDGER_NAME,'' CHILDLEDGER,0 CHILD_AMOUNT,'' CHILD_TOBY,'' COMP_VOUCHER_DATE,'0' COMP_VOUCHER_TYPE, month(ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE) as month";
                        //strSQL = strSQL + ",SUM(ACC_VOUCHER_PARENT.VOUCHER_DEBIT_AMOUNT) as VOUCHER_DEBIT_AMOUNT ,sum(ACC_VOUCHER_PARENT.VOUCHER_CREDIT_AMOUNT) as VOUCHER_CREDIT_AMOUNT, ";
                        //strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION ,ACC_COMPANY_VOUCHER.COMP_VOUCHER_MONTH_ID FROM ";
                        //strSQL = strSQL + "ACC_VOUCHER_PARENT ACC_VOUCHER_PARENT INNER JOIN ACC_COMPANY_VOUCHER ACC_COMPANY_VOUCHER ON ACC_VOUCHER_PARENT.COMP_REF_NO = ACC_COMPANY_VOUCHER.COMP_REF_NO ";
                        //strSQL = strSQL + "LEFT OUTER JOIN ACC_VOUCHER_CHILD ACC_VOUCHER_CHILD ON ACC_VOUCHER_PARENT.COMP_REF_NO = ACC_VOUCHER_CHILD.COMP_REF_NO ";
                        //strSQL = strSQL + "group by month(ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE) ,ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION ,ACC_COMPANY_VOUCHER.COMP_VOUCHER_MONTH_ID ";
                        //strSQL = strSQL + " order by month(ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE) ";
                        strSQL = "SELECT '1' COMP_REF_NO,'1' LEDGER_NAME,'' CHILDLEDGER,0 CHILD_AMOUNT,'' CHILD_TOBY,'' COMP_VOUCHER_DATE,'0' COMP_VOUCHER_TYPE, ";
                        strSQL = strSQL + "MONTH_ID month,DEBIT as VOUCHER_DEBIT_AMOUNT ,";
                        strSQL = strSQL + "CREDIT as VOUCHER_CREDIT_AMOUNT, '' COMP_VOUCHER_NARRATION ,MONTH_ID COMP_VOUCHER_MONTH_ID ";
                        strSQL = strSQL + "FROM ACC_MONTHLY_SUMMARY  order by MONTH_ID ";
                        cmdInsert.CommandText = strSQL;
                    }
                    dr = cmdInsert.ExecuteReader();
                    double dblrunn = 0;
                    while (dr.Read())
                    {
                        RAccountsGroup oLedg = new RAccountsGroup();
                        if (dr["COMP_VOUCHER_MONTH_ID"].ToString() != "")
                        {
                            oLedg.strMonthID = dr["COMP_VOUCHER_MONTH_ID"].ToString().ToUpper();

                        }
                        else
                        {
                            oLedg.strMonthID = "";
                        }
                        oLedg.strRefNo = dr["COMP_REF_NO"].ToString();
                        oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                        if (dr["COMP_VOUCHER_DATE"].ToString() != "")
                        {
                            oLedg.strDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd/MM/yyyy");
                        }
                        if (dr["COMP_VOUCHER_NARRATION"].ToString() != "")
                        {
                            oLedg.strNarration = dr["COMP_VOUCHER_NARRATION"].ToString();
                        }
                        else
                        {
                            oLedg.strNarration = "";
                        }
                        oLedg.intvoucherType = Convert.ToInt16(dr["COMP_VOUCHER_TYPE"]);
                        oLedg.dblDebit = Convert.ToDouble(dr["VOUCHER_DEBIT_AMOUNT"]);
                        oLedg.dblCredit = Convert.ToDouble(dr["VOUCHER_CREDIT_AMOUNT"]);

                        if (dr["CHILDLEDGER"].ToString() != "")
                        {
                            oLedg.strReverseLedger = dr["CHILDLEDGER"].ToString();
                            oLedg.dblMnauAmount = Convert.ToDouble(dr["CHILD_AMOUNT"]);
                            oLedg.strToBy = dr["CHILD_TOBY"].ToString();

                        }
                        else
                        {
                            oLedg.strReverseLedger = "";
                            oLedg.dblMnauAmount = 0;
                            oLedg.strToBy = "";
                        }
                        if (strSelection == "4")
                        {
                            if (introw == 0)
                            {
                                dblrunn = dblOpeningDr + dblOpeningCr;
                            }
                            dblrunn = dblrunn + (Convert.ToDouble(dr["VOUCHER_CREDIT_AMOUNT"]) - Convert.ToDouble(dr["VOUCHER_DEBIT_AMOUNT"]));
                        }
                        else
                        {
                            dblrunn = dblrunn + (Convert.ToDouble(dr["VOUCHER_CREDIT_AMOUNT"]) - Convert.ToDouble(dr["VOUCHER_DEBIT_AMOUNT"]));
                        }
                        oLedg.dblRunningTotal = dblrunn;
                        oLedg.intGrSequences = Convert.ToInt32(dr["month"].ToString());
                        if (introw == 0)
                        {
                            oLedg.dblOpeningDr = Math.Abs(dblOpeningDr);
                            oLedg.dblOpeningCr = Math.Abs(dblOpeningCr);
                            oLedg.ClosingDr = Math.Abs(dblClosingDebit);
                            oLedg.ClosingCr = Math.Abs(dblClosingCredit);
                            oLedg.OpeningAndDebit = Math.Abs(dblTotalDebit);
                            oLedg.OpeningAndCredit = Math.Abs(dblTotalCredit);
                        }
                        ooAccLedger.Add(oLedg);
                        introw += 1;
                    }
                    if (!dr.Read())
                    {
                        RAccountsGroup oLedg = new RAccountsGroup();
                        oLedg.strMonthID = "";
                        oLedg.strRefNo = "";
                        oLedg.strLedgerName = "";
                        oLedg.strDate = "";
                        oLedg.intvoucherType = 0;
                        oLedg.dblDebit = 0;
                        oLedg.dblCredit = 0;
                        dblrunn = 0;
                        oLedg.dblRunningTotal = dblrunn;
                        oLedg.intGrSequences = 0;
                        oLedg.dblOpeningDr = Math.Abs(dblOpeningDr);
                        oLedg.dblOpeningCr = Math.Abs(dblOpeningCr);
                        oLedg.ClosingDr = Math.Abs(dblClosingDebit);
                        oLedg.ClosingCr = Math.Abs(dblClosingCredit);
                        oLedg.OpeningAndDebit = Math.Abs(dblTotalDebit);
                        oLedg.OpeningAndCredit = Math.Abs(dblTotalCredit);
                        oLedg.strReverseLedger = "";
                        oLedg.dblMnauAmount = 0;
                        oLedg.strToBy = "";
                        ooAccLedger.Add(oLedg);
                    }

                    dr.Close();
                    gcnMain.Close();
                }
                return ooAccLedger;

            }
        }
        #endregion
        #region "DailyCollection"
        public List<RAccountsGroup> mGetDailyCollectionDetails(string strDeComID, string strFate, string strTDate, string strBranchID,
                                                    int intReportOrderby, string struserName, string strType, int intEmpStatus, string strledgername)
        {
            string strSQL = null, strsting = "";
            double dblAmnt = 0;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;
                strSQL = "DELETE FROM ACC_DAY_BOOK_TEMP ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP(COMP_REF_NO,COMP_VOUCHER_TYPE,COMP_VOUCHER_DATE,LEDGER_NAME,VOUCHER_CHEQUE_DATE,VOUCHER_CHEQUE_NUMBER,VOUCHER_CHEQUE_DRAWNON,DEBIT_AMOUNT,VOUCHER_TO_BY,VOUCHER_REVERSE_LEDGER) ";
                strSQL = strSQL + "SELECT ";
                strSQL = strSQL + "ACC_VOUCHER.COMP_REF_NO, ACC_VOUCHER.COMP_VOUCHER_TYPE, ACC_VOUCHER.COMP_VOUCHER_DATE, ACC_LEDGER.LEDGER_NAME_MERZE LEDGER_NAME, ACC_VOUCHER.VOUCHER_CHEQUE_DATE,";
                strSQL = strSQL + "ACC_VOUCHER.VOUCHER_CHEQUE_NUMBER, ACC_VOUCHER.VOUCHER_CHEQUE_DRAWN_ON, sum(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT-ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT), ACC_VOUCHER.VOUCHER_TOBY, ACC_VOUCHER.VOUCHER_REVERSE_LEDGER ";
                strSQL = strSQL + "FROM ACC_VOUCHER,ACC_LEDGER  WHERE   ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  ";
                strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_TYPE =1 ";
                strSQL = strSQL + " AND  VOUCHER_REVERSE_LEDGER <> 'As Per Details' ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " GROUP BY ACC_VOUCHER.COMP_REF_NO, ACC_VOUCHER.COMP_VOUCHER_TYPE, ACC_VOUCHER.COMP_VOUCHER_DATE, ACC_LEDGER.LEDGER_NAME_MERZE , ACC_VOUCHER.VOUCHER_CHEQUE_DATE,ACC_VOUCHER.VOUCHER_CHEQUE_NUMBER, ";
                strSQL = strSQL + "ACC_VOUCHER.VOUCHER_CHEQUE_DRAWN_ON,ACC_VOUCHER.VOUCHER_TOBY, ACC_VOUCHER.VOUCHER_REVERSE_LEDGER ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP(COMP_REF_NO,COMP_VOUCHER_TYPE,COMP_VOUCHER_DATE,LEDGER_NAME,VOUCHER_CHEQUE_DATE,VOUCHER_CHEQUE_NUMBER,VOUCHER_CHEQUE_DRAWNON,DEBIT_AMOUNT,VOUCHER_TO_BY,VOUCHER_REVERSE_LEDGER) ";
                strSQL = strSQL + "SELECT ";
                strSQL = strSQL + "ACC_VOUCHER.COMP_REF_NO, ACC_VOUCHER.COMP_VOUCHER_TYPE, ACC_VOUCHER.COMP_VOUCHER_DATE, 'BKash Account', ACC_VOUCHER.VOUCHER_CHEQUE_DATE,";
                strSQL = strSQL + "ACC_VOUCHER.VOUCHER_CHEQUE_NUMBER, ACC_VOUCHER.VOUCHER_CHEQUE_DRAWN_ON, abs(sum(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT-ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT)), 'Dr',  ACC_LEDGER.LEDGER_NAME_MERZE ";
                strSQL = strSQL + "FROM ACC_VOUCHER,ACC_LEDGER  WHERE   ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  ";
                strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_TYPE =1 ";
                strSQL = strSQL + " AND  VOUCHER_REVERSE_LEDGER='As Per Details' ";
                strSQL = strSQL + "AND  ACC_VOUCHER.COMP_VOUCHER_POSITION in(1,3) and ACC_VOUCHER.LEDGER_NAME <> 'BKash Account' ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " GROUP BY ACC_VOUCHER.COMP_REF_NO, ACC_VOUCHER.COMP_VOUCHER_TYPE, ACC_VOUCHER.COMP_VOUCHER_DATE, ACC_LEDGER.LEDGER_NAME_MERZE , ACC_VOUCHER.VOUCHER_CHEQUE_DATE,ACC_VOUCHER.VOUCHER_CHEQUE_NUMBER, ";
                strSQL = strSQL + "ACC_VOUCHER.VOUCHER_CHEQUE_DRAWN_ON,ACC_VOUCHER.VOUCHER_TOBY, ACC_VOUCHER.AGNST_COMP_REF_NO ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "UPDATE ACC_DAY_BOOK_TEMP set VOUCHER_REVERSE_LEDGER=ACC_LEDGER.LEDGER_NAME_MERZE   from ACC_DAY_BOOK_TEMP,ACC_LEDGER where ACC_LEDGER.LEDGER_NAME =ACC_DAY_BOOK_TEMP.VOUCHER_REVERSE_LEDGER ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = " UPDATE ACC_DAY_BOOK_TEMP set LEDGER_NAME_NEW=ACC_LEDGER_Z_D_A.LEDGER_NAME, ZONE=ACC_LEDGER_Z_D_A.ZONE, TERITORRY_CODE=ACC_LEDGER_Z_D_A.TERITORRY_CODE ,TERITORRY_NAME=ACC_LEDGER_Z_D_A.TERRITORRY_NAME ";
                strSQL = strSQL + " from ACC_DAY_BOOK_TEMP,ACC_LEDGER_Z_D_A  where ACC_LEDGER_Z_D_A.LEDGER_NAME_MERZE =ACC_DAY_BOOK_TEMP.VOUCHER_REVERSE_LEDGER ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //New PF HL
                strSQL = "UPDATE ACC_DAY_BOOK_TEMP SET ACC_DAY_BOOK_TEMP.PF_AMOUNT=ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT ";
                strSQL = strSQL + "FROM ACC_DAY_BOOK_TEMP,ACC_LEDGER,ACC_VOUCHER WHERE ACC_LEDGER.LEDGER_NAME_MERZE=ACC_DAY_BOOK_TEMP.LEDGER_NAME  ";
                strSQL = strSQL + "AND ACC_VOUCHER.REVERSE_LEDGER1 =ACC_LEDGER.LEDGER_NAME AND ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='PF' ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "UPDATE ACC_DAY_BOOK_TEMP SET ACC_DAY_BOOK_TEMP.HL_AMOUNT=ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT ";
                strSQL = strSQL + "FROM ACC_DAY_BOOK_TEMP,ACC_LEDGER,ACC_VOUCHER WHERE ACC_LEDGER.LEDGER_NAME_MERZE=ACC_DAY_BOOK_TEMP.LEDGER_NAME  ";
                strSQL = strSQL + "AND ACC_VOUCHER.REVERSE_LEDGER1 =ACC_LEDGER.LEDGER_NAME AND ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='HL' ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                strSQL = "UPDATE ACC_DAY_BOOK_TEMP SET ACC_DAY_BOOK_TEMP.PF_AMOUNT=ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT ";
                strSQL = strSQL + " FROM ACC_DAY_BOOK_TEMP,ACC_LEDGER,ACC_VOUCHER WHERE ACC_LEDGER.LEDGER_NAME_MERZE=ACC_DAY_BOOK_TEMP.VOUCHER_REVERSE_LEDGER  ";
                strSQL = strSQL + " AND ACC_VOUCHER.REVERSE_LEDGER1 =ACC_LEDGER.LEDGER_NAME AND ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='PF' ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "UPDATE ACC_DAY_BOOK_TEMP SET ACC_DAY_BOOK_TEMP.HL_AMOUNT=ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT ";
                strSQL = strSQL + " FROM ACC_DAY_BOOK_TEMP,ACC_LEDGER,ACC_VOUCHER WHERE ACC_LEDGER.LEDGER_NAME_MERZE=ACC_DAY_BOOK_TEMP.VOUCHER_REVERSE_LEDGER ";
                strSQL = strSQL + "AND ACC_VOUCHER.REVERSE_LEDGER1 =ACC_LEDGER.LEDGER_NAME AND ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='HL' ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //********





                if (strType == "B")
                {
                    strSQL = "SELECT COMP_REF_NO,ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0) VOUCHER_CREDIT_AMOUNT  FROM ACC_VOUCHER  ";
                    strSQL = strSQL + " WHERE COMP_VOUCHER_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                    strSQL = strSQL + "AND COMP_VOUCHER_TYPE =1   ";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
                    }
                    strSQL = strSQL + "GROUP BY COMP_REF_NO ";
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        strsting = strsting + dr["COMP_REF_NO"].ToString() + "|" + dr["VOUCHER_CREDIT_AMOUNT"].ToString() + "~";
                    }
                    dr.Close();

                    if (strsting != "")
                    {
                        string[] words = strsting.Split('~');
                        foreach (string ooValue in words)
                        {
                            string[] ooCostLedger = ooValue.Split('|');
                            if (ooCostLedger[0] != "")
                            {
                                dblAmnt = Convert.ToDouble(ooCostLedger[1].ToString());
                                strSQL = "UPDATE ACC_DAY_BOOK_TEMP SET DEBIT_AMOUNT =" + dblAmnt + " ";
                                strSQL = strSQL + "WHERE COMP_REF_NO= '" + ooCostLedger[0].ToString() + "' ";
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                            }
                        }
                    }

                }
                cmdInsert.Transaction.Commit();
                strSQL = "SELECT ACC_DAY_BOOK_TEMP.TERITORRY_CODE ,ACC_DAY_BOOK_TEMP.ZONE,ACC_LEDGER_Z_D_A.DIVISION, ACC_LEDGER_Z_D_A.LEDGER_NAME_MERZE,ACC_DAY_BOOK_TEMP.COMP_REF_NO,ACC_DAY_BOOK_TEMP.COMP_VOUCHER_TYPE,ACC_DAY_BOOK_TEMP.COMP_VOUCHER_DATE, ";
                strSQL = strSQL + "ACC_DAY_BOOK_TEMP.LEDGER_NAME,ACC_DAY_BOOK_TEMP.LEDGER_NAME_NEW,ACC_DAY_BOOK_TEMP.VOUCHER_CHEQUE_DATE,";
                strSQL = strSQL + "ACC_DAY_BOOK_TEMP.VOUCHER_CHEQUE_NUMBER,ACC_DAY_BOOK_TEMP.VOUCHER_CHEQUE_DRAWNON,ACC_DAY_BOOK_TEMP.DEBIT_AMOUNT,ACC_DAY_BOOK_TEMP.PF_AMOUNT,ACC_DAY_BOOK_TEMP.HL_AMOUNT,ACC_DAY_BOOK_TEMP.VOUCHER_TO_BY VOUCHER_TOBY ,ACC_DAY_BOOK_TEMP.VOUCHER_REVERSE_LEDGER  ";
                strSQL = strSQL + "FROM ACC_DAY_BOOK_TEMP,ACC_LEDGER_Z_D_A  WHERE ACC_DAY_BOOK_TEMP.LEDGER_NAME_NEW =ACC_LEDGER_Z_D_A.LEDGER_NAME and  ACC_DAY_BOOK_TEMP.ZONE is not null  ";
                strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
                if (strledgername != "")
                {
                    strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.LEDGER_NAME='" + strledgername + "'  ";
                }

                if (intEmpStatus == 0)
                {
                    strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.LEDGER_STATUS=0  ";
                }
                else if (intEmpStatus == 1)
                {
                    strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.LEDGER_STATUS=1  ";
                }
                else
                {
                    strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.LEDGER_STATUS IN (0,1)  ";
                }
                if (intReportOrderby != 1)
                {
                    strSQL = strSQL + "ORDER BY ACC_DAY_BOOK_TEMP.ZONE,ACC_DAY_BOOK_TEMP.COMP_REF_NO  ";
                }
                else
                {
                    strSQL = strSQL + "ORDER BY ACC_DAY_BOOK_TEMP.COMP_REF_NO ";
                }


                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();

                    if (dr["ZONE"].ToString() != "")
                    {
                        oLedg.strZone = dr["ZONE"].ToString();
                    }
                    else
                    {
                        oLedg.strZone = "";
                    }
                    if (dr["TERITORRY_CODE"].ToString() != "")
                    {
                        oLedg.strTC = dr["TERITORRY_CODE"].ToString();
                    }
                    else
                    {
                        oLedg.strTC = "";
                    }

                    //if (dr["TERITORRY_NAME"].ToString() != "")
                    //{
                    //    oLedg.strTN = dr["TERITORRY_NAME"].ToString();
                    //}
                    //else
                    //{
                    //    oLedg.strTN = "";
                    //}
                    oLedg.strRefNo = dr["COMP_REF_NO"].ToString();
                    oLedg.intvoucherType = Convert.ToInt32(dr["COMP_VOUCHER_TYPE"].ToString());
                    oLedg.strDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd/MM/yyyy");
                    oLedg.strCashFlowLedger = dr["LEDGER_NAME_MERZE"].ToString();
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.strReverseLedger = dr["VOUCHER_REVERSE_LEDGER"].ToString();
                    oLedg.strToBy = dr["VOUCHER_TOBY"].ToString();
                    if (dr["VOUCHER_CHEQUE_NUMBER"].ToString() != "")
                    {
                        oLedg.strCheuqueNo = dr["VOUCHER_CHEQUE_NUMBER"].ToString();
                    }
                    else
                    {
                        oLedg.strCheuqueNo = "";
                    }
                    if (dr["VOUCHER_CHEQUE_DATE"].ToString() != "")
                    {
                        oLedg.strChequeDate = Convert.ToDateTime(dr["VOUCHER_CHEQUE_DATE"]).ToString("dd/MM/yyyy");
                    }
                    else
                    {
                        oLedg.strChequeDate = "";
                    }

                    if (dr["VOUCHER_CHEQUE_DRAWNON"].ToString() != "")
                    {
                        oLedg.strDrawnOn = dr["VOUCHER_CHEQUE_DRAWNON"].ToString();
                    }
                    else
                    {
                        oLedg.strDrawnOn = "";
                    }
                    oLedg.dblClosing = Math.Abs(Convert.ToDouble(dr["DEBIT_AMOUNT"].ToString()));
                    oLedg.dblPF = Math.Abs(Convert.ToDouble(dr["PF_AMOUNT"].ToString()));
                    oLedg.dblHL = Math.Abs(Convert.ToDouble(dr["HL_AMOUNT"].ToString()));
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strZone = "";
                    oLedg.strTC = "";
                    oLedg.strTN = "";
                    oLedg.strRefNo = "";
                    oLedg.intvoucherType = 0;
                    oLedg.strDate = "";
                    oLedg.strLedgerName = "";
                    oLedg.strCheuqueNo = "";
                    oLedg.strChequeDate = "";
                    oLedg.strDrawnOn = "";
                    oLedg.strDrawnOn = "";
                    oLedg.dblClosing = 0;
                    oLedg.dblPF = 0;
                    oLedg.dblHL = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }
        #endregion
        //#region "DailyCollection"
        //public List<RAccountsGroup> mGetDailyCollectionDetails(string strDeComID, string strFate, string strTDate, string strBranchID,
        //                                            int intReportOrderby, string struserName, string strType)
        //{
        //    string strSQL = null, strsting = "";
        //    double dblAmnt = 0;
        //    connstring = Utility.SQLConnstringComSwitch(strDeComID);

        //    using (SqlConnection gcnMain = new SqlConnection(connstring))
        //    {
        //        if (gcnMain.State == ConnectionState.Open)
        //        {
        //            gcnMain.Close();
        //        }
        //        gcnMain.Open();
        //        SqlDataReader dr;

        //        List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();
        //        SqlCommand cmdInsert = new SqlCommand();
        //        SqlTransaction myTrans;
        //        myTrans = gcnMain.BeginTransaction();
        //        cmdInsert.Connection = gcnMain;
        //        cmdInsert.Transaction = myTrans;
        //        strSQL = "DELETE FROM ACC_DAY_BOOK_TEMP ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();

        //        strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP(COMP_REF_NO,COMP_VOUCHER_TYPE,COMP_VOUCHER_DATE,LEDGER_NAME,VOUCHER_CHEQUE_DATE,VOUCHER_CHEQUE_NUMBER,VOUCHER_CHEQUE_DRAWNON,DEBIT_AMOUNT,VOUCHER_TO_BY,VOUCHER_REVERSE_LEDGER) ";
        //        strSQL = strSQL + "SELECT ";
        //        strSQL = strSQL + "ACC_VOUCHER.COMP_REF_NO, ACC_VOUCHER.COMP_VOUCHER_TYPE, ACC_VOUCHER.COMP_VOUCHER_DATE, ACC_LEDGER.LEDGER_NAME_MERZE LEDGER_NAME, ACC_VOUCHER.VOUCHER_CHEQUE_DATE,";
        //        strSQL = strSQL + "ACC_VOUCHER.VOUCHER_CHEQUE_NUMBER, ACC_VOUCHER.VOUCHER_CHEQUE_DRAWN_ON, sum(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT-ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT), ACC_VOUCHER.VOUCHER_TOBY, ACC_VOUCHER.VOUCHER_REVERSE_LEDGER ";
        //        strSQL = strSQL + "FROM ACC_VOUCHER,ACC_LEDGER  WHERE   ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  ";
        //        strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
        //        strSQL = strSQL + " " + Utility.cvtSQLDateString(strTDate) + " ";
        //        strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
        //        strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_TYPE =1 ";
        //        strSQL = strSQL + " AND  VOUCHER_REVERSE_LEDGER <> 'As Per Details' ";
        //        if (strBranchID != "")
        //        {
        //            strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
        //        }
        //        strSQL = strSQL + " GROUP BY ACC_VOUCHER.COMP_REF_NO, ACC_VOUCHER.COMP_VOUCHER_TYPE, ACC_VOUCHER.COMP_VOUCHER_DATE, ACC_LEDGER.LEDGER_NAME_MERZE , ACC_VOUCHER.VOUCHER_CHEQUE_DATE,ACC_VOUCHER.VOUCHER_CHEQUE_NUMBER, ";
        //        strSQL = strSQL + "ACC_VOUCHER.VOUCHER_CHEQUE_DRAWN_ON,ACC_VOUCHER.VOUCHER_TOBY, ACC_VOUCHER.VOUCHER_REVERSE_LEDGER ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();

        //        strSQL = "INSERT INTO ACC_DAY_BOOK_TEMP(COMP_REF_NO,COMP_VOUCHER_TYPE,COMP_VOUCHER_DATE,LEDGER_NAME,VOUCHER_CHEQUE_DATE,VOUCHER_CHEQUE_NUMBER,VOUCHER_CHEQUE_DRAWNON,DEBIT_AMOUNT,VOUCHER_TO_BY,VOUCHER_REVERSE_LEDGER) ";
        //        strSQL = strSQL + "SELECT ";
        //        strSQL = strSQL + "ACC_VOUCHER.COMP_REF_NO, ACC_VOUCHER.COMP_VOUCHER_TYPE, ACC_VOUCHER.COMP_VOUCHER_DATE, 'BKash Account', ACC_VOUCHER.VOUCHER_CHEQUE_DATE,";
        //        strSQL = strSQL + "ACC_VOUCHER.VOUCHER_CHEQUE_NUMBER, ACC_VOUCHER.VOUCHER_CHEQUE_DRAWN_ON, abs(sum(ACC_VOUCHER.VOUCHER_DEBIT_AMOUNT-ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT)), 'Dr',  ACC_LEDGER.LEDGER_NAME_MERZE ";
        //        strSQL = strSQL + "FROM ACC_VOUCHER,ACC_LEDGER  WHERE   ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  ";
        //        strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_DATE BETWEEN ";
        //        strSQL = strSQL + " " + Utility.cvtSQLDateString(strTDate) + " ";
        //        strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
        //        strSQL = strSQL + "AND ACC_VOUCHER.COMP_VOUCHER_TYPE =1 ";
        //        strSQL = strSQL + " AND  VOUCHER_REVERSE_LEDGER='As Per Details' ";
        //        strSQL = strSQL + "AND  ACC_VOUCHER.COMP_VOUCHER_POSITION in(1,3) and ACC_VOUCHER.LEDGER_NAME <> 'BKash Account' ";
        //        if (strBranchID != "")
        //        {
        //            strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
        //        }
        //        strSQL = strSQL + " GROUP BY ACC_VOUCHER.COMP_REF_NO, ACC_VOUCHER.COMP_VOUCHER_TYPE, ACC_VOUCHER.COMP_VOUCHER_DATE, ACC_LEDGER.LEDGER_NAME_MERZE , ACC_VOUCHER.VOUCHER_CHEQUE_DATE,ACC_VOUCHER.VOUCHER_CHEQUE_NUMBER, ";
        //        strSQL = strSQL + "ACC_VOUCHER.VOUCHER_CHEQUE_DRAWN_ON,ACC_VOUCHER.VOUCHER_TOBY, ACC_VOUCHER.AGNST_COMP_REF_NO ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();

        //        strSQL = "UPDATE ACC_DAY_BOOK_TEMP set VOUCHER_REVERSE_LEDGER=ACC_LEDGER.LEDGER_NAME_MERZE   from ACC_DAY_BOOK_TEMP,ACC_LEDGER where ACC_LEDGER.LEDGER_NAME =ACC_DAY_BOOK_TEMP.VOUCHER_REVERSE_LEDGER ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();
        //        strSQL = " UPDATE ACC_DAY_BOOK_TEMP set LEDGER_NAME_NEW=ACC_LEDGER_Z_D_A.LEDGER_NAME, ZONE=ACC_LEDGER_Z_D_A.ZONE, TERITORRY_CODE=ACC_LEDGER_Z_D_A.TERITORRY_CODE ,TERITORRY_NAME=ACC_LEDGER_Z_D_A.TERRITORRY_NAME ";
        //        strSQL = strSQL + " from ACC_DAY_BOOK_TEMP,ACC_LEDGER_Z_D_A  where ACC_LEDGER_Z_D_A.LEDGER_NAME_MERZE =ACC_DAY_BOOK_TEMP.VOUCHER_REVERSE_LEDGER ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();
        //        //New PF HL
        //        strSQL = "UPDATE ACC_DAY_BOOK_TEMP SET ACC_DAY_BOOK_TEMP.PF_AMOUNT=ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT ";
        //        strSQL = strSQL + "FROM ACC_DAY_BOOK_TEMP,ACC_LEDGER,ACC_VOUCHER WHERE ACC_LEDGER.LEDGER_NAME_MERZE=ACC_DAY_BOOK_TEMP.LEDGER_NAME  ";
        //        strSQL = strSQL + "AND ACC_VOUCHER.REVERSE_LEDGER1 =ACC_LEDGER.LEDGER_NAME AND ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='PF' ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();

        //        strSQL = "UPDATE ACC_DAY_BOOK_TEMP SET ACC_DAY_BOOK_TEMP.HL_AMOUNT=ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT ";
        //        strSQL = strSQL + "FROM ACC_DAY_BOOK_TEMP,ACC_LEDGER,ACC_VOUCHER WHERE ACC_LEDGER.LEDGER_NAME_MERZE=ACC_DAY_BOOK_TEMP.LEDGER_NAME  ";
        //        strSQL = strSQL + "AND ACC_VOUCHER.REVERSE_LEDGER1 =ACC_LEDGER.LEDGER_NAME AND ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='HL' ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();


        //        strSQL = "UPDATE ACC_DAY_BOOK_TEMP SET ACC_DAY_BOOK_TEMP.PF_AMOUNT=ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT ";
        //        strSQL = strSQL + " FROM ACC_DAY_BOOK_TEMP,ACC_LEDGER,ACC_VOUCHER WHERE ACC_LEDGER.LEDGER_NAME_MERZE=ACC_DAY_BOOK_TEMP.VOUCHER_REVERSE_LEDGER  ";
        //        strSQL = strSQL + " AND ACC_VOUCHER.REVERSE_LEDGER1 =ACC_LEDGER.LEDGER_NAME AND ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='PF' ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();

        //        strSQL = "UPDATE ACC_DAY_BOOK_TEMP SET ACC_DAY_BOOK_TEMP.HL_AMOUNT=ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT ";
        //        strSQL = strSQL + " FROM ACC_DAY_BOOK_TEMP,ACC_LEDGER,ACC_VOUCHER WHERE ACC_LEDGER.LEDGER_NAME_MERZE=ACC_DAY_BOOK_TEMP.VOUCHER_REVERSE_LEDGER ";
        //        strSQL = strSQL + "AND ACC_VOUCHER.REVERSE_LEDGER1 =ACC_LEDGER.LEDGER_NAME AND ACC_VOUCHER.AUTOJV=1 AND ACC_VOUCHER.LEDG_PREFIX='HL' ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();
        //        //********





        //        if (strType == "B")
        //        {
        //            strSQL = "SELECT COMP_REF_NO,ISNULL(SUM(ACC_VOUCHER.VOUCHER_CREDIT_AMOUNT),0) VOUCHER_CREDIT_AMOUNT  FROM ACC_VOUCHER  ";
        //            strSQL = strSQL + " WHERE COMP_VOUCHER_DATE BETWEEN ";
        //            strSQL = strSQL + " " + Utility.cvtSQLDateString(strTDate) + " ";
        //            strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
        //            strSQL = strSQL + "AND COMP_VOUCHER_TYPE =1   ";
        //            if (strBranchID != "")
        //            {
        //                strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
        //            }
        //            strSQL = strSQL + "GROUP BY COMP_REF_NO ";
        //            cmdInsert.Connection = gcnMain;
        //            cmdInsert.CommandText = strSQL;
        //            dr = cmdInsert.ExecuteReader();
        //            while (dr.Read())
        //            {
        //                strsting = strsting + dr["COMP_REF_NO"].ToString() + "|" + dr["VOUCHER_CREDIT_AMOUNT"].ToString() + "~";
        //            }
        //            dr.Close();

        //            if (strsting != "")
        //            {
        //                string[] words = strsting.Split('~');
        //                foreach (string ooValue in words)
        //                {
        //                    string[] ooCostLedger = ooValue.Split('|');
        //                    if (ooCostLedger[0] != "")
        //                    {
        //                        dblAmnt = Convert.ToDouble(ooCostLedger[1].ToString());
        //                        strSQL = "UPDATE ACC_DAY_BOOK_TEMP SET DEBIT_AMOUNT =" + dblAmnt + " ";
        //                        strSQL = strSQL + "WHERE COMP_REF_NO= '" + ooCostLedger[0].ToString() + "' ";
        //                        cmdInsert.CommandText = strSQL;
        //                        cmdInsert.ExecuteNonQuery();
        //                    }
        //                }
        //            }

        //        }
        //        cmdInsert.Transaction.Commit();
        //        strSQL = "SELECT ACC_DAY_BOOK_TEMP.TERITORRY_CODE ,ACC_DAY_BOOK_TEMP.ZONE,ACC_LEDGER_Z_D_A.DIVISION, ACC_LEDGER_Z_D_A.LEDGER_NAME_MERZE,ACC_DAY_BOOK_TEMP.COMP_REF_NO,ACC_DAY_BOOK_TEMP.COMP_VOUCHER_TYPE,ACC_DAY_BOOK_TEMP.COMP_VOUCHER_DATE, ";
        //        strSQL = strSQL + "ACC_DAY_BOOK_TEMP.LEDGER_NAME,ACC_DAY_BOOK_TEMP.LEDGER_NAME_NEW,ACC_DAY_BOOK_TEMP.VOUCHER_CHEQUE_DATE,";
        //        strSQL = strSQL + "ACC_DAY_BOOK_TEMP.VOUCHER_CHEQUE_NUMBER,ACC_DAY_BOOK_TEMP.VOUCHER_CHEQUE_DRAWNON,ACC_DAY_BOOK_TEMP.DEBIT_AMOUNT,ACC_DAY_BOOK_TEMP.PF_AMOUNT,ACC_DAY_BOOK_TEMP.HL_AMOUNT,ACC_DAY_BOOK_TEMP.VOUCHER_TO_BY VOUCHER_TOBY ,ACC_DAY_BOOK_TEMP.VOUCHER_REVERSE_LEDGER  ";
        //        strSQL = strSQL + "FROM ACC_DAY_BOOK_TEMP,ACC_LEDGER_Z_D_A  WHERE ACC_DAY_BOOK_TEMP.LEDGER_NAME_NEW =ACC_LEDGER_Z_D_A.LEDGER_NAME and  ACC_DAY_BOOK_TEMP.ZONE is not null  ";
        //        strSQL = strSQL + "AND ACC_LEDGER_Z_D_A.DIVISION in( select LEDGER_GROUP_NAME from USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME ='" + struserName + "') ";
        //        if (intReportOrderby != 1)
        //        {
        //            strSQL = strSQL + "ORDER BY ACC_DAY_BOOK_TEMP.ZONE,ACC_DAY_BOOK_TEMP.COMP_REF_NO  ";
        //        }
        //        else
        //        {
        //            strSQL = strSQL + "ORDER BY ACC_DAY_BOOK_TEMP.COMP_REF_NO ";
        //        }
        //        SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
        //        dr = cmd.ExecuteReader();
        //        while (dr.Read())
        //        {
        //            RAccountsGroup oLedg = new RAccountsGroup();

        //            if (dr["ZONE"].ToString() != "")
        //            {
        //                oLedg.strZone = dr["ZONE"].ToString();
        //            }
        //            else
        //            {
        //                oLedg.strZone = "";
        //            }
        //            if (dr["TERITORRY_CODE"].ToString() != "")
        //            {
        //                oLedg.strTC = dr["TERITORRY_CODE"].ToString();
        //            }
        //            else
        //            {
        //                oLedg.strTC = "";
        //            }

        //            //if (dr["TERITORRY_NAME"].ToString() != "")
        //            //{
        //            //    oLedg.strTN = dr["TERITORRY_NAME"].ToString();
        //            //}
        //            //else
        //            //{
        //            //    oLedg.strTN = "";
        //            //}
        //            oLedg.strRefNo = dr["COMP_REF_NO"].ToString();
        //            oLedg.intvoucherType = Convert.ToInt32(dr["COMP_VOUCHER_TYPE"].ToString());
        //            oLedg.strDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd/MM/yyyy");
        //            oLedg.strCashFlowLedger = dr["LEDGER_NAME_MERZE"].ToString();
        //            oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
        //            oLedg.strReverseLedger = dr["VOUCHER_REVERSE_LEDGER"].ToString();
        //            oLedg.strToBy = dr["VOUCHER_TOBY"].ToString();
        //            if (dr["VOUCHER_CHEQUE_NUMBER"].ToString() != "")
        //            {
        //                oLedg.strCheuqueNo = dr["VOUCHER_CHEQUE_NUMBER"].ToString();
        //            }
        //            else
        //            {
        //                oLedg.strCheuqueNo = "";
        //            }
        //            if (dr["VOUCHER_CHEQUE_DATE"].ToString() != "")
        //            {
        //                oLedg.strChequeDate = Convert.ToDateTime(dr["VOUCHER_CHEQUE_DATE"]).ToString("dd/MM/yyyy");
        //            }
        //            else
        //            {
        //                oLedg.strChequeDate = "";
        //            }

        //            if (dr["VOUCHER_CHEQUE_DRAWNON"].ToString() != "")
        //            {
        //                oLedg.strDrawnOn = dr["VOUCHER_CHEQUE_DRAWNON"].ToString();
        //            }
        //            else
        //            {
        //                oLedg.strDrawnOn = "";
        //            }
        //            oLedg.dblClosing = Math.Abs(Convert.ToDouble(dr["DEBIT_AMOUNT"].ToString()));
        //            oLedg.dblPF = Math.Abs(Convert.ToDouble(dr["PF_AMOUNT"].ToString()));
        //            oLedg.dblHL = Math.Abs(Convert.ToDouble(dr["HL_AMOUNT"].ToString()));
        //            ooAccLedger.Add(oLedg);
        //        }
        //        if (!dr.HasRows)
        //        {
        //            RAccountsGroup oLedg = new RAccountsGroup();
        //            oLedg.strZone = "";
        //            oLedg.strTC = "";
        //            oLedg.strTN = "";
        //            oLedg.strRefNo = "";
        //            oLedg.intvoucherType = 0;
        //            oLedg.strDate = "";
        //            oLedg.strLedgerName = "";
        //            oLedg.strCheuqueNo = "";
        //            oLedg.strChequeDate = "";
        //            oLedg.strDrawnOn = "";
        //            oLedg.strDrawnOn = "";
        //            oLedg.dblClosing = 0;
        //            oLedg.dblPF = 0;
        //            oLedg.dblHL = 0;
        //            ooAccLedger.Add(oLedg);
        //        }
        //        dr.Close();
        //        gcnMain.Close();
        //        return ooAccLedger;

        //    }
        //}
        //#endregion
        #region "Cost category"
        public List<RAccountsGroup> GetCostCategoryReport(string strDeComID, string vdteFromDate, string vdteTodate,
                                           string strBranchId, string strCostcenterLedger)
        {
            string strSQL = null, strVMasterName = "", strsting = "";

            SqlDataReader dr;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;

                strSQL = "DELETE FROM VECTOR_CATEGORY_REPORT ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "SELECT VCATEGORY_NAME,VMASTER_NAME,SUM(VT_TRAN_AMOUNT) AS VTAMT ";
                strSQL = strSQL + "FROM VECTOR_TRANSACTION ";
                strSQL = strSQL + "WHERE ";
                strSQL = strSQL + "(VT_TRAN_DATE >= " + Utility.cvtSQLDateString(vdteFromDate) + " AND ";
                strSQL = strSQL + "VT_TRAN_DATE <= " + Utility.cvtSQLDateString(vdteTodate) + ") ";
                if (strBranchId != "")
                {
                    strSQL = strSQL + "AND BRANCH_ID = '" + strBranchId + "' ";
                    if (strCostcenterLedger != "")
                    {
                        strSQL = strSQL + "AND VCATEGORY_NAME = '" + strCostcenterLedger + "' ";
                    }
                }
                else
                {
                    if (strCostcenterLedger != "")
                    {
                        strSQL = strSQL + "AND VCATEGORY_NAME = '" + strCostcenterLedger + "' ";
                    }
                }
                strSQL = strSQL + "GROUP BY VCATEGORY_NAME,VMASTER_NAME";

                cmdInsert.Connection = gcnMain;
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    strsting = strsting + dr["VCATEGORY_NAME"].ToString() + "," + dr["VMASTER_NAME"].ToString() + "," + dr["VTAMT"].ToString() + "~";
                }
                dr.Close();

                if (strsting != "")
                {

                    string[] words = strsting.Split('~');
                    foreach (string ooValue in words)
                    {
                        string[] ooCostLedger = ooValue.Split(',');
                        if (ooCostLedger[0] != "")
                        {
                            if (strVMasterName != ooCostLedger[0].ToString())
                            {
                                strSQL = "INSERT INTO VECTOR_CATEGORY_REPORT(VECTOR_CATEGORY,VECTOR_MASTER,VT_TRAN_AMOUNT)";
                                strSQL = strSQL + "values(";
                                strSQL = strSQL + "'" + ooCostLedger[0].Replace("'", "''") + "'";
                                strSQL = strSQL + ",'" + ooCostLedger[1].Replace("'", "''") + "'";
                                strSQL = strSQL + ",'" + ooCostLedger[2].Replace("'", "''") + "'";
                                strSQL = strSQL + ")";
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                            }
                            dr.Close();
                        }
                    }
                }

                cmdInsert.Transaction.Commit();
                List<RAccountsGroup> ooAccLedger = new List<RAccountsGroup>();

                strSQL = "SELECT ";
                strSQL = strSQL + "VECTOR_CATEGORY_REPORT.VECTOR_CATEGORY, VECTOR_CATEGORY_REPORT.VECTOR_MASTER, VECTOR_CATEGORY_REPORT.VT_TRAN_AMOUNT ";
                strSQL = strSQL + "FROM ";
                strSQL = strSQL + "VECTOR_CATEGORY_REPORT VECTOR_CATEGORY_REPORT ";
                strSQL = strSQL + "ORDER BY ";
                strSQL = strSQL + "VECTOR_CATEGORY_REPORT.VECTOR_CATEGORY, ";
                strSQL = strSQL + "VECTOR_CATEGORY_REPORT.VECTOR_MASTER ";

                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();

                while (dr.Read())
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strLedgerName = dr["VECTOR_CATEGORY"].ToString();
                    oLedg.strVectormaster = dr["VECTOR_MASTER"].ToString();
                    oLedg.dblOpening = (Convert.ToDouble(dr["VT_TRAN_AMOUNT"]));
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RAccountsGroup oLedg = new RAccountsGroup();
                    oLedg.strLedgerName = "";
                    oLedg.strVectormaster = "";
                    oLedg.dblOpening = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();

                return ooAccLedger;

            }
        }
        #endregion
        #region PartyWiseS
        public List<RProductSales> mGetPartyWiseS(string strDeComID, string strFdate, string strTDate, string strString, string strSelction, bool blngAccessControl, string strUserName)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RProductSales> ooAccLedger = new List<RProductSales>();
                strSQL = "SELECT ";
                strSQL = strSQL + "ACC_LEDGER.LEDGER_NAME_MERZE, ACC_CUSTOMER_LIST.LEDGER_NAME_MERZE SALES_REP,";
                strSQL = strSQL + "SUM(ACC_BILL_TRAN.BILL_QUANTITY)BILL_QUANTITY, SUM(ACC_BILL_TRAN.BILL_QUANTITY_BONUS)BILL_QUANTITY_BONUS,";
                strSQL = strSQL + "INV_STOCKITEM.STOCKITEM_NAME, INV_STOCKITEM.STOCKGROUP_NAME, INV_STOCKITEM.STOCKCATEGORY_NAME ";
                strSQL = strSQL + "FROM ";
                strSQL = strSQL + "ACC_LEDGER,ACC_COMPANY_VOUCHER  , ACC_BILL_TRAN ,INV_STOCKITEM INV_STOCKITEM,ACC_CUSTOMER_LIST  WHERE ACC_COMPANY_VOUCHER.SALES_REP  =ACC_CUSTOMER_LIST.LEDGER_NAME and ";
                strSQL = strSQL + "ACC_LEDGER.LEDGER_NAME =ACC_COMPANY_VOUCHER.LEDGER_NAME AND ACC_COMPANY_VOUCHER.COMP_REF_NO =ACC_BILL_TRAN.COMP_REF_NO AND ";
                strSQL = strSQL + "ACC_BILL_TRAN.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME  ";
                strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE=16 AND ACC_COMPANY_VOUCHER.SALES_REP <> ''  ";
                if (strString != "")
                {
                    strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.LEDGER_NAME = '" + strString + "') ";
                }
                if (strSelction != "")
                {
                    strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.SALES_REP = '" + strSelction + "') ";
                }

                strSQL = strSQL + "GROUP BY  ACC_LEDGER.LEDGER_NAME_MERZE,ACC_CUSTOMER_LIST.LEDGER_NAME_MERZE,INV_STOCKITEM.STOCKITEM_NAME, INV_STOCKITEM.STOCKGROUP_NAME, INV_STOCKITEM.STOCKCATEGORY_NAME ";
                strSQL = strSQL + "ORDER BY ";
                strSQL = strSQL + "ACC_LEDGER.LEDGER_NAME_MERZE, ACC_CUSTOMER_LIST.LEDGER_NAME_MERZE, INV_STOCKITEM.STOCKGROUP_NAME ASC,INV_STOCKITEM.STOCKITEM_NAME ";


                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RProductSales oLedg = new RProductSales();
                    oLedg.strLedgername = dr["LEDGER_NAME_MERZE"].ToString();
                    oLedg.strSALESREP = dr["SALES_REP"].ToString();
                    oLedg.DblBillQty = Convert.ToDouble(dr["BILL_QUANTITY"].ToString());
                    oLedg.DblBillQtyBonus = Convert.ToDouble(dr["BILL_QUANTITY_BONUS"].ToString());
                    oLedg.strStockItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.strStockGroupName = dr["STOCKGROUP_NAME"].ToString();
                    oLedg.strStockCategoryName = dr["STOCKCATEGORY_NAME"].ToString();
                    ooAccLedger.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RProductSales oLedg = new RProductSales();
                    oLedg.strLedgername = "";
                    oLedg.strSALESREP = "";
                    oLedg.DblBillQty = 0;
                    oLedg.DblBillQtyBonus = 0;
                    oLedg.strStockItemName = "";
                    oLedg.strStockGroupName = "";
                    oLedg.strStockCategoryName = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }


        #endregion
        #region "VaoucherSalesChallan"
        public List<RSalesPurchase> mGetVoucherSalesChalan(string strDeComID, int intvtype, string strFDate, string strTDate, string strLedgername, string strBranchId, int intMode)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RSalesPurchase> ooAccLedger = new List<RSalesPurchase>();
                strSQL = "SELECT ACC_COMP_BILL_TRAN_QRY.COMP_VOUCHER_DATE, substring(ACC_COMP_BILL_TRAN_QRY.COMP_REF_NO,7,30) COMP_REF_NO, ";
                strSQL = strSQL + "ACC_COMP_BILL_TRAN_QRY.COMP_VOUCHER_DUE_DATE, ACC_COMP_BILL_TRAN_QRY.COMP_VOUCHER_NARRATION, ";
                strSQL = strSQL + "ACC_COMP_BILL_TRAN_QRY.STOCKITEM_NAME, ACC_COMP_BILL_TRAN_QRY.BILL_UOM, ACC_COMP_BILL_TRAN_QRY.BILL_QUANTITY, ";
                strSQL = strSQL + "ACC_COMP_BILL_TRAN_QRY.BILL_RATE, ACC_COMP_BILL_TRAN_QRY.BILL_NET_AMOUNT, ";
                strSQL = strSQL + "ACC_BRANCH.BRANCH_NAME, ACC_LEDGER.LEDGER_NAME_MERZE, ";
                strSQL = strSQL + "ACC_COMP_BILL_TRAN_QRY.LEDGER_NAME AS Led_Name, ";
                strSQL = strSQL + "ACC_COMP_BILL_TRAN_QRY.GODOWNS_NAME, ACC_LEDGER.LEDGER_ADDRESS1, ACC_LEDGER.LEDGER_POSTAL, ";
                strSQL = strSQL + "ACC_LEDGER.LEDGER_ADDRESS2, ACC_LEDGER.LEDGER_CITY FROM  ACC_COMP_BILL_TRAN_QRY AS ACC_COMP_BILL_TRAN_QRY INNER JOIN ACC_BRANCH  ";
                strSQL = strSQL + "AS ACC_BRANCH ON ACC_COMP_BILL_TRAN_QRY.BRANCH_ID = ACC_BRANCH.BRANCH_ID INNER JOIN ";
                strSQL = strSQL + "ACC_LEDGER AS ACC_LEDGER ON ACC_COMP_BILL_TRAN_QRY.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                strSQL = strSQL + "WHERE (ACC_COMP_BILL_TRAN_QRY.COMP_VOUCHER_TYPE = " + intvtype + ") ";
                if (intvtype == (int)Utility.VOUCHER_TYPE.vt_SALESSAMPLE)
                {
                    strSQL = strSQL + "AND (ACC_COMP_BILL_TRAN_QRY.SAMPLE_STATUS = 1) ";
                }
                else
                {
                    if (intMode == 3)
                    {
                        if (strBranchId == "Sales Chalan")
                        {
                            strSQL = strSQL + "AND  (ACC_COMP_BILL_TRAN_QRY.SAMPLE_STATUS = 0) ";
                        }
                        else if (intvtype == 13)
                        {
                            strSQL = strSQL + "AND  (ACC_COMP_BILL_TRAN_QRY.SAMPLE_STATUS = 0) ";
                        }
                        else if (intvtype == 32)
                        {
                            strSQL = strSQL + "AND  (ACC_COMP_BILL_TRAN_QRY.SAMPLE_STATUS = 0) ";
                        }
                        else
                        {

                            strSQL = strSQL + "AND  (ACC_COMP_BILL_TRAN_QRY.SAMPLE_STATUS = 1) ";
                        }

                    }
                    if (intMode == 1)
                    {
                        if (strBranchId == "Sales Chalan (Detail)")
                        {
                            strSQL = strSQL + "AND  (ACC_COMP_BILL_TRAN_QRY.SAMPLE_STATUS >= 0) ";
                        }
                        else if (intvtype == 13)
                        {
                            strSQL = strSQL + "AND  (ACC_COMP_BILL_TRAN_QRY.SAMPLE_STATUS = 0) ";
                        }
                        else if (intvtype == 15)
                        {
                            if (strLedgername == "Head Office Sample")
                            {
                                strSQL = strSQL + "AND  (ACC_COMP_BILL_TRAN_QRY.SAMPLE_STATUS = 1) ";
                            }
                            else
                            {
                                strSQL = strSQL + "AND  (ACC_COMP_BILL_TRAN_QRY.SAMPLE_STATUS = 0) ";
                            }
                        }
                        else
                        {
                            strSQL = strSQL + "AND  (ACC_COMP_BILL_TRAN_QRY.SAMPLE_STATUS = 1) ";
                        }

                    }

                }
                if (strFDate != "")
                {
                    strSQL = strSQL + "AND (ACC_COMP_BILL_TRAN_QRY.COMP_VOUCHER_DATE >= (" + Utility.cvtSQLDateString(strFDate) + ")) ";
                }
                if (intMode == 1)
                {
                    if (strLedgername != "")
                    {
                        strSQL = strSQL + "AND (ACC_COMP_BILL_TRAN_QRY.LEDGER_NAME = '" + strLedgername + "') ";
                    }

                }
                if (intMode == 2)
                {
                    if (strLedgername != "")
                    {
                        strSQL = strSQL + "AND (ACC_COMP_BILL_TRAN_QRY.LEDGER_NAME = '" + strLedgername + "') ";
                    }

                }
                if (intMode == 3)
                {
                    strSQL = strSQL + "AND (ACC_COMP_BILL_TRAN_QRY.COMP_REF_NO= '" + strLedgername + "') ";
                }

                if (strTDate != "")
                {
                    strSQL = strSQL + " and(ACC_COMP_BILL_TRAN_QRY.COMP_VOUCHER_DATE <= (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                }
                strSQL = strSQL + "ORDER BY ACC_COMP_BILL_TRAN_QRY.COMP_VOUCHER_DATE, ACC_COMP_BILL_TRAN_QRY.COMP_REF_NO, LEDGER_NAME_MERZE  ";
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RSalesPurchase oLedg = new RSalesPurchase();
                    oLedg.strvouchearDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.strRefNo = dr["COMP_REF_NO"].ToString();
                    oLedg.strVDate = Convert.ToDateTime(dr["COMP_VOUCHER_DUE_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.strEmail = dr["COMP_VOUCHER_NARRATION"].ToString();
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.strBILL_UOM = dr["BILL_UOM"].ToString();
                    oLedg.dblBilQty = Convert.ToDouble(dr["BILL_QUANTITY"].ToString());
                    oLedg.dblBillRate = Convert.ToDouble(dr["BILL_RATE"].ToString());
                    oLedg.dblNetBillAmount = Convert.ToDouble(dr["BILL_NET_AMOUNT"].ToString());
                    oLedg.strBranchName = dr["BRANCH_NAME"].ToString();
                    oLedg.strLedgerName = dr["LEDGER_NAME_MERZE"].ToString();
                    oLedg.strGodowns = dr["GODOWNS_NAME"].ToString();
                    oLedg.strAddress1 = dr["LEDGER_ADDRESS1"].ToString();
                    oLedg.strAddress2 = dr["LEDGER_ADDRESS2"].ToString();
                    oLedg.strPostal = dr["LEDGER_POSTAL"].ToString();
                    oLedg.strCity = dr["LEDGER_CITY"].ToString();
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RSalesPurchase oLedg = new RSalesPurchase();
                    oLedg.strvouchearDate = "";
                    oLedg.strRefNo = "";
                    oLedg.strVDate = "";
                    oLedg.strEmail = "";
                    oLedg.strItemName = "";
                    oLedg.strBILL_UOM = "";
                    oLedg.dblBilQty = 0;
                    oLedg.dblBillRate = 0;
                    oLedg.dblNetBillAmount = 0;
                    oLedg.strBranchName = "";
                    oLedg.strLedgerName = "";
                    oLedg.strGodowns = "";
                    oLedg.strAddress1 = "";
                    oLedg.strAddress2 = "";
                    oLedg.strPostal = "";
                    oLedg.strCity = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }
        #endregion
        #region "Get PartyAmount"
        public List<RProductSales> mGetPartyProductSalesAmount(string strDeComID, string strBranchId, string strFDate, string strTDate, string strString, string strledgerName, int intmode, string strCustomerName)
        {

            string strmode = "";
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RProductSales> ooAccLedger = new List<RProductSales>();
                if (strledgerName != "")
                {
                    if (Utility.Left(strledgerName, 3).ToUpper() == "DSM" || Utility.Left(strledgerName, 3).ToUpper() == "RSM")
                    {
                        strmode = "D";
                    }
                    if (Utility.Right(strledgerName, 1).ToUpper() == "ZONE")
                    {
                        strmode = "Z";
                    }
                    if (Utility.Left(strledgerName, 2).ToUpper() == "AM" || Utility.Left(strledgerName, 2).ToUpper() == "FM")
                    {
                        strmode = "F";
                    }
                    if (strledgerName == "Sundry Debtors")
                    {
                        strmode = "S";
                    }
                }
                //intmode 1= GroupWise, 2= MpoWise 
                if (intmode == 2)
                {

                    strSQL = "SELECT ACC_BILL_TRAN.BILL_QUANTITY, ACC_BILL_TRAN.BILL_QUANTITY_BONUS, INV_STOCKITEM.STOCKITEM_NAME, INV_STOCKITEM.POWER_CLASS, INV_STOCKITEM.STOCKGROUP_NAME,";
                    strSQL = strSQL + "INV_STOCKITEM.STOCKCATEGORY_NAME, ACC_BRANCH.BRANCH_NAME, ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_PARENT_GROUP, ACC_CUSTOMER_LIST.LEDGER_NAME_MERZE AS Customer, ACC_CUSTOMER_LIST.LEDGER_NAME, ACC_CUSTOMER_LIST.LEDGER_PARENT_GROUP ";
                    strSQL = strSQL + "FROM  ACC_BILL_TRAN,INV_STOCKITEM,ACC_BRANCH,ACC_LEDGER,ACC_CUSTOMER_LIST,ACC_COMPANY_VOUCHER ";
                    strSQL = strSQL + "where ACC_COMPANY_VOUCHER.SALES_REP =ACC_CUSTOMER_LIST.LEDGER_NAME AND ACC_COMPANY_VOUCHER.COMP_REF_NO =ACC_BILL_TRAN.COMP_REF_NO AND INV_STOCKITEM.STOCKITEM_NAME= ACC_BILL_TRAN.STOCKITEM_NAME ";
                    strSQL = strSQL + "AND  ACC_BRANCH.BRANCH_ID =ACC_COMPANY_VOUCHER.BRANCH_ID AND  ACC_COMPANY_VOUCHER.LEDGER_NAME= ACC_LEDGER.LEDGER_NAME  ";
                    strSQL = strSQL + "and (ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFDate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) AND (ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = 16) AND ";
                    strSQL = strSQL + "(ACC_COMPANY_VOUCHER.SALES_REP <> '') ";
                    if (strBranchId != "")
                    {
                        strSQL = strSQL + " AND (ACC_COMPANY_VOUCHER.BRANCH_ID = '" + strBranchId + "') ";
                    }
                    if (strCustomerName != "")
                    {
                        strSQL = strSQL + "AND ACC_CUSTOMER_LIST.LEDGER_NAME_MERZE IN (" + strCustomerName + ") ";
                    }
                    if (strledgerName != "")
                    {

                        strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_NAME_MERZE = '" + strledgerName + "') ";

                    }

                    if (strString != "Customer")
                    {
                        if (strString != "")
                        {
                            strSQL = strSQL + "AND( ACC_CUSTOMER_LIST.LEDGER_PARENT_GROUP = '" + strString + "')";
                        }

                    }
                    if (strString == "Customer")
                    {
                        if (strString != "")
                        {
                            strSQL = strSQL + "AND(ACC_CUSTOMER_LIST.LEDGER_PRIMARY_GROUP = '" + strString + "')";
                        }

                    }
                }
                if (intmode == 1)
                {

                    strSQL = "SELECT  ACC_BILL_TRAN.BILL_QUANTITY, ACC_BILL_TRAN.BILL_QUANTITY_BONUS, INV_STOCKITEM.STOCKITEM_NAME, INV_STOCKITEM.POWER_CLASS, INV_STOCKITEM.STOCKGROUP_NAME, ";
                    strSQL = strSQL + "INV_STOCKITEM.STOCKCATEGORY_NAME, ACC_BRANCH.BRANCH_NAME, ACC_LEDGER.LEDGER_PARENT_GROUP, ACC_LEDGER.LEDGER_NAME AS MPOName, ACC_CUSTOMER_LIST.LEDGER_NAME, ";
                    strSQL = strSQL + "ACC_CUSTOMER_LIST.LEDGER_NAME_MERZE AS Expr1, ACC_LEDGER_Z_D_A.LEDGER_NAME_MERZE ";
                    strSQL = strSQL + "FROM  ACC_COMPANY_VOUCHER AS ACC_COMPANY_VOUCHER INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER AS ACC_LEDGER ON ACC_COMPANY_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME INNER JOIN ";
                    strSQL = strSQL + "ACC_BILL_TRAN AS ACC_BILL_TRAN ON ACC_COMPANY_VOUCHER.COMP_REF_NO = ACC_BILL_TRAN.COMP_REF_NO INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM AS INV_STOCKITEM ON ACC_BILL_TRAN.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME INNER JOIN ";
                    strSQL = strSQL + "ACC_BRANCH ON ACC_COMPANY_VOUCHER.BRANCH_ID = ACC_BRANCH.BRANCH_ID INNER JOIN ";
                    strSQL = strSQL + "ACC_CUSTOMER_LIST ON ACC_COMPANY_VOUCHER.SALES_REP = ACC_CUSTOMER_LIST.LEDGER_NAME INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER_Z_D_A ON ACC_COMPANY_VOUCHER.LEDGER_NAME = ACC_LEDGER_Z_D_A.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = 16) ";
                    strSQL = strSQL + "and  (ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFDate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                    if (strBranchId != "")
                    {
                        strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.BRANCH_ID = '" + strBranchId + "') ";
                    }


                    if (strCustomerName != "")
                    {
                        strSQL = strSQL + "AND ACC_CUSTOMER_LIST.LEDGER_NAME_MERZE IN (" + strCustomerName + ") ";
                    }
                    if (strledgerName != "")
                    {

                        if (strmode == "D")
                        {
                            strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A.ZONE  = '" + strledgerName + "') ";
                        }
                        if (strmode == "Z")
                        {
                            strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A.DIVISION  = '" + strledgerName + "') ";
                        }
                        if (strmode == "F")
                        {
                            strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A.AREA  = '" + strledgerName + "') ";
                        }
                        if (strmode == "S")
                        {
                            //strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A.LEDGER_NAME  = '" + strledgerName + "') ";
                        }

                    }

                    if (strString != "Customer")
                    {
                        if (strString != "")
                        {
                            strSQL = strSQL + "AND( ACC_CUSTOMER_LIST.LEDGER_PARENT_GROUP = '" + strString + "')";
                        }

                    }
                    if (strString == "Customer")
                    {
                        if (strString != "")
                        {
                            strSQL = strSQL + "AND(ACC_CUSTOMER_LIST.LEDGER_PRIMARY_GROUP = '" + strString + "')";
                        }

                    }
                    //strSQL = strSQL + "ORDER BY ACC_COMPANY_VOUCHER.LEDGER_NAME, INV_STOCKITEM.STOCKGROUP_NAME, INV_STOCKITEM.POWER_CLASS, INV_STOCKITEM.STOCKITEM_NAME ";
                }
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                cmd.CommandTimeout = 0;
                dr = cmd.ExecuteReader();

                while (dr.Read())
                {

                    RProductSales oLedg = new RProductSales();
                    oLedg.strLedgername = dr["LEDGER_NAME_MERZE"].ToString();
                    oLedg.strStockItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.strPowrClass = dr["POWER_CLASS"].ToString();
                    oLedg.DblBillQty = Convert.ToDouble(dr["BILL_QUANTITY"].ToString());
                    oLedg.DblBillQtyBonus = Convert.ToDouble(dr["BILL_QUANTITY_BONUS"].ToString());
                    oLedg.strStockGroupName = dr["STOCKGROUP_NAME"].ToString();
                    oLedg.strStockCategoryName = dr["STOCKCATEGORY_NAME"].ToString();
                    oLedg.strLedgerGroupName = dr["LEDGER_PARENT_GROUP"].ToString();
                    oLedg.strBranchName = dr["BRANCH_NAME"].ToString();
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RProductSales oLedg = new RProductSales();
                    oLedg.strLedgername = "";
                    oLedg.strRefNo = "";
                    oLedg.strVoucheDate = "";
                    oLedg.DblBillP = 0;
                    oLedg.strOrderNo = "";
                    oLedg.strSALESREP = "";
                    oLedg.strAddress1 = "";
                    oLedg.strAddress2 = "";
                    oLedg.strBranchName = "";
                    ooAccLedger.Add(oLedg);
                }
                cmd.CommandTimeout = 30;
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }

        public List<RProductSales> mGetPartyAmount(string strDeComID, string strBranchId, string strFDate, string strTDate, string strString, string strledgerName, int intmode, string strCustomerName)
        {
            //Customer  intmode =1
            string strmode = "";
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                if (strledgerName != "")
                {
                    if (strledgerName != "")
                    {
                        if (Utility.Left(strledgerName, 3).ToUpper() == "DSM" || Utility.Left(strledgerName, 3).ToUpper() == "RSM")
                        {
                            strmode = "D";
                        }
                        if (Utility.Right(strledgerName, 1).ToUpper() == "ZONE")
                        {
                            strmode = "Z";
                        }
                        if (Utility.Left(strledgerName, 2).ToUpper() == "AM" || Utility.Left(strledgerName, 2).ToUpper() == "FM")
                        {
                            strmode = "F";
                        }
                        if (strledgerName == "Sundry Debtors")
                        {
                            strmode = "S";
                        }
                    }
                }
                List<RProductSales> ooAccLedger = new List<RProductSales>();
                //intmode 1= GroupWise, 2= MpoWise 
                if (intmode == 2)
                {
                    strSQL = "SELECT distinct ACC_LEDGER.LEDGER_NAME_MERZE, ACC_COMPANY_VOUCHER.COMP_REF_NO, ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE, ACC_COMPANY_VOUCHER.COMP_VOUCHER_NET_AMOUNT, ";
                    strSQL = strSQL + "ACC_COMPANY_VOUCHER.ORDER_NO, ACC_LEDGER.LEDGER_NAME, ACC_LEDGER.LEDGER_ADDRESS1, ACC_LEDGER.LEDGER_ADDRESS2, ACC_LEDGER.LEDGER_CITY, ";
                    strSQL = strSQL + "USER_PRIVILEGES_BRANCH_VIEW.BRANCH_NAME ";
                    strSQL = strSQL + "FROM   ACC_COMPANY_VOUCHER AS ACC_COMPANY_VOUCHER INNER JOIN ";
                    strSQL = strSQL + "USER_PRIVILEGES_BRANCH_VIEW AS USER_PRIVILEGES_BRANCH_VIEW ON ACC_COMPANY_VOUCHER.BRANCH_ID = USER_PRIVILEGES_BRANCH_VIEW.BRANCH_ID INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER AS ACC_LEDGER ON ACC_COMPANY_VOUCHER.SALES_REP = ACC_LEDGER.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFDate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) AND (ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = 16) AND ";
                    if (strBranchId != "")
                    {
                        strSQL = strSQL + "(ACC_COMPANY_VOUCHER.BRANCH_ID = '" + strBranchId + "') ";
                    }
                    if (strCustomerName != "")
                    {
                        strSQL = strSQL + "AND ACC_LEDGER.LEDGER_NAME_MERZE IN (" + strCustomerName + ") ";
                    }
                    if (strledgerName != "")
                    {


                        strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.LEDGER_NAME  = '" + strledgerName + "') ";

                    }

                    if (strString != "Customer")
                    {
                        if (strString != "")
                        {
                            strSQL = strSQL + "AND( ACC_LEDGER.LEDGER_PARENT_GROUP = '" + strString + "')";
                        }

                    }
                    if (strString == "Customer")
                    {
                        if (strString != "")
                        {
                            strSQL = strSQL + "AND(ACC_LEDGER.LEDGER_PRIMARY_GROUP = '" + strString + "')";
                        }

                    }
                    strSQL = strSQL + "order by ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE,ACC_COMPANY_VOUCHER.COMP_REF_NO ";
                }
                if (intmode == 1)
                {
                    strSQL = "SELECT DISTINCT ";
                    strSQL = strSQL + "ACC_LEDGER.LEDGER_NAME_MERZE, ACC_COMPANY_VOUCHER.COMP_REF_NO, ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE, ACC_COMPANY_VOUCHER.COMP_VOUCHER_NET_AMOUNT,";
                    strSQL = strSQL + "ACC_COMPANY_VOUCHER.ORDER_NO, ACC_LEDGER.LEDGER_NAME, ACC_LEDGER.LEDGER_ADDRESS1, ACC_LEDGER.LEDGER_ADDRESS2, ACC_LEDGER.LEDGER_CITY, ";
                    strSQL = strSQL + "USER_PRIVILEGES_BRANCH_VIEW.BRANCH_NAME, ACC_LEDGER_Z_D_A.ZONE ";
                    strSQL = strSQL + "FROM  ACC_COMPANY_VOUCHER AS ACC_COMPANY_VOUCHER INNER JOIN ";
                    strSQL = strSQL + "USER_PRIVILEGES_BRANCH_VIEW AS USER_PRIVILEGES_BRANCH_VIEW ON ACC_COMPANY_VOUCHER.BRANCH_ID = USER_PRIVILEGES_BRANCH_VIEW.BRANCH_ID INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER AS ACC_LEDGER ON ACC_COMPANY_VOUCHER.SALES_REP = ACC_LEDGER.LEDGER_NAME INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER_Z_D_A ON ACC_LEDGER.LEDGER_REP_NAME = ACC_LEDGER_Z_D_A.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFDate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) AND (ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = 16) AND ";

                    if (strBranchId != "")
                    {
                        strSQL = strSQL + "(ACC_COMPANY_VOUCHER.BRANCH_ID = '" + strBranchId + "') ";
                    }
                    if (strCustomerName != "")
                    {
                        strSQL = strSQL + "AND ACC_LEDGER.LEDGER_NAME_MERZE IN (" + strCustomerName + ") ";
                    }
                    if (strledgerName != "")
                    {

                        if (strmode == "D")
                        {
                            strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A.ZONE  = '" + strledgerName + "') ";
                        }
                        if (strmode == "Z")
                        {
                            strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A.DIVISION  = '" + strledgerName + "') ";
                        }
                        if (strmode == "F")
                        {
                            strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A.AREA  = '" + strledgerName + "') ";
                        }
                        if (strmode == "S")
                        {
                            //strSQL = strSQL + "AND (ACC_LEDGER_Z_D_A.LEDGER_NAME  = '" + strledgerName + "') ";
                        }


                    }

                    if (strString != "Customer")
                    {
                        if (strString != "")
                        {
                            strSQL = strSQL + "AND( ACC_LEDGER.LEDGER_PARENT_GROUP = '" + strString + "')";
                        }

                    }
                    if (strString == "Customer")
                    {
                        if (strString != "")
                        {
                            strSQL = strSQL + "AND(ACC_LEDGER.LEDGER_PRIMARY_GROUP = '" + strString + "')";
                        }

                    }
                    strSQL = strSQL + "order by ACC_COMPANY_VOUCHER.COMP_REF_NO, ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE ";
                }
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();

                while (dr.Read())
                {
                    RProductSales oLedg = new RProductSales();
                    oLedg.strLedgername = dr["LEDGER_NAME_MERZE"].ToString();
                    oLedg.strRefNo = dr["COMP_REF_NO"].ToString();
                    oLedg.strVoucheDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.DblBillAmount = Convert.ToDouble(dr["COMP_VOUCHER_NET_AMOUNT"].ToString());
                    oLedg.strOrderNo = dr["ORDER_NO"].ToString();
                    oLedg.strSALESREP = dr["LEDGER_NAME"].ToString();
                    oLedg.strAddress1 = dr["LEDGER_NAME_MERZE"].ToString() + dr["LEDGER_ADDRESS1"].ToString();
                    oLedg.strAddress2 = dr["LEDGER_ADDRESS2"].ToString();
                    oLedg.strBranchName = dr["BRANCH_NAME"].ToString();
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RProductSales oLedg = new RProductSales();
                    oLedg.strLedgername = "";
                    oLedg.strRefNo = "";
                    oLedg.strVoucheDate = "";
                    oLedg.DblBillP = 0;
                    oLedg.strOrderNo = "";
                    oLedg.strSALESREP = "";
                    oLedg.strAddress1 = "";
                    oLedg.strAddress2 = "";
                    oLedg.strBranchName = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }
        #endregion
        #region "Profitability"
        public List<RStockInformation> mGetProfitability(string strDeComID, string strFdate, string strTDate, string strGroupName)
        {
            string strSQL = null;
            SqlDataReader dr;
            SqlCommand cmdDr = new SqlCommand();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();


                List<RStockInformation> ooAccLedger = new List<RStockInformation>();

                strSQL = "SELECT INV_STOCKITEM.STOCKITEM_NAME,INV_STOCKITEM.STOCKITEM_PRIMARY_GROUP,INV_STOCKITEM.STOCKGROUP_NAME,";
                strSQL = strSQL + "INV_TRAN.INV_DATE, INV_TRAN.INV_VOUCHER_TYPE,INV_TRAN.OUTWARD_QUANTITY,";
                strSQL = strSQL + "INV_TRAN.OUTWARD_SALES_AMOUNT , INV_TRAN.OUTWARD_COST_AMOUNT ";
                strSQL = strSQL + "FROM INV_STOCKITEM INV_STOCKITEM INNER JOIN ";
                strSQL = strSQL + "INV_TRAN INV_TRAN ON INV_STOCKITEM.STOCKITEM_NAME = INV_TRAN.STOCKITEM_NAME ";
                strSQL = strSQL + "WHERE (INV_TRAN.INV_DATE >= " + Utility.cvtSQLDateString(strFdate) + ") ";
                strSQL = strSQL + "AND (INV_TRAN.INV_DATE <= " + Utility.cvtSQLDateString(strTDate) + ") ";
                if (strGroupName != "")
                {
                    strSQL = strSQL + "AND INV_STOCKITEM.STOCKGROUP_NAME= '" + strGroupName + "' ";
                }
                strSQL = strSQL + "AND (INV_TRAN.INV_VOUCHER_TYPE = 18 OR INV_TRAN.INV_VOUCHER_TYPE = 16 OR INV_TRAN.INV_VOUCHER_TYPE = 15) ";
                strSQL = strSQL + "ORDER BY INV_STOCKITEM.STOCKGROUP_NAME,INV_STOCKITEM.STOCKITEM_NAME ";
                cmdDr.CommandText = strSQL;
                cmdDr.Connection = gcnMain;
                dr = cmdDr.ExecuteReader();
                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.strGroupPrimary = dr["STOCKGROUP_NAME"].ToString();
                    oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();
                    oLedg.strVType = dr["INV_VOUCHER_TYPE"].ToString();
                    oLedg.strInvDate = Convert.ToDateTime(dr["INV_DATE"]).ToString("dd/MM/yyyy");
                    oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString()));
                    oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_SALES_AMOUNT"].ToString()));
                    oLedg.dblclsAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_COST_AMOUNT"].ToString()));
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strItemName = "";
                    oLedg.strVType = "";
                    oLedg.dblOutWardQty = 0;
                    oLedg.dblOutwardAmnt = 0;
                    oLedg.dblclsAmnt = 0;
                    ooAccLedger.Add(oLedg);
                }

                dr.Close();

                gcnMain.Close();
                return ooAccLedger;
            }
        }
        #endregion
        #region "SlowFastMoving"
        public List<RStockInformation> mGetSlowFastMoving(string strDeComID, string strFdate, string strTDate, DateTime dteTDate, string str_S_F_Z, string strSelction, string strString)
        {
            string strSQL = null;
            SqlDataReader dr;

            List<RStockInformation> ooAccLedger = new List<RStockInformation>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlTransaction myTrans;
                SqlCommand cmdInsert = new SqlCommand();
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;


                strSQL = "DELETE FROM INV_SLOW_MOVING_ITEM ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "SELECT STOCKITEM_NAME, SUM(BILL_QUANTITY) AS BILLQTY, ";
                strSQL = strSQL + "SUM(BILL_NET_AMOUNT) AS BILLAMOUNT, ";
                strSQL = strSQL + "MAX(COMP_VOUCHER_DATE) AS STOCKITEM_LAST_SOLD_DATE ";
                strSQL = strSQL + "FROM ACC_BILL_TRAN  ";
                strSQL = strSQL + "WHERE COMP_VOUCHER_DATE  BETWEEN  ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "AND COMP_VOUCHER_TYPE =  " + (int)Utility.VOUCHER_TYPE.vtSALES_INVOICE + "  ";
                //strSQL = strSQL + "AND STOCKITEM_NAME  ='Silicea 60x - 30gm'" ;
                strSQL = strSQL + "GROUP BY STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    DateTime dte1 = Convert.ToDateTime(dr["STOCKITEM_LAST_SOLD_DATE"]);
                    DateTime dte2 = dteTDate;
                    oLedg.lngDiff = Utility.DateDiff(Utility.DateInterval.Day, dte1, dte2);
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.dblclsQty = Math.Abs(Convert.ToDouble(dr["BILLQTY"]));
                    oLedg.dblclsAmnt = Math.Abs(Convert.ToDouble(dr["BILLAMOUNT"]));
                    if (dr["STOCKITEM_LAST_SOLD_DATE"].ToString() != "")
                    {
                        oLedg.strInvDate = Convert.ToDateTime(dr["STOCKITEM_LAST_SOLD_DATE"]).ToString("dd/MM/yyyy");
                    }
                    else
                    {
                        oLedg.strInvDate = "";
                    }
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();

                if (ooAccLedger.Count > 0)
                {
                    foreach (RStockInformation oinsert in ooAccLedger)
                    {
                        strSQL = "INSERT INTO INV_SLOW_MOVING_ITEM (STOCKITEM_NAME,QTY,AMOUNT,DAYDIFF,STOCKITEM_LAST_SOLD_DATE) VALUES (";
                        strSQL = strSQL + "'" + oinsert.strItemName.Replace("'", "''") + "', ";
                        strSQL = strSQL + " " + oinsert.dblclsQty + ",";
                        strSQL = strSQL + " " + oinsert.dblclsAmnt + ",";
                        strSQL = strSQL + "" + oinsert.lngDiff + ",";
                        strSQL = strSQL + "" + Utility.cvtSQLDateString(oinsert.strInvDate) + ")";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                }
                cmdInsert.Transaction.Commit();

                List<RStockInformation> oSqlReport = new List<RStockInformation>();
                if (str_S_F_Z != "Z")
                {
                    strSQL = "SELECT INV_STOCKITEM.STOCKGROUP_NAME,";
                    strSQL = strSQL + "INV_SLOW_MOVING_ITEM.STOCKITEM_NAME, ";
                    strSQL = strSQL + "INV_SLOW_MOVING_ITEM.STOCKITEM_LAST_SOLD_DATE, ";
                    strSQL = strSQL + "INV_SLOW_MOVING_ITEM.QTY, ";
                    strSQL = strSQL + "INV_SLOW_MOVING_ITEM.AMOUNT, ";
                    strSQL = strSQL + "INV_SLOW_MOVING_ITEM.DAYDIFF ";
                    strSQL = strSQL + "FROM ";
                    strSQL = strSQL + "INV_SLOW_MOVING_ITEM INV_SLOW_MOVING_ITEM INNER JOIN INV_STOCKITEM INV_STOCKITEM ON ";
                    strSQL = strSQL + "INV_SLOW_MOVING_ITEM.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME ";
                    if (strString != "")
                    {

                        if (strSelction == "G")
                        {

                            strSQL = strSQL + " AND INV_STOCKITEM.STOCKGROUP_NAME IN(" + strString + ")";
                        }
                        else if (strSelction == "C")
                        {
                            strSQL = strSQL + " AND INV_STOCKITEM.STOCKCATEGORY_NAME IN(" + strString + ")";
                        }
                        else if (strSelction == "I")
                        {
                            strSQL = strSQL + " AND INV_STOCKITEM.STOCKITEM_NAME  IN(" + strString + ")";
                        }
                    }

                }
                else
                {
                    if (strSelction == "C")
                    {
                        strSQL = "SELECT INV_STOCKITEM.STOCKGROUP_NAME, ISNULL(INV_SLOW_MOVING_ITEM.QTY,0) QTY , INV_STOCKITEM.STOCKITEM_NAME,INV_SLOW_MOVING_ITEM.STOCKITEM_LAST_SOLD_DATE,0 AMOUNT,0 DAYDIFF ";
                        strSQL = strSQL + "FROM INV_STOCKITEM LEFT OUTER JOIN ";
                        strSQL = strSQL + "INV_SLOW_MOVING_ITEM ON INV_STOCKITEM.STOCKITEM_NAME = INV_SLOW_MOVING_ITEM.STOCKITEM_NAME ";
                        strSQL = strSQL + "WHERE INV_SLOW_MOVING_ITEM.QTY IS NULL ";
                    }
                    else
                    {
                        strSQL = "SELECT INV_STOCKITEM.STOCKGROUP_NAME,";
                        strSQL = strSQL + "INV_SLOW_MOVING_ITEM.STOCKITEM_NAME, ";
                        strSQL = strSQL + "INV_SLOW_MOVING_ITEM.STOCKITEM_LAST_SOLD_DATE, ";
                        strSQL = strSQL + "INV_SLOW_MOVING_ITEM.QTY, ";
                        strSQL = strSQL + "INV_SLOW_MOVING_ITEM.AMOUNT, ";
                        strSQL = strSQL + "INV_SLOW_MOVING_ITEM.DAYDIFF ";
                        strSQL = strSQL + "FROM ";
                        strSQL = strSQL + "INV_SLOW_MOVING_ITEM INV_SLOW_MOVING_ITEM INNER JOIN INV_STOCKITEM INV_STOCKITEM ON ";
                        strSQL = strSQL + "INV_SLOW_MOVING_ITEM.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME ";
                        strSQL = strSQL + "WHERE INV_SLOW_MOVING_ITEM.QTY <> 0 ";
                    }
                    if (strString != "")
                    {

                        if (strSelction == "G")
                        {

                            strSQL = strSQL + " AND INV_STOCKITEM.STOCKGROUP_NAME IN(" + strString + ")";
                        }
                        else if (strSelction == "C")
                        {
                            strSQL = strSQL + " AND INV_STOCKITEM.STOCKCATEGORY_NAME IN(" + strString + ")";
                        }
                        else if (strSelction == "I")
                        {
                            strSQL = strSQL + " AND INV_STOCKITEM.STOCKITEM_NAME  IN(" + strString + ")";
                        }
                    }
                }


                if (str_S_F_Z == "S")
                {
                    strSQL = strSQL + "ORDER BY INV_SLOW_MOVING_ITEM.DAYDIFF DESC, ";
                    strSQL = strSQL + "INV_STOCKITEM.STOCKGROUP_NAME,INV_STOCKITEM.STOCKITEM_NAME ";
                }
                else if (str_S_F_Z == "F")
                {
                    strSQL = strSQL + "ORDER BY INV_SLOW_MOVING_ITEM.DAYDIFF, ";
                    strSQL = strSQL + "INV_STOCKITEM.STOCKGROUP_NAME,INV_STOCKITEM.STOCKITEM_NAME ";
                }
                else
                {
                    strSQL = strSQL + " ORDER BY INV_STOCKITEM.STOCKGROUP_NAME,INV_STOCKITEM.STOCKITEM_NAME ";
                }

                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.dblclsQty = Math.Abs(Convert.ToDouble(dr["QTY"]));
                    oLedg.dblclsAmnt = Math.Abs(Convert.ToDouble(dr["AMOUNT"]));
                    oLedg.lngDiff = Convert.ToInt64(dr["DAYDIFF"].ToString());
                    if (dr["STOCKITEM_LAST_SOLD_DATE"].ToString() != "")
                    {
                        oLedg.strInvDate = Convert.ToDateTime(dr["STOCKITEM_LAST_SOLD_DATE"]).ToString("dd/MM/yyyy");
                    }
                    else
                    {
                        oLedg.strInvDate = "";
                    }
                    oSqlReport.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strGroupName = "";
                    oLedg.strItemName = "";
                    oLedg.dblclsQty = 0;
                    oLedg.dblclsAmnt = 0;
                    oLedg.lngDiff = 0;
                    oLedg.strInvDate = "";
                    oSqlReport.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                return oSqlReport;
            }
        }
        #endregion
        #region "ItemMaster"
        public List<RStockInformation> mItemMaster(string strDeComID, string strFdate, string strTDate, string strString, string strSelction,
                                              int intZeroQntySuppress, bool gstrUserName, string strUserName, string strSelction2, string strstringNew)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;
                if (strSelction == "I")
                {

                    strSQL = "ALTER VIEW INV_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(INV_TRAN_QUANTITY) AS OPN_QUANTITY,";
                    strSQL = strSQL + "SUM(INV_TRAN_AMOUNT) AS OPN_AMOUNT,0 AS INWARD_QUANTITY, 0 AS INWARD_AMOUNT,";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY,0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT  ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE < " + Utility.cvtSQLDateString(strFdate) + ")  ";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT, SUM(INV_TRAN_QUANTITY) AS INWARD_QUANTITY, SUM(INV_TRAN_AMOUNT) AS INWARD_AMOUNT, ";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY, 0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "AND INV_INOUT_FLAG='I' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT,0 INWARD_QUANTITY,0 INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(INV_TRAN_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "AND INV_INOUT_FLAG='O' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "ALTER VIEW INV_OPENING_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(OPN_QUANTITY) AS INV_TRAN_QUANTITY, SUM(OPN_AMOUNT) AS INV_TRAN_AMOUNT,";
                    strSQL = strSQL + "SUM(INWARD_QUANTITY) AS INWARD_QUANTITY, SUM(INWARD_AMOUNT) AS INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT,SUM(OPN_QUANTITY+INWARD_QUANTITY+OUTWARD_QUANTITY) CLS , ";
                    strSQL = strSQL + "SUM(OPN_AMOUNT+INWARD_AMOUNT+OUTWARD_COST_AMOUNT) CLSAMNT  ";
                    strSQL = strSQL + "FROM INV_TRAN_QRY ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    cmdInsert.Transaction.Commit();
                    List<RStockInformation> ooAccLedger = new List<RStockInformation>();

                    strSQL = "SELECT INV_OPENING_TRAN_QRY.STOCKGROUP_NAME,INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY, INV_OPENING_TRAN_QRY.INV_TRAN_AMOUNT, INV_OPENING_TRAN_QRY.INWARD_QUANTITY,";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.INWARD_AMOUNT, INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY,INV_OPENING_TRAN_QRY.OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.OUTWARD_COST_AMOUNT,INV_OPENING_TRAN_QRY.CLS,INV_OPENING_TRAN_QRY.CLSAMNT, ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKITEM_NAME, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2,";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4,";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5 , INV_STOCKITEM.STOCKITEM_BASEUNITS ";
                    strSQL = strSQL + "FROM INV_OPENING_TRAN_QRY INV_OPENING_TRAN_QRY INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM INV_STOCKITEM ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL INV_STOCKITEM_LEVEL ON ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM_LEVEL.STOCKITEM_NAME ";
                    if (strString != "")
                    {
                        strSQL = strSQL + " WHERE INV_STOCKITEM.STOCKITEM_NAME IN(" + strString + ")";
                        if (intZeroQntySuppress > 0)
                        {
                            //strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                            strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }
                    else
                    {
                        if (intZeroQntySuppress > 0)
                        {
                            //strSQL = strSQL + " WHERE (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                            strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }
                    strSQL = strSQL + "ORDER BY INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5";


                    cmdInsert.CommandText = strSQL;
                    cmdInsert.Connection = gcnMain;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                        //oLedg.strUnit = dr["STOCKITEM_NAME"].ToString();
                        oLedg.strGroupParent = dr["STOCKGROUP_LEVEL_1"].ToString();
                        oLedg.strGroupPrimary = dr["STOCKGROUP_LEVEL_2"].ToString();
                        oLedg.strAltUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                        oLedg.strGroupName = dr["STOCKGROUP_LEVEL_3"].ToString();
                        oLedg.dblOpnQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                        oLedg.dblOpnAmnt = Convert.ToDouble(dr["INV_TRAN_AMOUNT"].ToString());
                        oLedg.dblInwQty = Convert.ToDouble(dr["INWARD_QUANTITY"].ToString());
                        oLedg.dblInwAmount = Convert.ToDouble(dr["INWARD_AMOUNT"].ToString());
                        oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString()));
                        oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_SALES_AMOUNT"].ToString()));
                        oLedg.dblclsQty = Convert.ToDouble(dr["CLS"].ToString());
                        oLedg.dblclsAmnt = Convert.ToDouble(dr["CLSAMNT"].ToString());
                        ooAccLedger.Add(oLedg);
                    }
                    if (!dr.HasRows)
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strGroupName = "";
                        oLedg.strItemName = "";
                        oLedg.strAltUnit = "";
                        oLedg.dblOpnQty = 0;
                        oLedg.dblOpnAmnt = 0;
                        oLedg.dblInwQty = 0;
                        oLedg.dblInwAmount = 0;
                        oLedg.dblOutWardQty = 0;
                        oLedg.dblOutwardAmnt = 0;
                        oLedg.dblclsQty = 0;
                        oLedg.dblclsAmnt = 0;
                        ooAccLedger.Add(oLedg);
                    }
                    dr.Close();
                    gcnMain.Close();
                    return ooAccLedger;

                }
                else if (strSelction == "G")
                {
                    strSQL = "ALTER VIEW INV_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(INV_TRAN_QUANTITY) AS OPN_QUANTITY,";
                    strSQL = strSQL + "SUM(INV_TRAN_AMOUNT) AS OPN_AMOUNT,0 AS INWARD_QUANTITY, 0 AS INWARD_AMOUNT,";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY,0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT  ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE < " + Utility.cvtSQLDateString(strFdate) + ")  ";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT, SUM(INV_TRAN_QUANTITY) AS INWARD_QUANTITY, SUM(INV_TRAN_AMOUNT) AS INWARD_AMOUNT, ";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY, 0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "AND INV_INOUT_FLAG='I' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT,0 INWARD_QUANTITY,0 INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(INV_TRAN_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "AND INV_INOUT_FLAG='O' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "ALTER VIEW INV_OPENING_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(OPN_QUANTITY) AS INV_TRAN_QUANTITY, SUM(OPN_AMOUNT) AS INV_TRAN_AMOUNT,";
                    strSQL = strSQL + "SUM(INWARD_QUANTITY) AS INWARD_QUANTITY, SUM(INWARD_AMOUNT) AS INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT,SUM(OPN_QUANTITY+INWARD_QUANTITY+OUTWARD_QUANTITY) CLS , ";
                    strSQL = strSQL + "SUM(OPN_AMOUNT+INWARD_AMOUNT+OUTWARD_COST_AMOUNT) CLSAMNT  ";
                    strSQL = strSQL + "FROM INV_TRAN_QRY ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    cmdInsert.Transaction.Commit();
                    List<RStockInformation> ooAccLedger = new List<RStockInformation>();

                    strSQL = "SELECT INV_OPENING_TRAN_QRY.STOCKGROUP_NAME,INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY, INV_OPENING_TRAN_QRY.INV_TRAN_AMOUNT, INV_OPENING_TRAN_QRY.INWARD_QUANTITY,";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.INWARD_AMOUNT, INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY,INV_OPENING_TRAN_QRY.OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.OUTWARD_COST_AMOUNT,INV_OPENING_TRAN_QRY.CLS,INV_OPENING_TRAN_QRY.CLSAMNT, ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKITEM_NAME, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2,";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4,";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5 , INV_STOCKITEM.STOCKITEM_BASEUNITS ";
                    strSQL = strSQL + "FROM INV_OPENING_TRAN_QRY INV_OPENING_TRAN_QRY INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM INV_STOCKITEM ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL INV_STOCKITEM_LEVEL ON ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM_LEVEL.STOCKITEM_NAME ";

                    if (strString != "")
                    {
                        //strSQL = strSQL + " WHERE (INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1 IN ('FG-HERBAL MEDICINE' , 'FG-HOMOEO MEDICINE' , 'FG-UNANI MEDICINE' , 'PM-Books & Tags' , 'PM-Bottle Item' , 'PM-Carton' , 'PM-Label' , 'PM-Literature' , 'PM-Others Items' , 'PM-Promotional Items' , 'RM-CHEMICALS' , 'RM-HERBS' , 'Sample Item') OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2 IN ('FG-HERBAL MEDICINE' , 'FG-HOMOEO MEDICINE' , 'FG-UNANI MEDICINE' , 'PM-Books & Tags' , 'PM-Bottle Item' , 'PM-Carton' , 'PM-Label' , 'PM-Literature' , 'PM-Others Items' , 'PM-Promotional Items' , 'RM-CHEMICALS' , 'RM-HERBS' , 'Sample Item') OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3 IN ('FG-HERBAL MEDICINE' , 'FG-HOMOEO MEDICINE' , 'FG-UNANI MEDICINE' , 'PM-Books & Tags' , 'PM-Bottle Item' , 'PM-Carton' , 'PM-Label' , 'PM-Literature' , 'PM-Others Items' , 'PM-Promotional Items' , 'RM-CHEMICALS' , 'RM-HERBS' , 'Sample Item') OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4 IN ('FG-HERBAL MEDICINE' , 'FG-HOMOEO MEDICINE' , 'FG-UNANI MEDICINE' , 'PM-Books & Tags' , 'PM-Bottle Item' , 'PM-Carton' , 'PM-Label' , 'PM-Literature' , 'PM-Others Items' , 'PM-Promotional Items' , 'RM-CHEMICALS' , 'RM-HERBS' , 'Sample Item') OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5 IN ('FG-HERBAL MEDICINE' , 'FG-HOMOEO MEDICINE' , 'FG-UNANI MEDICINE' , 'PM-Books & Tags' , 'PM-Bottle Item' , 'PM-Carton' , 'PM-Label' , 'PM-Literature' , 'PM-Others Items' , 'PM-Promotional Items' , 'RM-CHEMICALS' , 'RM-HERBS' , 'Sample Item')) ";

                        strSQL = strSQL + "WHERE (INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1 IN (" + strString + ") ";
                        strSQL = strSQL + "OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2 IN (" + strString + ") ";
                        strSQL = strSQL + "OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3 IN (" + strString + ") ";
                        strSQL = strSQL + "OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4 IN (" + strString + ") ";
                        strSQL = strSQL + "OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5 IN (" + strString + "))";
                        //strSQL = strSQL + "AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 ) ";
                        if (intZeroQntySuppress > 0)
                        {
                            //strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                            strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }
                    else
                    {
                        if (intZeroQntySuppress > 0)
                        {
                            //strSQL = strSQL + " WHERE (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                            strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }
                    strSQL = strSQL + " Order by INV_STOCKITEM_LEVEL.STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();
                        oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                        oLedg.strGroupParent = dr["STOCKGROUP_LEVEL_1"].ToString();
                        oLedg.strGroupPrimary = dr["STOCKGROUP_LEVEL_2"].ToString();
                        oLedg.strAltUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                        oLedg.dblOpnQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                        oLedg.dblOpnAmnt = Convert.ToDouble(dr["INV_TRAN_AMOUNT"].ToString());
                        oLedg.dblInwQty = Convert.ToDouble(dr["INWARD_QUANTITY"].ToString());
                        oLedg.dblInwAmount = Convert.ToDouble(dr["INWARD_AMOUNT"].ToString());
                        oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString()));
                        oLedg.dblOutwardAmnt = (Convert.ToDouble(dr["OUTWARD_SALES_AMOUNT"].ToString()));

                        //oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString()));
                        //oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_SALES_AMOUNT"].ToString()));
                        // oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"]) * (Convert.ToDouble(dr["CLSAMNT"].ToString())/Convert.ToDouble(dr["CLS"].ToString())));
                        oLedg.dblclsQty = Convert.ToDouble(dr["CLS"].ToString());
                        oLedg.dblclsAmnt = Convert.ToDouble(dr["CLSAMNT"].ToString());
                        ooAccLedger.Add(oLedg);
                    }

                    if (!dr.HasRows)
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strGroupName = "";
                        oLedg.strItemName = "";
                        oLedg.strAltUnit = "";
                        oLedg.dblOpnQty = 0;
                        oLedg.dblOpnAmnt = 0;
                        oLedg.dblInwQty = 0;
                        oLedg.dblInwAmount = 0;
                        oLedg.dblOutWardQty = 0;
                        oLedg.dblOutwardAmnt = 0;
                        oLedg.dblclsQty = 0;
                        oLedg.dblclsAmnt = 0;
                        ooAccLedger.Add(oLedg);
                    }

                    dr.Close();
                    gcnMain.Close();
                    return ooAccLedger;
                }
                else if (strSelction == "C")
                {

                    strSQL = "ALTER VIEW INV_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(INV_TRAN_QUANTITY) AS OPN_QUANTITY,";
                    strSQL = strSQL + "SUM(INV_TRAN_AMOUNT) AS OPN_AMOUNT,0 AS INWARD_QUANTITY, 0 AS INWARD_AMOUNT,";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY,0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT  ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE < " + Utility.cvtSQLDateString(strFdate) + ")  ";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT, SUM(INV_TRAN_QUANTITY) AS INWARD_QUANTITY, SUM(INV_TRAN_AMOUNT) AS INWARD_AMOUNT, ";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY, 0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "AND INV_INOUT_FLAG='I' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT,0 INWARD_QUANTITY,0 INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(INV_TRAN_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "AND INV_INOUT_FLAG='O' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "ALTER VIEW INV_OPENING_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(OPN_QUANTITY) AS INV_TRAN_QUANTITY, SUM(OPN_AMOUNT) AS INV_TRAN_AMOUNT,";
                    strSQL = strSQL + "SUM(INWARD_QUANTITY) AS INWARD_QUANTITY, SUM(INWARD_AMOUNT) AS INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT,SUM(OPN_QUANTITY+INWARD_QUANTITY+OUTWARD_QUANTITY) CLS , ";
                    strSQL = strSQL + "SUM(OPN_AMOUNT+INWARD_AMOUNT+OUTWARD_COST_AMOUNT) CLSAMNT  ";
                    strSQL = strSQL + "FROM INV_TRAN_QRY ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    cmdInsert.Transaction.Commit();
                    List<RStockInformation> ooAccLedger = new List<RStockInformation>();

                    strSQL = "SELECT INV_OPENING_TRAN_QRY.STOCKGROUP_NAME,INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY, INV_OPENING_TRAN_QRY.INV_TRAN_AMOUNT, INV_OPENING_TRAN_QRY.INWARD_QUANTITY,";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.INWARD_AMOUNT, INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY,INV_OPENING_TRAN_QRY.OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.OUTWARD_COST_AMOUNT,INV_OPENING_TRAN_QRY.CLS,INV_OPENING_TRAN_QRY.CLSAMNT, ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKITEM_NAME, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2,";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4,";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5 , INV_STOCKITEM.STOCKITEM_BASEUNITS, INV_STOCKITEM.STOCKCATEGORY_NAME ";
                    strSQL = strSQL + "FROM INV_OPENING_TRAN_QRY INV_OPENING_TRAN_QRY INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM INV_STOCKITEM ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL INV_STOCKITEM_LEVEL ON ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM_LEVEL.STOCKITEM_NAME ";
                    strSQL = strSQL + " WHERE INV_OPENING_TRAN_QRY.STOCKGROUP_NAME in (select STOCKGROUP_NAME from USER_PRIVILEGES_STOCKGROUP WHERE USER_LOGIN_NAME ='" + strUserName + "')";
                    if (strString != "")
                    {
                        strSQL = strSQL + " AND INV_STOCKITEM.STOCKCATEGORY_NAME  IN(" + strString + ")";
                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }
                    else
                    {
                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " WHERE (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }
                    strSQL = strSQL + " ORDER BY INV_STOCKITEM_LEVEL.STOCKITEM_NAME ASC ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.Connection = gcnMain;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strGroupName = dr["STOCKCATEGORY_NAME"].ToString();
                        oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                        oLedg.strAltUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                        oLedg.dblOpnQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                        oLedg.dblOpnAmnt = Convert.ToDouble(dr["INV_TRAN_AMOUNT"].ToString());
                        oLedg.dblInwQty = Convert.ToDouble(dr["INWARD_QUANTITY"].ToString());
                        oLedg.dblInwAmount = Convert.ToDouble(dr["INWARD_AMOUNT"].ToString());
                        oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString()));
                        oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_SALES_AMOUNT"].ToString()));
                        oLedg.dblclsQty = Convert.ToDouble(dr["CLS"].ToString());
                        oLedg.dblclsAmnt = Convert.ToDouble(dr["CLSAMNT"].ToString());
                        oLedg.strAltUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                        ooAccLedger.Add(oLedg);
                    }
                    dr.Close();
                    gcnMain.Close();
                    return ooAccLedger;
                }

                else if (strSelction == "L")
                {
                    strSQL = "ALTER VIEW INV_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME,SUM(INV_TRAN_QUANTITY) AS OPN_QUANTITY,";
                    strSQL = strSQL + "SUM(INV_TRAN_AMOUNT) AS OPN_AMOUNT,0 AS INWARD_QUANTITY, 0 AS INWARD_AMOUNT,";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY,0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT  ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE < " + Utility.cvtSQLDateString(strFdate) + ")  ";
                    //strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    if (strString != "")
                    {
                        if (strSelction2 == "S")
                        {
                            strSQL = strSQL + " AND STOCKITEM_NAME  IN(" + strString + ") ";
                        }
                        else
                        {
                            strSQL = strSQL + " AND GODOWNS_NAME  IN(" + strString + ") ";
                        }

                    }
                    strSQL = strSQL + "GROUP BY GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT INV_TRAN.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME,  0 OPN_QUANTITY,0 OPN_AMOUNT,SUM(INWARD_QUANTITY) AS INWARD_QUANTITY, SUM(INWARD_AMOUNT) AS INWARD_AMOUNT, 0 OUTWARD_QUANTITY, ";
                    strSQL = strSQL + "0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_TRAN,INV_STOCKITEM,INV_STOCKGROUP  WHERE INV_STOCKITEM.STOCKITEM_NAME =INV_TRAN.STOCKITEM_NAME and INV_STOCKGROUP.STOCKGROUP_NAME=INV_STOCKITEM.STOCKGROUP_NAME ";
                    strSQL = strSQL + "AND (INV_TRAN.INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_TRAN.INV_INOUT_FLAG='I' ";
                    //strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    //if (strString != "")
                    //{
                    //    if (strSelction2 == "S")
                    //    {
                    //        strSQL = strSQL + " AND INV_STOCKITEM.STOCKITEM_NAME  IN(" + strString + ") ";
                    //    }
                    //    else
                    //    {
                    //        strSQL = strSQL + " AND INV_TRAN.GODOWNS_NAME  IN(" + strString + ") ";
                    //    }

                    //}
                    strSQL = strSQL + "GROUP BY INV_TRAN.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME ";

                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT INV_TRAN.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME,  0 OPN_QUANTITY,0 OPN_AMOUNT,0 INWARD_QUANTITY, 0 INWARD_AMOUNT, ";
                    strSQL = strSQL + "SUM(INV_TRAN.INV_TRAN_QUANTITY) AS OUTWARD_QUANTITY, SUM(INV_TRAN.OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,SUM(INV_TRAN.OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_TRAN,INV_STOCKITEM,INV_STOCKGROUP  WHERE INV_STOCKITEM.STOCKITEM_NAME =INV_TRAN.STOCKITEM_NAME and INV_STOCKGROUP.STOCKGROUP_NAME=INV_STOCKITEM.STOCKGROUP_NAME ";
                    //strSQL = strSQL + "and (INV_TRAN.INV_DATE BETWEEN CONVERT(datetime, '01-01-2018', 103) AND CONVERT(datetime, '31-12-2019', 103)) ";
                    strSQL = strSQL + "AND (INV_TRAN.INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_TRAN.INV_INOUT_FLAG='O' ";
                    //strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    //if (strString != "")
                    //{
                    //    if (strSelction2 == "S")
                    //    {
                    //        strSQL = strSQL + " AND INV_STOCKITEM.STOCKITEM_NAME  IN(" + strString + ") ";
                    //    }
                    //    else
                    //    {
                    //        strSQL = strSQL + " AND INV_TRAN.GODOWNS_NAME  IN(" + strString + ") ";
                    //    }

                    //}
                    strSQL = strSQL + "GROUP BY INV_TRAN.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "ALTER VIEW INV_OPENING_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME,SUM(OPN_QUANTITY) AS INV_TRAN_QUANTITY, SUM(OPN_AMOUNT) AS INV_TRAN_AMOUNT,";
                    strSQL = strSQL + "SUM(INWARD_QUANTITY) AS INWARD_QUANTITY, SUM(INWARD_AMOUNT) AS INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT,SUM(OPN_QUANTITY+INWARD_QUANTITY+OUTWARD_QUANTITY) CLS , ";
                    strSQL = strSQL + "SUM(OPN_AMOUNT+INWARD_AMOUNT+OUTWARD_COST_AMOUNT) CLSAMNT  ";
                    strSQL = strSQL + "FROM INV_TRAN_QRY ";
                    strSQL = strSQL + "GROUP BY GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();

                    List<RStockInformation> ooAccLedger = new List<RStockInformation>();

                    strSQL = "SELECT INV_OPENING_TRAN_QRY.GODOWNS_NAME,INV_OPENING_TRAN_QRY.STOCKGROUP_NAME,INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY, INV_OPENING_TRAN_QRY.INV_TRAN_AMOUNT, INV_OPENING_TRAN_QRY.INWARD_QUANTITY,";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.INWARD_AMOUNT, INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY,INV_OPENING_TRAN_QRY.OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.OUTWARD_COST_AMOUNT,INV_OPENING_TRAN_QRY.CLS,INV_OPENING_TRAN_QRY.CLSAMNT, ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKITEM_NAME, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2,";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4,";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5 , INV_STOCKITEM.STOCKITEM_BASEUNITS ";
                    strSQL = strSQL + "FROM INV_OPENING_TRAN_QRY INV_OPENING_TRAN_QRY INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM INV_STOCKITEM ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL INV_STOCKITEM_LEVEL ON ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM_LEVEL.STOCKITEM_NAME ";
                    //strSQL = strSQL + " WHERE INV_OPENING_TRAN_QRY.STOCKGROUP_NAME in( select STOCKGROUP_NAME from USER_PRIVILEGES_STOCKGROUP WHERE USER_LOGIN_NAME ='" + strUserName + "')";
                    //strSQL = strSQL + " WHERE INV_OPENING_TRAN_QRY.STOCKGROUP_NAME  IN(" + strUserName + ") ";
                    if (strString != "")
                    {
                        if (strSelction2 == "S")
                        {
                            strSQL = strSQL + " WHERE INV_STOCKITEM_LEVEL.STOCKITEM_NAME  IN(" + strString + ")";
                        }
                        else
                        {

                            strSQL = strSQL + " WHERE INV_OPENING_TRAN_QRY.GODOWNS_NAME  IN(" + strString + ")";
                            if (strstringNew != null && strstringNew != "")
                            {
                                strSQL = strSQL + " AND INV_OPENING_TRAN_QRY.STOCKGROUP_NAME  IN(" + strstringNew + ")";
                            }
                        }

                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                            //strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }
                    else
                    {
                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " WHERE (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                            //strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }
                    strSQL = strSQL + " ORDER BY INV_STOCKITEM_LEVEL.STOCKITEM_NAME ASC,INV_OPENING_TRAN_QRY.GODOWNS_NAME ";

                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strLocationName = dr["GODOWNS_NAME"].ToString();
                        oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                        oLedg.strAltUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                        oLedg.strGroupParent = dr["STOCKGROUP_LEVEL_1"].ToString();
                        oLedg.strGroupPrimary = dr["STOCKGROUP_LEVEL_2"].ToString();
                        oLedg.strGroupName = dr["STOCKGROUP_LEVEL_3"].ToString();
                        oLedg.dblOpnQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                        oLedg.dblOpnAmnt = Convert.ToDouble(dr["INV_TRAN_AMOUNT"].ToString());
                        oLedg.dblInwQty = Convert.ToDouble(dr["INWARD_QUANTITY"].ToString());
                        oLedg.dblInwAmount = Convert.ToDouble(dr["INWARD_AMOUNT"].ToString());
                        //oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString()));
                        //oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_SALES_AMOUNT"].ToString()));
                        oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString()));
                        oLedg.dblOutwardAmnt = (Convert.ToDouble(dr["OUTWARD_SALES_AMOUNT"].ToString()));
                        oLedg.dblclsQty = Convert.ToDouble(dr["CLS"].ToString());
                        oLedg.dblclsAmnt = Convert.ToDouble(dr["CLSAMNT"].ToString());
                        ooAccLedger.Add(oLedg);
                    }
                    if (!dr.HasRows)
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strLocationName = "";
                        oLedg.strItemName = "";
                        oLedg.strAltUnit = "";
                        oLedg.strGroupParent = "";
                        oLedg.strGroupPrimary = "";
                        oLedg.strGroupName = "";
                        oLedg.dblOpnQty = 0;
                        oLedg.dblOpnAmnt = 0;
                        oLedg.dblInwQty = 0;
                        oLedg.dblInwAmount = 0;
                        oLedg.dblOutWardQty = 0;
                        oLedg.dblOutwardAmnt = 0;
                        oLedg.dblclsQty = 0;
                        oLedg.dblclsAmnt = 0;
                        ooAccLedger.Add(oLedg);
                    }
                    dr.Close();
                    gcnMain.Close();
                    return ooAccLedger;

                }
                else
                {
                    strSQL = "ALTER VIEW INV_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(INV_TRAN_QUANTITY) AS OPN_QUANTITY,";
                    strSQL = strSQL + "SUM(INV_TRAN_AMOUNT) AS OPN_AMOUNT,0 AS INWARD_QUANTITY, 0 AS INWARD_AMOUNT,";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY,0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT  ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE < " + Utility.cvtSQLDateString(strFdate) + ")  ";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT, SUM(INV_TRAN_QUANTITY) AS INWARD_QUANTITY, SUM(INV_TRAN_AMOUNT) AS INWARD_AMOUNT, ";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY, 0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "AND INV_INOUT_FLAG='I' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT,0 INWARD_QUANTITY,0 INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(INV_TRAN_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "AND INV_INOUT_FLAG='O' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "ALTER VIEW INV_OPENING_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(OPN_QUANTITY) AS INV_TRAN_QUANTITY, SUM(OPN_AMOUNT) AS INV_TRAN_AMOUNT,";
                    strSQL = strSQL + "SUM(INWARD_QUANTITY) AS INWARD_QUANTITY, SUM(INWARD_AMOUNT) AS INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT,SUM(OPN_QUANTITY+INWARD_QUANTITY+OUTWARD_QUANTITY) CLS , ";
                    strSQL = strSQL + "SUM(OPN_AMOUNT+INWARD_AMOUNT+OUTWARD_COST_AMOUNT) CLSAMNT  ";
                    strSQL = strSQL + "FROM INV_TRAN_QRY ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    cmdInsert.Transaction.Commit();
                    List<RStockInformation> ooAccLedger = new List<RStockInformation>();

                    strSQL = "SELECT INV_OPENING_TRAN_QRY.STOCKGROUP_NAME,INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY, INV_OPENING_TRAN_QRY.INV_TRAN_AMOUNT, INV_OPENING_TRAN_QRY.INWARD_QUANTITY,";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.INWARD_AMOUNT, INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY,INV_OPENING_TRAN_QRY.OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.OUTWARD_COST_AMOUNT,INV_OPENING_TRAN_QRY.CLS,INV_OPENING_TRAN_QRY.CLSAMNT, ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKITEM_NAME, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2,";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4,";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5 , INV_STOCKITEM.STOCKITEM_BASEUNITS, INV_STOCKITEM.STOCKCATEGORY_NAME ";
                    strSQL = strSQL + "FROM INV_OPENING_TRAN_QRY INV_OPENING_TRAN_QRY INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM INV_STOCKITEM ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL INV_STOCKITEM_LEVEL ON ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM_LEVEL.STOCKITEM_NAME ";
                    if (strString != "")
                    {
                        strSQL = strSQL + " WHERE INV_STOCKITEM.STOCKGROUP_NAME IN(" + strString + ")";
                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }
                    else
                    {
                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " WHERE (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }
                    strSQL = strSQL + " Order by INV_STOCKITEM_LEVEL.STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                        //oLedg.strUnit = dr["STOCKITEM_NAME"].ToString();
                        oLedg.dblOpnQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                        oLedg.dblOpnAmnt = Convert.ToDouble(dr["INV_TRAN_AMOUNT"].ToString());
                        oLedg.dblInwQty = Convert.ToDouble(dr["INWARD_QUANTITY"].ToString());
                        oLedg.dblInwAmount = Convert.ToDouble(dr["INWARD_AMOUNT"].ToString());
                        oLedg.dblOutWardQty = Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString());
                        oLedg.dblOutwardAmnt = Convert.ToDouble(dr["OUTWARD_SALES_AMOUNT"].ToString());
                        oLedg.dblclsQty = Convert.ToDouble(dr["CLS"].ToString());
                        oLedg.dblclsAmnt = Convert.ToDouble(dr["CLSAMNT"].ToString());
                        oLedg.strAltUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                        ooAccLedger.Add(oLedg);
                    }
                    if (!dr.HasRows)
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strLocationName = "";
                        oLedg.strItemName = "";
                        oLedg.strAltUnit = "";
                        oLedg.strGroupParent = "";
                        oLedg.strGroupPrimary = "";
                        oLedg.strGroupName = "";
                        oLedg.dblOpnQty = 0;
                        oLedg.dblOpnAmnt = 0;
                        oLedg.dblInwQty = 0;
                        oLedg.dblInwAmount = 0;
                        oLedg.dblOutWardQty = 0;
                        oLedg.dblOutwardAmnt = 0;
                        oLedg.dblclsQty = 0;
                        oLedg.dblclsAmnt = 0;
                        ooAccLedger.Add(oLedg);
                    }
                    dr.Close();
                    gcnMain.Close();
                    return ooAccLedger;
                }
            }

        }
        #endregion
        #region "LocationQty"
        public List<RStockInformation> mGetLocationQty(string strDeComID, string strFdate, string strTDate, string strString, string strSelction,
                                                   int intZeroQntySuppress, string strStringNew)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;
                if (strSelction == "L")
                {
                    strSQL = "ALTER VIEW INV_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME,SUM(INV_TRAN_QUANTITY) AS OPN_QUANTITY,";
                    strSQL = strSQL + "SUM(INV_TRAN_AMOUNT) AS OPN_AMOUNT,0 AS INWARD_QUANTITY, 0 AS INWARD_AMOUNT,";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY,0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT  ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE < " + Utility.cvtSQLDateString(strFdate) + ")  ";
                    //strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    if (strString != "")
                    {
                        strSQL = strSQL + " AND GODOWNS_NAME  IN(" + strString + ") ";
                    }
                    strSQL = strSQL + "GROUP BY GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT INV_TRAN.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME,  0 OPN_QUANTITY,0 OPN_AMOUNT,SUM(INWARD_QUANTITY) AS INWARD_QUANTITY, SUM(INWARD_AMOUNT) AS INWARD_AMOUNT, 0 OUTWARD_QUANTITY, ";
                    strSQL = strSQL + "0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_TRAN,INV_STOCKITEM,INV_STOCKGROUP  WHERE INV_STOCKITEM.STOCKITEM_NAME =INV_TRAN.STOCKITEM_NAME and INV_STOCKGROUP.STOCKGROUP_NAME=INV_STOCKITEM.STOCKGROUP_NAME ";
                    strSQL = strSQL + "AND (INV_TRAN.INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_TRAN.INV_INOUT_FLAG='I' ";
                    //strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    if (strString != "")
                    {
                        strSQL = strSQL + " AND INV_TRAN.GODOWNS_NAME  IN(" + strString + ") ";

                    }
                    strSQL = strSQL + "GROUP BY INV_TRAN.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME ";

                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT INV_TRAN.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME,  0 OPN_QUANTITY,0 OPN_AMOUNT,0 INWARD_QUANTITY, 0 INWARD_AMOUNT, ";
                    strSQL = strSQL + "SUM(INV_TRAN.INV_TRAN_QUANTITY) AS OUTWARD_QUANTITY, SUM(INV_TRAN.OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,SUM(INV_TRAN.OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_TRAN,INV_STOCKITEM,INV_STOCKGROUP  WHERE INV_STOCKITEM.STOCKITEM_NAME =INV_TRAN.STOCKITEM_NAME and INV_STOCKGROUP.STOCKGROUP_NAME=INV_STOCKITEM.STOCKGROUP_NAME ";
                    //strSQL = strSQL + "and (INV_TRAN.INV_DATE BETWEEN CONVERT(datetime, '01-01-2018', 103) AND CONVERT(datetime, '31-12-2019', 103)) ";
                    strSQL = strSQL + "AND (INV_TRAN.INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_TRAN.INV_INOUT_FLAG='O' ";
                    //strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    if (strString != "")
                    {
                        strSQL = strSQL + " AND INV_TRAN.GODOWNS_NAME  IN(" + strString + ") ";
                    }
                    strSQL = strSQL + "GROUP BY INV_TRAN.GODOWNS_NAME,INV_STOCKGROUP.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "ALTER VIEW INV_OPENING_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME,SUM(OPN_QUANTITY) AS INV_TRAN_QUANTITY, SUM(OPN_AMOUNT) AS INV_TRAN_AMOUNT,";
                    strSQL = strSQL + "SUM(INWARD_QUANTITY) AS INWARD_QUANTITY, SUM(INWARD_AMOUNT) AS INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT,SUM(OPN_QUANTITY+INWARD_QUANTITY+OUTWARD_QUANTITY) CLS , ";
                    strSQL = strSQL + "SUM(OPN_AMOUNT+INWARD_AMOUNT+OUTWARD_COST_AMOUNT) CLSAMNT  ";
                    strSQL = strSQL + "FROM INV_TRAN_QRY ";
                    strSQL = strSQL + "GROUP BY GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();

                    List<RStockInformation> ooAccLedger = new List<RStockInformation>();
                    strSQL = "SELECT INV_OPENING_TRAN_QRY.GODOWNS_NAME,INV_OPENING_TRAN_QRY.STOCKGROUP_NAME,INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY, INV_OPENING_TRAN_QRY.INV_TRAN_AMOUNT, INV_OPENING_TRAN_QRY.INWARD_QUANTITY,";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.INWARD_AMOUNT, INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY,INV_OPENING_TRAN_QRY.OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.OUTWARD_COST_AMOUNT,INV_OPENING_TRAN_QRY.CLS,INV_OPENING_TRAN_QRY.CLSAMNT, ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKITEM_NAME, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2,";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4,";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5 , INV_STOCKITEM.STOCKITEM_BASEUNITS ";
                    strSQL = strSQL + "FROM INV_OPENING_TRAN_QRY INV_OPENING_TRAN_QRY INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM INV_STOCKITEM ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL INV_STOCKITEM_LEVEL ON ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM_LEVEL.STOCKITEM_NAME ";
                    // strSQL = strSQL + " WHERE INV_OPENING_TRAN_QRY.STOCKGROUP_NAME in( select STOCKGROUP_NAME from USER_PRIVILEGES_STOCKGROUP WHERE USER_LOGIN_NAME ='" + strUserName + "')";
                    if (strString != "")
                    {
                        strSQL = strSQL + " WHERE INV_OPENING_TRAN_QRY.GODOWNS_NAME  IN(" + strString + ")";
                        if (strStringNew != "")
                        {
                            strSQL = strSQL + " AND INV_OPENING_TRAN_QRY.STOCKGROUP_NAME  IN(" + strStringNew + ")";
                        }
                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }
                    else
                    {
                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " WHERE (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }

                    strSQL = strSQL + " ORDER BY INV_OPENING_TRAN_QRY.GODOWNS_NAME,INV_STOCKITEM_LEVEL.STOCKITEM_NAME ASC ";

                    cmdInsert.CommandText = strSQL;
                    cmdInsert.Connection = gcnMain;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strLocationName = dr["GODOWNS_NAME"].ToString();
                        oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                        oLedg.strGroupParent = dr["STOCKGROUP_LEVEL_1"].ToString();
                        oLedg.strGroupPrimary = dr["STOCKGROUP_LEVEL_2"].ToString();
                        oLedg.strAltUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                        oLedg.strGroupName = dr["STOCKGROUP_LEVEL_3"].ToString();
                        oLedg.dblOpnQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                        oLedg.dblOpnAmnt = Convert.ToDouble(dr["INV_TRAN_AMOUNT"].ToString());
                        oLedg.dblInwQty = Convert.ToDouble(dr["INWARD_QUANTITY"].ToString());
                        oLedg.dblInwAmount = Convert.ToDouble(dr["INWARD_AMOUNT"].ToString());
                        oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString()));
                        oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_SALES_AMOUNT"].ToString()));
                        oLedg.dblclsQty = Convert.ToDouble(dr["CLS"].ToString());
                        oLedg.dblclsAmnt = Convert.ToDouble(dr["CLSAMNT"].ToString());
                        ooAccLedger.Add(oLedg);
                    }
                    if (!dr.HasRows)
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strLocationName = "";
                        oLedg.strItemName = "";
                        oLedg.strGroupParent = "";
                        oLedg.strGroupPrimary = "";
                        oLedg.strAltUnit = "";
                        oLedg.strGroupName = "";
                        oLedg.dblOpnQty = 0;
                        oLedg.dblOpnAmnt = 0;
                        oLedg.dblInwQty = 0;
                        oLedg.dblInwAmount = 0;
                        oLedg.dblOutWardQty = 0;
                        oLedg.dblOutwardAmnt = 0;
                        oLedg.dblclsQty = 0;
                        oLedg.dblclsAmnt = 0;
                        ooAccLedger.Add(oLedg);
                    }

                    dr.Close();
                    gcnMain.Close();
                    return ooAccLedger;
                }
                else if (strSelction == "LC")
                {
                    strSQL = "ALTER VIEW INV_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME,SUM(INV_TRAN_QUANTITY) AS OPN_QUANTITY,";
                    strSQL = strSQL + "SUM(INV_TRAN_AMOUNT) AS OPN_AMOUNT,0 AS INWARD_QUANTITY, 0 AS INWARD_AMOUNT,";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY,0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT  ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE < " + Utility.cvtSQLDateString(strFdate) + ")  ";
                    //strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    //if (strString != "")
                    //{
                    //    strSQL = strSQL + " AND GODOWNS_NAME  IN(" + strString + ") ";
                    //}
                    strSQL = strSQL + "GROUP BY GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT, SUM(INV_TRAN_QUANTITY) AS INWARD_QUANTITY, SUM(INV_TRAN_AMOUNT) AS INWARD_AMOUNT, ";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY, 0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    //strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    //if (strString != "")
                    //{
                    //    strSQL = strSQL + " AND GODOWNS_NAME  IN(" + strString + ") ";
                    //}
                    strSQL = strSQL + "AND INV_INOUT_FLAG='I' GROUP BY GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME ";

                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT,0 INWARD_QUANTITY,0 INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(INV_TRAN_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ") ";
                    //strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    //if (strString != "")
                    //{
                    //    strSQL = strSQL + " AND GODOWNS_NAME  IN(" + strString + ") ";
                    //}
                    strSQL = strSQL + "AND INV_INOUT_FLAG='O' GROUP BY GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "ALTER VIEW INV_OPENING_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME,SUM(OPN_QUANTITY) AS INV_TRAN_QUANTITY, SUM(OPN_AMOUNT) AS INV_TRAN_AMOUNT,";
                    strSQL = strSQL + "SUM(INWARD_QUANTITY) AS INWARD_QUANTITY, SUM(INWARD_AMOUNT) AS INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT,SUM(OPN_QUANTITY+INWARD_QUANTITY+OUTWARD_QUANTITY) CLS , ";
                    strSQL = strSQL + "SUM(OPN_AMOUNT+INWARD_AMOUNT+OUTWARD_COST_AMOUNT) CLSAMNT  ";
                    strSQL = strSQL + "FROM INV_TRAN_QRY ";
                    strSQL = strSQL + "GROUP BY GODOWNS_NAME,STOCKGROUP_NAME,STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();
                    List<RStockInformation> ooAccLedger = new List<RStockInformation>();

                    strSQL = "SELECT INV_OPENING_TRAN_QRY.GODOWNS_NAME,INV_OPENING_TRAN_QRY.STOCKGROUP_NAME,INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY, INV_OPENING_TRAN_QRY.INV_TRAN_AMOUNT, INV_OPENING_TRAN_QRY.INWARD_QUANTITY,";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.INWARD_AMOUNT, INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY,INV_OPENING_TRAN_QRY.OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.OUTWARD_COST_AMOUNT,INV_OPENING_TRAN_QRY.CLS,INV_OPENING_TRAN_QRY.CLSAMNT, ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKITEM_NAME, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2,";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4,";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5 , INV_STOCKITEM.STOCKITEM_BASEUNITS ";
                    strSQL = strSQL + "FROM INV_OPENING_TRAN_QRY INV_OPENING_TRAN_QRY INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM INV_STOCKITEM ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL INV_STOCKITEM_LEVEL ON ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM_LEVEL.STOCKITEM_NAME ";
                    // strSQL = strSQL + " WHERE INV_OPENING_TRAN_QRY.STOCKGROUP_NAME in( select STOCKGROUP_NAME from USER_PRIVILEGES_STOCKGROUP WHERE USER_LOGIN_NAME ='" + strUserName + "')";
                    if (strString != "")
                    {
                        strSQL = strSQL + " WHERE INV_STOCKITEM_LEVEL.STOCKITEM_NAME  IN(" + strString + ")";
                        if (strStringNew != "")
                        {
                            strSQL = strSQL + " AND INV_OPENING_TRAN_QRY.STOCKGROUP_NAME  IN(" + strStringNew + ")";
                        }
                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }
                    else
                    {
                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " WHERE (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }

                    strSQL = strSQL + " ORDER BY INV_OPENING_TRAN_QRY.GODOWNS_NAME,INV_STOCKITEM_LEVEL.STOCKITEM_NAME ASC ";

                    cmdInsert.CommandText = strSQL;
                    cmdInsert.Connection = gcnMain;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strLocationName = dr["GODOWNS_NAME"].ToString();
                        oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                        oLedg.strGroupParent = dr["STOCKGROUP_LEVEL_1"].ToString();
                        oLedg.strGroupPrimary = dr["STOCKGROUP_LEVEL_2"].ToString();
                        oLedg.strAltUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                        oLedg.strGroupName = dr["STOCKGROUP_LEVEL_3"].ToString();
                        oLedg.dblOpnQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                        oLedg.dblOpnAmnt = Convert.ToDouble(dr["INV_TRAN_AMOUNT"].ToString());
                        oLedg.dblInwQty = Convert.ToDouble(dr["INWARD_QUANTITY"].ToString());
                        oLedg.dblInwAmount = Convert.ToDouble(dr["INWARD_AMOUNT"].ToString());
                        oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString()));
                        oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_SALES_AMOUNT"].ToString()));
                        oLedg.dblclsQty = Convert.ToDouble(dr["CLS"].ToString());
                        oLedg.dblclsAmnt = Convert.ToDouble(dr["CLSAMNT"].ToString());
                        ooAccLedger.Add(oLedg);
                    }
                    if (!dr.HasRows)
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strLocationName = "";
                        oLedg.strItemName = "";
                        oLedg.strGroupParent = "";
                        oLedg.strGroupPrimary = "";
                        oLedg.strAltUnit = "";
                        oLedg.strGroupName = "";
                        oLedg.dblOpnQty = 0;
                        oLedg.dblOpnAmnt = 0;
                        oLedg.dblInwQty = 0;
                        oLedg.dblInwAmount = 0;
                        oLedg.dblOutWardQty = 0;
                        oLedg.dblOutwardAmnt = 0;
                        oLedg.dblclsQty = 0;
                        oLedg.dblclsAmnt = 0;
                        ooAccLedger.Add(oLedg);
                    }

                    dr.Close();
                    gcnMain.Close();
                    return ooAccLedger;
                }
                else
                {
                    strSQL = "ALTER VIEW INV_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(INV_TRAN_QUANTITY) AS OPN_QUANTITY,";
                    strSQL = strSQL + "SUM(INV_TRAN_AMOUNT) AS OPN_AMOUNT,0 AS INWARD_QUANTITY, 0 AS INWARD_AMOUNT,";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY, 0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT  ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE < " + Utility.cvtSQLDateString(strFdate) + ")  ";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT, SUM(INV_TRAN_QUANTITY) AS INWARD_QUANTITY, SUM(INV_TRAN_AMOUNT) AS INWARD_AMOUNT, ";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY, 0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "AND INV_INOUT_FLAG='I' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT,0 INWARD_QUANTITY,0 INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(INV_TRAN_QUANTITY) AS OUTWARD_QUANTITY, SUM(INV_TRAN_AMOUNT) AS OUTWARD_SALES_AMOUNT,0 AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "AND INV_INOUT_FLAG='O' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "ALTER VIEW INV_OPENING_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(OPN_QUANTITY) AS INV_TRAN_QUANTITY, SUM(OPN_AMOUNT) AS INV_TRAN_AMOUNT,";
                    strSQL = strSQL + "SUM(INWARD_QUANTITY) AS INWARD_QUANTITY, SUM(INWARD_AMOUNT) AS INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT,SUM(OPN_QUANTITY+INWARD_QUANTITY+OUTWARD_QUANTITY) CLS , ";
                    strSQL = strSQL + "SUM(OPN_AMOUNT+INWARD_AMOUNT+OUTWARD_SALES_AMOUNT) CLSAMNT  ";
                    strSQL = strSQL + "FROM INV_TRAN_QRY ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();
                    List<RStockInformation> ooAccLedger = new List<RStockInformation>();
                    strSQL = "SELECT INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY, INV_OPENING_TRAN_QRY.INV_TRAN_AMOUNT, INV_OPENING_TRAN_QRY.INWARD_QUANTITY,";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.INWARD_AMOUNT, INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY, INV_OPENING_TRAN_QRY.OUTWARD_SALES_AMOUNT, ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.CLS, INV_OPENING_TRAN_QRY.CLSAMNT, INV_STOCKITEM_LEVEL.STOCKITEM_NAME, ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5, INV_STOCKITEM.STOCKITEM_BASEUNITS ";
                    strSQL = strSQL + ",INV_OPENING_TRAN_QRY.CLS,INV_OPENING_TRAN_QRY.CLSAMNT FROM INV_OPENING_TRAN_QRY INV_OPENING_TRAN_QRY INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM INV_STOCKITEM ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL INV_STOCKITEM_LEVEL ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM_LEVEL.STOCKITEM_NAME ";
                    strSQL = strSQL + "ORDER BY INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5";
                    if (strString != "")
                    {
                        strSQL = strSQL + " WHERE INV_STOCKITEM.STOCKGROUP_NAME IN(" + strString + ")";

                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }
                    else
                    {
                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " WHERE (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.Connection = gcnMain;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                        //oLedg.strUnit = dr["STOCKITEM_NAME"].ToString();
                        oLedg.dblOpnQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                        oLedg.dblOpnAmnt = Convert.ToDouble(dr["INV_TRAN_AMOUNT"].ToString());
                        oLedg.dblInwQty = Convert.ToDouble(dr["INWARD_QUANTITY"].ToString());
                        oLedg.dblInwAmount = Convert.ToDouble(dr["INWARD_AMOUNT"].ToString());
                        oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString()));
                        oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_SALES_AMOUNT"].ToString()));
                        oLedg.dblclsQty = Convert.ToDouble(dr["CLS"].ToString());
                        oLedg.dblclsAmnt = Convert.ToDouble(dr["CLSAMNT"].ToString());
                        ooAccLedger.Add(oLedg);
                    }
                    if (!dr.HasRows)
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strLocationName = "";
                        oLedg.strItemName = "";
                        oLedg.strGroupParent = "";
                        oLedg.strGroupPrimary = "";
                        oLedg.strAltUnit = "";
                        oLedg.strGroupName = "";
                        oLedg.dblOpnQty = 0;
                        oLedg.dblOpnAmnt = 0;
                        oLedg.dblInwQty = 0;
                        oLedg.dblInwAmount = 0;
                        oLedg.dblOutWardQty = 0;
                        oLedg.dblOutwardAmnt = 0;
                        oLedg.dblclsQty = 0;
                        oLedg.dblclsAmnt = 0;
                        ooAccLedger.Add(oLedg);
                    }
                    dr.Close();
                    gcnMain.Close();
                    return ooAccLedger;


                }
            }
        }
        #endregion
        #region"VoucherReport"
        public List<RSalesPurchase> mGetVoucherReport(string strDeComID, string strFDate, string strTDate, string strLedgername, string strBranchId, int intMode, string selection)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RSalesPurchase> ooAccLedger = new List<RSalesPurchase>();


                if (selection == "Sum")
                {
                    strSQL = "SELECT   ACC_LEDGER.LEDGER_NAME_MERZE AS TERRITORRYNAME,  ";
                    strSQL = strSQL + "0 ADD_LESS_ADD_AMOUNT , ";
                    strSQL = strSQL + "0 ADD_LESS_LESS_AMOUNT, ";
                    strSQL = strSQL + "'' AS COMP_REF_NO, '' COMP_VOUCHER_DATE, ACC_BILL_TRAN.STOCKITEM_NAME, sum(ACC_BILL_TRAN.BILL_QUANTITY) as BILL_QUANTITY,sum(ACC_BILL_TRAN.BILL_QUANTITY_BONUS) as BILL_QUANTITY_BONUS , ";
                    strSQL = strSQL + "sum(BILL_RATE) BILL_RATE, 0 BILL_ADD_LESS, sum(ACC_BILL_TRAN.BILL_AMOUNT) as BILL_AMOUNT ,BRANCH_NAME , ABS(SUM(ACC_BILL_TRAN.BILL_ADD_LESS_AMOUNT)) AS Commission FROM ACC_LEDGER AS ACC_LEDGER ";
                    strSQL = strSQL + "INNER JOIN ACC_COMPANY_VOUCHER ON ACC_LEDGER.LEDGER_NAME = ACC_COMPANY_VOUCHER.LEDGER_NAME INNER JOIN ACC_BILL_TRAN AS ACC_BILL_TRAN ON ";
                    strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_REF_NO = ACC_BILL_TRAN.COMP_REF_NO LEFT OUTER JOIN ACC_BRANCH AS ACC_BRANCH ON ACC_BILL_TRAN.BRANCH_ID = ACC_BRANCH.BRANCH_ID FULL ";
                    strSQL = strSQL + "OUTER JOIN ACC_ADD_LESS AS ACC_ADD_LESS ON ACC_BILL_TRAN.COMP_REF_NO = ACC_ADD_LESS.ADD_LESS_COMP_REF_NO ";
                    strSQL = strSQL + "WHERE (ACC_BILL_TRAN.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFDate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ) ";
                    if (strBranchId != "")
                    {
                        strSQL = strSQL + "AND (ACC_BILL_TRAN.COMP_VOUCHER_TYPE = '" + strBranchId + "') ";
                    }
                    strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = " + intMode + ")";

                    if (intMode == 15)
                    {
                        strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.SAMPLE_STATUS >=0) ";
                    }
                    else
                    {
                        strSQL = strSQL + "AND  (ACC_COMPANY_VOUCHER.SAMPLE_STATUS = 0) ";
                    }

                    if (strLedgername != "")
                    {
                        strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_NAME = '" + strLedgername + "') ";
                    }
                    strSQL = strSQL + "GROUP BY ACC_LEDGER.LEDGER_NAME_MERZE, ACC_BILL_TRAN.STOCKITEM_NAME, ACC_BRANCH.BRANCH_NAME";


                }
                if (selection == null)
                {
                    if (intMode == 17)
                    {
                        strSQL = "SELECT  ACC_LEDGER.LEDGER_NAME_MERZE AS TERRITORRYNAME ";
                        strSQL = strSQL + ",( CASE WHEN ACC_ADD_LESS.ADD_LESS_ADD_AMOUNT IS NULL Then 0 else ACC_ADD_LESS.ADD_LESS_ADD_AMOUNT end ) as ADD_LESS_ADD_AMOUNT , ( case when ACC_ADD_LESS.ADD_LESS_LESS_AMOUNT is null then 0 else ACC_ADD_LESS.ADD_LESS_LESS_AMOUNT end ) as ADD_LESS_LESS_AMOUNT,ACC_BILL_TRAN.COMP_REF_NO BillKey, SUBSTRING(ACC_BILL_TRAN.COMP_REF_NO, 7, 30) AS COMP_REF_NO, ";
                        strSQL = strSQL + "ACC_BILL_TRAN.COMP_VOUCHER_DATE, ACC_BILL_TRAN.STOCKITEM_NAME, ACC_BILL_TRAN.BILL_QUANTITY, ACC_BILL_TRAN.BILL_RATE, ACC_BILL_TRAN.BILL_ADD_LESS, ACC_BILL_TRAN.BILL_NET_AMOUNT, ";
                        strSQL = strSQL + "ACC_BRANCH.BRANCH_NAME ,ACC_COMPANY_VOUCHER.PREPARED_DATE, ACC_BILL_TRAN.BILL_QUANTITY_BONUS, ACC_BILL_TRAN.BILL_AMOUNT, ABS(SUM(ACC_BILL_TRAN.BILL_ADD_LESS_AMOUNT)) AS Commission  ";
                        strSQL = strSQL + "FROM ACC_LEDGER AS ACC_LEDGER INNER JOIN ";
                        strSQL = strSQL + "ACC_COMPANY_VOUCHER ON ACC_LEDGER.LEDGER_NAME = ACC_COMPANY_VOUCHER.LEDGER_NAME INNER JOIN ";
                        strSQL = strSQL + "ACC_BILL_TRAN AS ACC_BILL_TRAN ON ACC_COMPANY_VOUCHER.COMP_REF_NO = ACC_BILL_TRAN.COMP_REF_NO LEFT OUTER JOIN ";
                        strSQL = strSQL + "ACC_BRANCH AS ACC_BRANCH ON ACC_BILL_TRAN.BRANCH_ID = ACC_BRANCH.BRANCH_ID FULL OUTER JOIN ";
                        strSQL = strSQL + "ACC_ADD_LESS AS ACC_ADD_LESS ON ACC_BILL_TRAN.COMP_REF_NO = ACC_ADD_LESS.ADD_LESS_COMP_REF_NO ";
                        strSQL = strSQL + "WHERE (ACC_BILL_TRAN.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFDate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ") ) ";
                        if (strBranchId != "")
                        {
                            strSQL = strSQL + "AND (ACC_BILL_TRAN.BRANCH_ID = '" + strBranchId + "') ";
                        }

                        strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.SAMPLE_STATUS = 1) ";
                        if (strLedgername != "")
                        {
                            strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_NAME = '" + strLedgername + "')";
                        }
                    }
                    else
                    {

                        strSQL = "SELECT  LEDGER_NAME, TERRITORRYNAME, ADD_LESS_ADD_AMOUNT, ADD_LESS_LESS_AMOUNT, BillKey, COMP_REF_NO, COMP_VOUCHER_DATE, STOCKITEM_NAME, BILL_QUANTITY, BILL_RATE, BILL_ADD_LESS, ";
                        strSQL = strSQL + "BILL_NET_AMOUNT, BRANCH_NAME, PREPARED_DATE, BILL_QUANTITY_BONUS, BILL_AMOUNT, Commission ";
                        strSQL = strSQL + "FROM  (SELECT  t1.LEDGER_NAME, t1.TERRITORRYNAME, t1.ADD_LESS_ADD_AMOUNT, t1.ADD_LESS_LESS_AMOUNT, t1.BillKey, t1.COMP_REF_NO, t1.COMP_VOUCHER_DATE, t1.STOCKITEM_NAME, t1.BILL_QUANTITY, ";
                        strSQL = strSQL + "t1.BILL_RATE, t1.BILL_ADD_LESS, t1.BILL_NET_AMOUNT, t1.BRANCH_NAME, t1.PREPARED_DATE, t1.BILL_QUANTITY_BONUS, t1.BILL_AMOUNT, t1.Commission ";
                        strSQL = strSQL + "FROM (SELECT ACC_LEDGER.LEDGER_NAME_MERZE AS TERRITORRYNAME, ACC_LEDGER.LEDGER_NAME, (CASE WHEN ACC_ADD_LESS.ADD_LESS_ADD_AMOUNT IS NULL  ";
                        strSQL = strSQL + "THEN 0 ELSE ACC_ADD_LESS.ADD_LESS_ADD_AMOUNT END) AS ADD_LESS_ADD_AMOUNT, (CASE WHEN ACC_ADD_LESS.ADD_LESS_LESS_AMOUNT IS NULL  ";
                        strSQL = strSQL + "THEN 0 ELSE ACC_ADD_LESS.ADD_LESS_LESS_AMOUNT END) AS ADD_LESS_LESS_AMOUNT, ACC_BILL_TRAN.COMP_REF_NO AS BillKey, SUBSTRING(ACC_BILL_TRAN.COMP_REF_NO, 7, 30)  ";
                        strSQL = strSQL + "AS COMP_REF_NO, ACC_BILL_TRAN.COMP_VOUCHER_DATE, ACC_BILL_TRAN.STOCKITEM_NAME, ACC_BILL_TRAN.BILL_QUANTITY, ACC_BILL_TRAN.BILL_RATE, ACC_BILL_TRAN.BILL_ADD_LESS,  ";
                        strSQL = strSQL + "ACC_BILL_TRAN.BILL_NET_AMOUNT, ACC_BRANCH.BRANCH_NAME, ACC_COMPANY_VOUCHER.PREPARED_DATE, ACC_BILL_TRAN.BILL_QUANTITY_BONUS, ACC_BILL_TRAN.BILL_AMOUNT,  ";
                        strSQL = strSQL + "ABS(ACC_BILL_TRAN.BILL_ADD_LESS_AMOUNT) AS Commission ";
                        strSQL = strSQL + "FROM  ACC_LEDGER AS ACC_LEDGER INNER JOIN ";
                        strSQL = strSQL + "ACC_COMPANY_VOUCHER ON ACC_LEDGER.LEDGER_NAME = ACC_COMPANY_VOUCHER.LEDGER_NAME INNER JOIN ";
                        strSQL = strSQL + "ACC_BILL_TRAN AS ACC_BILL_TRAN ON ACC_COMPANY_VOUCHER.COMP_REF_NO = ACC_BILL_TRAN.COMP_REF_NO LEFT OUTER JOIN ";
                        strSQL = strSQL + "ACC_BRANCH AS ACC_BRANCH ON ACC_BILL_TRAN.BRANCH_ID = ACC_BRANCH.BRANCH_ID FULL OUTER JOIN ";
                        strSQL = strSQL + "ACC_ADD_LESS AS ACC_ADD_LESS ON ACC_BILL_TRAN.COMP_REF_NO = ACC_ADD_LESS.ADD_LESS_COMP_REF_NO ";
                        strSQL = strSQL + "WHERE  (ACC_BILL_TRAN.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFDate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) AND (ACC_BILL_TRAN.COMP_VOUCHER_TYPE = " + intMode + "))  ";
                        strSQL = strSQL + "AS t1 LEFT OUTER JOIN ";
                        strSQL = strSQL + "(SELECT COMP_REF_NO, LEDGER_NAME, VOUCHER_ADD_LESS_SIGN, VOUCHER_CREDIT_AMOUNT, VOUCHER_DEBIT_AMOUNT, VOUCHER_REF_KEY ";
                        strSQL = strSQL + "FROM  ACC_VOUCHER ";
                        strSQL = strSQL + "WHERE (COMP_VOUCHER_POSITION <> 1) AND (COMP_VOUCHER_POSITION <> 2) AND (COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFDate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) AND (COMP_VOUCHER_TYPE = " + intMode + ")) AS t2 ON t1.BillKey = t2.COMP_REF_NO) AS tb3 ";
                        if (strLedgername != "")
                        {

                            strSQL = strSQL + "WHERE (LEDGER_NAME ='" + strLedgername + "') ";
                        }

                        strSQL = strSQL + "ORDER BY COMP_VOUCHER_DATE ";
                    }


                    //strSQL = strSQL + "ORDER BY t1.COMP_VOUCHER_DATE";
                }


                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RSalesPurchase oLedg = new RSalesPurchase();

                    oLedg.strLedgerName = dr["TERRITORRYNAME"].ToString();
                    if (dr["BRANCH_NAME"].ToString() != "")
                    {
                        oLedg.strBranchName = dr["BRANCH_NAME"].ToString();
                    }
                    oLedg.dblAddamount = Convert.ToDouble(dr["ADD_LESS_LESS_AMOUNT"].ToString());
                    oLedg.dbllessamount = Convert.ToDouble(dr["ADD_LESS_ADD_AMOUNT"].ToString());

                    if ((intMode == 13) || (intMode == 33) || (intMode == 32))
                    {
                        if (dr["COMP_VOUCHER_DATE"].ToString() != "")
                        {
                            oLedg.strVDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd-MM-yyyy");
                        }
                        else
                        {
                            oLedg.strVDate = "";
                        }
                    }
                    if ((intMode == 16) && (selection != "Sum"))
                    {
                        oLedg.strVDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd-MM-yyyy");
                    }
                    if (dr["COMP_REF_NO"].ToString() != "")
                    {
                        oLedg.strRefNo = dr["COMP_REF_NO"].ToString();

                    }
                    else
                    {
                        oLedg.strRefNo = "";
                    }
                    oLedg.dblBilQty = Convert.ToDouble(dr["BILL_QUANTITY"].ToString());

                    oLedg.dblBonusQty = Convert.ToDouble(dr["BILL_QUANTITY_BONUS"].ToString());

                    oLedg.strRate = Convert.ToDouble(dr["BILL_RATE"].ToString());
                    oLedg.dblAddLess = Convert.ToDouble(dr["Commission"].ToString());
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.dblBillAmount = Convert.ToDouble(dr["BILL_AMOUNT"].ToString());
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RSalesPurchase oLedg = new RSalesPurchase();
                    oLedg.strLedgerName = "";
                    oLedg.dblAddamount = 0;
                    oLedg.dbllessamount = 0;
                    oLedg.strVDate = "";
                    oLedg.strVDate = "";
                    oLedg.strVDate = "";
                    oLedg.strRefNo = "";
                    oLedg.dblBilQty = 0;
                    oLedg.dblBonusQty = 0;
                    oLedg.strRate = 0;
                    oLedg.dblAddLess = 0;
                    oLedg.strItemName = "";
                    oLedg.dblBillAmount = 0;
                    ooAccLedger.Add(oLedg);
                }

                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;

            }
        }
        #endregion
        #region "Sales Challan"
        public List<RSalesPurchase> mGetSalesChalan(string strDeComID, string strFdate, string strTDate, string strBranchId, string strString, int intmode)
        {

            string strSQL = null, strAgstRefNo;

            strAgstRefNo = Utility.mGetAgstRefNo(strDeComID, "");
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;

                strSQL = "DELETE FROM SALES_CHALAN_TEMP ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                if (intmode > 0)
                {
                    strSQL = "INSERT INTO SALES_CHALAN_TEMP(CHALAN_NUMBER,LEDGER_NAME_MERZE,DELIVERY_DATE,TRANSPORT,DESTINATION,TR_NO,CART_QTY,BOX_QTY,NARRATION,BRANCH_NAME) ";
                    strSQL = strSQL + "SELECT ACC_COMPANY_VOUCHER.COMP_REF_NO,ACC_LEDGER.LEDGER_NAME_MERZE, ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE,ACC_COMPANY_VOUCHER.TRANSPORT_NAME, ACC_COMPANY_VOUCHER.COMP_VOUCHER_DESTINATION,ACC_COMPANY_VOUCHER.COMP_OTHERS, ";
                    strSQL = strSQL + "ACC_COMPANY_VOUCHER.CRT_QTY, ACC_COMPANY_VOUCHER.BOX_QTY, ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION,   ";
                    strSQL = strSQL + "ACC_BRANCH.BRANCH_NAME  ";
                    strSQL = strSQL + "FROM ACC_LEDGER,ACC_COMPANY_VOUCHER,ACC_BRANCH  WHERE ACC_LEDGER.LEDGER_NAME =ACC_COMPANY_VOUCHER.LEDGER_NAME AND ACC_COMPANY_VOUCHER.BRANCH_ID =ACC_BRANCH.BRANCH_ID  ";
                    if (strString != "")
                    {
                        strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_NAME = '" + strString + "')";
                    }
                    if (strBranchId != "")
                    {
                        strSQL = strSQL + "AND  ACC_COMPANY_VOUCHER.BRANCH_ID = '" + strBranchId + "'";
                    }
                    strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = 15) ";
                    strSQL = strSQL + "AND  ACC_COMPANY_VOUCHER.COMP_VOUCHER_STATUS=1 ";
                    //strSQL = strSQL + "AND  ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION NOT like '%Class%'";
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO SALES_CHALAN_TEMP(CHALAN_NUMBER,LEDGER_NAME_MERZE,INVOICE_NO,INVOICE_DATE,BRANCH_NAME) ";
                    strSQL = strSQL + "SELECT ACC_COMPANY_VOUCHER.COMP_REF_NO,ACC_LEDGER.LEDGER_NAME_MERZE,AGST_REF_NO_VIEW.VOUCHER_JOIN_FOREIGN_REF, AGST_REF_NO_VIEW.COMP_VOUCHER_DATE,ACC_BRANCH.BRANCH_NAME  FROM ACC_COMPANY_VOUCHER,AGST_REF_NO_VIEW,ACC_LEDGER,ACC_BRANCH WHERE ACC_LEDGER.LEDGER_NAME =ACC_COMPANY_VOUCHER.LEDGER_NAME AND ACC_COMPANY_VOUCHER.BRANCH_ID =ACC_BRANCH.BRANCH_ID  AND  ";
                    strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_REF_NO =AGST_REF_NO_VIEW.VOUCHER_JOIN_PRIMARY_REF  ";
                    if (strString != "")
                    {
                        strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_NAME = '" + strString + "')";
                    }
                    if (strBranchId != "")
                    {
                        strSQL = strSQL + "AND  ACC_COMPANY_VOUCHER.BRANCH_ID = '" + strBranchId + "'";
                    }
                    strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = 15) ";
                    strSQL = strSQL + "AND  ACC_COMPANY_VOUCHER.COMP_VOUCHER_STATUS=1 ";
                    //strSQL = strSQL + "AND  ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION NOT like '%Class%' ";
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                else
                {
                    //strSQL = "INSERT INTO SALES_CHALAN_TEMP(CHALAN_NUMBER,LEDGER_NAME_MERZE,INVOICE_DATE,TRANSPORT,DESTINATION,TR_NO,CART_QTY,BOX_QTY,NARRATION,BRANCH_NAME) ";
                    //strSQL = strSQL + "SELECT ACC_COMPANY_VOUCHER.COMP_REF_NO,ACC_LEDGER.LEDGER_NAME_MERZE, ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE,ACC_COMPANY_VOUCHER.TRANSPORT_NAME, ACC_COMPANY_VOUCHER.COMP_VOUCHER_DESTINATION,ACC_COMPANY_VOUCHER.COMP_OTHERS, ";
                    //strSQL = strSQL + "ACC_COMPANY_VOUCHER.CRT_QTY, ACC_COMPANY_VOUCHER.BOX_QTY, ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION,   ";
                    //strSQL = strSQL + "ACC_BRANCH.BRANCH_NAME  ";
                    //strSQL = strSQL + "FROM ACC_LEDGER,ACC_COMPANY_VOUCHER,ACC_BRANCH  WHERE ACC_LEDGER.LEDGER_NAME =ACC_COMPANY_VOUCHER.LEDGER_NAME AND ACC_COMPANY_VOUCHER.BRANCH_ID =ACC_BRANCH.BRANCH_ID  ";
                    //if (strString != "")
                    //{
                    //    strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_NAME = '" + strString + "')";
                    //}
                    //if (strBranchId != "")
                    //{
                    //    strSQL = strSQL + "AND  ACC_COMPANY_VOUCHER.BRANCH_ID = '" + strBranchId + "'";
                    //}
                    //strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = 15) ";
                    //strSQL = strSQL + "AND  ACC_COMPANY_VOUCHER.COMP_VOUCHER_STATUS=0 ";
                    //strSQL = strSQL + "AND  ACC_COMPANY_VOUCHER.SAMPLE_STATUS=0 ";
                    //strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                    //cmdInsert.CommandText = strSQL;
                    //cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO SALES_CHALAN_TEMP(CHALAN_NUMBER,LEDGER_NAME_MERZE,INVOICE_NO,INVOICE_DATE,BRANCH_NAME,TRANSPORT,DESTINATION,TR_NO,CART_QTY,BOX_QTY,NARRATION) ";
                    strSQL = strSQL + "SELECT ACC_COMPANY_VOUCHER.COMP_REF_NO,ACC_LEDGER.LEDGER_NAME_MERZE,AGST_REF_NO_VIEW.VOUCHER_JOIN_FOREIGN_REF, ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE,";
                    strSQL = strSQL + "ACC_BRANCH.BRANCH_NAME,ACC_COMPANY_VOUCHER.TRANSPORT_NAME, ACC_COMPANY_VOUCHER.COMP_VOUCHER_DESTINATION,ACC_COMPANY_VOUCHER.COMP_OTHERS, ACC_COMPANY_VOUCHER.CRT_QTY, ";
                    strSQL = strSQL + "ACC_COMPANY_VOUCHER.BOX_QTY, ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION  FROM ACC_COMPANY_VOUCHER,AGST_REF_NO_VIEW,ACC_LEDGER,ACC_BRANCH ";
                    strSQL = strSQL + "WHERE ACC_LEDGER.LEDGER_NAME =ACC_COMPANY_VOUCHER.LEDGER_NAME AND ACC_COMPANY_VOUCHER.BRANCH_ID =ACC_BRANCH.BRANCH_ID  AND  ";
                    strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_REF_NO =AGST_REF_NO_VIEW.VOUCHER_JOIN_PRIMARY_REF  ";
                    if (strString != "")
                    {
                        strSQL = strSQL + "AND (ACC_LEDGER.LEDGER_NAME = '" + strString + "')";
                    }
                    if (strBranchId != "")
                    {
                        strSQL = strSQL + "AND  ACC_COMPANY_VOUCHER.BRANCH_ID = '" + strBranchId + "'";
                    }
                    strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = 15) ";
                    strSQL = strSQL + "AND  ACC_COMPANY_VOUCHER.COMP_VOUCHER_STATUS=0 ";
                    strSQL = strSQL + "AND  ACC_COMPANY_VOUCHER.SAMPLE_STATUS=0 ";
                    //strSQL = strSQL + "AND  ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION like '%Class%' ";
                    strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND " + Utility.cvtSQLDateString(strTDate) + " ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }
                cmdInsert.Transaction.Commit();

                List<RSalesPurchase> ooAccLedger = new List<RSalesPurchase>();
                if (intmode > 0)
                {
                    strSQL = "SELECT  LEDGER_NAME_MERZE ,CHALAN_NUMBER, DELIVERY_DATE,INVOICE_NO,INVOICE_DATE,TRANSPORT,DESTINATION,";
                    strSQL = strSQL + "TR_NO,CART_QTY,BOX_QTY,NARRATION,BRANCH_NAME FROM SALES_CHALAN_TEMP ORDER BY LEDGER_NAME_MERZE,INVOICE_DATE ";
                   
                }
                else
                {
                    strSQL = "SELECT  LEDGER_NAME_MERZE ,CHALAN_NUMBER, DELIVERY_DATE,INVOICE_NO,INVOICE_DATE,TRANSPORT,DESTINATION,";
                    strSQL = strSQL + "TR_NO,CART_QTY,BOX_QTY,NARRATION,BRANCH_NAME FROM SALES_CHALAN_TEMP ORDER BY LEDGER_NAME_MERZE,INVOICE_DATE ";
                }

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);

                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RSalesPurchase oLedg = new RSalesPurchase();
                    oLedg.strLedgerName = dr["LEDGER_NAME_MERZE"].ToString();
                    oLedg.strCheNo = dr["CHALAN_NUMBER"].ToString();
                    if (dr["INVOICE_NO"].ToString() != "")
                    {
                        oLedg.strRefNo = dr["INVOICE_NO"].ToString();
                    }
                    else
                    {
                        oLedg.strRefNo = "";
                    }

                    oLedg.strAddress1 = dr["TRANSPORT"].ToString();
                    if (dr["DESTINATION"].ToString() != "")
                    {
                        oLedg.strAddress2 = dr["DESTINATION"].ToString();
                    }
                    else
                    {
                        oLedg.strAddress2 = "";
                    }
                    if (dr["INVOICE_DATE"].ToString() != "")
                    {
                        oLedg.strTDate = Convert.ToDateTime(dr["INVOICE_DATE"]).ToString("dd-MM-yyyy");
                    }
                    else
                    {
                        oLedg.strTDate = "";
                    }
                    //oLedg.dblSalQty1 = Convert.ToDouble(dr["COMP_VOUCHER_PROCESS_AMOUNT"].ToString());

                    oLedg.dblSalQty2 = Convert.ToDouble(dr["CART_QTY"].ToString());
                    oLedg.dblSalQty3 = Convert.ToDouble(dr["BOX_QTY"].ToString());
                    oLedg.strEmail = dr["NARRATION"].ToString();
                    if (dr["DELIVERY_DATE"].ToString() != "")
                    {
                        oLedg.strVDate = Convert.ToDateTime(dr["DELIVERY_DATE"]).ToString("dd-MM-yyyy");
                    }
                    else
                    {
                        oLedg.strVDate = "";
                    }
                    //if (dr["INVOICE_DATE"].ToString() != "")
                    //{
                    //    oLedg.strVDate = Convert.ToDateTime(dr["INVOICE_DATE"]).ToString("dd-MM-yyyy");
                    //}
                    //else
                    //{
                    //    oLedg.strVDate = "";
                    //}
                    oLedg.strBranchName = "Branch Name :" + dr["BRANCH_NAME"].ToString();
                    if (dr["TR_NO"].ToString() != "")
                    {
                        oLedg.StrSing = dr["TR_NO"].ToString();
                    }
                    else
                    {
                        oLedg.StrSing = "";
                    }
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RSalesPurchase oLedg = new RSalesPurchase();
                    oLedg.strLedgerName = "";
                    oLedg.strCheNo = "";
                    oLedg.strRefNo = "";
                    oLedg.strvouchearDate = "";
                    oLedg.strAddress1 = "";
                    oLedg.strAddress2 = "";
                    oLedg.strTDate = "";
                    oLedg.dblDiscountAmount = 0;
                    oLedg.dblSalQty1 = 0;
                    oLedg.dblSalQty2 = 0;
                    oLedg.dblSalQty3 = 0;
                    oLedg.strEmail = "";
                    oLedg.strVDate = "";
                    oLedg.strBranchName = "";
                    oLedg.StrSing = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;

            }

        }

        #endregion
        #region "PurchaseRegister"
        public List<RSalesPurchase> mGetPurchaseRegisterReport(string strDeComID, string strFDate, string strTDate, string strLedgername, string strString2)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RSalesPurchase> ooAccLedger = new List<RSalesPurchase>();

                strSQL = "SELECT ACC_COMPANY_VOUCHER.COMP_REF_NO, ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE, ACC_COMPANY_VOUCHER.COMP_VOUCHER_ADD_AMOUNT, ACC_COMPANY_VOUCHER.COMP_VOUCHER_NET_AMOUNT, ACC_COMPANY_VOUCHER.COMP_VOUCHER_NARRATION, ";
                strSQL = strSQL + " ACC_BILL_TRAN.STOCKITEM_NAME, ACC_BILL_TRAN.BILL_QUANTITY, ACC_BILL_TRAN.BILL_RATE, ACC_BILL_TRAN.BILL_UOM, ACC_BILL_TRAN.BILL_PER, ";
                strSQL = strSQL + "ISNULL(ACC_BILL_TRAN.BILL_ADD_LESS,0) BILL_ADD_LESS, ACC_BILL_TRAN.BILL_NET_AMOUNT AS BILL_NET_AMOUNT, ";
                if ((strString2 == "32") || (strString2 == "33"))
                {
                    strSQL = strSQL + "isnull (ACC_COMPANY_VOUCHER.LEDGER_NAME,'') as LEDGER_NAME ";
                }
                else
                {
                    strSQL = strSQL + " ACC_LEDGER.LEDGER_NAME_MERZE LEDGER_NAME ";
                    //strSQL = strSQL + "isnull (ACC_LEDGER.TERRITORRY_NAME,'')as LEDGER_NAME ";
                }
                strSQL = strSQL + "FROM  ACC_COMPANY_VOUCHER AS ACC_COMPANY_VOUCHER INNER JOIN ";
                strSQL = strSQL + "ACC_BRANCH AS ACC_BRANCH ON ACC_COMPANY_VOUCHER.BRANCH_ID = ACC_BRANCH.BRANCH_ID INNER JOIN ";
                strSQL = strSQL + "ACC_BILL_TRAN AS ACC_BILL_TRAN ON ACC_COMPANY_VOUCHER.COMP_REF_NO = ACC_BILL_TRAN.COMP_REF_NO INNER JOIN ";
                strSQL = strSQL + "ACC_LEDGER ON ACC_COMPANY_VOUCHER.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME ";
                strSQL = strSQL + "WHERE (ACC_BILL_TRAN.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFDate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = " + strString2 + ") ";

                if (strLedgername != "")
                {
                    strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.LEDGER_NAME = '" + strLedgername + "') ";
                }
                strSQL = strSQL + "ORDER BY ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE, ACC_COMPANY_VOUCHER.LEDGER_NAME, ACC_COMPANY_VOUCHER.COMP_REF_NO ";

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RSalesPurchase oLedg = new RSalesPurchase();
                    oLedg.strRefNo = dr["COMP_REF_NO"].ToString();
                    oLedg.strVDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.dblBilQty = Convert.ToDouble(dr["BILL_QUANTITY"].ToString());
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.strRate = Convert.ToDouble(dr["BILL_RATE"].ToString());
                    oLedg.strBILL_UOM = dr["BILL_UOM"].ToString();
                    oLedg.strBILL_Per = dr["BILL_PER"].ToString();
                    oLedg.dblAddLess = Convert.ToDouble(dr["COMP_VOUCHER_ADD_AMOUNT"].ToString());
                    oLedg.dblBillAddLessAmount = Convert.ToDouble(dr["BILL_ADD_LESS"].ToString());
                    oLedg.dblNetBillAmount = Convert.ToDouble(dr["BILL_NET_AMOUNT"].ToString());
                    oLedg.dblBillAmount = Convert.ToDouble(dr["COMP_VOUCHER_NET_AMOUNT"].ToString());
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RSalesPurchase oLedg = new RSalesPurchase();
                    oLedg.strRefNo = "0001No";
                    oLedg.strVDate = "";
                    oLedg.dblBilQty = 0;
                    oLedg.strItemName = "";
                    oLedg.strRate = 0;
                    oLedg.strBILL_UOM = "";
                    oLedg.strBILL_Per = "";
                    oLedg.dblAddLess = 0;
                    oLedg.dblBillAddLessAmount = 0;
                    oLedg.dblNetBillAmount = 0;
                    oLedg.dblBillAmount = 0;
                    oLedg.strLedgerName = "";
                    oLedg.strLedgerName = "";
                    ooAccLedger.Add(oLedg);
                }

                dr.Close();
                gcnMain.Close();
                cmd.Dispose();

                return ooAccLedger;
            }
        }
        #endregion
        #region Sales  Invoice
        public List<RProductSales> mGetSalesInvoice(string strDeComID, string strSALESREP)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RProductSales> ooAccLedger = new List<RProductSales>();

                //strSQL = "SELECT ACC_COMPANY_VOUCHER.COMP_REF_NO, ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE, ACC_COMPANY_VOUCHER.COMP_VOUCHER_NET_AMOUNT, ACC_COMPANY_VOUCHER.COMP_VOUCHER_DUE_DATE, ";
                //strSQL = strSQL + "ACC_COMPANY_VOUCHER.SALES_REP, ACC_COMPANY_VOUCHER.ORDER_NO, ACC_COMPANY_VOUCHER.ORDER_DATE, ACC_BILL_TRAN.BILL_QUANTITY, ACC_BILL_TRAN.BILL_QUANTITY_BONUS, ";
                //strSQL = strSQL + "ACC_BILL_TRAN.BILL_RATE, ACC_BILL_TRAN.BILL_AMOUNT, ACC_BILL_TRAN.G_COMM_PER, INV_STOCKITEM.STOCKITEM_NAME, INV_STOCKITEM.POWER_CLASS, INV_STOCKITEM.STOCKGROUP_NAME, ";
                //strSQL = strSQL + "INV_STOCKITEM.STOCKCATEGORY_NAME, ISNULL(LTB.TERITORRY_CODE, '') + '-' + ISNULL(LTB.LEDGER_NAME, '') + '-' + ISNULL(LTB.TERRITORRY_NAME, '') AS LedgerN, ";
                //strSQL = strSQL + "ISNULL(CTB.LEDGER_CODE, '') +'-'+ ISNULL(CTB.LEDGER_NAME, '') +'-'+ ISNULL(CTB.HOMOEO_HALL, '') AS Party , ACC_COMPANY_VOUCHER.PREPARED_DATE ";
                //strSQL = strSQL + "FROM  ACC_COMPANY_VOUCHER AS ACC_COMPANY_VOUCHER INNER JOIN ";
                //strSQL = strSQL + "ACC_BILL_TRAN AS ACC_BILL_TRAN ON ACC_COMPANY_VOUCHER.COMP_REF_NO = ACC_BILL_TRAN.COMP_REF_NO INNER JOIN ";
                //strSQL = strSQL + "INV_STOCKITEM AS INV_STOCKITEM ON ACC_BILL_TRAN.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME INNER JOIN ";
                //strSQL = strSQL + "(SELECT TERITORRY_CODE, TERRITORRY_NAME, LEDGER_NAME ";
                //strSQL = strSQL + "FROM  ACC_LEDGER ";
                //strSQL = strSQL + "WHERE (LEDGER_GROUP = 202)) AS LTB ON ACC_COMPANY_VOUCHER.LEDGER_NAME = LTB.LEDGER_NAME LEFT OUTER JOIN ";
                //strSQL = strSQL + "(SELECT LEDGER_CODE, HOMOEO_HALL, LEDGER_NAME ";
                //strSQL = strSQL + "FROM ACC_LEDGER AS ACC_LEDGER_1 ";
                //strSQL = strSQL + "WHERE (LEDGER_GROUP = 204)) AS CTB ON ACC_COMPANY_VOUCHER.SALES_REP = CTB.LEDGER_NAME ";
                //strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.SALES_REP <> '') AND (ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE = 16) ";
                //if (strSALESREP != "")
                //{
                //    strSQL = strSQL + "AND(ACC_COMPANY_VOUCHER.SALES_REP = '" + strSALESREP + "') ";
                //}
                ////strSQL = strSQL + "AND (ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + "))";
                //strSQL = strSQL + "ORDER BY ACC_COMPANY_VOUCHER.SALES_REP ";


                strSQL = "SELECT ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_REF_NO, ACC_LEDGER.LEDGER_NAME_MERZE , ACC_COMPANY_VOUCHER.COMP_VOUCHER_DATE, ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER.COMP_VOUCHER_NET_AMOUNT, ACC_COMPANY_VOUCHER.COMP_VOUCHER_DUE_DATE, ACC_CUSTOMER_LIST.LEDGER_NAME_MERZE  SALES_REP, ACC_COMPANY_VOUCHER.ORDER_NO, ACC_COMPANY_VOUCHER.ORDER_DATE,";
                strSQL = strSQL + "ACC_BILL_TRAN.BILL_QUANTITY, ACC_BILL_TRAN.BILL_QUANTITY_BONUS, ACC_BILL_TRAN.BILL_RATE, ACC_BILL_TRAN.BILL_AMOUNT, ACC_BILL_TRAN.G_COMM_PER, ";
                strSQL = strSQL + "INV_STOCKITEM.STOCKITEM_NAME, INV_STOCKITEM.POWER_CLASS, INV_STOCKITEM.STOCKGROUP_NAME, INV_STOCKITEM.STOCKCATEGORY_NAME,ACC_COMPANY_VOUCHER.PREPARED_DATE ";
                strSQL = strSQL + "FROM ACC_COMPANY_VOUCHER,ACC_BILL_TRAN,INV_STOCKITEM,ACC_LEDGER,ACC_CUSTOMER_LIST   WHERE ACC_LEDGER.LEDGER_NAME = ACC_COMPANY_VOUCHER.LEDGER_NAME   AND ACC_CUSTOMER_LIST.LEDGER_NAME =ACC_COMPANY_VOUCHER.SALES_REP ";
                strSQL = strSQL + "AND ACC_COMPANY_VOUCHER.COMP_REF_NO =ACC_BILL_TRAN.COMP_REF_NO  and INV_STOCKITEM.STOCKITEM_NAME =ACC_BILL_TRAN.STOCKITEM_NAME ";
                strSQL = strSQL + "AND ";
                strSQL = strSQL + "ACC_COMPANY_VOUCHER.SALES_REP <> '' AND ACC_COMPANY_VOUCHER.COMP_VOUCHER_TYPE=16 ";
                //--AND ACC_COMPANY_VOUCHER.SALES_REP = 'DR. M.A. MATIN(CP-0018)' 
                if (strSALESREP != "")
                {
                    strSQL = strSQL + "AND(ACC_COMPANY_VOUCHER.SALES_REP = '" + strSALESREP + "') ";
                }
                strSQL = strSQL + "ORDER BY ACC_COMPANY_VOUCHER.SALES_REP ";



                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();

                while (dr.Read())
                {
                    RProductSales oLedg = new RProductSales();
                    oLedg.strRefNo = dr["COMP_REF_NO"].ToString();
                    oLedg.strLedgername = dr["LEDGER_NAME_MERZE"].ToString();
                    oLedg.strVoucheDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.DblVNetAmt = Convert.ToDouble(dr["COMP_VOUCHER_NET_AMOUNT"].ToString());
                    if (dr["PREPARED_DATE"].ToString() != "")
                    {
                        oLedg.strVDDate = Convert.ToDateTime(dr["PREPARED_DATE"]).ToString("dd-MM-yyyy");
                    }
                    else
                    {
                        oLedg.strVDDate = "";
                    }
                    oLedg.strSALESREP = dr["SALES_REP"].ToString();
                    if (dr["ORDER_NO"].ToString() != "")
                    {
                        oLedg.strOrderNo = dr["ORDER_NO"].ToString();
                    }
                    else
                    {
                        oLedg.strOrderNo = "";
                    }
                    if (dr["ORDER_DATE"].ToString() != "")
                    {
                        oLedg.strOrderDate = Convert.ToDateTime(dr["ORDER_DATE"]).ToString("dd-MM-yyyy");
                    }
                    else
                    {
                        oLedg.strOrderDate = "";
                    }
                    oLedg.intSalesQty = Convert.ToDouble(dr["BILL_QUANTITY"].ToString());
                    oLedg.intBonusQty = Convert.ToDouble(dr["BILL_QUANTITY_BONUS"].ToString());
                    oLedg.DblBillRate = Convert.ToDouble(dr["BILL_RATE"].ToString());
                    oLedg.DblBillAmount = Convert.ToDouble(dr["BILL_AMOUNT"].ToString());
                    if (dr["G_COMM_PER"].ToString() != "")
                    {
                        oLedg.DblGCommPer = Convert.ToDouble(dr["G_COMM_PER"].ToString());
                    }
                    else
                    {
                        oLedg.DblGCommPer = 0;
                    }
                    oLedg.strStockItemName = dr["STOCKITEM_NAME"].ToString();
                    if (dr["POWER_CLASS"].ToString() != "")
                    {
                        oLedg.strPowrClass = dr["POWER_CLASS"].ToString();
                    }
                    else
                    {
                        oLedg.strPowrClass = "";
                    }
                    oLedg.strStockGroupName = dr["STOCKGROUP_NAME"].ToString();
                    if (dr["STOCKCATEGORY_NAME"].ToString() != "")
                    {
                        oLedg.strStockCategoryName = dr["STOCKCATEGORY_NAME"].ToString();
                    }
                    else
                    {
                        oLedg.strStockCategoryName = "";
                    }
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RProductSales oLedg = new RProductSales();
                    oLedg.strRefNo = "";
                    oLedg.strLedgername = "";
                    oLedg.strVoucheDate = "";
                    oLedg.DblVNetAmt = 0;
                    oLedg.strVDDate = "";
                    oLedg.strSALESREP = "";
                    oLedg.strOrderNo = "";
                    oLedg.strOrderDate = "";
                    oLedg.intSalesQty = 0;
                    oLedg.intBonusQty = 0;
                    oLedg.DblBillRate = 0;
                    oLedg.DblBillAmount = 0;
                    oLedg.DblGCommPer = 0;
                    oLedg.strStockItemName = "";
                    oLedg.strPowrClass = "";
                    oLedg.strStockGroupName = "";
                    oLedg.strStockCategoryName = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }
        #endregion
        #region "PartyWise Product Sales"
        public List<RProductSales> mGetPartyWiseProductsales(string strDeComID, string strFdate, string strTDate, string strString, string strString2, string strSelction, string strSelction2)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                if (strSelction == "Purchase")
                {
                    strSQL = "SELECT LEDGER_NAME FROM  ACC_LEDGER WHERE (LEDGER_GROUP = 203)ORDER BY LEDGER_NAME ";
                }

                List<RProductSales> ooAccLedger = new List<RProductSales>();
                strSQL = "SELECT ACC_COMP_BILL_TRAN_QRY.COMP_VOUCHER_DATE,tb1.COMP_REF_NO1, ACC_COMP_BILL_TRAN_QRY.COMP_REF_NO, ACC_COMP_BILL_TRAN_QRY.BILL_UOM, ACC_COMP_BILL_TRAN_QRY.BILL_QUANTITY, ";
                strSQL = strSQL + "ACC_COMP_BILL_TRAN_QRY.BILL_RATE, ACC_COMP_BILL_TRAN_QRY.VOUCHER_CURRENCY_SYMBOL, INV_STOCKITEM.STOCKITEM_NAME, INV_STOCKITEM.STOCKGROUP_NAME, ";
                if (strString2 == "Purchase")
                {
                    strSQL = strSQL + "ACC_COMP_BILL_TRAN_QRY.LEDGER_NAME ";
                }
                else
                {
                    strSQL = strSQL + "ISNULL(ACC_LEDGER.TERITORRY_CODE, '') + '-' + ISNULL(ACC_COMP_BILL_TRAN_QRY.LEDGER_NAME, '') + '-' + ISNULL(ACC_LEDGER.TERRITORRY_NAME, '') AS LEDGER_NAME ";
                }

                strSQL = strSQL + " , ABS(tb1.BILL_ADD_LESS_AMOUNT) AS BILL_ADD_LESS_AMOUNT, tb1.BILL_AMOUNT ";
                strSQL = strSQL + "FROM ACC_COMP_BILL_TRAN_QRY AS ACC_COMP_BILL_TRAN_QRY INNER JOIN ";
                strSQL = strSQL + "INV_STOCKITEM AS INV_STOCKITEM ON ACC_COMP_BILL_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME INNER JOIN ";
                strSQL = strSQL + "ACC_LEDGER ON ACC_COMP_BILL_TRAN_QRY.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME INNER JOIN ";
                strSQL = strSQL + "(SELECT BILL_AMOUNT, STOCKITEM_NAME, COMP_REF_NO, SUBSTRING(COMP_REF_NO, 7, 30) AS COMP_REF_NO1, BILL_ADD_LESS_AMOUNT, BRANCH_ID ";
                strSQL = strSQL + "FROM  ACC_BILL_TRAN) AS tb1 ON ACC_COMP_BILL_TRAN_QRY.COMP_REF_NO = tb1.COMP_REF_NO AND ACC_COMP_BILL_TRAN_QRY.STOCKITEM_NAME = tb1.STOCKITEM_NAME AND  ";
                strSQL = strSQL + "ACC_COMP_BILL_TRAN_QRY.BRANCH_ID = tb1.BRANCH_ID ";
                strSQL = strSQL + "WHERE (ACC_COMP_BILL_TRAN_QRY.COMP_VOUCHER_DATE BETWEEN (" + Utility.cvtSQLDateString(strFdate) + ") AND (" + Utility.cvtSQLDateString(strTDate) + ")) AND (ACC_COMP_BILL_TRAN_QRY.COMP_VOUCHER_TYPE = " + strSelction + ") ";
                if (strString2 != "")
                {
                    if (strString != "")
                    {
                        if (strString2 == "Purchase")
                        {
                            strSQL = strSQL + "AND  ACC_COMP_BILL_TRAN_QRY.LEDGER_NAME IN (" + strString + ") ";
                            strSQL = strSQL + "AND (ACC_COMP_BILL_TRAN_QRY.STOCKITEM_NAME IN (" + strSelction2 + ")) ";
                        }
                        if (strString2 == "Sales")
                        {
                            strSQL = strSQL + "AND ((ISNULL(ACC_LEDGER.TERITORRY_CODE, '') + '-' + ISNULL(ACC_COMP_BILL_TRAN_QRY.LEDGER_NAME, '') + '-' + ISNULL(ACC_LEDGER.TERRITORRY_NAME, '')) IN (" + strString + ")) ";
                            strSQL = strSQL + "AND (ACC_COMP_BILL_TRAN_QRY.STOCKITEM_NAME IN (" + strSelction2 + ")) ";
                        }
                    }
                }
                strSQL = strSQL + "ORDER BY ACC_COMP_BILL_TRAN_QRY.COMP_VOUCHER_DATE, INV_STOCKITEM.STOCKGROUP_NAME, INV_STOCKITEM.STOCKITEM_NAME, LEDGER_NAME ";

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {

                    RProductSales oLedg = new RProductSales();

                    oLedg.strVoucheDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd-MM-yyyy");
                    oLedg.strRefNo = dr["COMP_REF_NO1"].ToString();
                    oLedg.strStockCategoryName = dr["BILL_UOM"].ToString();
                    oLedg.DblBillQty = Convert.ToDouble(dr["BILL_QUANTITY"].ToString());
                    oLedg.DblBillRate = Convert.ToDouble(dr["BILL_RATE"].ToString());
                    oLedg.DblBillAmount = Convert.ToDouble(dr["BILL_AMOUNT"].ToString());
                    oLedg.strStockItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.strStockGroupName = dr["STOCKGROUP_NAME"].ToString();
                    oLedg.strLedgername = dr["LEDGER_NAME"].ToString();
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RProductSales oLedg = new RProductSales();
                    oLedg.strVoucheDate = "";
                    oLedg.strRefNo = "";
                    oLedg.strStockCategoryName = "";
                    oLedg.DblBillQty = 0;
                    oLedg.DblBillRate = 0;
                    oLedg.DblBillAmount = 0;
                    oLedg.strStockItemName = "";
                    oLedg.strStockGroupName = "";
                    oLedg.strLedgername = "";
                    ooAccLedger.Add(oLedg);
                }

                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }
        #endregion
        #region "Sales Invoice"
        public string mUpdateSalesInvoice(string strDeComID, string mstrRefNo, string strRefNo, long mlngVType, string strDate, string strDueDate, string strMonthID, string strLedgerName, string strSalesLedger, double dblTotalAmnt,
                                       double dblNetAmount, double dblAddAmount, double dblLessAmount, string strRefType, long lngAgstRef, long mlngIsInvEffinDirSalesInv, long mlngIsChqueCash, string strNarrations,
                                       string strBranchId, string vstrGodownName, long lngIsMultiCurrency, string strSalesRep, string DGSalesGrid, string DGVector, string DGBillWise, string DGsalesOrder, string DGAddless,
                                       bool blnMultiCurr, double mdblCurrRate, string mstrFCsymbol, string strOrderNo, string strOrderDate, string strPreparedby, string strPreparedDate, double dblProcessAmount, double dblRoundOff)
        {

            string strSQL = "", strDRCR = "", strGroupName, strReverseLedger = "";
            string strBillKey, strItemName, strItemBangla, strItemDesc, strAddLess, strBatchNo, strUOm, strPer, strGodownName, strbatch = "", strAgnstRefno = "", strDilation="";
            double dblCredit = 0, dblqty = 0, dblRate, dblTotalAmount, dblDiscAmount, dblDebitValue, dblBonusQty, dblCostPrice,
                 dblDilutionValue = 0, dblDilutionQnty = 0, dblDilutionRate=0;
            long lngloop = 1, lngPosition = 1, mlngCashFlow = 2, lngLedgergroup;
            bool blnMultiple = false;
            double dblShort = 0, dblCommPer = 0,dblCreditLimit=0,dblLedgerClosing=0,dblPending=0;
            int intRoundOff = 0, intMasteryes=1;
            SqlDataReader dr;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            lngLedgergroup = (long)(Utility.gGetLedgergroup(strDeComID, strLedgerName));

            if (lngLedgergroup <= 101)
            {
                mlngCashFlow = 1;
            }

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }

                try
                {
                    gcnMain.Open();
                    SqlDataReader rsget;
                    SqlCommand cmdInsert = new SqlCommand();
                    cmdInsert.Connection = gcnMain;
                    strSQL = "SELECT ISNULL(SUM(INV_TRAN.OUTWARD_SALES_AMOUNT),0) AS PRODUCTION_vALUE FROM INV_STOCKITEM ,INV_TRAN WHERE INV_STOCKITEM.STOCKITEM_NAME = INV_TRAN.STOCKITEM_NAME AND INV_TRAN.INV_VOUCHER_TYPE =26 ";
                    strSQL = strSQL + "AND INV_TRAN.GODOWNS_NAME in ('Dilution Section') ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblDilutionValue = Convert.ToDouble(dr["PRODUCTION_vALUE"]);
                    }
                    dr.Close();

                    strSQL = "SELECT ISNULL(SUM(ACC_BILL_TRAN.BILL_QUANTITY),0) AS BILL_QUANTITY ";
                    strSQL = strSQL + "FROM INV_STOCKGROUP INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM ON INV_STOCKGROUP.STOCKGROUP_NAME = INV_STOCKITEM.STOCKGROUP_NAME INNER JOIN ";
                    strSQL = strSQL + "ACC_BILL_TRAN ON INV_STOCKITEM.STOCKITEM_NAME = ACC_BILL_TRAN.STOCKITEM_NAME AND ACC_BILL_TRAN.COMP_VOUCHER_TYPE =16 AND INV_STOCKGROUP.FG_STATUS=1 ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblDilutionQnty = Convert.ToDouble(dr["BILL_QUANTITY"]);
                    }
                    dr.Close();
                    SqlTransaction myTrans;

                    dblCreditLimit = Utility.gdblCreditLimit(strDeComID, strLedgerName, strMonthID);

                    if (dblCreditLimit != 0)
                    {
                        string strFDate = Utility.FirstDayOfMonth(Convert.ToDateTime(strDate)).ToString("dd-MM-yyyy");
                        //dblLedgerClosing = Utility.dblLedgerClosingBalance(strComID, strFDate, dtePreparedDate.Text, uctxtMedicalRep.Text, "");
                        dblLedgerClosing = Utility.dblLedgerClosingBalance(strDeComID, Utility.gdteFinancialYearFrom.ToString(), Utility.gdteFinancialYearTo.ToString(), strLedgerName, "");

                        dblPending = Math.Round(dblCreditLimit - (Math.Abs(dblLedgerClosing) - Math.Abs(dblLedgerClosing)), 2);

                        if (dblPending < dblNetAmount)
                        {
                            string strCls = "";
                            if (dblLedgerClosing < 0)
                            {
                                strCls = dblLedgerClosing * -1 + " Dr";
                            }
                            else
                            {
                                strCls = dblLedgerClosing + " Cr";
                            }
                            return("You have crossed your Credit Limit" + Environment.NewLine + "Closing Balance :" + strCls + Environment.NewLine
                                                                            + "Credit Limt :" + dblCreditLimit + Environment.NewLine + "Pending : " + dblPending);
                        }
                    }


                    myTrans = gcnMain.BeginTransaction();
                    
                    cmdInsert.Transaction = myTrans;

                    //'All Delete Code Here
                    strSQL = "DELETE FROM ACC_BILL_TRAN WHERE COMP_REF_NO = '" + mstrRefNo + "' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM ACC_BILL_TRAN_PROCESS WHERE COMP_REF_NO = '" + mstrRefNo + "' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM ACC_VOUCHER WHERE COMP_REF_NO = '" + mstrRefNo + "' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "DELETE FROM ACC_ADD_LESS WHERE ADD_LESS_COMP_REF_NO = '" + mstrRefNo + "'";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM ACC_VOUCHER_JOIN WHERE VOUCHER_JOIN_PRIMARY_REF = '" + mstrRefNo + "'";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "DELETE FROM ACC_BILL_WISE WHERE COMP_REF_NO = '" + mstrRefNo + "'";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();


                    strSQL = "DELETE FROM INV_TRAN WHERE INV_REF_NO = '" + mstrRefNo + "' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "DELETE FROM INV_MASTER WHERE INV_REF_NO = '" + mstrRefNo + "'";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM VECTOR_TRANSACTION WHERE COMP_REF_NO = '" + mstrRefNo + "'";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();


                    strSQL = "UPDATE ACC_COMPANY_VOUCHER SET ";
                    strSQL = strSQL + "LEDGER_NAME = '" + strLedgerName + "',";
                    strSQL = strSQL + "BRANCH_ID = '" + strBranchId + "',";
                    strSQL = strSQL + "COMP_VOUCHER_DATE = " + Utility.cvtSQLDateString(strDate) + ",";
                    strSQL = strSQL + "COMP_VOUCHER_MONTH_ID = '" + strMonthID + "',";
                    strSQL = strSQL + "COMP_VOUCHER_NARRATION = '" + strNarrations + "',";
                    strSQL = strSQL + "COMP_VOUCHER_AMOUNT = " + dblTotalAmnt + ",";
                    strSQL = strSQL + "COMP_VOUCHER_NET_AMOUNT = " + dblNetAmount + ",";
                    strSQL = strSQL + "COMP_VOUCHER_ADD_AMOUNT = " + dblAddAmount + ",";
                    strSQL = strSQL + "COMP_VOUCHER_LESS_AMOUNT = " + dblLessAmount + ",";
                    strSQL = strSQL + "COMP_VOUCHER_DUE_DATE = " + Utility.cvtSQLDateString(strDueDate) + ",";
                    strSQL = strSQL + "INSERT_DATE = " + Utility.cvtSQLDateString(DateTime.Today.ToString("dd/MM/yyyy"));


                    if (strSalesRep != Utility.gcEND_OF_LIST)
                    {
                        strSQL = strSQL + ",SALES_REP='" + strSalesRep + "' ";
                    }
                    else
                    {

                        strSQL = strSQL + ",SALES_REP='' ";
                    }
                    if (strOrderNo != "")
                    {
                        strSQL = strSQL + ",ORDER_NO='" + strOrderNo + "' ";
                    }
                    else
                    {
                        strSQL = strSQL + ",ORDER_NO=Null";
                    }
                    if (strOrderDate != "")
                    {
                        strSQL = strSQL + ",ORDER_DATE=" + Utility.cvtSQLDateString(strOrderDate) + " ";
                    }
                    else
                    {
                        strSQL = strSQL + ",ORDER_DATE=Null";
                    }
                    if (strPreparedby != "")
                    {
                        strSQL = strSQL + ",PREPARED_BY='" + strPreparedby + "' ";
                    }
                    else
                    {
                        strSQL = strSQL + ",PREPARED_BY=Null";
                    }
                    if (strPreparedDate != "")
                    {
                        strSQL = strSQL + ",PREPARED_DATE=" + Utility.cvtSQLDateString(strPreparedDate) + " ";
                    }
                    else
                    {
                        strSQL = strSQL + ",PREPARED_DATE=Null";
                    }
                    strSQL = strSQL + ",COMP_VOUCHER_PROCESS_AMOUNT=" + dblProcessAmount + " ";
                    strSQL = strSQL + ",COMP_ROUND_OFF_AMOUNT=" + dblRoundOff + " ";
                    strSQL = strSQL + ",COMP_REF_NO='" + strRefNo + "' ";
                    strSQL = strSQL + " WHERE COMP_REF_NO = '" + mstrRefNo + "'";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();


                    if (DGVector != "")
                    {
                        string[] words = DGVector.Split('~');
                        foreach (string strVector in words)
                        {
                            string[] ooCost = strVector.Split('|');
                            if (ooCost[0] != "")
                            {
                                strSQL = VoucherSW.mInsertVector(strRefNo, ooCost[1].ToString(), ooCost[2].ToString(), strDate, strLedgerName, "Dr", lngPosition, lngPosition, 1, ooCost[0].ToString(), Utility.Val(ooCost[3].ToString()), 0, "", mlngVType);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                strSQL = VoucherSW.mInsertVector(strRefNo, ooCost[1].ToString(), ooCost[2].ToString(), strDate, strLedgerName, "Cr", lngPosition, lngPosition, 2, ooCost[0].ToString(), Utility.Val(ooCost[3].ToString()), 0, "", mlngVType);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                lngPosition += 1;
                            }

                        }
                    }
                    lngPosition = 1;
                    //'If Cash Or Bank Then Should not go in Bill By Bill
                    if (mlngCashFlow > 1)
                    {
                        if (DGBillWise != "")
                        {
                            int intbillpos = 1;
                            string strAgstRefNo = "";
                            string[] words = DGBillWise.Split('~');
                            foreach (string strBill in words)
                            {
                                string[] ooCost = strBill.Split('|');
                                if (ooCost[0] != "")
                                {
                                    strAgstRefNo = strRefNo;
                                    strSQL = VoucherSW.gInsertBillWise(strBranchId, strRefNo, ooCost[2].ToString(), mlngVType, strLedgerName, intbillpos, ooCost[0].ToString(),
                                                                        Utility.Val(ooCost[3].ToString()), ooCost[4].ToString(), strAgstRefNo, intbillpos);
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                    intbillpos += 1;
                                }
                            }
                        }
                        else
                        {
                            if (mlngVType == (long)(Utility.VOUCHER_TYPE.vtSALES_INVOICE))
                            {
                                strDRCR = "Dr";
                            }
                            else
                            {
                                strDRCR = "Cr";
                            }

                            strSQL = VoucherSW.gInsertBillWise(strBranchId, strRefNo, strDate, mlngVType, strLedgerName, 0, "New Ref", dblNetAmount, strDRCR, Utility.Mid(strRefNo, 6, strRefNo.Length - 6), 0, strDueDate);
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();
                        }

                    }

                    if (DGSalesGrid != "")
                    {
                        string[] words = DGSalesGrid.Split('~');
                        foreach (string strSalesGrid in words)
                        {
                            string[] ooCost = strSalesGrid.Split('|');
                            if (ooCost[0] != "")
                            {
                                strSQL = "SELECT STOCKGROUP_NAME FROM INV_STOCKGROUP ";
                                strSQL = strSQL + "WHERE FG_STATUS=1 ";
                                strSQL = strSQL + "AND STOCKGROUP_NAME='" + ooCost[0].ToString().Replace("'", "''") + "' ";
                                cmdInsert.CommandText = strSQL;
                                dr = cmdInsert.ExecuteReader();
                                if (dr.Read())
                                {
                                    strDilation = "Y";
                                }
                                else
                                {
                                    strDilation = "N";
                                }
                                dr.Close();
                                strBillKey = strRefNo + lngloop.ToString().PadLeft(4, '0');
                                strGroupName = ooCost[0].ToString();
                                strItemName = ooCost[1].ToString();
                                strItemBangla = "";
                                strItemDesc = ooCost[2].ToString();
                                strGodownName = vstrGodownName;
                                dblqty = Utility.Val(ooCost[3].ToString());
                                dblRate = Utility.Val(ooCost[4].ToString());
                                dblTotalAmount = Utility.Val(ooCost[6].ToString());
                                strUOm = ooCost[5].ToString();
                                strPer = ooCost[5].ToString();
                                dblDiscAmount = Utility.Val(ooCost[7].ToString());
                                dblDebitValue = Utility.Val(ooCost[8].ToString());
                                if (ooCost[9].ToString() != "")
                                {
                                    if (ooCost[9].ToString() != Utility.gcEND_OF_LIST)
                                    {
                                        strBatchNo = ooCost[9].ToString();
                                    }
                                    else
                                    {
                                        strBatchNo = "";
                                    }
                                }
                                else
                                {
                                    strBatchNo = "";
                                }

                                dblBonusQty = Utility.Val(ooCost[10].ToString());
                                strAddLess = ooCost[11].ToString();
                                dblCostPrice = Utility.Val(ooCost[13].ToString());
                                dblShort = Utility.Val(ooCost[14].ToString());
                                intRoundOff = Convert.ToInt32(ooCost[15]);
                                dblCommPer = Convert.ToDouble(ooCost[16]);
                                if (ooCost[17].ToString() != "")
                                {
                                    strAgnstRefno = ooCost[17].ToString();
                                }
                                else
                                {
                                    strAgnstRefno = strRefNo;

                                }
                                //dblAltWhere = 1;
                                if (blnMultiCurr)
                                {
                                }
                                else
                                {
                                    strSQL = VoucherSW.gInsertBillTran(strBillKey, strRefNo, mlngVType, strDate, strItemName, strGodownName, dblqty, dblBonusQty, strUOm, dblRate, dblDebitValue, strAddLess,
                                                                        dblDiscAmount, dblTotalAmount, "Cr", lngloop, strBranchId, Utility.gstrBaseCurrency, strPer, "", strAgnstRefno,
                                                                        strBatchNo, strItemDesc, "", strItemBangla, strGroupName, dblShort, dblCommPer);
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                }
                                strSQL = VoucherSW.gInsertBillTranProcess(strBillKey, strBranchId, lngloop, strRefNo, strAgnstRefno, mlngVType, strDate,
                                                                        strItemName, strGodownName, dblqty, strUOm, strBillKey, 0, 0, strPer);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                if (strDilation == "Y" && strBranchId != "0001")
                                {
                                    if (intMasteryes == 1)
                                    {
                                        if (dblDilutionValue != 0 && dblDilutionQnty != 0)
                                        {
                                            dblDilutionRate = Math.Abs(Math.Round(dblDilutionValue / dblDilutionQnty, 3));
                                        }
                                        else
                                        {
                                            dblDilutionRate = 0;
                                        }
                                        strSQL = "INSERT INTO INV_MASTER(INV_REF_NO,INV_VOUCHER_TYPE,INV_DATE,INV_NARRATIONS,BRANCH_ID) ";
                                        strSQL = strSQL + "values(";
                                        strSQL = strSQL + "'" + strRefNo + "' ";
                                        strSQL = strSQL + "," + mlngVType + " ";
                                        strSQL = strSQL + "," + Utility.cvtSQLDateString(strDate) + " ";
                                        strSQL = strSQL + ",'" + strNarrations.Replace("'", "''") + "' ";
                                        strSQL = strSQL + ",'" + strBranchId + "'";
                                        strSQL = strSQL + ")";
                                        cmdInsert.CommandText = strSQL;
                                        cmdInsert.ExecuteNonQuery();
                                    }
                                    strSQL = VoucherSW.mInsertTranInward(strBillKey, lngPosition, strRefNo, strItemName, 27, strDate, dblqty, dblDilutionRate, strGodownName, (dblqty * dblDilutionRate), "I", strBranchId, "", "", strUOm, "", "", 0, 0);
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                    intMasteryes += 1;
                                }
                            }

                            lngPosition = lngPosition + 1;
                            lngloop += 1;
                        }
                    }

                    dblCredit = dblNetAmount;
                    //'Insert Accounts Voucher Table

                    if (intRoundOff > 0)
                    {
                        if (dblRoundOff != 0)
                        {
                            strReverseLedger = "As per Details";
                        }
                        else
                        {
                            strReverseLedger = strSalesLedger;
                        }
                    }
                    else
                    {
                        strReverseLedger = strSalesLedger;
                    }

                    if (mdblCurrRate == 0)
                    {
                        if (intRoundOff > 0)
                        {
                            if (dblRoundOff < 0)
                            {
                                dblCredit = dblCredit - ((Math.Abs(dblRoundOff) + Math.Abs(dblAddAmount)) - Math.Abs(dblLessAmount));
                                strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 1, strLedgerName, "Dr", dblNetAmount, mlngVType, strReverseLedger, strBranchId, 0, "", "", "", "");
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();

                                strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 2, strSalesLedger, "Cr", dblNetAmount + Math.Abs(dblRoundOff), mlngVType, strReverseLedger, strBranchId, 2, "", "", "", "", "", strbatch);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 3, "Round Off", "Dr", Math.Abs(dblRoundOff), mlngVType, strReverseLedger, strBranchId, 2, "-", "", "", "", "", strbatch);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();

                            }
                            else if (dblRoundOff > 0)
                            {
                                dblCredit = dblCredit - ((Math.Abs(dblRoundOff) + Math.Abs(dblAddAmount)) - Math.Abs(dblLessAmount));
                                strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 2, strSalesLedger, "Cr", dblNetAmount - Math.Abs(dblRoundOff), mlngVType, strReverseLedger, strBranchId, 2, "", "", "", "", "", strbatch);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();

                                strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 1, strLedgerName, "Dr", dblNetAmount, mlngVType, strReverseLedger, strBranchId, 0, "", "", "", "");
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();

                                strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 3, "Round Off", "Cr", Math.Abs(dblRoundOff), mlngVType, strReverseLedger, strBranchId, 2, "+", "", "", "", "", strbatch);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                            }
                            else
                            {
                                if (mlngIsChqueCash == 0)
                                {
                                    strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 1, strLedgerName, "Dr", dblNetAmount - Math.Abs(dblRoundOff), mlngVType, strReverseLedger, strBranchId, 0, "", "", "", "");
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                }
                                else
                                {
                                    strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 1, strLedgerName, "Dr", dblNetAmount, mlngVType, strReverseLedger, strBranchId, 0, "", "", "", "");
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                }
                                strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 2, strReverseLedger, "Cr", dblCredit, mlngVType, strLedgerName, strBranchId, mlngCashFlow, "", "", "", "", "", strbatch);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();

                            }
                        }
                        else
                        {
                            if (mlngIsChqueCash == 0)
                            {
                                strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 1, strLedgerName, "Dr", dblNetAmount, mlngVType, strReverseLedger, strBranchId, 0, "", "", "", "");
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                            }
                            else
                            {
                                strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 1, strLedgerName, "Dr", dblNetAmount, mlngVType, strReverseLedger, strBranchId, 0, "", "", "", "");
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                            }
                            strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 2, strReverseLedger, "Cr", dblCredit, mlngVType, strLedgerName, strBranchId, mlngCashFlow, "", "", "", "", "", strbatch);
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();

                        }


                    }
                    if (DGAddless != "")
                    {
                        lngPosition = 4;


                        string[] words = DGAddless.Split('~');
                        foreach (string strAddless in words)
                        {
                            string[] ooCost = strAddless.Split('|');
                            if (ooCost[0] != "")
                            {
                                if (Utility.Val(ooCost[2]) > 0)
                                {
                                    dblAddAmount = Utility.Val(ooCost[2]);
                                    dblLessAmount = 0;
                                }
                                else
                                {
                                    dblLessAmount = Utility.Val(ooCost[2]);
                                    dblAddAmount = 0;
                                }
                                strSQL = VoucherSW.gInsertADDLESS(strRefNo, ooCost[0], strDate, dblAddAmount, dblLessAmount, strBranchId);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                if (dblLessAmount > 0)
                                {
                                    strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, lngPosition, ooCost[0], "Dr", dblLessAmount, mlngVType, strSalesLedger, strBranchId, 0, "-", "", "", "");
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                    dblLessAmount = 0;
                                }
                                else
                                {
                                    if (dblAddAmount != 0)
                                    {
                                        strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, lngPosition, ooCost[0], "Cr", dblAddAmount, mlngVType, strLedgerName, strBranchId, 0, "+", "", "", "", "", strbatch);
                                        cmdInsert.CommandText = strSQL;
                                        cmdInsert.ExecuteNonQuery();
                                    }
                                    dblAddAmount = 0;
                                }
                                lngPosition += 1;
                                blnMultiple = true;
                            }
                        }
                    }


                    if (blnMultiple)
                    {
                        strSQL = "UPDATE ACC_VOUCHER SET VOUCHER_REVERSE_LEDGER = '" + "As per Details' ";
                        strSQL = strSQL + "WHERE COMP_REF_NO = '" + mstrRefNo + "'";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    blnMultiple = false;

                    if (strRefType != Utility.gcEND_OF_LIST)
                    {
                        if (DGsalesOrder != "")
                        {
                            string[] words = DGsalesOrder.Split('~');
                            foreach (string strSalesOrder in words)
                            {
                                string[] ooCost = strSalesOrder.Split('|');
                                if (ooCost[0] != "")
                                {
                                    strSQL = "SELECT SUM(BILL_QUANTITY) AS QTY FROM ACC_BILL_TRAN_PROCESS ";
                                    strSQL = strSQL + "WHERE AGST_COMP_REF_NO = '" + ooCost[0] + "'";
                                    cmdInsert.CommandText = strSQL;
                                    rsget = cmdInsert.ExecuteReader();
                                    if (rsget.Read())
                                    {

                                        if (Utility.Val(rsget["QTY"].ToString()) == 0)
                                        {
                                            rsget.Close();
                                            strSQL = "UPDATE ACC_COMPANY_VOUCHER SET COMP_VOUCHER_STATUS = 1 ";
                                            strSQL = strSQL + "WHERE COMP_REF_NO = '" + ooCost[0] + "'";
                                            cmdInsert.CommandText = strSQL;
                                            cmdInsert.ExecuteNonQuery();
                                        }
                                        else
                                        {
                                            rsget.Close();
                                            strSQL = "UPDATE ACC_COMPANY_VOUCHER SET COMP_VOUCHER_STATUS = 0 ";
                                            strSQL = strSQL + "WHERE COMP_REF_NO = '" + ooCost[0] + "'";
                                            cmdInsert.CommandText = strSQL;
                                            cmdInsert.ExecuteNonQuery();
                                        }
                                    }
                                    else
                                    {
                                        rsget.Close();
                                    }

                                    strSQL = "INSERT INTO ACC_VOUCHER_JOIN(VOUCHER_JOIN_PRIMARY_REF,VOUCHER_JOIN_FOREIGN_REF,BRANCH_ID) ";
                                    strSQL = strSQL + "VALUES(";
                                    strSQL = strSQL + "'" + strRefNo + "','" + ooCost[0] + "','" + strBranchId + "'";
                                    strSQL = strSQL + ")";
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                }

                            }
                        }
                    }

                    cmdInsert.Transaction.Commit();

                    gcnMain.Close();
                    return "Updated...";

                }
                catch (Exception ex)
                {
                    return (ex.ToString());
                }
                finally
                {
                    gcnMain.Close();

                }
            }
        }
        public string mSaveSalesInvoice(string strDeComID, string strRefNo, long mlngVType, string strDate, string strDueDate, string strMonthID, string strLedgerName, string strSalesLedger, double dblTotalAmnt,
                                      double dblNetAmount, double dblAddAmount, double dblLessAmount, string strRefType, long lngAgstRef, long mlngIsInvEffinDirSalesInv, long mlngIsChqueCash, string strNarrations,
                                      string strBranchId, string vstrGodownName, long lngIsMultiCurrency, string strSalesRep, string DGSDalesGrid, string DGVector, string DGBillWise, string DGsalesOrder,
                                      string DGAddless, bool blnMultiCurr, double mdblCurrRate, string mstrFCsymbol, bool blngNumberMethod, string strOrderNo, string strOrderDate, string strPreparedby,
                                      string strPreparedDate, double dblProcessAmount, double dblRoundOff)
        {

            string strSQL = "", strDRCR = "", strGroupName, strReverseLedger = "";
            string strBillKey, strItemName, strItemBangla, strAgnstRefno = "", strItemDesc, strAddLess, strBatchNo, strUOm, strPer, strGodownName, strbatch = "",strDilation="N";
            double dblCredit = 0, dblqty = 0, dblRate, dblTotalAmount, dblDiscAmount, dblDebitValue, dblBonusQty, dblCostPrice;
            long lngloop = 1, lngPosition = 1, mlngCashFlow = 2, lngLedgergroup;
            bool blnMultiple = false;
            double dblShort = 0, dblCommPer = 0, dblCreditLimit = 0, dblLedgerClosing = 0, dblPending = 0, dblDilutionValue = 0, dblDilutionQnty=0,dblDilutionRate=0;
            int intRoundOff = 0,intMasteryes=1;
            SqlDataReader dr;
            lngLedgergroup = (long)(Utility.gGetLedgergroup(strDeComID, strLedgerName));

            if (lngLedgergroup <= 101)
            {
                mlngCashFlow = 1;
            }
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }

                try
                {
                    gcnMain.Open();
                    SqlDataReader rsget;
                    dblCreditLimit = Utility.gdblCreditLimit(strDeComID, strLedgerName, strMonthID);

                    if (dblCreditLimit != 0)
                    {
                        string strFDate = Utility.FirstDayOfMonth(Convert.ToDateTime(strDate)).ToString("dd-MM-yyyy");
                        //dblLedgerClosing = Utility.dblLedgerClosingBalance(strComID, strFDate, dtePreparedDate.Text, uctxtMedicalRep.Text, "");
                        dblLedgerClosing = Utility.dblLedgerClosingBalance(strDeComID, Utility.gdteFinancialYearFrom.ToString(), Utility.gdteFinancialYearTo.ToString(), strLedgerName, "");
                        dblPending = Math.Round(dblCreditLimit - Math.Abs(dblLedgerClosing), 2);
                        if (dblPending < dblNetAmount)
                        {
                            string strCls = "";
                            if (dblLedgerClosing < 0)
                            {
                                strCls = dblLedgerClosing * -1 + " Dr";
                            }
                            else
                            {
                                strCls = dblLedgerClosing + " Cr";
                            }
                            return ("You have crossed your Credit Limit" + Environment.NewLine + "Closing Balance :" + strCls + Environment.NewLine
                                                                            + "Credit Limt :" + dblCreditLimit + Environment.NewLine + "Pending : " + dblPending);
                        }

                    }
                    SqlCommand cmdInsert = new SqlCommand();
                    cmdInsert.Connection = gcnMain;
                    strSQL = "SELECT ISNULL(SUM(INV_TRAN.OUTWARD_SALES_AMOUNT),0) AS PRODUCTION_vALUE FROM INV_STOCKITEM ,INV_TRAN WHERE INV_STOCKITEM.STOCKITEM_NAME = INV_TRAN.STOCKITEM_NAME AND INV_TRAN.INV_VOUCHER_TYPE =26 ";
                    strSQL = strSQL + "AND INV_TRAN.GODOWNS_NAME in ('Dilution Section') ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblDilutionValue = Convert.ToDouble(dr["PRODUCTION_vALUE"]);
                    }
                    dr.Close();

                    strSQL = "SELECT ISNULL(SUM(ACC_BILL_TRAN.BILL_QUANTITY),0) AS BILL_QUANTITY ";
                    strSQL = strSQL + "FROM INV_STOCKGROUP INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM ON INV_STOCKGROUP.STOCKGROUP_NAME = INV_STOCKITEM.STOCKGROUP_NAME INNER JOIN ";
                    strSQL = strSQL + "ACC_BILL_TRAN ON INV_STOCKITEM.STOCKITEM_NAME = ACC_BILL_TRAN.STOCKITEM_NAME AND ACC_BILL_TRAN.COMP_VOUCHER_TYPE =16 AND INV_STOCKGROUP.FG_STATUS=1 ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblDilutionQnty = Convert.ToDouble(dr["BILL_QUANTITY"]);
                    }

                    dr.Close();
                   
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                 
                    cmdInsert.Transaction = myTrans;

                   

                    strSQL = VoucherSW.gInsertCompanyVoucherNew(strRefNo, mlngVType, strDate, strMonthID, strDueDate, strLedgerName, dblTotalAmnt,
                                                        dblNetAmount, dblAddAmount, dblLessAmount, lngAgstRef, strNarrations,
                                                        strBranchId, lngIsMultiCurrency, "", strSalesRep, "", "", "", "", "",
                                                        strOrderNo, strOrderDate, strPreparedby, strPreparedDate, "", "", 0, 0, dblProcessAmount, dblRoundOff);

                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();


                    if (DGVector != "")
                    {
                        string[] words = DGVector.Split('~');
                        foreach (string strVector in words)
                        {
                            string[] ooCost = strVector.Split('|');
                            if (ooCost[0] != "")
                            {
                                strSQL = VoucherSW.mInsertVector(strRefNo, ooCost[1].ToString(), ooCost[2].ToString(), strDate, strLedgerName, "Dr", lngPosition, lngPosition, 1, ooCost[0].ToString(), Utility.Val(ooCost[3].ToString()), 0, "", mlngVType);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                strSQL = VoucherSW.mInsertVector(strRefNo, ooCost[1].ToString(), ooCost[2].ToString(), strDate, strLedgerName, "Cr", lngPosition, lngPosition, 2, ooCost[0].ToString(), Utility.Val(ooCost[3].ToString()), 0, "", mlngVType);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                lngPosition += 1;
                            }

                        }
                    }
                    lngPosition = 1;
                    //'If Cash Or Bank Then Should not go in Bill By Bill
                    if (mlngCashFlow > 1)
                    {
                        if (DGBillWise != "")
                        {
                            int intbillpos = 1;
                            string strAgstRefNo = "";
                            string[] words = DGBillWise.Split('~');
                            foreach (string strBill in words)
                            {
                                string[] ooCost = strBill.Split('|');
                                if (ooCost[0] != "")
                                {
                                    strAgstRefNo = strBranchId + ooCost[1].ToString();
                                    strSQL = VoucherSW.gInsertBillWise(strBranchId, strRefNo, ooCost[2].ToString(), mlngVType, strLedgerName, intbillpos, ooCost[0].ToString(),
                                                                        Utility.Val(ooCost[3].ToString()), ooCost[4].ToString(), strAgstRefNo, intbillpos);
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                    intbillpos += 1;
                                }
                            }
                        }
                        else
                        {
                            if (mlngVType == (long)(Utility.VOUCHER_TYPE.vtSALES_INVOICE))
                            {
                                strDRCR = "Dr";
                            }
                            else
                            {
                                strDRCR = "Cr";
                            }

                            strSQL = VoucherSW.gInsertBillWise(strBranchId, strRefNo, strDate, mlngVType, strLedgerName, 0, "New Ref", dblNetAmount, strDRCR, Utility.Mid(strRefNo, 6, strRefNo.Length - 6), 0, strDueDate);
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();
                        }

                    }

                    if (DGSDalesGrid != "")
                    {
                        string[] words = DGSDalesGrid.Split('~');
                        foreach (string strSalesGrid in words)
                        {
                            string[] ooCost = strSalesGrid.Split('|');
                            if (ooCost[0] != "")
                            {
                                //20-09-2020
                                strSQL = "SELECT STOCKGROUP_NAME FROM INV_STOCKGROUP ";
                                strSQL = strSQL + "WHERE FG_STATUS=1 ";
                                strSQL = strSQL + "AND STOCKGROUP_NAME='" + ooCost[0].ToString().Replace("'", "''") + "' ";
                                cmdInsert.CommandText = strSQL;
                                dr = cmdInsert.ExecuteReader();
                                if (dr.Read())
                                {
                                    strDilation = "Y";
                                }
                                else
                                {
                                    strDilation = "N";
                                }
                                dr.Close();
                                strBillKey = strRefNo + lngloop.ToString().PadLeft(4, '0');
                                strGroupName = ooCost[0].ToString();
                                strItemName = ooCost[1].ToString();
                                strItemBangla = "";
                                strItemDesc = ooCost[2].ToString();
                                strGodownName = vstrGodownName;
                                dblqty = Utility.Val(ooCost[3].ToString());
                                dblRate = Utility.Val(ooCost[4].ToString());
                                dblTotalAmount = Utility.Val(ooCost[6].ToString());
                                strUOm = ooCost[5].ToString();
                                strPer = ooCost[5].ToString();
                                dblDiscAmount = Utility.Val(ooCost[7].ToString());
                                dblDebitValue = Utility.Val(ooCost[8].ToString());
                                if (ooCost[9].ToString() != "")
                                {
                                    if (ooCost[9].ToString() != Utility.gcEND_OF_LIST)
                                    {
                                        strBatchNo = ooCost[9].ToString();
                                    }
                                    else
                                    {
                                        strBatchNo = "";
                                    }
                                }
                                else
                                {
                                    strBatchNo = "";
                                }

                                dblBonusQty = Utility.Val(ooCost[10].ToString());
                                strAddLess = ooCost[11].ToString();
                                dblCostPrice = Utility.Val(ooCost[13].ToString());
                                dblShort = Utility.Val(ooCost[14].ToString());
                                intRoundOff = Convert.ToInt32(ooCost[15]);
                                dblCommPer = Convert.ToDouble(ooCost[16]);
                                if (ooCost[17].ToString() != "")
                                {
                                    strAgnstRefno = ooCost[17].ToString();
                                }
                                else
                                {
                                    strAgnstRefno = strRefNo;

                                }
                                //dblAltWhere = 1;
                                if (blnMultiCurr)
                                {
                                }
                                else
                                {
                                    strSQL = VoucherSW.gInsertBillTran(strBillKey, strRefNo, mlngVType, strDate, strItemName, strGodownName, dblqty, dblBonusQty, strUOm, dblRate, dblDebitValue, strAddLess,
                                                                        dblDiscAmount, dblTotalAmount, "Cr", lngloop, strBranchId, Utility.gstrBaseCurrency, strPer, "", strAgnstRefno,
                                                                        strBatchNo, strItemDesc, "", strItemBangla, strGroupName, dblShort, dblCommPer);
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                }
                                strSQL = VoucherSW.gInsertBillTranProcess(strBillKey, strBranchId, lngloop, strRefNo, strAgnstRefno, mlngVType, strDate,
                                                                        strItemName, strGodownName, dblqty, strUOm, strBillKey, 0, 0, strPer);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                if(strDilation =="Y" && strBranchId !="0001")
                                {
                                    if (intMasteryes == 1)
                                    {
                                        if (dblDilutionValue != 0 && dblDilutionQnty != 0)
                                        {
                                            dblDilutionRate = Math.Abs(Math.Round(dblDilutionValue / dblDilutionQnty, 3));
                                        }
                                        else
                                        {
                                            dblDilutionRate = 0;
                                        }
                                        strSQL = "INSERT INTO INV_MASTER(INV_REF_NO,INV_VOUCHER_TYPE,INV_DATE,INV_NARRATIONS,BRANCH_ID) ";
                                        strSQL = strSQL + "values(";
                                        strSQL = strSQL + "'" + strRefNo + "' ";
                                        strSQL = strSQL + "," + mlngVType + " ";
                                        strSQL = strSQL + "," + Utility.cvtSQLDateString(strDate) + " ";
                                        strSQL = strSQL + ",'" + strNarrations.Replace("'", "''") + "' ";
                                        strSQL = strSQL + ",'" + strBranchId + "'";
                                        strSQL = strSQL + ")";
                                        cmdInsert.CommandText = strSQL;
                                        cmdInsert.ExecuteNonQuery();
                                    }
                                    strSQL = VoucherSW.mInsertTranInward(strBillKey, lngPosition, strRefNo, strItemName, 27, strDate, dblqty, dblDilutionRate, strGodownName, (dblqty * dblDilutionRate), "I", strBranchId, "", "", strUOm, "", "", 0, 0);
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                    intMasteryes += 1;
                                }
                            }

                            lngPosition = lngPosition + 1;
                            lngloop += 1;
                        }

                    }

                    dblCredit = dblNetAmount;
                    //'Insert Accounts Voucher Table
                    if (intRoundOff > 0)
                    {
                        if (dblRoundOff != 0)
                        {
                            strReverseLedger = "As per Details";
                        }
                        else
                        {
                            strReverseLedger = strSalesLedger;
                        }
                    }
                    else
                    {
                        strReverseLedger = strSalesLedger;
                    }
                    mdblCurrRate = 0;
                    if (mdblCurrRate == 0)
                    {
                        if (intRoundOff > 0)
                        {
                            if (dblRoundOff < 0)
                            {
                                dblCredit = dblCredit - ((Math.Abs(dblRoundOff) + Math.Abs(dblAddAmount)) - Math.Abs(dblLessAmount));
                                strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 1, strLedgerName, "Dr", dblNetAmount, mlngVType, strReverseLedger, strBranchId, 0, "", "", "", "");
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();

                                strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 2, strSalesLedger, "Cr", dblNetAmount + Math.Abs(dblRoundOff), mlngVType, strReverseLedger, strBranchId, 2, "", "", "", "", "", strbatch);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 3, "Round Off", "Dr", Math.Abs(dblRoundOff), mlngVType, strReverseLedger, strBranchId, 2, "-", "", "", "", "", strbatch);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();

                            }
                            else if (dblRoundOff > 0)
                            {
                                dblCredit = dblCredit - ((Math.Abs(dblRoundOff) + Math.Abs(dblAddAmount)) - Math.Abs(dblLessAmount));
                                strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 2, strSalesLedger, "Cr", dblNetAmount - Math.Abs(dblRoundOff), mlngVType, strReverseLedger, strBranchId, 2, "", "", "", "", "", strbatch);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();

                                strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 1, strLedgerName, "Dr", dblNetAmount, mlngVType, strReverseLedger, strBranchId, 0, "", "", "", "");
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();

                                strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 3, "Round Off", "Cr", Math.Abs(dblRoundOff), mlngVType, strReverseLedger, strBranchId, 2, "+", "", "", "", "", strbatch);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                            }


                            else
                            {
                                if (mlngIsChqueCash == 0)
                                {
                                    strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 1, strLedgerName, "Dr", dblNetAmount - Math.Abs(dblRoundOff), mlngVType, strReverseLedger, strBranchId, 0, "", "", "", "");
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                }
                                else
                                {
                                    strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 1, strLedgerName, "Dr", dblNetAmount, mlngVType, strReverseLedger, strBranchId, 0, "", "", "", "");
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                }
                                strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 2, strReverseLedger, "Cr", dblCredit, mlngVType, strLedgerName, strBranchId, mlngCashFlow, "", "", "", "", "", strbatch);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();

                            }
                        }
                        else
                        {
                            if (mlngIsChqueCash == 0)
                            {
                                strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 1, strLedgerName, "Dr", dblNetAmount, mlngVType, strReverseLedger, strBranchId, 0, "", "", "", "");
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                            }
                            else
                            {
                                strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 1, strLedgerName, "Dr", dblNetAmount, mlngVType, strReverseLedger, strBranchId, 0, "", "", "", "");
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                            }
                            strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, 2, strReverseLedger, "Cr", dblCredit, mlngVType, strLedgerName, strBranchId, mlngCashFlow, "", "", "", "", "", strbatch);
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();

                        }


                    }

                    if (DGAddless != "")
                    {
                        lngPosition = 4;
                        string[] words = DGAddless.Split('~');
                        foreach (string strAddless in words)
                        {
                            string[] ooCost = strAddless.Split('|');
                            if (ooCost[0] != "")
                            {
                                if (Utility.Val(ooCost[2]) > 0)
                                {
                                    dblAddAmount = Utility.Val(ooCost[2]);
                                    dblLessAmount = 0;
                                }
                                else
                                {
                                    dblLessAmount = Utility.Val(ooCost[2]);
                                    dblAddAmount = 0;
                                }
                                strSQL = VoucherSW.gInsertADDLESS(strRefNo, ooCost[0], strDate, dblAddAmount, dblLessAmount, strBranchId);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                if (dblLessAmount > 0)
                                {
                                    strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, lngPosition, ooCost[0], "Dr", dblLessAmount, mlngVType, strSalesLedger, strBranchId, 0, "-", "", "", "");
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                    dblLessAmount = 0;
                                }
                                else
                                {
                                    if (dblAddAmount != 0)
                                    {
                                        strSQL = VoucherSW.gInsertSalesVoucher(strRefNo, strDate, lngPosition, ooCost[0], "Cr", dblAddAmount, mlngVType, strLedgerName, strBranchId, 0, "+", "", "", "", "", strbatch);
                                        cmdInsert.CommandText = strSQL;
                                        cmdInsert.ExecuteNonQuery();
                                    }
                                    dblAddAmount = 0;
                                }
                                lngPosition += 1;
                                blnMultiple = true;
                            }
                        }
                    }


                    if (blnMultiple)
                    {
                        strSQL = "UPDATE ACC_VOUCHER SET VOUCHER_REVERSE_LEDGER = '" + "As per Details' ";
                        strSQL = strSQL + "WHERE COMP_REF_NO = '" + strRefNo + "'";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    blnMultiple = false;





                    if (strRefType != Utility.gcEND_OF_LIST)
                    {
                        if (DGsalesOrder != "")
                        {
                            string[] words = DGsalesOrder.Split('~');
                            foreach (string strSalesOrder in words)
                            {
                                string[] ooCost = strSalesOrder.Split('|');
                                if (ooCost[0] != "")
                                {
                                    strSQL = "SELECT SUM(BILL_QUANTITY) AS QTY FROM ACC_BILL_TRAN_PROCESS ";
                                    strSQL = strSQL + "WHERE AGST_COMP_REF_NO = '" + ooCost[0] + "'";
                                    cmdInsert.CommandText = strSQL;
                                    rsget = cmdInsert.ExecuteReader();
                                    if (rsget.Read())
                                    {

                                        if (Utility.Val(rsget["QTY"].ToString()) == 0)
                                        {
                                            rsget.Close();
                                            strSQL = "UPDATE ACC_COMPANY_VOUCHER SET COMP_VOUCHER_STATUS = 1 ";
                                            strSQL = strSQL + "WHERE COMP_REF_NO = '" + ooCost[0] + "'";
                                            cmdInsert.CommandText = strSQL;
                                            cmdInsert.ExecuteNonQuery();
                                        }
                                        else
                                        {
                                            rsget.Close();
                                            strSQL = "UPDATE ACC_COMPANY_VOUCHER SET COMP_VOUCHER_STATUS = 0 ";
                                            strSQL = strSQL + "WHERE COMP_REF_NO = '" + ooCost[0] + "'";
                                            cmdInsert.CommandText = strSQL;
                                            cmdInsert.ExecuteNonQuery();
                                        }
                                    }
                                    else
                                    {
                                        rsget.Close();
                                    }

                                    strSQL = "INSERT INTO ACC_VOUCHER_JOIN(VOUCHER_JOIN_PRIMARY_REF,VOUCHER_JOIN_FOREIGN_REF,BRANCH_ID) ";
                                    strSQL = strSQL + "VALUES(";
                                    strSQL = strSQL + "'" + strRefNo + "','" + ooCost[0] + "','" + strBranchId + "'";
                                    strSQL = strSQL + ")";
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                }

                            }
                        }
                    }

                    if (blngNumberMethod == true)
                    {
                        strSQL = VoucherSW.gIncreaseVoucher((int)mlngVType);
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    cmdInsert.Transaction.Commit();

                    gcnMain.Close();
                    return "Inserted...";

                }
                catch (Exception ex)
                {
                    return (ex.ToString());
                }
                finally
                {
                    gcnMain.Close();

                }
            }
        }
        #endregion
        #region "Sales Challan"
        public string mSaveSalesChallan(string strDeComID, string strRefNo, long mlngVType, string strDate, string strDueDate, string strMonthID, string strLedgerName,
                                     double dblNetAmount, string strRefType, long lngAgstRef, long mlngIsInvEffinDirSalesInv, string strNarrations,
                                     string strBranchId, string vstrGodownName, string DGSalesGrid, string DGsalesOrder, bool mblnNumberMethod,
                                     string strCustomer, string strDesignation, string strTransport, double dblcrtQty, double dblBox, string strTrNo)
        {

            string strDRCR = "", strSQL = "";
            string strBillKey, strItemName, strItemBangla, strAddLess, strAgnstKey = "", strAgnsrRefNo = "", strUOm, strPer, strGodownName, strbatch = "";
            double dblqty = 0, dblRate, dblTotalAmount, dblBonusQty, dblAltWhere, dblTotalCost = 1, dblCostPrice;
            long lngloop = 1;

            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }

                try
                {
                    gcnMain.Open();

                    //if (lngAgstRef == (long)Utility.VOUCHER_TYPE.vtSALES_CHALLAN)
                    //{
                    strDRCR = "Cr";
                    //}
                    //else if (lngAgstRef == (long)Utility.VOUCHER_TYPE.vtPURCHASE_RECEIVE)
                    //{
                    //    strDRCR = "Dr";
                    //}
                    SqlDataReader rsget;
                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;


                    strSQL = VoucherSW.gInsertCompanyVoucherNew(strRefNo, mlngVType, strDate, strMonthID, strDueDate, strLedgerName, dblNetAmount, dblNetAmount, 0, 0, lngAgstRef, strNarrations,
                                                        strBranchId, 0, "", strCustomer, "", "", "", "", strTrNo, "", "", "", "", strDesignation, strTransport, dblcrtQty, dblBox);

                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = VoucherSW.gInteractInvInsertMaster(strLedgerName, strRefNo, mlngVType, strDate, strBranchId, strNarrations);
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();


                    if (DGSalesGrid != "")
                    {

                        string[] words = DGSalesGrid.Split('~');
                        foreach (string strSalesGrid in words)
                        {
                            string[] ooCost = strSalesGrid.Split('|');
                            if (ooCost[0] != "")
                            {
                                strBillKey = strRefNo + lngloop.ToString().PadLeft(4, '0');
                                strItemName = ooCost[0].ToString();
                                dblCostPrice = Utility.Val(ooCost[6]);
                                //strItemBangla = Utility.gGetItemNameBangla (ooCost[1].ToString());
                                strItemBangla = "";
                                //trItemDesc = ooCost[1].ToString();
                                strGodownName = vstrGodownName;
                                dblqty = Utility.Val(ooCost[1].ToString());
                                dblRate = Utility.Val(ooCost[2].ToString());
                                dblTotalAmount = Utility.Val(ooCost[4].ToString());
                                strUOm = ooCost[3].ToString();
                                strPer = ooCost[3].ToString();
                                if (ooCost[5].ToString() != "")
                                {
                                    strbatch = ooCost[5].ToString();
                                }
                                else
                                {
                                    strbatch = "";
                                }
                                strAgnstKey = ooCost[7].ToString();
                                strAgnsrRefNo = ooCost[8].ToString();

                                dblBonusQty = Utility.Val(ooCost[9].ToString());
                                strAddLess = "";
                                dblAltWhere = 1;

                                strSQL = VoucherSW.gInsertBillTran(strBillKey, strRefNo, mlngVType, strDate, strItemName, strGodownName, dblqty, dblBonusQty, strUOm, dblRate, dblTotalAmount, strAddLess,
                                                                    0, dblTotalAmount, strDRCR, lngloop, strBranchId, Utility.gstrBaseCurrency, strPer, "", "", strbatch, "", "", strItemBangla, "", 0, 0);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();

                                strSQL = VoucherSW.gInsertBillTranProcess(strBillKey, strBranchId, lngloop, strRefNo, strRefNo, mlngVType, strDate,
                                                                        strItemName, strGodownName, dblqty, strUOm, strAgnstKey, 0, 0, strPer);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();

                                if (lngAgstRef == (long)Utility.VOUCHER_TYPE.vtSALES_INVOICE)
                                {
                                    strSQL = VoucherSW.gInsertBillTranProcess(strBillKey, strBranchId, lngloop, strRefNo, strAgnsrRefNo, lngAgstRef, strDate,
                                                                            strItemName, strGodownName, dblqty * -1, strUOm, strAgnsrRefNo, 0, 0, strPer);
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                    strSQL = VoucherSW.gInventoryInsertTranSalesChallan(strRefNo, strBillKey, lngloop, Math.Round(dblRate, 2), -1 * dblTotalCost, lngAgstRef, strItemName, strGodownName,
                                                                                "O", dblqty * -1, dblBonusQty * -1, dblCostPrice, mlngVType, strDate, strBranchId, strbatch, 0, strPer, strUOm);
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                }

                                //if (lngAgstRef == (long)Utility.VOUCHER_TYPE.vtSALES_INVOICE)
                                //{
                                //    strSQL = VoucherSW.gInventoryInsertTranSalesChallan(strRefNo, strBillKey, lngloop, Math.Round(dblRate, 2), -1 * dblTotalCost, lngAgstRef, strItemName, strGodownName,
                                //                                                "O", dblqty * -1, dblBonusQty * -1, dblCostPrice, mlngVType, strDate, strBranchId, strbatch, 0, strPer, strUOm);
                                //    cmdInsert.CommandText = strSQL;
                                //    cmdInsert.ExecuteNonQuery();
                                //}
                                else if (lngAgstRef == (long)Utility.VOUCHER_TYPE.vt_SAMPLE_CLASS)
                                {
                                    strSQL = VoucherSW.gInventoryInsertTranSalesChallanClass(strRefNo, strBillKey, lngloop, Math.Round(dblRate, 2), -1 * dblTotalCost, lngAgstRef, strItemName, strGodownName,
                                                                                "O", dblqty * -1, dblBonusQty * -1, dblCostPrice, mlngVType, strDate, strBranchId, strbatch, 0, strPer, strUOm);
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                }
                                else
                                {
                                    strSQL = VoucherSW.gInventoryInsertTranSalesChallan(strRefNo, strBillKey, lngloop, Math.Round(dblRate / dblAltWhere, 2), -1 * dblTotalCost, lngAgstRef, strItemName,
                                                                                strGodownName, "O", dblqty * -1, dblBonusQty * -1, dblCostPrice, mlngVType, strDate, strBranchId, strbatch, 0, strPer, strUOm);
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                }
                                if (lngAgstRef == (long)Utility.VOUCHER_TYPE.vt_SAMPLE_CLASS)
                                {
                                    strSQL = "UPDATE INV_TRAN SET ";
                                    strSQL = strSQL + "OUTWARD_SALES_AMOUNT= 0 ";
                                    strSQL = strSQL + ",INV_TRAN_RATE= 0 ";
                                    //strSQL = strSQL + ",OUTWARD_COST_AMOUNT= 0 ";
                                    // strSQL = strSQL + ",INV_TRAN_AMOUNT= 0 ";
                                    strSQL = strSQL + " WHERE INV_TRAN_KEY='" + strBillKey + "' ";
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                }
                                else
                                {
                                    strSQL = "UPDATE ACC_COMPANY_VOUCHER SET COMP_VOUCHER_STATUS = 1 ";
                                    strSQL = strSQL + "WHERE COMP_REF_NO = '" + strRefNo + "'";
                                    cmdInsert.CommandText = strSQL;
                                    cmdInsert.ExecuteNonQuery();
                                }

                                lngloop += 1;
                            }
                        }
                        if (strRefType != "Sample Class")
                        {
                            if (strRefType != Utility.gcEND_OF_LIST)
                            {
                                if (DGsalesOrder != "")
                                {
                                    string[] words1 = DGsalesOrder.Split('~');
                                    foreach (string strSalesOrder in words1)
                                    {
                                        string[] ooCost1 = strSalesOrder.Split('|');
                                        if (ooCost1[0] != "")
                                        {
                                            strSQL = "SELECT SUM(BILL_QUANTITY) AS QTY FROM ACC_BILL_TRAN_PROCESS ";
                                            strSQL = strSQL + "WHERE AGST_COMP_REF_NO = '" + ooCost1[0] + "'";
                                            cmdInsert.CommandText = strSQL;
                                            rsget = cmdInsert.ExecuteReader();
                                            if (rsget.Read())
                                            {

                                                if (Utility.Val(rsget["QTY"].ToString()) == 0)
                                                {
                                                    rsget.Close();
                                                    strSQL = "UPDATE ACC_COMPANY_VOUCHER SET COMP_VOUCHER_STATUS = 1 ";
                                                    strSQL = strSQL + "WHERE COMP_REF_NO = '" + ooCost1[0] + "'";
                                                    cmdInsert.CommandText = strSQL;
                                                    cmdInsert.ExecuteNonQuery();
                                                }
                                                else
                                                {
                                                    rsget.Close();
                                                    strSQL = "UPDATE ACC_COMPANY_VOUCHER SET COMP_VOUCHER_STATUS = 1 ";
                                                    strSQL = strSQL + "WHERE COMP_REF_NO = '" + ooCost1[0] + "'";
                                                    cmdInsert.CommandText = strSQL;
                                                    cmdInsert.ExecuteNonQuery();
                                                }
                                            }
                                            else
                                            {
                                                rsget.Close();
                                            }

                                            strSQL = "INSERT INTO ACC_VOUCHER_JOIN(VOUCHER_JOIN_PRIMARY_REF,VOUCHER_JOIN_FOREIGN_REF,BRANCH_ID) ";
                                            strSQL = strSQL + "VALUES(";
                                            strSQL = strSQL + "'" + strRefNo + "','" + ooCost1[0] + "','" + strBranchId + "'";
                                            strSQL = strSQL + ")";
                                            cmdInsert.CommandText = strSQL;
                                            cmdInsert.ExecuteNonQuery();
                                        }
                                    }

                                }
                            }
                        }
                        else
                        {
                            if (DGsalesOrder != "")
                            {
                                string[] words1 = DGsalesOrder.Split('~');
                                foreach (string strSalesOrder in words1)
                                {
                                    string[] ooCost1 = strSalesOrder.Split('|');
                                    if (ooCost1[0] != "")
                                    {
                                        strSQL = "SELECT SUM(BILL_QUANTITY) AS QTY FROM ACC_BILL_TRAN_PROCESS ";
                                        strSQL = strSQL + "WHERE AGST_COMP_REF_NO = '" + ooCost1[0] + "'";
                                        cmdInsert.CommandText = strSQL;
                                        rsget = cmdInsert.ExecuteReader();
                                        if (rsget.Read())
                                        {

                                            if (Utility.Val(rsget["QTY"].ToString()) == 0)
                                            {
                                                rsget.Close();
                                                strSQL = "UPDATE ACC_COMPANY_VOUCHER SET COMP_VOUCHER_STATUS = 1 ";
                                                strSQL = strSQL + "WHERE COMP_REF_NO = '" + ooCost1[0] + "'";
                                                cmdInsert.CommandText = strSQL;
                                                cmdInsert.ExecuteNonQuery();
                                            }
                                            else
                                            {
                                                rsget.Close();
                                                strSQL = "UPDATE ACC_COMPANY_VOUCHER SET COMP_VOUCHER_STATUS = 1 ";
                                                strSQL = strSQL + "WHERE COMP_REF_NO = '" + ooCost1[0] + "'";
                                                cmdInsert.CommandText = strSQL;
                                                cmdInsert.ExecuteNonQuery();
                                            }
                                        }
                                        else
                                        {
                                            rsget.Close();
                                        }

                                        strSQL = "INSERT INTO ACC_VOUCHER_JOIN_CLASS(VOUCHER_JOIN_PRIMARY_REF,VOUCHER_JOIN_FOREIGN_REF,BRANCH_ID,CLASS_NAME) ";
                                        strSQL = strSQL + "VALUES(";
                                        strSQL = strSQL + "'" + strRefNo + "','" + strRefNo + "','" + strBranchId + "','" + "SC" + strBranchId + ooCost1[0] + "' ";
                                        strSQL = strSQL + ")";
                                        cmdInsert.CommandText = strSQL;
                                        cmdInsert.ExecuteNonQuery();

                                        strSQL = "UPDATE ACC_BILL_TRAN SET AGNST_COMP_REF_NO = '" + ooCost1[0] + "'";
                                        strSQL = strSQL + "WHERE COMP_REF_NO = '" + strRefNo + "'";
                                        cmdInsert.CommandText = strSQL;
                                        cmdInsert.ExecuteNonQuery();
                                        //strSQL = "UPDATE ACC_COMPANY_VOUCHER SET COMP_VOUCHER_NARRATION = 'Sample Class'";
                                        //strSQL = strSQL + "WHERE COMP_REF_NO = '" + strRefNo + "'";
                                        //cmdInsert.CommandText = strSQL;
                                        //cmdInsert.ExecuteNonQuery();
                                    }
                                }
                            }
                        }
                    }



                    if (mblnNumberMethod == true)
                    {
                        strSQL = VoucherSW.gIncreaseVoucher((int)mlngVType);
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    cmdInsert.Transaction.Commit();
                    gcnMain.Close();
                    //string g = mUpdateCosting(strDeComID, DGSalesGrid, strDate);
                    return "Inserted...";



                }
                catch (Exception ex)
                {
                    return (ex.ToString());
                }
                finally
                {
                    gcnMain.Close();

                }
            }
        }
        public string mUpdateSalesChallan(string strDeComID, string mstRefNo, string strRefNo, long mlngVType, string strDate, string strDueDate, string strMonthID, string strLedgerName,
                                     double dblNetAmount, string strRefType, long lngAgstRef, long mlngIsInvEffinDirSalesInv, string strNarrations,
                                     string strBranchId, string vstrGodownName, string DGSalesGrid, string DGsalesOrder,
                                        string strCustomer, string strDesignation, string strTransport, double dblcrtQty, double dblBox, string strTrNo)
        {


            string strDRCR = "", strSQL = "";

            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }

                try
                {
                    gcnMain.Open();

                    if (lngAgstRef == (long)Utility.VOUCHER_TYPE.vtSALES_CHALLAN)
                    {
                        strDRCR = "Cr";
                    }
                    else if (lngAgstRef == (long)Utility.VOUCHER_TYPE.vtPURCHASE_RECEIVE)
                    {
                        strDRCR = "Dr";
                    }
                    else
                    {
                        strDRCR = "";
                    }


                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    strSQL = "UPDATE ACC_COMPANY_VOUCHER SET ";
                    strSQL = strSQL + "LEDGER_NAME = '" + strLedgerName + "',";
                    strSQL = strSQL + "BRANCH_ID = '" + strBranchId + "',";
                    strSQL = strSQL + "COMP_VOUCHER_DATE = " + Utility.cvtSQLDateString(strDate) + ",";
                    strSQL = strSQL + "COMP_VOUCHER_MONTH_ID = '" + strMonthID + "',";
                    strSQL = strSQL + "COMP_VOUCHER_NARRATION = '" + strNarrations + "',";
                    strSQL = strSQL + "COMP_VOUCHER_DUE_DATE = " + Utility.cvtSQLDateString(strDueDate) + ",";
                    strSQL = strSQL + "COMP_VOUCHER_NET_AMOUNT = " + dblNetAmount + ",";
                    strSQL = strSQL + "COMP_VOUCHER_AMOUNT = " + dblNetAmount + " ";
                    if (strDesignation != "")
                    {
                        strSQL = strSQL + ",COMP_VOUCHER_DESTINATION = '" + strDesignation + "'";
                    }
                    else
                    {
                        strSQL = strSQL + ",COMP_VOUCHER_DESTINATION = Null";
                    }

                    if (strTransport != "")
                    {
                        strSQL = strSQL + ",TRANSPORT_NAME = '" + strTransport + "'";
                    }
                    else
                    {
                        strSQL = strSQL + ",TRANSPORT_NAME = Null";
                    }
                    strSQL = strSQL + ",CRT_QTY = " + dblcrtQty + "";
                    strSQL = strSQL + ",BOX_QTY = " + dblBox + "";
                    strSQL = strSQL + ",COMP_OTHERS = '" + strTrNo + "' ";
                    //strSQL = strSQL + ",COMP_REF_NO = '" + mstRefNo + "' ";
                    strSQL = strSQL + "WHERE COMP_REF_NO = '" + mstRefNo + "' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "UPDATE ACC_COMPANY_VOUCHER SET COMP_VOUCHER_STATUS = 1 ";
                    strSQL = strSQL + "WHERE COMP_REF_NO = '" + mstRefNo + "'";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    #region "Comment"
                    //strSQL = Voucher.gInteractInvInsertMaster(strLedgerName, mstRefNo, mlngVType, strDate, strBranchId, strNarrations);
                    //cmdInsert.CommandText = strSQL;
                    //cmdInsert.ExecuteNonQuery();


                    //if (DGSalesGrid != "")
                    //{

                    //    string[] words = DGSalesGrid.Split('~');
                    //    foreach (string strSalesGrid in words)
                    //    {
                    //        string[] ooCost = strSalesGrid.Split('|');
                    //        if (ooCost[0] != "")
                    //        {
                    //            strBillKey = strRefNo + lngloop.ToString().PadLeft(4, '0');
                    //            strItemName = ooCost[0].ToString();
                    //            //dblCostPrice = Utility.gdblGetCostPrice(strItemName, strDate);
                    //            dblCostPrice = Utility.Val(ooCost[6].ToString());
                    //            //strItemBangla = Utility.gGetItemNameBangla (ooCost[1].ToString());
                    //            strItemBangla = "";
                    //            //trItemDesc = ooCost[1].ToString();
                    //            strGodownName = vstrGodownName;
                    //            dblqty = Utility.Val(ooCost[1].ToString());
                    //            dblRate = Utility.Val(ooCost[2].ToString());
                    //            dblTotalAmount = Utility.Val(ooCost[4].ToString());
                    //            strUOm = ooCost[3].ToString();
                    //            strPer = ooCost[3].ToString();
                    //            if (ooCost[5].ToString() != "")
                    //            {
                    //                strbatch = ooCost[5].ToString();
                    //            }
                    //            else
                    //            {
                    //                strbatch = "";
                    //            }
                    //            strAgnstKey = ooCost[7].ToString();
                    //            strAgnsrRefNo = ooCost[8].ToString();

                    //            dblBonusQty = 0;
                    //            strAddLess = "";
                    //            dblAltWhere = 1;
                    //            //If InStr(1, .TextMatrix(lngloop, 3), strPer) = 0 Then
                    //            //    dblAltWhere = gdblDenomation(Replace$(.TextMatrix(lngloop, 1), "'", "''"))
                    //            //End If

                    //            strSQL = Voucher.gInsertBillTran(strBillKey, mstRefNo, mlngVType, strDate, strItemName, strGodownName, dblqty, dblBonusQty, strUOm, dblRate, dblTotalAmount, strAddLess,
                    //                                                0, dblTotalAmount, strDRCR, lngloop, strBranchId, Utility.gstrBaseCurrency, strPer, "", "", strbatch, "", "", strItemBangla);
                    //            cmdInsert.CommandText = strSQL;
                    //            cmdInsert.ExecuteNonQuery();

                    //            strSQL = Voucher.gInsertBillTranProcess(strRefNo + lngloop.ToString().PadLeft(4, '0'), strBranchId, lngloop, strRefNo, strRefNo, mlngVType, strDate,
                    //                                                 strItemName, strGodownName, dblqty, strUOm, (strRefNo + lngloop.ToString().PadLeft(4, '0')), 0, 0, strPer);
                    //            cmdInsert.CommandText = strSQL;
                    //            cmdInsert.ExecuteNonQuery();

                    //            if (lngAgstRef == (long)Utility.VOUCHER_TYPE.vtSALES_INVOICE)
                    //            {
                    //                strSQL = Voucher.gInsertBillTranProcess(strRefNo + lngloop.ToString().PadLeft(4, '0'), strBranchId, lngloop, strRefNo, strAgnsrRefNo, lngAgstRef, strDate,
                    //                                                        strItemName, strGodownName, dblqty * -1, strUOm, strAgnstKey, 0, 0, strPer);
                    //                cmdInsert.CommandText = strSQL;
                    //                cmdInsert.ExecuteNonQuery();
                    //            }

                    //            //if (lngAgstRef == (long)Utility.VOUCHER_TYPE.vtSALES_CHALLAN)
                    //            //{
                    //            if (lngAgstRef == (long)Utility.VOUCHER_TYPE.vtSALES_INVOICE)
                    //            {
                    //                strSQL = Voucher.gInventoryInsertTranSales(mstRefNo, strRefNo + lngloop.ToString().PadLeft(4, '0'), lngloop, Math.Round(dblRate, 2), -1 * dblTotalCost, lngAgstRef, strItemName, strGodownName,
                    //                                                            "O", dblqty * -1, dblBonusQty * -1, dblCostPrice, mlngVType, strDate, strBranchId, strbatch, 0, strPer, strUOm, 0);
                    //                cmdInsert.CommandText = strSQL;
                    //                cmdInsert.ExecuteNonQuery();
                    //            }
                    //            else
                    //            {
                    //                strSQL = Voucher.gInventoryInsertTranSales(mstRefNo, strRefNo + lngloop.ToString().PadLeft(4, '0'), lngloop, Math.Round(dblRate / dblAltWhere, 2), -1 * dblTotalCost, lngAgstRef, strItemName,
                    //                                                            strGodownName, "O", dblqty * -1, dblBonusQty * -1, dblCostPrice, mlngVType, strDate, strBranchId, strbatch, 0, strPer, strUOm, 0);
                    //                cmdInsert.CommandText = strSQL;
                    //                cmdInsert.ExecuteNonQuery();
                    //            }
                    //}
                    //else if (lngAgstRef == (long)Utility.VOUCHER_TYPE.vtPURCHASE_RECEIVE)
                    //{
                    //    strSQL = Voucher.gInventoryInsertTranSales(strRefNo, strRefNo + lngloop.ToString().PadLeft(4, '0'), lngloop, Math.Round(dblRate, 2), dblTotalCost, lngAgstRef, strItemName, strGodownName,
                    //                                                    "I", dblqty, dblBonusQty, dblCostPrice, mlngVType, strDate, strBranchId, strbatch, 0, strPer, strUOm, 0);
                    //    cmdInsert.CommandText = strSQL;
                    //    cmdInsert.ExecuteNonQuery();
                    //    strSQL = Voucher.gInventoryInsertTranSales(strRefNo, strRefNo + lngloop.ToString().PadLeft(4, '0'), lngloop, Math.Round(dblRate / dblAltWhere, 2), dblTotalCost, lngAgstRef, strItemName,
                    //                                                   strGodownName, "I", dblqty, dblBonusQty, dblCostPrice, mlngVType, strDate, strBranchId, strbatch, 0, strPer, strUOm, 0);
                    //    cmdInsert.CommandText = strSQL;
                    //    cmdInsert.ExecuteNonQuery();
                    //}
                    //        lngloop += 1;
                    //    }
                    //}

                    //if (strRefType != "Sample Class")
                    //{
                    //if (strRefType != Utility.gcEND_OF_LIST)
                    //{
                    //    if (DGsalesOrder != "")
                    //    {
                    //        string[] words1 = DGsalesOrder.Split('~');
                    //        foreach (string strSalesOrder in words1)
                    //        {
                    //            string[] ooCost1 = strSalesOrder.Split('|');
                    //            if (ooCost1[0] != "")
                    //            {
                    //                strSQL = "SELECT SUM(BILL_QUANTITY) AS QTY FROM ACC_BILL_TRAN_PROCESS ";
                    //                strSQL = strSQL + "WHERE AGST_COMP_REF_NO = '" + ooCost1[0] + "'";
                    //                cmdInsert.CommandText = strSQL;
                    //                rsget = cmdInsert.ExecuteReader();
                    //                if (rsget.Read())
                    //                {

                    //                    if (Utility.Val(rsget["QTY"].ToString()) == 0)
                    //                    {
                    //                        rsget.Close();
                    //                        strSQL = "UPDATE ACC_COMPANY_VOUCHER SET COMP_VOUCHER_STATUS = 1 ";
                    //                        strSQL = strSQL + "WHERE COMP_REF_NO = '" + ooCost1[1] + "'";
                    //                        cmdInsert.CommandText = strSQL;
                    //                        cmdInsert.ExecuteNonQuery();
                    //                    }
                    //                    else
                    //                    {
                    //                        rsget.Close();
                    //                        strSQL = "UPDATE ACC_COMPANY_VOUCHER SET COMP_VOUCHER_STATUS = 0 ";
                    //                        strSQL = strSQL + "WHERE COMP_REF_NO = '" + ooCost1[1] + "'";
                    //                        cmdInsert.CommandText = strSQL;
                    //                        cmdInsert.ExecuteNonQuery();
                    //                    }
                    //                }
                    //                else
                    //                {
                    //                    rsget.Close();
                    //                }

                    //                strSQL = "INSERT INTO ACC_VOUCHER_JOIN(VOUCHER_JOIN_PRIMARY_REF,VOUCHER_JOIN_FOREIGN_REF,BRANCH_ID) ";
                    //                strSQL = strSQL + "VALUES(";
                    //                strSQL = strSQL + "'" + strRefNo + "','" + ooCost1[0] + "','" + strBranchId + "'";
                    //                strSQL = strSQL + ")";
                    //                cmdInsert.CommandText = strSQL;
                    //                cmdInsert.ExecuteNonQuery();
                    //            }
                    //        }

                    //    }
                    //}
                    //}

                    //}
                    //}
                    #endregion
                    cmdInsert.Transaction.Commit();
                    //}


                    gcnMain.Close();
                    return "Updated...";
                }
                catch (Exception ex)
                {
                    return (ex.ToString());
                }
                finally
                {
                    gcnMain.Close();

                }
            }
        }

        #endregion
        #region "Stock Transfer"
        public string mSaveStockTransferIN(string strDeComID, string strRefNo, long mlngVType, string strDate,
                                 double dblNetAmount, string strNarrations, string strToBranchID,
                                 string strToBranchName, string DGSalesGrid, bool blngNumberMethod,
                                 string vstrProcess, string strSection, int updateType, int intMode)
        {


            string strSQL, strBillKey, strItemName = "", strUOm, strPer, strGodownName;
            double dblqty = 0, dblRate, dblTotalAmount;
            long lngloop = 1, lngCost = 0;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }

                try
                {
                    gcnMain.Open();

                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    //if (vstrProcess == Utility.gcEND_OF_LIST)
                    //{
                    //    vstrProcess = "";
                    //}

                    if (intMode == 1)
                    {
                        strSQL = VoucherSW.gInsertmasterNew(strRefNo, strToBranchID, mlngVType, strDate, dblNetAmount,
                                                        strNarrations, "", lngCost, vstrProcess, "0", 1, strSection);
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();

                        strSQL = "UPDATE INV_MASTER SET INV_TRAN_STATUS=2 WHERE INV_REF_NO ='" + strSection + "' ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    else
                    {
                        strSQL = "DELETE FROM INV_TRAN WHERE INV_REF_NO='" + strRefNo + "' ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();

                        strSQL = "UPDATE INV_MASTER SET INV_NARRATIONS ='" + strNarrations.Replace("'", "''") + "' ";
                        strSQL = strSQL + " WHERE INV_REF_NO ='" + strRefNo + "' ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }

                    if (DGSalesGrid != "")
                    {
                        string[] words = DGSalesGrid.Split('~');
                        foreach (string strSalesGrid in words)
                        {
                            string[] ooCost = strSalesGrid.Split('|');
                            if (ooCost[0] != "")
                            {


                                strBillKey = strRefNo + lngloop.ToString().PadLeft(4, '0');
                                strItemName = ooCost[0].ToString().Replace("'", "''");
                                dblqty = Utility.Val(ooCost[1].ToString());
                                strUOm = ooCost[2].ToString();
                                strPer = ooCost[2].ToString();
                                strGodownName = strToBranchName;

                                dblRate = Utility.Val(ooCost[3].ToString());
                                dblTotalAmount = Utility.Val(ooCost[4].ToString());

                                strSQL = VoucherSW.mInsertTranInward(strBillKey, lngloop, strRefNo, strItemName, mlngVType,
                                                                     strDate, dblqty, dblRate, strGodownName, dblTotalAmount, "I",
                                                                     strToBranchID, "", vstrProcess, strUOm, strPer, "");

                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();


                                lngloop += 1;

                            }

                        }
                    }
                    if (blngNumberMethod == true)
                    {
                        if (intMode == 1)
                        {
                            strSQL = VoucherSW.gIncreaseVoucher((int)updateType);
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();
                        }
                    }
                    cmdInsert.Transaction.Commit();

                    gcnMain.Close();
                    return "1";

                }
                catch (Exception ex)
                {
                    return (ex.ToString());
                }
                finally
                {
                    gcnMain.Close();

                }
            }
        }
        public string mSaveStockTransferOut(string strDeComID, string strRefNo, long mlngVType, string strDate,
                                        double dblNetAmount, string strNarrations, string strBranchID, string strToBranchID,
                                        string strFromBranchName, string strToBranchName, string DGSalesGrid, bool blngNumberMethod, string vstrProcess)
        {


            string strSQL, strBillKey, strItemName = "", strUOm, strPer, strGodownName, strSection;
            double dblqty = 0, dblRate, dblTotalAmount;
            long lngloop = 1, lngCost = 0;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }

                try
                {
                    gcnMain.Open();

                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    if (vstrProcess == Utility.gcEND_OF_LIST)
                    {
                        vstrProcess = "";
                    }

                    strSQL = VoucherSW.gInsertmasterNew(strRefNo, strBranchID, mlngVType, strDate, dblNetAmount,
                                                    strNarrations, "", lngCost, vstrProcess, "0", 1);
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    if (DGSalesGrid != "")
                    {
                        string[] words = DGSalesGrid.Split('~');
                        foreach (string strSalesGrid in words)
                        {
                            string[] ooCost = strSalesGrid.Split('|');
                            if (ooCost[0] != "")
                            {
                                strBillKey = strRefNo + lngloop.ToString().PadLeft(4, '0');
                                strItemName = ooCost[0].ToString().Replace("'", "''");
                                dblqty = Utility.Val(ooCost[1].ToString());
                                strUOm = ooCost[2].ToString();
                                strPer = ooCost[2].ToString();
                                strGodownName = strFromBranchName;

                                dblRate = Utility.Val(ooCost[3].ToString());
                                dblTotalAmount = Utility.Val(ooCost[4].ToString());
                                strSection = "";


                                strSQL = VoucherSW.mInsertTranOutward(strBillKey, lngloop, strRefNo, strItemName, mlngVType,
                                                                     strDate, dblqty, dblRate, strGodownName, dblTotalAmount, "O",
                                                                     strBranchID, "", vstrProcess, strUOm, strPer, strSection);

                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                lngloop += 1;

                                strBillKey = strRefNo + lngloop.ToString().PadLeft(4, '0');
                                strItemName = ooCost[0].ToString().Replace("'", "''");
                                dblqty = Utility.Val(ooCost[1].ToString());
                                strUOm = ooCost[2].ToString();
                                strPer = ooCost[2].ToString();
                                strGodownName = strToBranchName;

                                dblRate = Utility.Val(ooCost[3].ToString());
                                dblTotalAmount = Utility.Val(ooCost[4].ToString());
                                strSection = "";

                            }

                        }
                    }
                    if (blngNumberMethod == true)
                    {
                        strSQL = VoucherSW.gIncreaseVoucher((int)mlngVType);
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    cmdInsert.Transaction.Commit();

                    gcnMain.Close();
                    return "1";

                }
                catch (Exception ex)
                {
                    return (ex.ToString());
                }
                finally
                {
                    gcnMain.Close();

                }
            }
        }
        public string mSaveStockTransfer(string strDeComID, string strRefNo, long mlngVType, string strDate,
                                        double dblNetAmount, string strNarrations, string strBranchID, string strToBranchID,
                                        string strFromBranchName, string strToBranchName, string DGSalesGrid, bool blngNumberMethod, string vstrProcess)
        {


            string strSQL, strBillKey, strItemName = "", strUOm, strPer, strGodownName, strSection;
            double dblqty = 0, dblRate, dblTotalAmount;
            long lngloop = 1, lngCost = 0;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }

                try
                {
                    gcnMain.Open();

                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    if (vstrProcess == Utility.gcEND_OF_LIST)
                    {
                        vstrProcess = "";
                    }
                    strSQL = "DELETE FROM INV_TRAN WHERE INV_REF_NO='" + strRefNo + "' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "DELETE FROM INV_MASTER WHERE INV_REF_NO='" + strRefNo + "' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = VoucherSW.gInsertmasterNew(strRefNo, strBranchID, mlngVType, strDate, dblNetAmount,
                                                    strNarrations, "", lngCost, vstrProcess, "0",0);
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    if (DGSalesGrid != "")
                    {
                        string[] words = DGSalesGrid.Split('~');
                        foreach (string strSalesGrid in words)
                        {
                            string[] ooCost = strSalesGrid.Split('|');
                            if (ooCost[0] != "")
                            {
                                strBillKey = strRefNo + lngloop.ToString().PadLeft(4, '0');
                                strItemName = ooCost[0].ToString().Replace("'", "''");
                                dblqty = Utility.Val(ooCost[1].ToString());
                                strUOm = ooCost[2].ToString();
                                strPer = ooCost[2].ToString();
                                strGodownName = strFromBranchName;

                                dblRate = Utility.Val(ooCost[3].ToString());
                                dblTotalAmount = Utility.Val(ooCost[4].ToString());
                                strSection = "";


                                strSQL = VoucherSW.mInsertTranOutward(strBillKey, lngloop, strRefNo, strItemName, mlngVType,
                                                                     strDate, dblqty, dblRate, strGodownName, dblTotalAmount, "O",
                                                                     strBranchID, "", vstrProcess, strUOm, strPer, strSection);

                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                lngloop += 1;

                                strBillKey = strRefNo + lngloop.ToString().PadLeft(4, '0');
                                strItemName = ooCost[0].ToString().Replace("'", "''");
                                dblqty = Utility.Val(ooCost[1].ToString());
                                strUOm = ooCost[2].ToString();
                                strPer = ooCost[2].ToString();
                                strGodownName = strToBranchName;

                                dblRate = Utility.Val(ooCost[3].ToString());
                                dblTotalAmount = Utility.Val(ooCost[4].ToString());
                                strSection = "";


                                strSQL = VoucherSW.mInsertTranInward(strBillKey, lngloop, strRefNo, strItemName, mlngVType,
                                                                     strDate, dblqty, dblRate, strGodownName, dblTotalAmount, "I",
                                                                     strToBranchID, "", vstrProcess, strUOm, strPer, strSection);

                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();


                                lngloop += 1;

                            }

                        }
                    }
                    if (blngNumberMethod == true)
                    {
                        strSQL = VoucherSW.gIncreaseVoucher((int)mlngVType);
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    cmdInsert.Transaction.Commit();

                    gcnMain.Close();
                    return "1";

                }
                catch (Exception ex)
                {
                    return (ex.ToString());
                }
                finally
                {
                    gcnMain.Close();

                }
            }
        }
        public string mUpdateStockTransfer(string strDeComID, string strRefNo, long mlngVType, string strDate,
                                        double dblNetAmount, string strNarrations, string strBranchID, string strToBranchID,
                                        string strFromBranchName, string strToBranchName, string DGSalesGrid, string vstrProcess)
        {


            string strSQL, strBillKey, strItemName = "", strUOm, strPer, strGodownName, strSection;
            double dblqty = 0, dblRate, dblTotalAmount;
            long lngloop = 1, lngCost = 0;

            connstring = Utility.SQLConnstringComSwitch(strDeComID);



            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }

                try
                {
                    gcnMain.Open();

                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    strSQL = "DELETE FROM INV_TRAN WHERE INV_REF_NO='" + strRefNo + "' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "DELETE FROM INV_MASTER WHERE INV_REF_NO='" + strRefNo + "' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = VoucherSW.gInsertmasterNew(strRefNo, strBranchID, mlngVType, strDate, dblNetAmount,
                                                    strNarrations, "", lngCost, Utility.gcEND_OF_LIST, "0",0);
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    if (DGSalesGrid != "")
                    {
                        string[] words = DGSalesGrid.Split('~');
                        foreach (string strSalesGrid in words)
                        {
                            string[] ooCost = strSalesGrid.Split('|');
                            if (ooCost[0] != "")
                            {
                                strBillKey = strRefNo + lngloop.ToString().PadLeft(4, '0');
                                strItemName = ooCost[0].ToString().Replace("'", "''");
                                dblqty = Utility.Val(ooCost[1].ToString());
                                strUOm = ooCost[2].ToString();
                                strPer = ooCost[2].ToString();
                                strGodownName = strFromBranchName;

                                dblRate = Utility.Val(ooCost[3].ToString());
                                dblTotalAmount = Utility.Val(ooCost[4].ToString());
                                strSection = "";


                                strSQL = VoucherSW.mInsertTranOutward(strBillKey, lngloop, strRefNo, strItemName, mlngVType,
                                                                     strDate, dblqty, dblRate, strGodownName, dblTotalAmount, "O",
                                                                     strBranchID, "", vstrProcess, strUOm, strPer, strSection);

                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                lngloop += 1;

                                strBillKey = strRefNo + lngloop.ToString().PadLeft(4, '0');
                                strItemName = ooCost[0].ToString().Replace("'", "''"); ;
                                dblqty = Utility.Val(ooCost[1].ToString());
                                strUOm = ooCost[2].ToString();
                                strPer = ooCost[2].ToString();
                                strGodownName = strToBranchName;

                                dblRate = Utility.Val(ooCost[3].ToString());
                                dblTotalAmount = Utility.Val(ooCost[4].ToString());
                                strSection = "";


                                strSQL = VoucherSW.mInsertTranInward(strBillKey, lngloop, strRefNo, strItemName, mlngVType,
                                                                     strDate, dblqty, dblRate, strGodownName, dblTotalAmount, "I",
                                                                     strToBranchID, "", vstrProcess, strUOm, strPer, strSection);

                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();

                                lngloop += 1;


                            }

                        }
                    }

                    cmdInsert.Transaction.Commit();

                    gcnMain.Close();
                    return "1";

                }
                catch (Exception ex)
                {
                    return (ex.ToString());
                }
                finally
                {
                    gcnMain.Close();

                }
            }
        }
        public string mDeleteStockTransfer(string strDeComID, string strRefNo)
        {
            string strSQL,strAgnstRef="";
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }

                try
                {
                    gcnMain.Open();

                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    SqlDataReader dr;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    strSQL = "SELECT AGNST_COMP_REF_NO FROM INV_MASTER ";
                    strSQL = strSQL + "WHERE INV_REF_NO='" + strRefNo + "' ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        strAgnstRef = dr["AGNST_COMP_REF_NO"].ToString();
                    }
                    dr.Close();
                    if (strAgnstRef != "")
                    {
                        strSQL = "UPDATE INV_STOCK_REQUISITION_MASTER SET REQ_STATUS=1 ";
                        strSQL = strSQL + "WHERE REQUISITION_NO='" + strRefNo + "' ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    strSQL = "DELETE FROM INV_TRAN WHERE INV_REF_NO='" + strRefNo + "' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "DELETE FROM INV_MASTER WHERE INV_REF_NO='" + strRefNo + "' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    cmdInsert.Transaction.Commit();

                    gcnMain.Close();
                    return "Deleted...";

                }
                catch (Exception ex)
                {
                    return (ex.ToString());
                }
                finally
                {
                    gcnMain.Close();

                }
            }
        }

        public List<StockItem> mFillStockTransfer(string strDeComID, int mlngVType, string strFind, string strExpression, string strFdate, string strTodate,string strFlag)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<StockItem> oogrp = new List<StockItem>();

            if (strFind != "Stock Item")
            {
                strSQL = "SELECT M.INV_REF_NO,M.BRANCH_ID,M.INV_DATE,M.INV_AMOUNT,M.INV_NARRATIONS FROM INV_MASTER M  ";
                if (mlngVType == (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANFERIN)
                {
                    strSQL = strSQL + "WHERE M.INV_VOUCHER_TYPE = 23 ";
                    strSQL = strSQL + "AND M.INV_REF_NO IN (SELECT INV_REF_NO FROM INV_TRAN WHERE INV_INOUT_FLAG ='" + strFlag + "' ) ";
                }
                else
                {
                    strSQL = strSQL + "WHERE M.INV_VOUCHER_TYPE = " + mlngVType + "  ";
                    strSQL = strSQL + "AND M.INV_REF_NO IN (SELECT INV_REF_NO FROM INV_TRAN WHERE INV_INOUT_FLAG ='" + strFlag + "' ) ";
                }
            }
            else
            {
                strSQL = "SELECT t.STOCKITEM_NAME, M.INV_REF_NO,M.BRANCH_ID,M.INV_DATE,M.INV_AMOUNT FROM INV_MASTER m,INV_TRAN T WHERE M.INV_REF_NO=T.INV_REF_NO   AND M.INV_VOUCHER_TYPE = " + mlngVType + "  ";

            }

            if (strFind == "Voucher Date")
            {
                strSQL = strSQL + "AND ";
                strSQL = strSQL + "M.INV_DATE BETWEEN ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND ";
                strSQL = strSQL + "" + Utility.cvtSQLDateString(strTodate) + "";
            }
            else if (strFind == "Stock Item")
            {
                strSQL = strSQL + " AND t.STOCKITEM_NAME= '" + strExpression + "' ";
            }
            else if (strFind == "Voucher Number")
            {
                strSQL = strSQL + "AND ";
                strSQL = strSQL + "M.INV_REF_NO like '%" + strExpression + "%'";
            }
            else
            {
                strSQL = strSQL + "AND ";
                strSQL = strSQL + "M.INV_DATE BETWEEN ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strTodate) + " ";
                strSQL = strSQL + "AND ";
                strSQL = strSQL + "" + Utility.cvtSQLDateString(strTodate) + "";
            }
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    StockItem ogrp = new StockItem();
                    ogrp.strRefNo = drGetGroup["INV_REF_NO"].ToString();
                    ogrp.strBranchName = Utility.gstrGetBranchName(strDeComID, drGetGroup["BRANCH_ID"].ToString());
                    ogrp.strDate = Convert.ToDateTime(drGetGroup["INV_DATE"]).ToString("dd/MM/yyyy");
                    ogrp.dblBranchAmnout = Convert.ToDouble(drGetGroup["INV_AMOUNT"].ToString());
                    if (drGetGroup["INV_NARRATIONS"].ToString() != "")
                    {
                        ogrp.strNarration = drGetGroup["INV_NARRATIONS"].ToString();
                    }
                    else
                    {
                        ogrp.strNarration = "";
                    }
                    oogrp.Add(ogrp);

                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return oogrp;

            }
        }
        public List<StockItem> mFillDisplayStockTransfer(string strDeComID, string vstrStockSerial)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<StockItem> oogrp = new List<StockItem>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            strSQL = "SELECT * FROM INV_TRAN ";
            strSQL = strSQL + "WHERE INV_REF_NO = '" + vstrStockSerial.Replace("'", "''") + "' ";
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    StockItem ogrp = new StockItem();

                    ogrp.strInOUT = drGetGroup["INV_INOUT_FLAG"].ToString();
                    ogrp.strItemName = drGetGroup["STOCKITEM_NAME"].ToString();
                    ogrp.strFromLocation = drGetGroup["GODOWNS_NAME"].ToString();
                    ogrp.strToLocation = drGetGroup["GODOWNS_NAME"].ToString();
                    if (drGetGroup["INV_TRAN_QUANTITY"].ToString() != "+" && drGetGroup["INV_TRAN_QUANTITY"].ToString() != "-")
                    {
                        ogrp.dblOpnQty = Convert.ToDouble(drGetGroup["INV_TRAN_QUANTITY"]);
                    }
                    else
                    {
                        ogrp.dblOpnQty = Convert.ToDouble(drGetGroup["INV_TRAN_QUANTITY"]);
                    }

                    ogrp.dblOpnRate = Convert.ToDouble(drGetGroup["INV_TRAN_RATE"].ToString());
                    ogrp.dblOpnValue = Convert.ToDouble(drGetGroup["INV_TRAN_AMOUNT"].ToString());
                    if (drGetGroup["INV_LOG_NO"].ToString() != "")
                    {
                        ogrp.strBatch = drGetGroup["INV_LOG_NO"].ToString();
                    }
                    else
                    {
                        ogrp.strBatch = "";
                    }
                    if (drGetGroup["PROCESS_NAME"].ToString() != "")
                    {
                        ogrp.strProcess = drGetGroup["PROCESS_NAME"].ToString();
                    }
                    else
                    {
                        ogrp.strProcess = "";
                    }
                    ogrp.strBillKey = drGetGroup["INV_TRAN_KEY"].ToString();

                    oogrp.Add(ogrp);

                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return oogrp;

            }
        }
        #endregion
        #region "MFG voucher"
        public string mInsertProductionMfg(string strDeComID, string strRefNo, string strInvLog, string strBranchId, string strFGodown, string strGodownto, 
                                           string strProcess, string strFgItem, double dblFgQty, double mdblAmount,
                                           string strDate, string strNarrations, string DG, int intconvertType, double dblSampleFG, double dblSampleQC, string strNarration)
                                           
        {

            string strSQL, strItemName = "", strUOm = "", strInvKey="";
            double dblQnty = 0, dblRate = 0, dblReceipeQnty = 0, dblAmount = 0, dblUsedSize = 0, dblTotalBatchSize = 0;
            long lngloop = 1, lngProcessType=0;


            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }

                try
                {
                    gcnMain.Open();


                    SqlDataReader dr;
                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    strSQL = "SELECT ISNULL(INV_LOG_SIZE,0) INV_LOG_SIZE  FROM INV_BATCH WHERE INV_LOG_NO ='" + strInvLog.Trim().Replace("'", "''") + "' ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblTotalBatchSize = Convert.ToDouble(dr["INV_LOG_SIZE"]);
                    }
                    dr.Close();

                    strSQL = "SELECT ISNULL(SUM(FG_SIZE),0) QUANTITY FROM INV_PRODUCTION_MASTER WHERE INV_LOG_NO ='" + strInvLog.Trim().Replace("'", "''") + "' ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblUsedSize = dblFgQty + Convert.ToDouble(dr["QUANTITY"]);
                    }
                    dr.Close();
                    if ( dblUsedSize >= dblTotalBatchSize)
                    {
                        strSQL = "UPDATE INV_BATCH set INV_LOG_STATUS='Complete' ";
                        strSQL = strSQL + "WHERE INV_LOG_NO ='" + strInvLog.Trim().Replace("'", "''") + "' ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    strSQL = "INSERT INTO INV_PRODUCTION_MASTER(";
                    strSQL = strSQL + "VOUCHER_NO,INV_LOG_NO,VOUCHER_DATE,BRANCH_ID,CONSUMPTION_GODWNS_NAME,";
                    strSQL = strSQL + "PROCESS_NAME,FG_ITEM,FG_SIZE,AMOUNT,SAMPLE_TO_FG,SAMPLE_TO_QC,NARRATION ";
                    strSQL = strSQL + ")";
                    strSQL = strSQL + "VALUES(";
                    strSQL = strSQL + "'" + strRefNo + "',";
                    strSQL = strSQL + "'" + strInvLog.Trim().Replace("'", "''") + "',";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strDate) + ",";
                    strSQL = strSQL + "'" + strBranchId + "',";
                    strSQL = strSQL + "'" + strFGodown.Trim().Replace("'", "''") + "',";
                    strSQL = strSQL + "'" + strProcess.Trim().Replace("'", "''") + "',";
                    strSQL = strSQL + "'" + strFgItem.Trim().Replace("'", "''") + "',";
                    strSQL = strSQL + "" + dblFgQty + ",";
                    strSQL = strSQL + "" + mdblAmount + ",";
                    strSQL = strSQL + "" + dblSampleFG + ",";
                    strSQL = strSQL + "" + dblSampleQC + ",";
                    strSQL = strSQL + "'" + strNarration.Trim().Replace("'", "''") + "'";
                    strSQL = strSQL + ")";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    if (DG != "")
                    {
                        string[] words = DG.Split('~');
                        foreach (string strValue in words)
                        {
                            string[] ooCost = strValue.Split('|');
                            if (ooCost[0] != "")
                            {
                                dblRate = 0;
                                dblAmount = 0;
                                strInvKey = strRefNo + lngloop.ToString().PadLeft(4, '0');
                                strItemName = ooCost[0].ToString();
                                dblQnty = Utility.Val(ooCost[1].ToString());
                                strUOm = ooCost[2].ToString();
                                dblAmount = Utility.Val(ooCost[3].ToString());
                                if (dblAmount != 0 && dblQnty != 0)
                                {
                                    dblRate = Math.Abs(Math.Round(dblAmount / dblQnty, 2));
                                }
                                else
                                {
                                    dblRate = 0;
                                    dblAmount = 0;
                                }
                                dblReceipeQnty = Utility.Val(ooCost[4].ToString());
                                lngProcessType = Convert.ToInt32(ooCost[5].ToString());
                                strSQL = "INSERT INTO INV_PRODUCTION_CHILD(";
                                strSQL = strSQL + "INV_KEY,VOUCHER_NO,TO_FG_GODWNS_NAME,STOCKITEM_NAME,STOCKITEM_BASEUNITS,RECEIEE_QNTY,";
                                strSQL = strSQL + "QNTY,RATE,AMNT,PROCESS_TYPE,INV_TRAN_POSITION ";
                                strSQL = strSQL + ")";
                                strSQL = strSQL + "VALUES(";
                                strSQL = strSQL + "'" + strInvKey + "',";
                                strSQL = strSQL + "'" + strRefNo + "',";
                                strSQL = strSQL + "'" + strGodownto.Replace("'", "''") + "',";
                                strSQL = strSQL + "'" + strItemName.Replace("'", "''") + "',";
                                strSQL = strSQL + "'" + strUOm.Replace("'", "''") + "',";
                                strSQL = strSQL + "" + dblReceipeQnty + ",";
                                strSQL = strSQL + "" + dblQnty + ",";
                                strSQL = strSQL + "" + dblRate + ",";
                                strSQL = strSQL + "" + dblAmount + ",";
                                strSQL = strSQL + "" + lngProcessType + ",";
                                strSQL = strSQL + "" + lngloop + " ";
                                strSQL = strSQL + ")";
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                lngloop += 1;
                            }

                        }
                    }
                    strSQL = VoucherSW.gIncreaseVoucher((int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_PRODUCTION);
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    cmdInsert.Transaction.Commit();
                    gcnMain.Close();
                    return "Inseretd...";
                }
                catch (Exception ex)
                {
                    return (ex.ToString());
                }
                finally
                {
                    gcnMain.Close();
                }
            }
        }
        public string mUpdateProductionMfg(string strDeComID, string strRefNo, string strInvLog, string strBranchId, string strFGodown, string strGodownto,
                                          string strProcess, string strFgItem, double dblFgQty, double mdblAmount,
                                          string strDate, string strNarrations, string DG, int intconvertType, double dblSampleFG, double dblSampleQC,string strNarration)
        {

            string strSQL, strItemName = "", strUOm = "", strInvKey = "";
            double dblQnty = 0, dblRate = 0, dblReceipeQnty = 0, dblAmount = 0, dblUsedSize = 0, dblTotalBatchSize = 0;
            long lngloop = 1, lngProcessType = 0;


            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }

                try
                {
                    gcnMain.Open();


                    SqlDataReader dr;
                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    strSQL = "DELETE FROM INV_PRODUCTION_CHILD WHERE VOUCHER_NO='" + strRefNo + "' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM INV_PRODUCTION_MASTER WHERE VOUCHER_NO='" + strRefNo + "' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "SELECT ISNULL(INV_LOG_SIZE,0) INV_LOG_SIZE  FROM INV_BATCH WHERE INV_LOG_NO ='" + strInvLog.Trim().Replace("'", "''") + "' ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblTotalBatchSize = Convert.ToDouble(dr["INV_LOG_SIZE"]);
                    }
                    dr.Close();

                    strSQL = "SELECT ISNULL(SUM(FG_SIZE),0) QUANTITY FROM INV_PRODUCTION_MASTER WHERE INV_LOG_NO ='" + strInvLog.Trim().Replace("'", "''") + "' ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        dblUsedSize = dblFgQty + Convert.ToDouble(dr["QUANTITY"]);
                    }
                    dr.Close();
                    if (dblUsedSize >= dblTotalBatchSize)
                    {
                        strSQL = "UPDATE INV_BATCH set INV_LOG_STATUS='Complete' ";
                        strSQL = strSQL + "WHERE INV_LOG_NO ='" + strInvLog.Trim().Replace("'", "''") + "' ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    strSQL = "INSERT INTO INV_PRODUCTION_MASTER(";
                    strSQL = strSQL + "VOUCHER_NO,INV_LOG_NO,VOUCHER_DATE,BRANCH_ID,CONSUMPTION_GODWNS_NAME,";
                    strSQL = strSQL + "PROCESS_NAME,FG_ITEM,FG_SIZE,AMOUNT,SAMPLE_TO_FG,SAMPLE_TO_QC,NARRATION ";
                    strSQL = strSQL + ")";
                    strSQL = strSQL + "VALUES(";
                    strSQL = strSQL + "'" + strRefNo + "',";
                    strSQL = strSQL + "'" + strInvLog.Trim().Replace("'", "''") + "',";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strDate) + ",";
                    strSQL = strSQL + "'" + strBranchId + "',";
                    strSQL = strSQL + "'" + strFGodown.Trim().Replace("'", "''") + "',";
                    strSQL = strSQL + "'" + strProcess.Trim().Replace("'", "''") + "',";
                    strSQL = strSQL + "'" + strFgItem.Trim().Replace("'", "''") + "',";
                    strSQL = strSQL + "" + dblFgQty + ",";
                    strSQL = strSQL + "" + mdblAmount + ",";
                    strSQL = strSQL + "" + dblSampleFG + ",";
                    strSQL = strSQL + "" + dblSampleQC + ",";
                    strSQL = strSQL + "'" + strNarration.Trim().Replace("'", "''") + "'";
                    strSQL = strSQL + ")";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    if (DG != "")
                    {
                        string[] words = DG.Split('~');
                        foreach (string strValue in words)
                        {
                            string[] ooCost = strValue.Split('|');
                            if (ooCost[0] != "")
                            {
                                dblRate = 0;
                                dblAmount = 0;
                                strInvKey = strRefNo + lngloop.ToString().PadLeft(4, '0');
                                strItemName = ooCost[0].ToString();
                                dblQnty = Utility.Val(ooCost[1].ToString());
                                strUOm = ooCost[2].ToString();
                                dblAmount = Utility.Val(ooCost[3].ToString());
                                if (dblAmount != 0 && dblQnty != 0)
                                {
                                    dblRate = Math.Abs(Math.Round(dblAmount / dblQnty, 2));
                                }
                                else
                                {
                                    dblRate = 0;
                                    dblAmount = 0;
                                }

                                dblReceipeQnty = Utility.Val(ooCost[4].ToString());
                                lngProcessType = Convert.ToInt32(ooCost[5].ToString());
                                strSQL = "INSERT INTO INV_PRODUCTION_CHILD(";
                                strSQL = strSQL + "INV_KEY,VOUCHER_NO,TO_FG_GODWNS_NAME,STOCKITEM_NAME,STOCKITEM_BASEUNITS,RECEIEE_QNTY,";
                                strSQL = strSQL + "QNTY,RATE,AMNT,PROCESS_TYPE ";
                                strSQL = strSQL + ")";
                                strSQL = strSQL + "VALUES(";
                                strSQL = strSQL + "'" + strInvKey + "',";
                                strSQL = strSQL + "'" + strRefNo + "',";
                                strSQL = strSQL + "'" + strGodownto.Replace("'", "''") + "',";
                                strSQL = strSQL + "'" + strItemName.Replace("'", "''") + "',";
                                strSQL = strSQL + "'" + strUOm.Replace("'", "''") + "',";
                                strSQL = strSQL + "" + dblReceipeQnty + ",";
                                strSQL = strSQL + "" + dblQnty + ",";
                                strSQL = strSQL + "" + dblRate + ",";
                                strSQL = strSQL + "" + dblAmount + ",";
                                strSQL = strSQL + "" + lngProcessType + "";
                                strSQL = strSQL + ")";
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                lngloop += 1;
                            }

                        }
                    }
                    //strSQL = VoucherSW.gIncreaseVoucher((int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_VOUCHER);
                    //cmdInsert.CommandText = strSQL;
                    //cmdInsert.ExecuteNonQuery();

                    cmdInsert.Transaction.Commit();
                    gcnMain.Close();
                    return "Updated...";
                }
                catch (Exception ex)
                {
                    return (ex.ToString());
                }
                finally
                {
                    gcnMain.Close();
                }
            }
        }

        public string mInsertMFGvoucher(string strDeComID, string strRefNo, string strInvLog, string strBranchIdFrom, 
                                           string strBranchIdTo, string strGodown, string strGodownto, string strProcess,
                                           string strDate, string strNarrations, double mdblAmount,
                                           string Dgfg, string DgRm, string DgwastageRm, int actionmode, 
                                           bool mblnNumbMethod, int intconvertType)
        {

            string strSQL, strItemName = "", strRefNoIN = "", strRefNoOut = "", strRefNoWastage = "", strInvKey = "", strInOutFlg = "", strATL = "", strUOm = "";
            double dblQnty = 0, dblAmount = 0, dblRate = 0;
            long lngloop = 1, lngVtype;


            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }

                try
                {
                    gcnMain.Open();

                    lngVtype = (long)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION;

                    if (mblnNumbMethod)
                    {
                        strRefNoOut = Utility.vtSTOCK_MFG_CONSUMPTION_STR + strBranchIdFrom + Utility.gstrLastNumber(strDeComID, (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION);
                    }
                    else
                    {
                        strRefNoOut = Utility.vtSTOCK_MFG_CONSUMPTION_STR + strBranchIdFrom + strRefNo;
                    }

                    SqlDataReader rsGet;
                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    if (strInvLog != "")
                    {
                        strSQL = "SELECT INV_LOG_NO FROM INV_BATCH WHERE INV_LOG_NO = '" + strInvLog + "' ";
                        cmdInsert.CommandText = strSQL;
                        rsGet = cmdInsert.ExecuteReader();
                        if (!rsGet.Read())
                        {
                            rsGet.Close();
                            strSQL = VoucherSW.mInsertBatch(strInvLog, strDate);
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();
                        }
                        rsGet.Close();
                    }

                    strInOutFlg = "O";

                    strSQL = VoucherSW.gInsertmasterNew(strRefNoOut, strBranchIdFrom, (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION, strDate, Utility.Val(mdblAmount.ToString()), strNarrations, strInvLog, 1, strProcess, "1",0);
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();


                    if (DgRm != "")
                    {
                        string[] words = DgRm.Split('~');
                        foreach (string strRm in words)
                        {
                            string[] ooCost = strRm.Split('|');
                            if (ooCost[0] != "")
                            {
                                strInvKey = strRefNoOut + lngloop.ToString().PadLeft(4, '0');
                                strItemName = ooCost[0].ToString();
                                dblQnty = Utility.Val(ooCost[1].ToString());
                                strATL = ooCost[2].ToString();
                                strUOm = ooCost[2].ToString();
                                dblAmount = Utility.Val(ooCost[3].ToString());
                                if (dblAmount != 0 && dblQnty != 0)
                                {
                                    dblRate = Math.Abs(Math.Round(dblAmount / dblQnty, 2));
                                }
                                strSQL = VoucherSW.mInsertTranOutwardMFG(strInvKey, lngloop, strRefNoOut, strItemName, (long)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION, strDate, dblQnty,
                                                                    dblRate, strGodown, dblAmount, strInOutFlg, strBranchIdFrom, strInvLog, strProcess, strUOm, strATL, "", intconvertType);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                lngloop += 1;
                            }

                        }
                    }
                    

                    if (DgwastageRm != "")
                    {
                        lngVtype = (long)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE;
                        if (mblnNumbMethod)
                        {
                            strRefNoWastage = Utility.vtSTOCK_DAMAGE_STR + strBranchIdFrom + Utility.gstrLastNumber(strDeComID, (int)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE);
                        }
                        else
                        {
                            strRefNoWastage = Utility.vtSTOCK_DAMAGE_STR + strBranchIdFrom + strRefNo;
                        }
                        strSQL = VoucherSW.gInsertmasterNew(strRefNoWastage, strBranchIdFrom, (int)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE, strDate, Utility.Val(mdblAmount.ToString()), strNarrations, strInvLog, 1, strProcess, "1",0);
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();


                        string[] words = DgwastageRm.Split('~');
                        foreach (string strWastage in words)
                        {
                            string[] ooCost = strWastage.Split('|');
                            if (ooCost[0] != "")
                            {
                                strInvKey = strRefNoOut + lngloop.ToString().PadLeft(4, '0');
                                strItemName = ooCost[0].ToString();
                                dblQnty = Utility.Val(ooCost[1].ToString());
                                strATL = ooCost[2].ToString();
                                strUOm = ooCost[2].ToString();
                                dblAmount = Utility.Val(ooCost[3].ToString());
                                if (dblAmount != 0 && dblQnty != 0)
                                {
                                    dblRate = Math.Abs(Math.Round(dblAmount / dblQnty, 2));
                                }
                                strSQL = VoucherSW.mInsertTranOutward(strInvKey, lngloop, strRefNoWastage, strItemName, (long)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE, strDate, dblQnty,
                                                                    dblRate, strGodown, dblAmount, strInOutFlg, strBranchIdFrom, strInvLog, strProcess, strUOm, strATL, "", intconvertType);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                lngloop += 1;
                            }

                        }
                    }
                   

                    strInOutFlg = "I";
                    lngVtype = (long)Utility.VOUCHER_TYPE.vtSTOCK_MFG_VOUCHER;

                    if (mblnNumbMethod)
                    {
                        strRefNoIN = Utility.vtSTOCK_MFG_VOUCHER_STR + strBranchIdTo + Utility.gstrLastNumber(strDeComID, (int)lngVtype);
                    }
                    else
                    {
                        strRefNoIN = Utility.vtSTOCK_MFG_VOUCHER_STR + strBranchIdTo + strRefNo;
                    }
                    strSQL = VoucherSW.gInsertmasterNew(strRefNoIN, strBranchIdTo, (long)Utility.VOUCHER_TYPE.vtSTOCK_MFG_VOUCHER, strDate, Utility.Val(mdblAmount.ToString()), strNarrations, strInvLog, 1, strProcess, "1",0);
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    if (Dgfg != "")
                    {

                        string[] words = Dgfg.Split('~');
                        foreach (string strfg in words)
                        {
                            string[] ooCost = strfg.Split('|');
                            if (ooCost[0] != "")
                            {
                                strInvKey = strRefNoIN + lngloop.ToString().PadLeft(4, '0');
                                strItemName = ooCost[0].ToString();
                                dblQnty = Utility.Val(ooCost[1].ToString());
                                strATL = ooCost[2].ToString();
                                strUOm = ooCost[2].ToString();
                                dblAmount = Utility.Val(ooCost[3].ToString());
                                if (dblAmount != 0 && dblQnty != 0)
                                {
                                    dblRate = Math.Abs(Math.Round(dblAmount / dblQnty, 2));
                                }
                                else
                                {
                                    dblRate = 0;
                                }
                                strSQL = VoucherSW.mInsertTranInward(strInvKey, lngloop, strRefNoIN, strItemName, lngVtype, strDate, dblQnty,
                                                                    dblRate, strGodownto, dblAmount, strInOutFlg, strBranchIdTo, strInvLog, strProcess, strUOm, strATL, "", intconvertType);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                lngloop += 1;

                            }

                        }
                    }


                    strSQL = VoucherSW.mInsertInvLog(strInvLog, strRefNoIN, strDate, mdblAmount, strProcess, strRefNoOut, strBranchIdTo, strRefNoWastage, intconvertType);
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    if (mblnNumbMethod == true)
                    {
                        strSQL = VoucherSW.gIncreaseVoucher((int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION);
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                        //strSQL = Voucher.gIncreaseVoucher((int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_FINISHED_GOODS);
                        //cmdInsert.CommandText = strSQL;
                        //cmdInsert.ExecuteNonQuery();
                        strSQL = VoucherSW.gIncreaseVoucher((int)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE);
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                        strSQL = VoucherSW.gIncreaseVoucher((int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_VOUCHER);
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }

                    cmdInsert.Transaction.Commit();
                    gcnMain.Close();
                    return "Inseretd...";
                }
                catch (Exception ex)
                {
                    return (ex.ToString());
                }
                finally
                {
                    gcnMain.Close();
                }
            }
        }
        public string mDeleteMFG(string strDeComID, string strOldInvLog, string strOldRm, string strOldWm, string stroldFm,int intconvertType)
        {
            string strSQL,strLogNo="";
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }

                try
                {
                    gcnMain.Open();
                    SqlDataReader dr;
                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    //strSQL = "DELETE FROM INV_BATCH WHERE INV_LOG_NO='" + strOldInvLog + "'";
                    //cmdInsert.CommandText = strSQL;
                    //cmdInsert.ExecuteNonQuery();
                    if (intconvertType == 0)
                    {
                        strSQL = "SELECT INV_LOG_NO FROM INV_PRODUCTION_MASTER WHERE VOUCHER_NO='" + stroldFm + "' ";
                        cmdInsert.CommandText = strSQL;
                        dr = cmdInsert.ExecuteReader();
                        if (dr.Read())
                        {
                            strLogNo = dr["INV_LOG_NO"].ToString();
                        }
                        dr.Close();

                        strSQL = "SELECT APP_STATUS FROM INV_PRODUCTION_MASTER WHERE VOUCHER_NO='" + stroldFm + "' ";
                        strSQL = strSQL + "AND APP_STATUS = 1 ";
                        cmdInsert.CommandText = strSQL;
                        dr = cmdInsert.ExecuteReader();
                        if (dr.Read())
                        {
                            dr.Close();
                            gcnMain.Close();
                            return "Posted Record Cannot be Delete...";
                        }
                        dr.Close();
                        strSQL = "UPDATE INV_BATCH SET INV_LOG_STATUS='Active' ";
                        strSQL = strSQL + "WHERE INV_LOG_NO='" + strLogNo.Replace("'", "''") + "' ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                        strSQL = "DELETE FROM INV_PRODUCTION_CHILD WHERE VOUCHER_NO='" + stroldFm + "' "; ;
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                        strSQL = "DELETE FROM INV_PRODUCTION_MASTER WHERE VOUCHER_NO='" + stroldFm + "' "; ;
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                        cmdInsert.Transaction.Commit();

                        gcnMain.Close();
                        return "Deleted...";
                    }
                    strSQL = "DELETE FROM INV_TRAN WHERE INV_REF_NO='" + strOldRm + "' "; ;
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM INV_TRAN WHERE INV_REF_NO='" + strOldWm + "' "; ;
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM INV_TRAN WHERE INV_REF_NO='" + stroldFm + "' "; ;
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM INV_MASTER WHERE INV_REF_NO = '" + strOldRm + "'";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM INV_MASTER WHERE INV_REF_NO = '" + strOldWm + "'";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM INV_MASTER WHERE INV_REF_NO = '" + stroldFm + "'";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM INV_PRODUCTION_LOG WHERE INV_REF_NO_IN ='" + stroldFm + "'";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();


                    cmdInsert.Transaction.Commit();

                    gcnMain.Close();
                    return "Deleted...";

                }
                catch (Exception ex)
                {
                    return ("Transaction Found cannot be Delete");
                }
                finally
                {
                    gcnMain.Close();

                }
            }
        }

        public string mUpdateMFGvoucher(string strDeComID, string strOldInvLog, string strOldRm, string strOldWm, string stroldFm, string strInvLog,
                                          string strBranchIdFrom, string strBranchIdTo, string strGodown, string strGodownto, string strProcess,
                                          string strDate, string strNarrations, double mdblAmount,
                                          string Dgfg, string DgRm, string Dgwastage, int actionmode, bool mblnNumbMethod, int intconvertType)
        {

            string strSQL, strItemName = "", strRefNoIN = "", strRefNoOut = "", strRefNoWastage = "", strInvKey = "", strInOutFlg = "", strATL = "", strUOm = "";
            double dblQnty = 0, dblAmount = 0, dblRate = 0;
            long lngloop = 1, lngVtype;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }

                try
                {
                    gcnMain.Open();



                    SqlDataReader rsGet;
                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    //strSQL = "DELETE FROM INV_TRAN_HARDWARE_SL_REF WHERE COMP_REF_NO='" + strRefNoIN + "'";
                    //cmdInsert.CommandText = strSQL;
                    //cmdInsert.ExecuteNonQuery();
                    //strSQL = "DELETE FROM INV_BATCH WHERE INV_LOG_NO='" + strOldInvLog + "'";
                    //cmdInsert.CommandText = strSQL;
                    //cmdInsert.ExecuteNonQuery();

                    strSQL = "DELETE FROM INV_TRAN WHERE INV_REF_NO='" + strOldRm + "' "; ;
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM INV_TRAN WHERE INV_REF_NO='" + strOldWm + "' "; ;
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM INV_TRAN WHERE INV_REF_NO='" + stroldFm + "' "; ;
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM INV_MASTER WHERE INV_REF_NO = '" + strOldRm + "'";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM INV_MASTER WHERE INV_REF_NO = '" + strOldWm + "'";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM INV_MASTER WHERE INV_REF_NO = '" + stroldFm + "'";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "DELETE FROM INV_PRODUCTION_LOG WHERE INV_REF_NO_IN ='" + stroldFm + "'";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();


                    lngVtype = (long)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION;
                    //strRefNoOut = Utility.vtSTOCK_MFG_CONSUMPTION_STR + strBranchIdFrom + Utility.gstrLastNumber((int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION);
                    strRefNoOut = strOldRm;
                    if (strOldInvLog != "")
                    {
                        strSQL = "SELECT INV_LOG_NO FROM INV_BATCH WHERE INV_LOG_NO = '" + strOldInvLog + "' ";
                        cmdInsert.CommandText = strSQL;
                        rsGet = cmdInsert.ExecuteReader();
                        if (!rsGet.Read())
                        {
                            rsGet.Close();
                            strSQL = VoucherSW.mInsertBatch(strInvLog, strDate);
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();
                        }
                        rsGet.Close();
                    }
                    strInOutFlg = "O";
                    strSQL = VoucherSW.gInsertmasterNew(strRefNoOut, strBranchIdFrom, (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION, strDate, Utility.Val(mdblAmount.ToString()), strNarrations, strInvLog, 1, strProcess, "1",0);
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();


                    if (DgRm != "")
                    {
                        string[] words = DgRm.Split('~');
                        foreach (string strRm in words)
                        {
                            string[] ooCost = strRm.Split('|');
                            if (ooCost[0] != "")
                            {
                                strInvKey = strRefNoOut + lngloop.ToString().PadLeft(4, '0');
                                strItemName = ooCost[0].ToString();
                                dblQnty = Utility.Val(ooCost[1].ToString());
                                strATL = ooCost[2].ToString();
                                strUOm = ooCost[2].ToString();
                                dblAmount = Utility.Val(ooCost[3].ToString());
                                if (dblAmount != 0 && dblQnty != 0)
                                {
                                    dblRate = Math.Abs(Math.Round(dblAmount / dblQnty, 2));
                                }
                                strSQL = VoucherSW.mInsertTranOutwardMFG(strInvKey, lngloop, strRefNoOut, strItemName, (long)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION, strDate, dblQnty,
                                                                    dblRate, strGodown, dblAmount, strInOutFlg, strBranchIdFrom, strInvLog, strProcess, strUOm, strATL, "", intconvertType);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                lngloop += 1;
                            }

                        }
                    }


                    if (Dgwastage != "")
                    {
                        lngVtype = (long)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE;
                        //strRefNoOut = Utility.vtSTOCK_DAMAGE_STR + strBranchIdFrom + Utility.gstrLastNumber((int)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE);
                        strRefNoWastage = strOldWm;

                        strSQL = VoucherSW.gInsertmasterNew(strRefNoWastage, strBranchIdFrom, (int)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE, strDate, Utility.Val(mdblAmount.ToString()), strNarrations, strInvLog, 1, strProcess, "1",0);
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();


                        string[] words = Dgwastage.Split('~');
                        foreach (string strWastage in words)
                        {
                            string[] ooCost = strWastage.Split('|');
                            if (ooCost[0] != "")
                            {
                                strInvKey = strRefNoOut + lngloop.ToString().PadLeft(4, '0');
                                strItemName = ooCost[0].ToString();
                                dblQnty = Utility.Val(ooCost[1].ToString());
                                strATL = ooCost[2].ToString();
                                strUOm = ooCost[2].ToString();
                                dblAmount = Utility.Val(ooCost[3].ToString());
                                if (dblAmount != 0 && dblQnty != 0)
                                {
                                    dblRate = Math.Abs(Math.Round(dblAmount / dblQnty, 2));
                                }
                                strSQL = VoucherSW.mInsertTranOutward(strInvKey, lngloop, strRefNoWastage, strItemName, (long)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE, strDate, dblQnty,
                                                                    dblRate, strGodown, dblAmount, strInOutFlg, strBranchIdFrom, strInvLog, strProcess, strUOm, strATL, "", intconvertType);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                lngloop += 1;
                            }

                        }
                    }

                    strInOutFlg = "I";
                    lngVtype = (long)Utility.VOUCHER_TYPE.vtSTOCK_MFG_VOUCHER;
                    //strRefNoIN = Utility.vtSTOCK_MFG_FINISHEDGOODS_STR + strBranchIdTo + Utility.gstrLastNumber((int)lngVtype);
                    strRefNoIN = stroldFm;
                    strSQL = VoucherSW.gInsertmasterNew(strRefNoIN, strBranchIdTo, (long)Utility.VOUCHER_TYPE.vtSTOCK_MFG_VOUCHER, strDate, Utility.Val(mdblAmount.ToString()), strNarrations, strInvLog, 1, strProcess, "1",0);
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    if (Dgfg != "")
                    {

                        string[] words = Dgfg.Split('~');
                        foreach (string strFg in words)
                        {
                            string[] ooCost = strFg.Split('|');
                            if (ooCost[0] != "")
                            {
                                strInvKey = strRefNoIN + lngloop.ToString().PadLeft(4, '0');
                                strItemName = ooCost[0].ToString();
                                dblQnty = Utility.Val(ooCost[1].ToString());
                                strATL = ooCost[2].ToString();
                                strUOm = ooCost[2].ToString();
                                dblAmount = Utility.Val(ooCost[3].ToString());
                                if (dblAmount != 0 && dblQnty != 0)
                                {
                                    dblRate = Math.Abs(Math.Round(dblAmount / dblQnty, 2));
                                }
                                else
                                {
                                    dblRate = 0;
                                }
                                strSQL = VoucherSW.mInsertTranInward(strInvKey, lngloop, strRefNoIN, strItemName, lngVtype, strDate, dblQnty,
                                                                    dblRate, strGodownto, dblAmount, strInOutFlg, strBranchIdTo, strInvLog, strProcess, strUOm, strATL, "", intconvertType);
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                lngloop += 1;
                            }

                        }
                    }


                    strSQL = VoucherSW.mInsertInvLog(strInvLog, strRefNoIN, strDate, mdblAmount, strProcess, strRefNoOut, strBranchIdTo, strRefNoWastage, intconvertType);
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //if (mblnNumbMethod == true)
                    //{
                    //    strSQL = Voucher.gIncreaseVoucher((int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION);
                    //    cmdInsert.CommandText = strSQL;
                    //    cmdInsert.ExecuteNonQuery();
                    //    //strSQL = Voucher.gIncreaseVoucher((int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_FINISHED_GOODS);
                    //    //cmdInsert.CommandText = strSQL;
                    //    //cmdInsert.ExecuteNonQuery();
                    //    strSQL = Voucher.gIncreaseVoucher((int)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE);
                    //    cmdInsert.CommandText = strSQL;
                    //    cmdInsert.ExecuteNonQuery();


                    //    strSQL = Voucher.gIncreaseVoucher((int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_VOUCHER);
                    //    cmdInsert.CommandText = strSQL;
                    //    cmdInsert.ExecuteNonQuery();
                    //}

                    cmdInsert.Transaction.Commit();
                    gcnMain.Close();
                    return "Updated...";
                }
                catch (Exception ex)
                {
                    return (ex.ToString());
                }
                finally
                {
                    gcnMain.Close();
                }
            }
        }




        public List<MFGvouhcer> mLoadMFGVoucher(string strDeComID, string fdate, string tdate, int intConType, string strFind, 
                                                string strExpression, string strStockItemName,int intAppStstus)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<MFGvouhcer> oogrp = new List<MFGvouhcer>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            if (intConType == 0)
            {

                strSQL = "SELECT INV_PRODUCTION_MASTER.VOUCHER_NO INV_REF_NO_IN,INV_PRODUCTION_MASTER.INV_LOG_NO,INV_PRODUCTION_MASTER.VOUCHER_DATE INV_LOG_DATE,INV_PRODUCTION_MASTER.PROCESS_NAME INV_LOG_PROCESS_NAME, ";
                strSQL = strSQL + "ACC_BRANCH.BRANCH_ID,INV_PRODUCTION_MASTER.AMOUNT INV_LOG_AMOUNT,INV_PRODUCTION_MASTER.APP_STATUS,'' INV_REF_NO_OUT,'' INV_REF_NO_WASTAGE,'' INV_REF_NO_IN  ";
                strSQL=strSQL +" FROM INV_PRODUCTION_MASTER,ACC_BRANCH WHERE ACC_BRANCH.BRANCH_ID =INV_PRODUCTION_MASTER.BRANCH_ID ";
                strSQL = strSQL + " AND INV_PRODUCTION_MASTER.APP_STATUS= " + intAppStstus + "";
                    if (strFind == "Voucher Date")
                    {
                        strSQL = strSQL + "AND ";
                        strSQL = strSQL + "INV_PRODUCTION_MASTER.VOUCHER_DATE BETWEEN ";
                        strSQL = strSQL + " " + Utility.cvtSQLDateString(fdate) + " ";
                        strSQL = strSQL + "AND ";
                        strSQL = strSQL + "" + Utility.cvtSQLDateString(tdate) + "";
                    }
                    else if (strExpression != "" && strFind == "Voucher Number")
                    {
                        strSQL = strSQL + " AND INV_PRODUCTION_MASTER.VOUCHER_NO like '%" + strExpression + "'";
                    }
                    else if (strFind == "Stock Item")
                    {
                        strSQL = strSQL + " AND INV_PRODUCTION_MASTER..FG_ITEM= '" + strExpression + "' ";
                    }
                    else if (strFind == "Voucher Number")
                    {
                        strSQL = strSQL + "AND ";
                        strSQL = strSQL + "INV_PRODUCTION_MASTER.VOUCHER_NO like '%" + strExpression + "%'";
                    }
                    else
                    {
                        if (intAppStstus == 0)
                        {
                            strSQL = strSQL + "AND ";
                            strSQL = strSQL + "INV_PRODUCTION_MASTER.VOUCHER_DATE BETWEEN ";
                            strSQL = strSQL + " " + Utility.cvtSQLDateString(fdate) + " ";
                            strSQL = strSQL + "AND ";
                            strSQL = strSQL + "" + Utility.cvtSQLDateString(tdate) + "";
                        }
                    }
            }
            else
            {
                if (strFind != "Stock Item")
                {

                    strSQL = "SELECT l.INV_REF_NO_IN,l.INV_LOG_NO,l.INV_LOG_DATE,l.INV_LOG_PROCESS_NAME,l.BRANCH_ID,l.INV_LOG_AMOUNT,l.INV_REF_NO_OUT,l.INV_REF_NO_WASTAGE,l.INV_REF_NO_IN,0 APP_STATUS ";
                    strSQL = strSQL + "FROM INV_PRODUCTION_LOG l ";
                    strSQL = strSQL + " WHERE l.CONVERTTYPE= " + intConType + " ";
                }
                else
                {
                    strSQL = "SELECT l.INV_REF_NO_IN,l.INV_LOG_NO,l.INV_LOG_DATE,l.INV_LOG_PROCESS_NAME,l.BRANCH_ID,l.INV_LOG_AMOUNT,l.INV_REF_NO_OUT,l.INV_REF_NO_WASTAGE,l.INV_REF_NO_IN,0 APP_STATUS ";
                    strSQL = strSQL + "FROM INV_PRODUCTION_LOG l,INV_TRAN T where l.INV_REF_NO_IN =t.INV_REF_NO  ";
                    strSQL = strSQL + " AND l.CONVERTTYPE= " + intConType + " ";


                }
                if (strFind == "Voucher Date")
                {
                    strSQL = strSQL + "AND ";
                    strSQL = strSQL + "l.INV_LOG_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(fdate) + " ";
                    strSQL = strSQL + "AND ";
                    strSQL = strSQL + "" + Utility.cvtSQLDateString(tdate) + "";
                }
                else if (strExpression != "" && strFind == "Voucher Number")
                {
                    strSQL = strSQL + " AND l.INV_REF_NO_IN like '%" + strExpression + "'";
                }
                else if (strFind == "Stock Item")
                {
                    strSQL = strSQL + " AND t.STOCKITEM_NAME= '" + strExpression + "' ";
                }
                else if (strFind == "Voucher Number")
                {
                    strSQL = strSQL + "AND ";
                    strSQL = strSQL + "l.INV_REF_NO_IN like '%" + strExpression + "%'";
                }
                else
                {
                    strSQL = strSQL + "AND ";
                    strSQL = strSQL + "l.INV_LOG_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(fdate) + " ";
                    strSQL = strSQL + "AND ";
                    strSQL = strSQL + "" + Utility.cvtSQLDateString(tdate) + "";
                }
            }
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    MFGvouhcer ogrp = new MFGvouhcer();

                    ogrp.strVoucherNo = Utility.Mid(drGetGroup["INV_REF_NO_IN"].ToString(), 6, drGetGroup["INV_REF_NO_IN"].ToString().Length - 6);
                    ogrp.strBatch = drGetGroup["INV_LOG_NO"].ToString();
                    ogrp.strDate = Convert.ToDateTime(drGetGroup["INV_LOG_DATE"]).ToString("dd/MM/yyyy");
                    ogrp.strProcess = drGetGroup["INV_LOG_PROCESS_NAME"].ToString();
                    ogrp.strBranchId = drGetGroup["BRANCH_ID"].ToString();
                    ogrp.dblAmount = Utility.Val(drGetGroup["INV_LOG_AMOUNT"].ToString());
                    if (drGetGroup["INV_REF_NO_OUT"].ToString() != "")
                    {
                        ogrp.strRMRefNo = drGetGroup["INV_REF_NO_OUT"].ToString();
                    }
                    else
                    {
                        ogrp.strRMRefNo = "";
                    }
                    if (drGetGroup["INV_REF_NO_WASTAGE"].ToString() != "")
                    {
                        ogrp.strWmRefNo = drGetGroup["INV_REF_NO_WASTAGE"].ToString();
                    }
                    else
                    {
                        ogrp.strWmRefNo = "";
                    }

                    if (drGetGroup["INV_REF_NO_IN"].ToString() != "")
                    {
                        ogrp.strFgRefNo = drGetGroup["INV_REF_NO_IN"].ToString();
                    }
                    else
                    {
                        ogrp.strFgRefNo = "";
                    }
                    ogrp.intAppStatus = Convert.ToInt32(drGetGroup["APP_STATUS"].ToString());
                    oogrp.Add(ogrp);
                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return oogrp;
            }
        }

        public List<ManuProcess> mDisplayMFGVoucher(string strDeComID, string strRefNo)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<ManuProcess> oogrp = new List<ManuProcess>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            strSQL = "SELECT * FROM INV_PRODUCTION_LOG WHERE INV_REF_NO_IN = '" + strRefNo + "'";
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    ManuProcess ogrp = new ManuProcess();
                    ogrp.strLogDate = Convert.ToDateTime(drGetGroup["INV_LOG_DATE"]).ToString("dd/MM/yyyy");
                    ogrp.strProcessName = drGetGroup["INV_LOG_PROCESS_NAME"].ToString();
                    if (drGetGroup["INV_REF_NO_OUT"].ToString() != "")
                    {
                        ogrp.strRefNoRaw = drGetGroup["INV_REF_NO_OUT"].ToString();
                    }
                    else
                    {
                        ogrp.strRefNoRaw = "";
                    }
                    if (drGetGroup["INV_REF_NO_WASTAGE"].ToString() != "")
                    {
                        ogrp.strRefNoWastage = drGetGroup["INV_REF_NO_WASTAGE"].ToString();
                    }
                    else
                    {
                        ogrp.strRefNoWastage = "";
                    }
                    oogrp.Add(ogrp);
                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return oogrp;
            }
        }

        public List<MFGvouhcer> mDisplayProductionList(string strDeComID, string strRefNo)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<MFGvouhcer> oogrp = new List<MFGvouhcer>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            //strSQL = "SELECT * FROM INV_TRAN WHERE INV_REF_NO='" + strRefNo + "' And INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION + " ";
            strSQL = "SELECT INV_PRODUCTION_CHILD.INV_KEY,INV_PRODUCTION_MASTER.VOUCHER_NO,INV_PRODUCTION_MASTER.VOUCHER_DATE,INV_PRODUCTION_MASTER.INV_LOG_NO,INV_PRODUCTION_MASTER.BRANCH_ID, ";
            strSQL = strSQL + "INV_PRODUCTION_MASTER.CONSUMPTION_GODWNS_NAME,INV_PRODUCTION_MASTER.PROCESS_NAME,";
            strSQL = strSQL + "INV_PRODUCTION_MASTER.FG_ITEM,INV_PRODUCTION_MASTER.FG_SIZE,INV_PRODUCTION_MASTER.AMOUNT,INV_PRODUCTION_MASTER.APP_STATUS,";
            strSQL = strSQL + "INV_PRODUCTION_CHILD.TO_FG_GODWNS_NAME,INV_PRODUCTION_CHILD.STOCKITEM_NAME,INV_PRODUCTION_CHILD.QNTY,INV_PRODUCTION_CHILD.RATE,INV_PRODUCTION_CHILD.AMNT,INV_PRODUCTION_CHILD.PROCESS_TYPE ";
            strSQL = strSQL + ",INV_PRODUCTION_CHILD.STOCKITEM_BASEUNITS,INV_PRODUCTION_MASTER.SAMPLE_TO_FG,INV_PRODUCTION_MASTER.SAMPLE_TO_QC,INV_PRODUCTION_MASTER.NARRATION from INV_PRODUCTION_MASTER,INV_PRODUCTION_CHILD ";
            strSQL = strSQL + "WHERE INV_PRODUCTION_MASTER.VOUCHER_NO=INV_PRODUCTION_CHILD.VOUCHER_NO ";
            strSQL = strSQL + "AND INV_PRODUCTION_MASTER.VOUCHER_NO='" + strRefNo + "' ";
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    MFGvouhcer ogrp = new MFGvouhcer();
                    ogrp.strVoucherNo = drGetGroup["VOUCHER_NO"].ToString();
                    ogrp.strBillKey = drGetGroup["INV_KEY"].ToString();
                    ogrp.strDate = drGetGroup["VOUCHER_DATE"].ToString();
                    ogrp.strBatch = drGetGroup["INV_LOG_NO"].ToString();
                    ogrp.strLocation = drGetGroup["CONSUMPTION_GODWNS_NAME"].ToString();
                    ogrp.strProcess  = drGetGroup["PROCESS_NAME"].ToString();
                    ogrp.strUOM = drGetGroup["STOCKITEM_BASEUNITS"].ToString();
                    ogrp.strfgItem = drGetGroup["FG_ITEM"].ToString();
                    ogrp.strBatchSize = drGetGroup["FG_SIZE"].ToString();
                    ogrp.dblAmount  = Convert.ToDouble( drGetGroup["AMOUNT"].ToString());
                    
                    //ogrp.strBranchId = drGetGroup["FG_ITEM"].ToString();

                    ogrp.strBranchId = drGetGroup["BRANCH_ID"].ToString();

                    if (drGetGroup["TO_FG_GODWNS_NAME"].ToString() != "")
                    {
                        ogrp.strTLocation = drGetGroup["TO_FG_GODWNS_NAME"].ToString();
                    }
                    else
                    {
                        ogrp.strTLocation = "";
                    }
                    if (drGetGroup["STOCKITEM_NAME"].ToString() != "")
                    {
                        ogrp.strItemName = drGetGroup["STOCKITEM_NAME"].ToString();
                    }
                    else
                    {
                        ogrp.strItemName = "";
                    }
                    if (drGetGroup["SAMPLE_TO_FG"].ToString() != "")
                    {
                        ogrp.dblSampleFG = Convert.ToDouble( drGetGroup["SAMPLE_TO_FG"].ToString());
                    }
                    else
                    {
                        ogrp.dblSampleFG = 0;
                    }

                    if (drGetGroup["SAMPLE_TO_QC"].ToString() != "")
                    {
                        ogrp.dblSampleQC = Convert.ToDouble(drGetGroup["SAMPLE_TO_QC"].ToString());
                    }
                    else
                    {
                        ogrp.dblSampleQC = 0;
                    }
                    if (drGetGroup["NARRATION"].ToString() != "")
                    {
                        ogrp.strNarration = drGetGroup["NARRATION"].ToString();
                    }
                    else
                    {
                        ogrp.strNarration = "";
                    }
                    ogrp.strUOM = drGetGroup["STOCKITEM_BASEUNITS"].ToString();
                    ogrp.dblQnty = Math.Abs(Utility.Val(drGetGroup["QNTY"].ToString()));
                    ogrp.dblReceipe = Math.Abs(Utility.Val(drGetGroup["QNTY"].ToString()));
                    ogrp.dblrate = Math.Abs(Utility.Val(drGetGroup["RATE"].ToString()));
                    ogrp.dblAmount = Math.Abs(Utility.Val(drGetGroup["AMNT"].ToString()));
                    ogrp.intProcessType=Convert.ToInt32(drGetGroup["PROCESS_TYPE"].ToString());

                    oogrp.Add(ogrp);
                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return oogrp;
            }
        }
        public List<MFGvouhcer> mDisplayRMVoucher(string strDeComID, string strRefNo)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<MFGvouhcer> oogrp = new List<MFGvouhcer>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            strSQL = "SELECT * FROM INV_TRAN WHERE INV_REF_NO='" + strRefNo + "' And INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION + " ";
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    MFGvouhcer ogrp = new MFGvouhcer();
                    ogrp.strBranchId = drGetGroup["BRANCH_ID"].ToString();
                    if (drGetGroup["GODOWNS_NAME"].ToString() != "")
                    {
                        ogrp.strLocation = drGetGroup["GODOWNS_NAME"].ToString();
                    }
                    else
                    {
                        ogrp.strLocation = "";
                    }
                    if (drGetGroup["STOCKITEM_NAME"].ToString() != "")
                    {
                        ogrp.strItemName = drGetGroup["STOCKITEM_NAME"].ToString();
                    }
                    else
                    {
                        ogrp.strItemName = "";
                    }
                    ogrp.strUOM = drGetGroup["INV_UOM"].ToString();
                    ogrp.dblQnty = Math.Abs(Utility.Val(drGetGroup["INV_TRAN_QUANTITY"].ToString()));
                    ogrp.dblrate = Math.Abs(Utility.Val(drGetGroup["INV_TRAN_RATE"].ToString()));
                    ogrp.dblAmount = Math.Abs(Utility.Val(drGetGroup["INV_TRAN_AMOUNT"].ToString()));


                    oogrp.Add(ogrp);
                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return oogrp;
            }
        }
        public List<MFGvouhcer> mDisplayDmVoucher(string strDeComID, string strRefNo)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<MFGvouhcer> oogrp = new List<MFGvouhcer>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            strSQL = "SELECT * FROM INV_TRAN WHERE INV_REF_NO='" + strRefNo + "' And INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE + " ";
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    MFGvouhcer ogrp = new MFGvouhcer();
                    ogrp.strBranchId = drGetGroup["BRANCH_ID"].ToString();
                    if (drGetGroup["GODOWNS_NAME"].ToString() != "")
                    {
                        ogrp.strLocation = drGetGroup["GODOWNS_NAME"].ToString();
                    }
                    else
                    {
                        ogrp.strLocation = "";
                    }
                    if (drGetGroup["STOCKITEM_NAME"].ToString() != "")
                    {
                        ogrp.strItemName = drGetGroup["STOCKITEM_NAME"].ToString();
                    }
                    else
                    {
                        ogrp.strItemName = "";
                    }
                    ogrp.strUOM = drGetGroup["INV_UOM"].ToString();
                    ogrp.dblQnty = Math.Abs(Utility.Val(drGetGroup["INV_TRAN_QUANTITY"].ToString()));
                    ogrp.dblrate = Math.Abs(Utility.Val(drGetGroup["INV_TRAN_RATE"].ToString()));
                    ogrp.dblAmount = Math.Abs(Utility.Val(drGetGroup["INV_TRAN_AMOUNT"].ToString()));


                    oogrp.Add(ogrp);
                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return oogrp;
            }
        }
        public List<MFGvouhcer> mDisplayFgVoucher(string strDeComID, string strRefNo)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<MFGvouhcer> oogrp = new List<MFGvouhcer>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            strSQL = "SELECT * FROM INV_TRAN WHERE INV_REF_NO='" + strRefNo + "' And INV_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_VOUCHER + " ";
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    MFGvouhcer ogrp = new MFGvouhcer();
                    ogrp.strBranchId = drGetGroup["BRANCH_ID"].ToString();
                    if (drGetGroup["GODOWNS_NAME"].ToString() != "")
                    {
                        ogrp.strLocation = drGetGroup["GODOWNS_NAME"].ToString();
                    }
                    else
                    {
                        ogrp.strLocation = "";
                    }
                    if (drGetGroup["STOCKITEM_NAME"].ToString() != "")
                    {
                        ogrp.strItemName = drGetGroup["STOCKITEM_NAME"].ToString();
                    }
                    else
                    {
                        ogrp.strItemName = "";
                    }
                    ogrp.strUOM = drGetGroup["INV_UOM"].ToString();
                    ogrp.dblQnty = Utility.Val(drGetGroup["INV_TRAN_QUANTITY"].ToString());
                    ogrp.dblrate = Utility.Val(drGetGroup["INV_TRAN_RATE"].ToString());
                    ogrp.dblAmount = Utility.Val(drGetGroup["INV_TRAN_AMOUNT"].ToString());
                    ogrp.dblCostPercent = Utility.Val(drGetGroup["FG_COST_PERCENT"].ToString());

                    oogrp.Add(ogrp);
                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return oogrp;
            }
        }


        #endregion
        #region "Ivalue"
        public List<RStockInformation> mItemMasterForvalue(string strDeComID, string strFdate, string strTDate, string strString, string strSelction,
                                              int intZeroQntySuppress, string strBranchID, string strGroup)
        {
            string strSQL = null;
            double dblrate = 0;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;
                List<RStockInformation> ooAccLedger = new List<RStockInformation>();
                if (strSelction == "I")
                {
                    if (strGroup == "Finished Goods")
                    {
                        strSQL = "ALTER VIEW INV_TRAN_OUTWARD_RATE_QRY AS ";
                        strSQL = strSQL + "SELECT STOCKITEM_NAME, ISNULL(SUM(BILL_NET_AMOUNT), 0) AS BILL_NET_AMOUNT, ISNULL(SUM(BILL_QUANTITY), 0) AS BILL_QUANTITY, ";
                        strSQL = strSQL + "(case when SUM(BILL_QUANTITY) > 0 then round(SUM(BILL_NET_AMOUNT)/SUM(BILL_QUANTITY),2) else 0 end) BIL_RATE ";
                        strSQL = strSQL + "FROM ACC_BILL_TRAN ";
                        strSQL = strSQL + "WHERE  COMP_VOUCHER_DATE < ";
                        strSQL = strSQL + " " + Utility.cvtSQLDateString(strTDate) + " ";
                        if (strGroup == "Finished Goods")
                        {
                            strSQL = strSQL + " AND  COMP_VOUCHER_TYPE IN (16) ";
                        }
                        else
                        {
                            strSQL = strSQL + " AND  COMP_VOUCHER_TYPE =33 ";
                        }
                        if (strBranchID != "")
                        {
                            strSQL = strSQL + " AND BRANCH_ID = '" + strBranchID + "' ";
                        }
                        strSQL = strSQL + "GROUP BY STOCKITEM_NAME ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }


                    strSQL = "ALTER VIEW INV_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(INV_TRAN_QUANTITY) AS OPN_QUANTITY,";
                    strSQL = strSQL + "SUM(INV_TRAN_AMOUNT) AS OPN_AMOUNT,0 AS INWARD_QUANTITY, 0 AS INWARD_AMOUNT,";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY,0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT  ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE < " + Utility.cvtSQLDateString(strFdate) + ")  ";
                    //strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + " AND BRANCH_ID = '" + strBranchID + "' ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT, SUM(INV_TRAN_QUANTITY) AS INWARD_QUANTITY, SUM(INV_TRAN_AMOUNT) AS INWARD_AMOUNT, ";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY, 0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    //strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + " AND BRANCH_ID = '" + strBranchID + "' ";
                    strSQL = strSQL + "AND INV_INOUT_FLAG='I' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT,0 INWARD_QUANTITY,0 INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(INV_TRAN_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + " AND BRANCH_ID = '" + strBranchID + "' ";
                    //strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "AND INV_INOUT_FLAG='O' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "ALTER VIEW INV_OPENING_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(OPN_QUANTITY) AS INV_TRAN_QUANTITY, SUM(OPN_AMOUNT) AS INV_TRAN_AMOUNT,";
                    strSQL = strSQL + "SUM(INWARD_QUANTITY) AS INWARD_QUANTITY, SUM(INWARD_AMOUNT) AS INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT,SUM(OPN_QUANTITY+INWARD_QUANTITY+OUTWARD_QUANTITY) CLS , ";
                    strSQL = strSQL + "SUM(OPN_AMOUNT+INWARD_AMOUNT+OUTWARD_COST_AMOUNT) CLSAMNT  ";
                    strSQL = strSQL + "FROM INV_TRAN_QRY ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    cmdInsert.Transaction.Commit();
                    strSQL = "SELECT ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY, INV_OPENING_TRAN_QRY.INV_TRAN_AMOUNT, INV_OPENING_TRAN_QRY.INWARD_QUANTITY, INV_OPENING_TRAN_QRY.INWARD_AMOUNT , INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY, ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.OUTWARD_SALES_AMOUNT, INV_OPENING_TRAN_QRY.OUTWARD_COST_AMOUNT,INV_OPENING_TRAN_QRY.CLS,INV_OPENING_TRAN_QRY.CLSAMNT , ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKITEM_NAME, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4, ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5, ";
                    strSQL = strSQL + "INV_STOCKITEM.STOCKITEM_BASEUNITS, ";
                    strSQL = strSQL + "INV_TRAN_OUTWARD_RATE_QRY.BILL_NET_AMOUNT, ISNULL(INV_TRAN_OUTWARD_RATE_QRY.BILL_QUANTITY,0) BILL_QUANTITY, ";
                    strSQL = strSQL + "INV_UNIT_MEASUREMENT.INV_UNIT_DECIMAL_NO,ISNULL(INV_TRAN_OUTWARD_RATE_QRY.BIL_RATE,0) BIL_RATE ";
                    strSQL = strSQL + "FROM INV_OPENING_TRAN_QRY INV_OPENING_TRAN_QRY INNER JOIN INV_STOCKITEM INV_STOCKITEM ";
                    strSQL = strSQL + "ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME INNER JOIN INV_STOCKITEM_LEVEL ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM_LEVEL.STOCKITEM_NAME LEFT OUTER JOIN ";
                    strSQL = strSQL + "INV_TRAN_OUTWARD_RATE_QRY INV_TRAN_OUTWARD_RATE_QRY ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_TRAN_OUTWARD_RATE_QRY.STOCKITEM_NAME INNER JOIN ";
                    strSQL = strSQL + "INV_UNIT_MEASUREMENT INV_UNIT_MEASUREMENT ON INV_STOCKITEM.STOCKITEM_BASEUNITS = INV_UNIT_MEASUREMENT.UNIT_SYMBOL ";
                    if (strString != "")
                    {
                        strSQL = strSQL + "WHERE ";
                        strSQL = strSQL + "(INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1 IN (" + strString + ") OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2 IN (" + strString + ") ";
                        strSQL = strSQL + " OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3 IN (" + strString + ") OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4 IN (" + strString + ") ";
                        strSQL = strSQL + " OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5 IN (" + strString + ")) ";
                        // strSQL = strSQL + " WHERE INV_STOCKITEM.STOCKITEM_NAME IN(" + strString + ")";
                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }
                    else
                    {
                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }
                    //strSQL = strSQL + " and INV_STOCKITEM_LEVEL.STOCKITEM_NAME like '%Hemoride%' ";
                    strSQL = strSQL + "ORDER BY INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5,INV_STOCKITEM_LEVEL.STOCKITEM_NAME ";


                    cmdInsert.CommandText = strSQL;
                    cmdInsert.Connection = gcnMain;
                    dr = cmdInsert.ExecuteReader();
                    if (strGroup == "Finished Goods")
                    {
                        while (dr.Read())
                        {
                            RStockInformation oLedg = new RStockInformation();
                            oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();

                            if (dr["BIL_RATE"].ToString() != "")
                            {
                                dblrate = Math.Round(Convert.ToDouble(dr["BIL_RATE"].ToString()), 2);
                            }
                            else
                            {
                                dblrate = 0;
                            }
                            oLedg.strGroupParent = dr["STOCKGROUP_LEVEL_1"].ToString();
                            oLedg.strGroupPrimary = dr["STOCKGROUP_LEVEL_2"].ToString();
                            oLedg.strAltUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                            oLedg.strGroupName = dr["STOCKGROUP_LEVEL_3"].ToString();
                            if (dblrate > 0)
                            {
                                oLedg.dblOpnQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                                oLedg.dblOpnAmnt = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString()) * dblrate;
                                oLedg.dblInwQty = Convert.ToDouble(dr["INWARD_QUANTITY"].ToString());
                                oLedg.dblInwAmount = Convert.ToDouble(dr["INWARD_QUANTITY"].ToString()) * dblrate;
                                oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString()));
                                oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString())) * dblrate;
                                oLedg.dblclsQty = Convert.ToDouble(dr["CLS"].ToString());
                                oLedg.dblclsAmnt = Convert.ToDouble(dr["CLS"].ToString()) * dblrate;
                                ooAccLedger.Add(oLedg);
                            }
                            else if (Convert.ToDouble(dr["INWARD_AMOUNT"].ToString()) > 0)
                            {
                                oLedg.dblOpnQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                                oLedg.dblOpnAmnt = Convert.ToDouble(dr["INV_TRAN_AMOUNT"].ToString());
                                oLedg.dblInwQty = Convert.ToDouble(dr["INWARD_QUANTITY"].ToString());
                                oLedg.dblInwAmount = Convert.ToDouble(dr["INWARD_AMOUNT"].ToString());
                                oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString()));
                                oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_SALES_AMOUNT"].ToString()));
                                oLedg.dblclsQty = Convert.ToDouble(dr["CLS"].ToString());
                                oLedg.dblclsAmnt = Convert.ToDouble(dr["CLSAMNT"].ToString());
                                ooAccLedger.Add(oLedg);
                            }
                            else
                            {

                                oLedg.dblOpnQty = 0;
                                oLedg.dblOpnAmnt = 0;
                                oLedg.dblInwQty = 0;
                                oLedg.dblInwAmount = 0;
                                oLedg.dblOutWardQty = 0;
                                oLedg.dblOutwardAmnt = 0;
                                oLedg.dblclsQty = 0;
                                oLedg.dblclsAmnt = 0;
                                ooAccLedger.Add(oLedg);
                            }
                        }
                    }
                    if (strGroup != "Finished Goods")
                    {
                        while (dr.Read())
                        {
                            RStockInformation oLedg = new RStockInformation();
                            oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                            oLedg.strGroupParent = dr["STOCKGROUP_LEVEL_1"].ToString();
                            oLedg.strGroupPrimary = dr["STOCKGROUP_LEVEL_2"].ToString();
                            oLedg.strAltUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                            oLedg.strGroupName = dr["STOCKGROUP_LEVEL_3"].ToString();
                            oLedg.dblOpnQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                            oLedg.dblOpnAmnt = Convert.ToDouble(dr["INV_TRAN_AMOUNT"].ToString());
                            oLedg.dblInwQty = Convert.ToDouble(dr["INWARD_QUANTITY"].ToString());
                            oLedg.dblInwAmount = Convert.ToDouble(dr["INWARD_AMOUNT"].ToString());
                            oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString()));
                            oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_COST_AMOUNT"].ToString()));
                            oLedg.dblclsQty = Convert.ToDouble(dr["CLS"].ToString());
                            oLedg.dblclsAmnt = Convert.ToDouble(dr["CLSAMNT"].ToString());
                            ooAccLedger.Add(oLedg);
                        }
                    }


                    if (!dr.HasRows)
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strItemName = "";
                        oLedg.strGroupParent = "";
                        oLedg.strGroupPrimary = "";
                        oLedg.strAltUnit = "";
                        oLedg.strGroupName = "";
                        oLedg.dblOpnQty = 0;
                        oLedg.dblOpnAmnt = 0;
                        oLedg.dblInwQty = 0;
                        oLedg.dblInwAmount = 0;
                        oLedg.dblOutWardQty = 0;
                        oLedg.dblOutwardAmnt = 0;
                        oLedg.dblclsQty = 0;
                        oLedg.dblclsAmnt = 0;
                        ooAccLedger.Add(oLedg);
                    }
                    dr.Close();
                }
                else
                {
                    if (strGroup == "Finished Goods")
                    {
                        strSQL = "ALTER VIEW INV_TRAN_PUR_INWARD_QRY AS ";
                        strSQL = strSQL + "SELECT STOCKITEM_NAME, ISNULL(SUM(INWARD_AMOUNT), 0) AS BILL_NET_AMOUNT, ISNULL(SUM(INWARD_QUANTITY), 0) AS BILL_QUANTITY ";
                        strSQL = strSQL + " ,Round(ISNULL(SUM(INWARD_AMOUNT), 0) /ISNULL(SUM(INWARD_QUANTITY), 0),2) AS BIL_RATE";
                        strSQL = strSQL + " FROM INV_TRAN ";
                        //strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                        //strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                        //strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                        strSQL = strSQL + "WHERE  INV_DATE < ";
                        strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                        strSQL = strSQL + " AND (INV_VOUCHER_TYPE =33 )";
                        //strSQL = strSQL + " AND (INV_VOUCHER_TYPE <> 23) AND (INV_VOUCHER_TYPE in (27,29))";
                        if (strBranchID != "")
                        {
                            strSQL = strSQL + " AND BRANCH_ID = '" + strBranchID + "' ";
                        }

                        strSQL = strSQL + "GROUP BY STOCKITEM_NAME ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }

                    strSQL = "ALTER VIEW INV_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(INV_TRAN_QUANTITY) AS OPN_QUANTITY,";
                    strSQL = strSQL + "SUM(INV_TRAN_AMOUNT) AS OPN_AMOUNT,0 AS INWARD_QUANTITY, 0 AS INWARD_AMOUNT,";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY,0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT  ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE < " + Utility.cvtSQLDateString(strFdate) + ")  ";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_PHYSICAL + " ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT, SUM(INV_TRAN_QUANTITY) AS INWARD_QUANTITY, SUM(INV_TRAN_AMOUNT) AS INWARD_AMOUNT, ";
                    strSQL = strSQL + "0 OUTWARD_QUANTITY, 0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_PHYSICAL + " ";
                    strSQL = strSQL + "AND INV_INOUT_FLAG='I' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    strSQL = strSQL + "Union All ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT,0 INWARD_QUANTITY,0 INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(INV_TRAN_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT ";
                    strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                    strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                    strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_TRANSFER + " ";
                    //strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_PHYSICAL + " ";
                    strSQL = strSQL + "AND INV_INOUT_FLAG='O' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "ALTER VIEW INV_OPENING_TRAN_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(OPN_QUANTITY) AS INV_TRAN_QUANTITY, SUM(OPN_AMOUNT) AS INV_TRAN_AMOUNT,";
                    strSQL = strSQL + "SUM(INWARD_QUANTITY) AS INWARD_QUANTITY, SUM(INWARD_AMOUNT) AS INWARD_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,";
                    strSQL = strSQL + "SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT,SUM(OPN_QUANTITY+INWARD_QUANTITY+OUTWARD_QUANTITY) CLS , ";
                    strSQL = strSQL + "SUM(OPN_AMOUNT+OUTWARD_COST_AMOUNT) CLSAMNT  ";
                    strSQL = strSQL + "FROM INV_TRAN_QRY ";
                    strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();

                    if (strGroup == "Finished Goods")
                    {
                        strSQL = "SELECT ";
                        strSQL = strSQL + "INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY, INV_OPENING_TRAN_QRY.INV_TRAN_AMOUNT, INV_OPENING_TRAN_QRY.INWARD_QUANTITY, INV_OPENING_TRAN_QRY.INWARD_QUANTITY , INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY, ";
                        strSQL = strSQL + "INV_OPENING_TRAN_QRY.OUTWARD_SALES_AMOUNT, INV_OPENING_TRAN_QRY.OUTWARD_COST_AMOUNT,INV_OPENING_TRAN_QRY.CLS,INV_OPENING_TRAN_QRY.CLSAMNT , ";
                        strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKITEM_NAME, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4, ";
                        strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5, ";
                        strSQL = strSQL + "INV_STOCKITEM.STOCKITEM_BASEUNITS, ";
                        strSQL = strSQL + "INV_TRAN_PUR_INWARD_QRY.BILL_NET_AMOUNT, INV_TRAN_PUR_INWARD_QRY.BILL_QUANTITY, ";
                        strSQL = strSQL + "INV_UNIT_MEASUREMENT.INV_UNIT_DECIMAL_NO,INV_TRAN_PUR_INWARD_QRY.BIL_RATE ";
                        strSQL = strSQL + "FROM ";
                        strSQL = strSQL + "INV_OPENING_TRAN_QRY INV_OPENING_TRAN_QRY INNER JOIN INV_STOCKITEM INV_STOCKITEM ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME INNER JOIN INV_STOCKITEM_LEVEL INV_STOCKITEM_LEVEL ON ";
                        strSQL = strSQL + "INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM_LEVEL.STOCKITEM_NAME INNER JOIN INV_TRAN_PUR_INWARD_QRY INV_TRAN_PUR_INWARD_QRY ON ";
                        strSQL = strSQL + "INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_TRAN_PUR_INWARD_QRY.STOCKITEM_NAME INNER JOIN INV_UNIT_MEASUREMENT INV_UNIT_MEASUREMENT ON INV_STOCKITEM.STOCKITEM_BASEUNITS = INV_UNIT_MEASUREMENT.UNIT_SYMBOL ";
                        //strSQL = strSQL + " WHERE INV_STOCKITEM_LEVEL.STOCKITEM_NAME='C.M' ";

                        if (strString != "")
                        {
                            strSQL = strSQL + "WHERE ";
                            strSQL = strSQL + "(INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1 IN (" + strString + ") OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2 IN (" + strString + ") ";
                            strSQL = strSQL + " OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3 IN (" + strString + ") OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4 IN (" + strString + ") ";
                            strSQL = strSQL + " OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5 IN (" + strString + ")) ";
                            // strSQL = strSQL + " WHERE INV_STOCKITEM.STOCKITEM_NAME IN(" + strString + ")";
                            if (intZeroQntySuppress > 0)
                            {
                                strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                            }
                        }
                        else
                        {
                            if (intZeroQntySuppress > 0)
                            {
                                strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                            }
                        }

                        strSQL = strSQL + "ORDER BY INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, ";
                        strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5,INV_STOCKITEM_LEVEL.STOCKITEM_NAME ASC";


                        cmdInsert.CommandText = strSQL;
                        cmdInsert.Connection = gcnMain;
                        dr = cmdInsert.ExecuteReader();

                        while (dr.Read())
                        {


                            RStockInformation oLedg = new RStockInformation();
                            dblrate = Math.Round(Convert.ToDouble(dr["BIL_RATE"].ToString()), 2);
                            oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                            //oLedg.strUnit = dr["STOCKITEM_NAME"].ToString();
                            oLedg.strGroupParent = dr["STOCKGROUP_LEVEL_1"].ToString();
                            oLedg.strGroupPrimary = dr["STOCKGROUP_LEVEL_2"].ToString();
                            oLedg.strAltUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                            oLedg.strGroupName = dr["STOCKGROUP_LEVEL_3"].ToString();
                            if (dblrate > 0)
                            {
                                oLedg.dblOpnQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                                oLedg.dblOpnAmnt = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString()) * dblrate;
                                oLedg.dblInwQty = Convert.ToDouble(dr["INWARD_QUANTITY"].ToString());
                                if (Convert.ToDouble(dr["INWARD_QUANTITY"].ToString()) > 0)
                                {
                                    oLedg.dblInwAmount = Convert.ToDouble(dr["INWARD_QUANTITY"].ToString()) * dblrate;
                                }
                                else
                                {
                                    oLedg.dblInwAmount = 0;
                                }
                                oLedg.dblOutWardQty = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString()));
                                oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString())) * dblrate;
                                oLedg.dblclsQty = Convert.ToDouble(dr["CLS"].ToString());
                                //oLedg.dblclsAmnt = (Convert.ToDouble(dr["CLSAMNT"].ToString()) + Convert.ToDouble(dr["BILL_NET_AMOUNT"].ToString())) * dblrate;
                                oLedg.dblclsAmnt = Convert.ToDouble(dr["CLS"].ToString()) * dblrate;
                            }
                            else
                            {
                                oLedg.dblOpnQty = 0;
                                oLedg.dblOpnAmnt = 0;
                                oLedg.dblInwQty = 0;
                                if (Convert.ToDouble(dr["INWARD_QUANTITY"].ToString()) > 0)
                                {
                                    oLedg.dblInwAmount = 0;
                                }
                                else
                                {
                                    oLedg.dblInwAmount = 0;
                                }
                                oLedg.dblOutWardQty = 0;
                                oLedg.dblOutwardAmnt = 0;
                                oLedg.dblclsQty = 0;
                                oLedg.dblclsAmnt = 0;
                            }
                            ooAccLedger.Add(oLedg);
                        }
                        if (!dr.HasRows)
                        {
                            RStockInformation oLedg = new RStockInformation();
                            oLedg.strItemName = "";
                            oLedg.strGroupParent = "";
                            oLedg.strGroupPrimary = "";
                            oLedg.strAltUnit = "";
                            oLedg.strGroupName = "";
                            oLedg.dblOpnQty = 0;
                            oLedg.dblOpnAmnt = 0;
                            oLedg.dblInwQty = 0;
                            oLedg.dblInwAmount = 0;
                            oLedg.dblOutWardQty = 0;
                            oLedg.dblOutwardAmnt = 0;
                            oLedg.dblclsQty = 0;
                            oLedg.dblclsAmnt = 0;
                            ooAccLedger.Add(oLedg);
                        }
                        dr.Close();
                    }

                    if (strGroup != "Finished Goods")
                    {
                        strSQL = "SELECT ";
                        strSQL = strSQL + "INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY, INV_OPENING_TRAN_QRY.INV_TRAN_AMOUNT, INV_OPENING_TRAN_QRY.INWARD_QUANTITY, INV_OPENING_TRAN_QRY.INWARD_AMOUNT, INV_OPENING_TRAN_QRY.INWARD_QUANTITY , INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY, ";
                        strSQL = strSQL + "INV_OPENING_TRAN_QRY.OUTWARD_SALES_AMOUNT, INV_OPENING_TRAN_QRY.OUTWARD_COST_AMOUNT,INV_OPENING_TRAN_QRY.CLS,INV_OPENING_TRAN_QRY.CLSAMNT , ";
                        strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKITEM_NAME, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4, ";
                        strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5, ";
                        strSQL = strSQL + "INV_STOCKITEM.STOCKITEM_BASEUNITS, ";
                        //strSQL = strSQL + "INV_TRAN_PUR_INWARD_QRY.BILL_NET_AMOUNT, INV_TRAN_PUR_INWARD_QRY.BILL_QUANTITY, ";
                        strSQL = strSQL + "INV_UNIT_MEASUREMENT.INV_UNIT_DECIMAL_NO ";
                        //,INV_TRAN_PUR_INWARD_QRY.BIL_RATE ";
                        strSQL = strSQL + "FROM ";
                        strSQL = strSQL + "INV_OPENING_TRAN_QRY INV_OPENING_TRAN_QRY INNER JOIN INV_STOCKITEM INV_STOCKITEM ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME INNER JOIN INV_STOCKITEM_LEVEL INV_STOCKITEM_LEVEL ON ";
                        strSQL = strSQL + "INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM_LEVEL.STOCKITEM_NAME LEFT JOIN INV_TRAN_PUR_INWARD_QRY INV_TRAN_PUR_INWARD_QRY ON ";
                        strSQL = strSQL + "INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_TRAN_PUR_INWARD_QRY.STOCKITEM_NAME INNER JOIN INV_UNIT_MEASUREMENT INV_UNIT_MEASUREMENT ON INV_STOCKITEM.STOCKITEM_BASEUNITS = INV_UNIT_MEASUREMENT.UNIT_SYMBOL ";
                        //strSQL = strSQL + " WHERE INV_STOCKITEM_LEVEL.STOCKITEM_NAME='C.M' ";

                        if (strString != "")
                        {
                            strSQL = strSQL + "WHERE ";
                            strSQL = strSQL + "(INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1 IN (" + strString + ") OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2 IN (" + strString + ") ";
                            strSQL = strSQL + " OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3 IN (" + strString + ") OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4 IN (" + strString + ") ";
                            strSQL = strSQL + " OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5 IN (" + strString + ")) ";
                            // strSQL = strSQL + " WHERE INV_STOCKITEM.STOCKITEM_NAME IN(" + strString + ")";
                            if (intZeroQntySuppress > 0)
                            {
                                strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                            }
                        }
                        else
                        {
                            if (intZeroQntySuppress > 0)
                            {
                                strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                            }
                        }

                        strSQL = strSQL + "ORDER BY INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, ";
                        strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5,INV_STOCKITEM_LEVEL.STOCKITEM_NAME ASC";


                        cmdInsert.CommandText = strSQL;
                        cmdInsert.Connection = gcnMain;
                        dr = cmdInsert.ExecuteReader();

                        while (dr.Read())
                        {

                            RStockInformation oLedg = new RStockInformation();

                            oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                            //oLedg.strUnit = dr["STOCKITEM_NAME"].ToString();
                            oLedg.strGroupParent = dr["STOCKGROUP_LEVEL_1"].ToString();
                            oLedg.strGroupPrimary = dr["STOCKGROUP_LEVEL_2"].ToString();
                            oLedg.strAltUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                            oLedg.strGroupName = dr["STOCKGROUP_LEVEL_3"].ToString();

                            oLedg.dblOpnQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                            oLedg.dblOpnAmnt = Convert.ToDouble(dr["INV_TRAN_AMOUNT"].ToString());
                            oLedg.dblInwQty = Convert.ToDouble(dr["INWARD_QUANTITY"].ToString());
                            if (Convert.ToDouble(dr["INWARD_AMOUNT"].ToString()) > 0)
                            {
                                oLedg.dblInwAmount = Convert.ToDouble(dr["INWARD_AMOUNT"].ToString());
                            }
                            else
                            {
                                oLedg.dblInwAmount = 0;
                            }
                            if (Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString()) > 0)
                            {
                                oLedg.dblOutWardQty = Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString());
                            }
                            else
                            {
                                oLedg.dblOutWardQty = 0;
                            }

                            oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_COST_AMOUNT"].ToString()));
                            oLedg.dblclsQty = Convert.ToDouble(dr["CLS"].ToString());
                            //oLedg.dblclsAmnt = (Convert.ToDouble(dr["CLSAMNT"].ToString()) + Convert.ToDouble(dr["BILL_NET_AMOUNT"].ToString())) * dblrate;
                            oLedg.dblclsAmnt = Convert.ToDouble(dr["CLSAMNT"].ToString());
                            ooAccLedger.Add(oLedg);
                        }

                        if (!dr.HasRows)
                        {
                            RStockInformation oLedg = new RStockInformation();
                            oLedg.strItemName = "";
                            oLedg.strGroupParent = "";
                            oLedg.strGroupPrimary = "";
                            oLedg.strAltUnit = "";
                            oLedg.strGroupName = "";
                            oLedg.dblOpnQty = 0;
                            oLedg.dblOpnAmnt = 0;
                            oLedg.dblInwQty = 0;
                            oLedg.dblInwAmount = 0;
                            oLedg.dblOutWardQty = 0;
                            oLedg.dblOutwardAmnt = 0;
                            oLedg.dblclsQty = 0;
                            oLedg.dblclsAmnt = 0;
                            ooAccLedger.Add(oLedg);
                        }
                        dr.Close();
                    }

                }
                gcnMain.Close();
                return ooAccLedger;
            }

        }
        #endregion
        #region "Credit Limit"
        //public List<RCreditLimit> mGetCreditLimit(string strDeComID, string strBranchID, string strdate1, string strdate2, string strdate3,
        //                                                string strdate4, string strlastdate, string strstring, int Intmode, string vstrUserName)
        //{
        //    string strSQL = null;
        //    connstring = Utility.SQLConnstringComSwitch(strDeComID);

        //    using (SqlConnection gcnMain = new SqlConnection(connstring))
        //    {
        //        if (gcnMain.State == ConnectionState.Open)
        //        {
        //            gcnMain.Close();
        //        }
        //        gcnMain.Open();
        //        SqlDataReader dr;
        //        SqlCommand cmdInsert = new SqlCommand();
        //        SqlTransaction myTrans;
        //        myTrans = gcnMain.BeginTransaction();
        //        cmdInsert.Connection = gcnMain;
        //        cmdInsert.Transaction = myTrans;

        //        strSQL = "DELETE FROM ACC_SAL_CR_LIMIT_TEMP ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();

        //        List<RCreditLimit> oooSamplePrint = new List<RCreditLimit>();

        //        strSQL = "INSERT INTO ACC_SAL_CR_LIMIT_TEMP ";
        //        strSQL = strSQL + "(LEDGER_NAME, AREA_NAME,DIVISION_NAME,ZONE_NAME, CLOSING_BAL_1) ";
        //        strSQL = strSQL + "SELECT tb1.LEDGER_NAME_MERZE ,tb1.LEDGER_PARENT_GROUP,tb1.DIVISION,tb1.ZONE, tb1.LEDGER_OPENING_BALANCE + ((CASE WHEN tb2.TOTAL_CREDIT IS NULL THEN 0 ELSE tb2.TOTAL_CREDIT END) - (CASE WHEN tb2.TOTAL_DEBIT IS NULL ";
        //        strSQL = strSQL + "THEN 0 ELSE tb2.TOTAL_DEBIT END)) AS vvv ";
        //        strSQL = strSQL + "FROM (SELECT ACC_LEDGER.LEDGER_PARENT_GROUP, ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_OPENING_BALANCE, ACC_LEDGER.LEDGER_NAME, ACC_LEDGER_Z_D_A.DIVISION, ";
        //        strSQL = strSQL + "ACC_LEDGER_Z_D_A.ZONE FROM  ACC_LEDGER_Z_D_A INNER JOIN ACC_LEDGER ON ACC_LEDGER_Z_D_A.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME RIGHT OUTER JOIN ";
        //        strSQL = strSQL + "SALES_CREDIT_LIMIT AS CL ON ACC_LEDGER.LEDGER_NAME = CL.LEDGER_NAME LEFT OUTER JOIN SALES_CREDIT_LIMIT_MASTER AS M ON CL.CREDIT_LIMIT_KEY = M.CREDIT_LIMIT_KEY ";
        //        strSQL = strSQL + "WHERE (CL.CREDIT_LIMIT_FROM_DATE >= " + Utility.cvtSQLDateString(strdate1) + ") AND (CL.CREDIT_LIMIT_TO_DATE < " + Utility.cvtSQLDateString(strdate2) + ") AND (M.BRANCH_ID = '" + strBranchID + "') ";
        //        strSQL = strSQL + "GROUP BY CL.LEDGER_NAME, ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_PARENT_GROUP, ACC_LEDGER.LEDGER_OPENING_BALANCE, ACC_LEDGER.LEDGER_NAME, ";
        //        strSQL = strSQL + "ACC_LEDGER_Z_D_A.DIVISION, ACC_LEDGER_Z_D_A.ZONE) AS tb1 LEFT OUTER JOIN ";
        //        strSQL = strSQL + "(SELECT LEDGER_NAME, ISNULL(SUM(VOUCHER_CREDIT_AMOUNT), 0) AS TOTAL_CREDIT, ISNULL(SUM(VOUCHER_DEBIT_AMOUNT), 0) AS TOTAL_DEBIT ";
        //        strSQL = strSQL + "FROM   ACC_VOUCHER ";
        //        strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strdate2) + ") ";
        //        strSQL = strSQL + "GROUP BY LEDGER_NAME) AS tb2 ON tb1.LEDGER_NAME = tb2.LEDGER_NAME ";
        //        strSQL = strSQL + "ORDER BY tb1.LEDGER_NAME_MERZE ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();

        //        strSQL = "INSERT INTO ACC_SAL_CR_LIMIT_TEMP ";
        //        strSQL = strSQL + "(LEDGER_NAME, AREA_NAME,DIVISION_NAME,ZONE_NAME, CLOSING_BAL_2) ";
        //        strSQL = strSQL + "SELECT   tb1.LEDGER_NAME_MERZE ,tb1.LEDGER_PARENT_GROUP,tb1.DIVISION,tb1.ZONE, tb1.LEDGER_OPENING_BALANCE + ((CASE WHEN tb2.TOTAL_CREDIT IS NULL THEN 0 ELSE tb2.TOTAL_CREDIT END) - (CASE WHEN tb2.TOTAL_DEBIT IS NULL ";
        //        strSQL = strSQL + "THEN 0 ELSE tb2.TOTAL_DEBIT END)) AS vvv ";
        //        strSQL = strSQL + "FROM (SELECT ACC_LEDGER.LEDGER_PARENT_GROUP, ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_OPENING_BALANCE, ACC_LEDGER.LEDGER_NAME, ACC_LEDGER_Z_D_A.DIVISION, ";
        //        strSQL = strSQL + "ACC_LEDGER_Z_D_A.ZONE FROM  ACC_LEDGER_Z_D_A INNER JOIN ACC_LEDGER ON ACC_LEDGER_Z_D_A.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME RIGHT OUTER JOIN ";
        //        strSQL = strSQL + "SALES_CREDIT_LIMIT AS CL ON ACC_LEDGER.LEDGER_NAME = CL.LEDGER_NAME LEFT OUTER JOIN SALES_CREDIT_LIMIT_MASTER AS M ON CL.CREDIT_LIMIT_KEY = M.CREDIT_LIMIT_KEY ";
        //        strSQL = strSQL + "WHERE (CL.CREDIT_LIMIT_FROM_DATE >= " + Utility.cvtSQLDateString(strdate2) + ") AND (CL.CREDIT_LIMIT_TO_DATE < " + Utility.cvtSQLDateString(strdate3) + ") AND (M.BRANCH_ID = '" + strBranchID + "') ";
        //        strSQL = strSQL + "GROUP BY CL.LEDGER_NAME, ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_PARENT_GROUP, ACC_LEDGER.LEDGER_OPENING_BALANCE, ACC_LEDGER.LEDGER_NAME,ACC_LEDGER_Z_D_A.DIVISION, ";
        //        strSQL = strSQL + " ACC_LEDGER_Z_D_A.ZONE) AS tb1 LEFT OUTER JOIN ";
        //        strSQL = strSQL + "(SELECT LEDGER_NAME, ISNULL(SUM(VOUCHER_CREDIT_AMOUNT), 0) AS TOTAL_CREDIT, ISNULL(SUM(VOUCHER_DEBIT_AMOUNT), 0) AS TOTAL_DEBIT ";
        //        strSQL = strSQL + "FROM   ACC_VOUCHER ";
        //        strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strdate3) + ") ";
        //        strSQL = strSQL + "GROUP BY LEDGER_NAME) AS tb2 ON tb1.LEDGER_NAME = tb2.LEDGER_NAME ";
        //        strSQL = strSQL + "ORDER BY tb1.LEDGER_NAME_MERZE ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();

        //        strSQL = "INSERT INTO ACC_SAL_CR_LIMIT_TEMP ";
        //        strSQL = strSQL + "(LEDGER_NAME, AREA_NAME,DIVISION_NAME,ZONE_NAME, CLOSING_BAL_3) ";
        //        strSQL = strSQL + "SELECT   tb1.LEDGER_NAME_MERZE ,tb1.LEDGER_PARENT_GROUP,tb1.DIVISION,tb1.ZONE, tb1.LEDGER_OPENING_BALANCE + ((CASE WHEN tb2.TOTAL_CREDIT IS NULL THEN 0 ELSE tb2.TOTAL_CREDIT END) - (CASE WHEN tb2.TOTAL_DEBIT IS NULL ";
        //        strSQL = strSQL + "THEN 0 ELSE tb2.TOTAL_DEBIT END)) AS vvv ";
        //        strSQL = strSQL + "FROM (SELECT ACC_LEDGER.LEDGER_PARENT_GROUP, ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_OPENING_BALANCE, ACC_LEDGER.LEDGER_NAME, ACC_LEDGER_Z_D_A.DIVISION, ";
        //        strSQL = strSQL + "ACC_LEDGER_Z_D_A.ZONE FROM  ACC_LEDGER_Z_D_A INNER JOIN ACC_LEDGER ON ACC_LEDGER_Z_D_A.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME RIGHT OUTER JOIN ";
        //        strSQL = strSQL + "SALES_CREDIT_LIMIT AS CL ON ACC_LEDGER.LEDGER_NAME = CL.LEDGER_NAME LEFT OUTER JOIN SALES_CREDIT_LIMIT_MASTER AS M ON CL.CREDIT_LIMIT_KEY = M.CREDIT_LIMIT_KEY ";
        //        strSQL = strSQL + "WHERE (CL.CREDIT_LIMIT_FROM_DATE >= " + Utility.cvtSQLDateString(strdate3) + ") AND (CL.CREDIT_LIMIT_TO_DATE < " + Utility.cvtSQLDateString(strdate4) + ") AND (M.BRANCH_ID = '" + strBranchID + "') ";
        //        strSQL = strSQL + "GROUP BY CL.LEDGER_NAME, ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_PARENT_GROUP, ACC_LEDGER.LEDGER_OPENING_BALANCE, ACC_LEDGER.LEDGER_NAME,ACC_LEDGER_Z_D_A.DIVISION, ";
        //        strSQL = strSQL + " ACC_LEDGER_Z_D_A.ZONE ) AS tb1 LEFT OUTER JOIN ";
        //        strSQL = strSQL + "(SELECT LEDGER_NAME, ISNULL(SUM(VOUCHER_CREDIT_AMOUNT), 0) AS TOTAL_CREDIT, ISNULL(SUM(VOUCHER_DEBIT_AMOUNT), 0) AS TOTAL_DEBIT ";
        //        strSQL = strSQL + "FROM   ACC_VOUCHER ";
        //        strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strdate4) + ") ";
        //        strSQL = strSQL + "GROUP BY LEDGER_NAME) AS tb2 ON tb1.LEDGER_NAME = tb2.LEDGER_NAME ";
        //        strSQL = strSQL + "ORDER BY tb1.LEDGER_NAME_MERZE ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();
        //        strSQL = "INSERT INTO ACC_SAL_CR_LIMIT_TEMP ";
        //        strSQL = strSQL + "(LEDGER_NAME, AREA_NAME,DIVISION_NAME,ZONE_NAME, CLOSING_BAL_4) ";
        //        strSQL = strSQL + "SELECT   tb1.LEDGER_NAME_MERZE ,tb1.LEDGER_PARENT_GROUP,tb1.DIVISION,tb1.ZONE, tb1.LEDGER_OPENING_BALANCE + ((CASE WHEN tb2.TOTAL_CREDIT IS NULL THEN 0 ELSE tb2.TOTAL_CREDIT END) - (CASE WHEN tb2.TOTAL_DEBIT IS NULL ";
        //        strSQL = strSQL + "THEN 0 ELSE tb2.TOTAL_DEBIT END)) AS vvv ";
        //        strSQL = strSQL + "FROM (SELECT ACC_LEDGER.LEDGER_PARENT_GROUP, ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_OPENING_BALANCE, ACC_LEDGER.LEDGER_NAME , ACC_LEDGER_Z_D_A.DIVISION, ";
        //        strSQL = strSQL + "ACC_LEDGER_Z_D_A.ZONE FROM  ACC_LEDGER_Z_D_A INNER JOIN ACC_LEDGER ON ACC_LEDGER_Z_D_A.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME RIGHT OUTER JOIN ";
        //        strSQL = strSQL + "SALES_CREDIT_LIMIT AS CL ON ACC_LEDGER.LEDGER_NAME = CL.LEDGER_NAME LEFT OUTER JOIN SALES_CREDIT_LIMIT_MASTER AS M ON CL.CREDIT_LIMIT_KEY = M.CREDIT_LIMIT_KEY ";
        //        strSQL = strSQL + "WHERE (CL.CREDIT_LIMIT_FROM_DATE >= " + Utility.cvtSQLDateString(strdate4) + ") AND (CL.CREDIT_LIMIT_TO_DATE < " + Utility.cvtSQLDateString(strlastdate) + ") AND (M.BRANCH_ID = '" + strBranchID + "') ";
        //        strSQL = strSQL + "GROUP BY CL.LEDGER_NAME, ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_PARENT_GROUP, ACC_LEDGER.LEDGER_OPENING_BALANCE, ACC_LEDGER.LEDGER_NAME,ACC_LEDGER_Z_D_A.DIVISION, ";
        //        strSQL = strSQL + " ACC_LEDGER_Z_D_A.ZONE) AS tb1 LEFT OUTER JOIN ";
        //        strSQL = strSQL + "(SELECT LEDGER_NAME, ISNULL(SUM(VOUCHER_CREDIT_AMOUNT), 0) AS TOTAL_CREDIT, ISNULL(SUM(VOUCHER_DEBIT_AMOUNT), 0) AS TOTAL_DEBIT ";
        //        strSQL = strSQL + "FROM   ACC_VOUCHER ";
        //        strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strlastdate) + ") ";
        //        strSQL = strSQL + "GROUP BY LEDGER_NAME) AS tb2 ON tb1.LEDGER_NAME = tb2.LEDGER_NAME ";
        //        strSQL = strSQL + "ORDER BY tb1.LEDGER_NAME_MERZE ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();


        //        strSQL = "INSERT INTO ACC_SAL_CR_LIMIT_TEMP ";
        //        strSQL = strSQL + "(LEDGER_NAME, AREA_NAME,CR_LIMIT_1,DIVISION_NAME,ZONE_NAME) ";
        //        strSQL = strSQL + "select l.LEDGER_NAME_MERZE,l.LEDGER_PARENT_GROUP,CL.CREDIT_LIMIT_AMOUNT ,ACC_LEDGER_Z_D_A.DIVISION, ";
        //        strSQL = strSQL + "ACC_LEDGER_Z_D_A.ZONE FROM  ACC_LEDGER_Z_D_A INNER JOIN ACC_LEDGER l ON ACC_LEDGER_Z_D_A.LEDGER_NAME = l.LEDGER_NAME RIGHT OUTER JOIN ";
        //        strSQL = strSQL + "SALES_CREDIT_LIMIT AS CL ON l.LEDGER_NAME = CL.LEDGER_NAME LEFT OUTER JOIN SALES_CREDIT_LIMIT_MASTER AS M ON CL.CREDIT_LIMIT_KEY = M.CREDIT_LIMIT_KEY ";
        //        strSQL = strSQL + "where l.LEDGER_NAME= CL.LEDGER_NAME and CL.CREDIT_LIMIT_FROM_DATE>=" + Utility.cvtSQLDateString(strdate1) + " and CL.CREDIT_LIMIT_TO_DATE<" + Utility.cvtSQLDateString(strdate2) + " ";
        //        strSQL = strSQL + "AND (M.BRANCH_ID = '" + strBranchID + "')";
        //        strSQL = strSQL + "GROUP BY l.LEDGER_NAME_MERZE, l.LEDGER_PARENT_GROUP,CL.CREDIT_LIMIT_AMOUNT,ACC_LEDGER_Z_D_A.DIVISION,ACC_LEDGER_Z_D_A.ZONE ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();
        //        strSQL = "INSERT INTO ACC_SAL_CR_LIMIT_TEMP ";
        //        strSQL = strSQL + "(LEDGER_NAME, AREA_NAME,CR_LIMIT_2,DIVISION_NAME,ZONE_NAME) ";
        //        strSQL = strSQL + "select l.LEDGER_NAME_MERZE,l.LEDGER_PARENT_GROUP,CL.CREDIT_LIMIT_AMOUNT ,ACC_LEDGER_Z_D_A.DIVISION, ";
        //        strSQL = strSQL + "ACC_LEDGER_Z_D_A.ZONE FROM  ACC_LEDGER_Z_D_A INNER JOIN ACC_LEDGER l ON ACC_LEDGER_Z_D_A.LEDGER_NAME = l.LEDGER_NAME RIGHT OUTER JOIN ";
        //        strSQL = strSQL + "SALES_CREDIT_LIMIT AS CL ON l.LEDGER_NAME = CL.LEDGER_NAME LEFT OUTER JOIN SALES_CREDIT_LIMIT_MASTER AS M ON CL.CREDIT_LIMIT_KEY = M.CREDIT_LIMIT_KEY ";
        //        strSQL = strSQL + "where l.LEDGER_NAME= CL.LEDGER_NAME and CL.CREDIT_LIMIT_FROM_DATE>=" + Utility.cvtSQLDateString(strdate2) + " and CL.CREDIT_LIMIT_TO_DATE<" + Utility.cvtSQLDateString(strdate3) + " ";
        //        strSQL = strSQL + "AND (M.BRANCH_ID = '" + strBranchID + "')";
        //        strSQL = strSQL + "GROUP BY l.LEDGER_NAME_MERZE, l.LEDGER_PARENT_GROUP,CL.CREDIT_LIMIT_AMOUNT,ACC_LEDGER_Z_D_A.DIVISION,ACC_LEDGER_Z_D_A.ZONE ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();
        //        strSQL = "INSERT INTO ACC_SAL_CR_LIMIT_TEMP ";
        //        strSQL = strSQL + "(LEDGER_NAME, AREA_NAME,CR_LIMIT_3,DIVISION_NAME,ZONE_NAME) ";
        //        strSQL = strSQL + "select l.LEDGER_NAME_MERZE,l.LEDGER_PARENT_GROUP,CL.CREDIT_LIMIT_AMOUNT ,ACC_LEDGER_Z_D_A.DIVISION, ";
        //        strSQL = strSQL + "ACC_LEDGER_Z_D_A.ZONE FROM  ACC_LEDGER_Z_D_A INNER JOIN ACC_LEDGER l ON ACC_LEDGER_Z_D_A.LEDGER_NAME = l.LEDGER_NAME RIGHT OUTER JOIN ";
        //        strSQL = strSQL + "SALES_CREDIT_LIMIT AS CL ON l.LEDGER_NAME = CL.LEDGER_NAME LEFT OUTER JOIN SALES_CREDIT_LIMIT_MASTER AS M ON CL.CREDIT_LIMIT_KEY = M.CREDIT_LIMIT_KEY ";
        //        strSQL = strSQL + "where l.LEDGER_NAME= CL.LEDGER_NAME and CL.CREDIT_LIMIT_FROM_DATE>=" + Utility.cvtSQLDateString(strdate3) + " and CL.CREDIT_LIMIT_TO_DATE<" + Utility.cvtSQLDateString(strdate4) + " ";
        //        strSQL = strSQL + "AND (M.BRANCH_ID = '" + strBranchID + "')";
        //        strSQL = strSQL + "GROUP BY l.LEDGER_NAME_MERZE, l.LEDGER_PARENT_GROUP,CL.CREDIT_LIMIT_AMOUNT,ACC_LEDGER_Z_D_A.DIVISION,ACC_LEDGER_Z_D_A.ZONE ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();
        //        strSQL = "INSERT INTO ACC_SAL_CR_LIMIT_TEMP ";
        //        strSQL = strSQL + "(LEDGER_NAME, AREA_NAME,CR_LIMIT_4,DIVISION_NAME,ZONE_NAME) ";
        //        strSQL = strSQL + "select l.LEDGER_NAME_MERZE,l.LEDGER_PARENT_GROUP,CL.CREDIT_LIMIT_AMOUNT ,ACC_LEDGER_Z_D_A.DIVISION, ";
        //        strSQL = strSQL + "ACC_LEDGER_Z_D_A.ZONE FROM  ACC_LEDGER_Z_D_A INNER JOIN ACC_LEDGER l ON ACC_LEDGER_Z_D_A.LEDGER_NAME = l.LEDGER_NAME RIGHT OUTER JOIN ";
        //        strSQL = strSQL + "SALES_CREDIT_LIMIT AS CL ON l.LEDGER_NAME = CL.LEDGER_NAME LEFT OUTER JOIN SALES_CREDIT_LIMIT_MASTER AS M ON CL.CREDIT_LIMIT_KEY = M.CREDIT_LIMIT_KEY ";
        //        strSQL = strSQL + "where l.LEDGER_NAME= CL.LEDGER_NAME and CL.CREDIT_LIMIT_FROM_DATE>=" + Utility.cvtSQLDateString(strdate4) + " and CL.CREDIT_LIMIT_TO_DATE<" + Utility.cvtSQLDateString(strlastdate) + " ";
        //        strSQL = strSQL + "AND (M.BRANCH_ID = '" + strBranchID + "')";
        //        strSQL = strSQL + "GROUP BY l.LEDGER_NAME_MERZE, l.LEDGER_PARENT_GROUP, CL.CREDIT_LIMIT_AMOUNT,ACC_LEDGER_Z_D_A.DIVISION,ACC_LEDGER_Z_D_A.ZONE ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();
        //        cmdInsert.Transaction.Commit();


        //        strSQL = "SELECT LEDGER_NAME,DIVISION_NAME,ZONE_NAME, AREA_NAME, ISNULL(SUM(CR_LIMIT_1), 0) AS CL1, ISNULL(SUM(CLOSING_BAL_1),0) AS CLB1, ISNULL(SUM(CR_LIMIT_2), 0) AS CL2, ";
        //        strSQL = strSQL + "ISNULL(SUM(CLOSING_BAL_2),0) AS CLB2, ISNULL(SUM(CR_LIMIT_3), 0) AS CL3, ISNULL(SUM(CLOSING_BAL_3),0) AS CLB3, ISNULL(SUM(CR_LIMIT_4), 0) AS CL4,";
        //        strSQL = strSQL + "ISNULL(SUM(CLOSING_BAL_4), 0) AS CLB4 FROM  ACC_SAL_CR_LIMIT_TEMP ";
        //        strSQL = strSQL + " WHERE DIVISION_NAME in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + vstrUserName + "') ";
        //        //strSQL = strSQL + " where tb1.CL1+tb1.CL2+tb1.CL3+tb1.CL4>0 ";
        //        if (strstring != "")
        //        {
        //            if (Intmode == 1)
        //            {
        //                strSQL = strSQL + "AND  LEDGER_NAME='" + Utility.gGetLedgerNameMerze(strDeComID, strstring) + "' ";
        //            }
        //            if (Intmode == 2)
        //            {
        //                if (strstring.Contains("ZONE") == true)
        //                {
        //                    strSQL = strSQL + "AND ZONE_NAME='" + strstring + "'";
        //                }
        //                else if (strstring.Substring(0, 1).ToUpper() == "D")
        //                {
        //                    strSQL = strSQL + "AND DIVISION_NAME='" + strstring + "'";
        //                }
        //                else if (strstring.Substring(0, 1).ToUpper() == "A")
        //                {
        //                    strSQL = strSQL + "AND AREA_NAME='" + strstring + "'";
        //                }
        //            }
        //        }
        //        strSQL = strSQL + "group by LEDGER_NAME,DIVISION_NAME,ZONE_NAME, AREA_NAME ";
        //        strSQL = strSQL + "Order by AREA_NAME,LEDGER_NAME ";

        //        SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
        //        dr = cmd.ExecuteReader();
        //        while (dr.Read())
        //        {

        //            RCreditLimit oLedg = new RCreditLimit();
        //            oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
        //            oLedg.strDiviison = dr["DIVISION_NAME"].ToString();
        //            oLedg.strZone = dr["ZONE_NAME"].ToString();
        //            oLedg.strLedgerGroupParent = dr["AREA_NAME"].ToString();
        //            oLedg.dblCriditLimit1 = Convert.ToDouble(dr["CL1"].ToString());
        //            oLedg.dblClosingBalance1 = Math.Abs(Convert.ToDouble(dr["CLB1"].ToString()));
        //            oLedg.dblCriditLimit2 = Convert.ToDouble(dr["CL2"].ToString());
        //            oLedg.dblClosingBalance2 = Math.Abs(Convert.ToDouble(dr["CLB2"].ToString()));
        //            oLedg.dblCriditLimit3 = Convert.ToDouble(dr["CL3"].ToString());
        //            oLedg.dblClosingBalance3 = Math.Abs(Convert.ToDouble(dr["CLB3"].ToString()));
        //            oLedg.dblCriditLimit4 = Convert.ToDouble(dr["CL4"].ToString());
        //            oLedg.dblClosingBalance4 = Math.Abs(Convert.ToDouble(dr["CLB4"].ToString()));

        //            oooSamplePrint.Add(oLedg);
        //        }

        //        if (!dr.HasRows)
        //        {
        //            RCreditLimit oLedg = new RCreditLimit();
        //            oLedg.strLedgerName = "";
        //            oLedg.strLedgerName = "";
        //            oLedg.dblCriditLimit1 = 0;
        //            oLedg.dblClosingBalance1 = 0;
        //            oLedg.dblCriditLimit2 = 0;
        //            oLedg.dblClosingBalance2 = 0;
        //            oLedg.dblCriditLimit3 = 0;
        //            oLedg.dblClosingBalance3 = 0;
        //            oLedg.dblCriditLimit4 = 0;
        //            oLedg.dblClosingBalance4 = 0;
        //            oooSamplePrint.Add(oLedg);
        //        }
        //        dr.Close();
        //        gcnMain.Close();
        //        cmd.Dispose();
        //        return oooSamplePrint;
        //    }
        //}
        public List<RCreditLimit> mGetCreditLimitCreditlimitDate(string strDeComID, string strMonthID)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<RCreditLimit> oogrp = new List<RCreditLimit>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            strSQL = "select * from ACC_COLL_MONTH_SETUP where MONTH_ID='" + strMonthID + "'";


            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    RCreditLimit ogrp = new RCreditLimit();


                    ogrp.strFROM_DATE = Convert.ToDateTime(drGetGroup["FROM_DATE"]).ToString("dd-MMM-yyyy");
                    ogrp.strTO_DATE = Convert.ToDateTime(drGetGroup["TO_DATE"]).ToString("dd-MMM-yyyy");
                    ogrp.strGRACE_FROM_DATE = Convert.ToDateTime(drGetGroup["GRACE_FROM_DATE"]).ToString("dd-MMM-yyyy");
                    ogrp.strGRACE_TO_DATE = Convert.ToDateTime(drGetGroup["GRACE_TO_DATE"]).ToString("dd-MMM-yyyy");
                    oogrp.Add(ogrp);
                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return oogrp;

            }
        }


        #region "Credit Limit"
        public List<RCreditLimit> mGetCreditLimit(string strDeComID, string strBranchID, string strdate1, string strdate2, string strdate3,
                                                        string strdate4, string strlastdate, string strstring, int Intmode, string vstrUserName)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;

                strSQL = "DELETE FROM ACC_SAL_CR_LIMIT_TEMP ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                List<RCreditLimit> oooSamplePrint = new List<RCreditLimit>();

                strSQL = "INSERT INTO ACC_SAL_CR_LIMIT_TEMP ";
                strSQL = strSQL + "(LEDGER_NAME, AREA_NAME,DIVISION_NAME,ZONE_NAME, CLOSING_BAL_1) ";
                strSQL = strSQL + "SELECT tb1.LEDGER_NAME_MERZE ,tb1.LEDGER_PARENT_GROUP,tb1.DIVISION,tb1.ZONE, tb1.LEDGER_OPENING_BALANCE + ((CASE WHEN tb2.TOTAL_CREDIT IS NULL THEN 0 ELSE tb2.TOTAL_CREDIT END) - (CASE WHEN tb2.TOTAL_DEBIT IS NULL ";
                strSQL = strSQL + "THEN 0 ELSE tb2.TOTAL_DEBIT END)) AS vvv ";
                strSQL = strSQL + "FROM (SELECT ACC_LEDGER.LEDGER_STATUS,ACC_LEDGER.LEDGER_PARENT_GROUP, ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_OPENING_BALANCE, ACC_LEDGER.LEDGER_NAME, ACC_LEDGER_Z_D_A.DIVISION, ";
                strSQL = strSQL + "ACC_LEDGER_Z_D_A.ZONE FROM  ACC_LEDGER_Z_D_A INNER JOIN ACC_LEDGER ON ACC_LEDGER_Z_D_A.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME RIGHT OUTER JOIN ";
                strSQL = strSQL + "SALES_CREDIT_LIMIT AS CL ON ACC_LEDGER.LEDGER_NAME = CL.LEDGER_NAME LEFT OUTER JOIN SALES_CREDIT_LIMIT_MASTER AS M ON CL.CREDIT_LIMIT_KEY = M.CREDIT_LIMIT_KEY ";
                strSQL = strSQL + "WHERE (CL.CREDIT_LIMIT_FROM_DATE >= " + Utility.cvtSQLDateString(strdate1) + ") AND (CL.CREDIT_LIMIT_TO_DATE < " + Utility.cvtSQLDateString(strdate2) + ") AND (M.BRANCH_ID = '" + strBranchID + "') ";
                strSQL = strSQL + "GROUP BY CL.LEDGER_NAME, ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_PARENT_GROUP, ACC_LEDGER.LEDGER_OPENING_BALANCE, ACC_LEDGER.LEDGER_NAME, ";
                strSQL = strSQL + "ACC_LEDGER_Z_D_A.DIVISION, ACC_LEDGER_Z_D_A.ZONE,ACC_LEDGER.LEDGER_STATUS) AS tb1 LEFT OUTER JOIN ";
                strSQL = strSQL + "(SELECT LEDGER_NAME, ISNULL(SUM(VOUCHER_CREDIT_AMOUNT), 0) AS TOTAL_CREDIT, ISNULL(SUM(VOUCHER_DEBIT_AMOUNT), 0) AS TOTAL_DEBIT ";
                strSQL = strSQL + "FROM   ACC_VOUCHER ";
                strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strdate2) + ") ";
                strSQL = strSQL + "GROUP BY LEDGER_NAME) AS tb2 ON tb1.LEDGER_NAME = tb2.LEDGER_NAME ";
                strSQL = strSQL + "WHERE tb1.LEDGER_STATUS =0 ";
                strSQL = strSQL + "ORDER BY tb1.LEDGER_NAME_MERZE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_SAL_CR_LIMIT_TEMP ";
                strSQL = strSQL + "(LEDGER_NAME, AREA_NAME,DIVISION_NAME,ZONE_NAME, CLOSING_BAL_2) ";
                strSQL = strSQL + "SELECT   tb1.LEDGER_NAME_MERZE ,tb1.LEDGER_PARENT_GROUP,tb1.DIVISION,tb1.ZONE, tb1.LEDGER_OPENING_BALANCE + ((CASE WHEN tb2.TOTAL_CREDIT IS NULL THEN 0 ELSE tb2.TOTAL_CREDIT END) - (CASE WHEN tb2.TOTAL_DEBIT IS NULL ";
                strSQL = strSQL + "THEN 0 ELSE tb2.TOTAL_DEBIT END)) AS vvv ";
                strSQL = strSQL + "FROM (SELECT ACC_LEDGER.LEDGER_STATUS,ACC_LEDGER.LEDGER_PARENT_GROUP, ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_OPENING_BALANCE, ACC_LEDGER.LEDGER_NAME, ACC_LEDGER_Z_D_A.DIVISION, ";
                strSQL = strSQL + "ACC_LEDGER_Z_D_A.ZONE FROM  ACC_LEDGER_Z_D_A INNER JOIN ACC_LEDGER ON ACC_LEDGER_Z_D_A.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME RIGHT OUTER JOIN ";
                strSQL = strSQL + "SALES_CREDIT_LIMIT AS CL ON ACC_LEDGER.LEDGER_NAME = CL.LEDGER_NAME LEFT OUTER JOIN SALES_CREDIT_LIMIT_MASTER AS M ON CL.CREDIT_LIMIT_KEY = M.CREDIT_LIMIT_KEY ";
                strSQL = strSQL + "WHERE (CL.CREDIT_LIMIT_FROM_DATE >= " + Utility.cvtSQLDateString(strdate2) + ") AND (CL.CREDIT_LIMIT_TO_DATE < " + Utility.cvtSQLDateString(strdate3) + ") AND (M.BRANCH_ID = '" + strBranchID + "') ";
                strSQL = strSQL + "GROUP BY CL.LEDGER_NAME, ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_PARENT_GROUP, ACC_LEDGER.LEDGER_OPENING_BALANCE, ACC_LEDGER.LEDGER_NAME,ACC_LEDGER_Z_D_A.DIVISION, ";
                strSQL = strSQL + " ACC_LEDGER_Z_D_A.ZONE,ACC_LEDGER.LEDGER_STATUS) AS tb1 LEFT OUTER JOIN ";
                strSQL = strSQL + "(SELECT LEDGER_NAME, ISNULL(SUM(VOUCHER_CREDIT_AMOUNT), 0) AS TOTAL_CREDIT, ISNULL(SUM(VOUCHER_DEBIT_AMOUNT), 0) AS TOTAL_DEBIT ";
                strSQL = strSQL + "FROM   ACC_VOUCHER ";
                strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strdate3) + ") ";
                strSQL = strSQL + "GROUP BY LEDGER_NAME) AS tb2 ON tb1.LEDGER_NAME = tb2.LEDGER_NAME ";
                strSQL = strSQL + "WHERE tb1.LEDGER_STATUS =0 ";
                strSQL = strSQL + "ORDER BY tb1.LEDGER_NAME_MERZE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO ACC_SAL_CR_LIMIT_TEMP ";
                strSQL = strSQL + "(LEDGER_NAME, AREA_NAME,DIVISION_NAME,ZONE_NAME, CLOSING_BAL_3) ";
                strSQL = strSQL + "SELECT   tb1.LEDGER_NAME_MERZE ,tb1.LEDGER_PARENT_GROUP,tb1.DIVISION,tb1.ZONE, tb1.LEDGER_OPENING_BALANCE + ((CASE WHEN tb2.TOTAL_CREDIT IS NULL THEN 0 ELSE tb2.TOTAL_CREDIT END) - (CASE WHEN tb2.TOTAL_DEBIT IS NULL ";
                strSQL = strSQL + "THEN 0 ELSE tb2.TOTAL_DEBIT END)) AS vvv ";
                strSQL = strSQL + "FROM (SELECT ACC_LEDGER.LEDGER_STATUS,ACC_LEDGER.LEDGER_PARENT_GROUP, ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_OPENING_BALANCE, ACC_LEDGER.LEDGER_NAME, ACC_LEDGER_Z_D_A.DIVISION, ";
                strSQL = strSQL + "ACC_LEDGER_Z_D_A.ZONE FROM  ACC_LEDGER_Z_D_A INNER JOIN ACC_LEDGER ON ACC_LEDGER_Z_D_A.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME RIGHT OUTER JOIN ";
                strSQL = strSQL + "SALES_CREDIT_LIMIT AS CL ON ACC_LEDGER.LEDGER_NAME = CL.LEDGER_NAME LEFT OUTER JOIN SALES_CREDIT_LIMIT_MASTER AS M ON CL.CREDIT_LIMIT_KEY = M.CREDIT_LIMIT_KEY ";
                strSQL = strSQL + "WHERE (CL.CREDIT_LIMIT_FROM_DATE >= " + Utility.cvtSQLDateString(strdate3) + ") AND (CL.CREDIT_LIMIT_TO_DATE < " + Utility.cvtSQLDateString(strdate4) + ") AND (M.BRANCH_ID = '" + strBranchID + "') ";
                strSQL = strSQL + "GROUP BY CL.LEDGER_NAME, ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_PARENT_GROUP, ACC_LEDGER.LEDGER_OPENING_BALANCE, ACC_LEDGER.LEDGER_NAME,ACC_LEDGER_Z_D_A.DIVISION, ";
                strSQL = strSQL + " ACC_LEDGER_Z_D_A.ZONE,ACC_LEDGER.LEDGER_STATUS ) AS tb1 LEFT OUTER JOIN ";
                strSQL = strSQL + "(SELECT LEDGER_NAME, ISNULL(SUM(VOUCHER_CREDIT_AMOUNT), 0) AS TOTAL_CREDIT, ISNULL(SUM(VOUCHER_DEBIT_AMOUNT), 0) AS TOTAL_DEBIT ";
                strSQL = strSQL + "FROM   ACC_VOUCHER ";
                strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strdate4) + ") ";
                strSQL = strSQL + "GROUP BY LEDGER_NAME) AS tb2 ON tb1.LEDGER_NAME = tb2.LEDGER_NAME ";
                strSQL = strSQL + "WHERE tb1.LEDGER_STATUS =0 ";
                strSQL = strSQL + "ORDER BY tb1.LEDGER_NAME_MERZE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO ACC_SAL_CR_LIMIT_TEMP ";
                strSQL = strSQL + "(LEDGER_NAME, AREA_NAME,DIVISION_NAME,ZONE_NAME, CLOSING_BAL_4) ";
                strSQL = strSQL + "SELECT   tb1.LEDGER_NAME_MERZE ,tb1.LEDGER_PARENT_GROUP,tb1.DIVISION,tb1.ZONE, tb1.LEDGER_OPENING_BALANCE + ((CASE WHEN tb2.TOTAL_CREDIT IS NULL THEN 0 ELSE tb2.TOTAL_CREDIT END) - (CASE WHEN tb2.TOTAL_DEBIT IS NULL ";
                strSQL = strSQL + "THEN 0 ELSE tb2.TOTAL_DEBIT END)) AS vvv ";
                strSQL = strSQL + "FROM (SELECT ACC_LEDGER.LEDGER_STATUS,ACC_LEDGER.LEDGER_PARENT_GROUP, ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_OPENING_BALANCE, ACC_LEDGER.LEDGER_NAME , ACC_LEDGER_Z_D_A.DIVISION, ";
                strSQL = strSQL + "ACC_LEDGER_Z_D_A.ZONE FROM  ACC_LEDGER_Z_D_A INNER JOIN ACC_LEDGER ON ACC_LEDGER_Z_D_A.LEDGER_NAME = ACC_LEDGER.LEDGER_NAME RIGHT OUTER JOIN ";
                strSQL = strSQL + "SALES_CREDIT_LIMIT AS CL ON ACC_LEDGER.LEDGER_NAME = CL.LEDGER_NAME LEFT OUTER JOIN SALES_CREDIT_LIMIT_MASTER AS M ON CL.CREDIT_LIMIT_KEY = M.CREDIT_LIMIT_KEY ";
                strSQL = strSQL + "WHERE (CL.CREDIT_LIMIT_FROM_DATE >= " + Utility.cvtSQLDateString(strdate4) + ") AND (CL.CREDIT_LIMIT_TO_DATE < " + Utility.cvtSQLDateString(strlastdate) + ") AND (M.BRANCH_ID = '" + strBranchID + "') ";
                strSQL = strSQL + "GROUP BY CL.LEDGER_NAME, ACC_LEDGER.LEDGER_NAME_MERZE, ACC_LEDGER.LEDGER_PARENT_GROUP, ACC_LEDGER.LEDGER_OPENING_BALANCE, ACC_LEDGER.LEDGER_NAME,ACC_LEDGER_Z_D_A.DIVISION, ";
                strSQL = strSQL + " ACC_LEDGER_Z_D_A.ZONE,ACC_LEDGER.LEDGER_STATUS) AS tb1 LEFT OUTER JOIN ";
                strSQL = strSQL + "(SELECT LEDGER_NAME, ISNULL(SUM(VOUCHER_CREDIT_AMOUNT), 0) AS TOTAL_CREDIT, ISNULL(SUM(VOUCHER_DEBIT_AMOUNT), 0) AS TOTAL_DEBIT ";
                strSQL = strSQL + "FROM   ACC_VOUCHER ";
                strSQL = strSQL + "WHERE (COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strlastdate) + ") ";
                strSQL = strSQL + "GROUP BY LEDGER_NAME) AS tb2 ON tb1.LEDGER_NAME = tb2.LEDGER_NAME ";
                strSQL = strSQL + "WHERE tb1.LEDGER_STATUS =0 ";
                strSQL = strSQL + "ORDER BY tb1.LEDGER_NAME_MERZE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                strSQL = "INSERT INTO ACC_SAL_CR_LIMIT_TEMP ";
                strSQL = strSQL + "(LEDGER_NAME, AREA_NAME,CR_LIMIT_1,DIVISION_NAME,ZONE_NAME) ";
                strSQL = strSQL + "select l.LEDGER_NAME_MERZE,l.LEDGER_PARENT_GROUP,CL.CREDIT_LIMIT_AMOUNT ,ACC_LEDGER_Z_D_A.DIVISION, ";
                strSQL = strSQL + "ACC_LEDGER_Z_D_A.ZONE FROM  ACC_LEDGER_Z_D_A INNER JOIN ACC_LEDGER l ON ACC_LEDGER_Z_D_A.LEDGER_NAME = l.LEDGER_NAME RIGHT OUTER JOIN ";
                strSQL = strSQL + "SALES_CREDIT_LIMIT AS CL ON l.LEDGER_NAME = CL.LEDGER_NAME LEFT OUTER JOIN SALES_CREDIT_LIMIT_MASTER AS M ON CL.CREDIT_LIMIT_KEY = M.CREDIT_LIMIT_KEY ";
                strSQL = strSQL + "where l.LEDGER_NAME= CL.LEDGER_NAME and CL.CREDIT_LIMIT_FROM_DATE>=" + Utility.cvtSQLDateString(strdate1) + " and CL.CREDIT_LIMIT_TO_DATE<" + Utility.cvtSQLDateString(strdate2) + " ";
                strSQL = strSQL + "AND (M.BRANCH_ID = '" + strBranchID + "')";
                strSQL = strSQL + "and l.LEDGER_STATUS =0 ";
                strSQL = strSQL + "GROUP BY l.LEDGER_NAME_MERZE, l.LEDGER_PARENT_GROUP,CL.CREDIT_LIMIT_AMOUNT,ACC_LEDGER_Z_D_A.DIVISION,ACC_LEDGER_Z_D_A.ZONE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO ACC_SAL_CR_LIMIT_TEMP ";
                strSQL = strSQL + "(LEDGER_NAME, AREA_NAME,CR_LIMIT_2,DIVISION_NAME,ZONE_NAME) ";
                strSQL = strSQL + "select l.LEDGER_NAME_MERZE,l.LEDGER_PARENT_GROUP,CL.CREDIT_LIMIT_AMOUNT ,ACC_LEDGER_Z_D_A.DIVISION, ";
                strSQL = strSQL + "ACC_LEDGER_Z_D_A.ZONE FROM  ACC_LEDGER_Z_D_A INNER JOIN ACC_LEDGER l ON ACC_LEDGER_Z_D_A.LEDGER_NAME = l.LEDGER_NAME RIGHT OUTER JOIN ";
                strSQL = strSQL + "SALES_CREDIT_LIMIT AS CL ON l.LEDGER_NAME = CL.LEDGER_NAME LEFT OUTER JOIN SALES_CREDIT_LIMIT_MASTER AS M ON CL.CREDIT_LIMIT_KEY = M.CREDIT_LIMIT_KEY ";
                strSQL = strSQL + "where l.LEDGER_NAME= CL.LEDGER_NAME and CL.CREDIT_LIMIT_FROM_DATE>=" + Utility.cvtSQLDateString(strdate2) + " and CL.CREDIT_LIMIT_TO_DATE<" + Utility.cvtSQLDateString(strdate3) + " ";
                strSQL = strSQL + "AND (M.BRANCH_ID = '" + strBranchID + "')";
                strSQL = strSQL + "and l.LEDGER_STATUS =0 ";
                strSQL = strSQL + "GROUP BY l.LEDGER_NAME_MERZE, l.LEDGER_PARENT_GROUP,CL.CREDIT_LIMIT_AMOUNT,ACC_LEDGER_Z_D_A.DIVISION,ACC_LEDGER_Z_D_A.ZONE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO ACC_SAL_CR_LIMIT_TEMP ";
                strSQL = strSQL + "(LEDGER_NAME, AREA_NAME,CR_LIMIT_3,DIVISION_NAME,ZONE_NAME) ";
                strSQL = strSQL + "select l.LEDGER_NAME_MERZE,l.LEDGER_PARENT_GROUP,CL.CREDIT_LIMIT_AMOUNT ,ACC_LEDGER_Z_D_A.DIVISION, ";
                strSQL = strSQL + "ACC_LEDGER_Z_D_A.ZONE FROM  ACC_LEDGER_Z_D_A INNER JOIN ACC_LEDGER l ON ACC_LEDGER_Z_D_A.LEDGER_NAME = l.LEDGER_NAME RIGHT OUTER JOIN ";
                strSQL = strSQL + "SALES_CREDIT_LIMIT AS CL ON l.LEDGER_NAME = CL.LEDGER_NAME LEFT OUTER JOIN SALES_CREDIT_LIMIT_MASTER AS M ON CL.CREDIT_LIMIT_KEY = M.CREDIT_LIMIT_KEY ";
                strSQL = strSQL + "where l.LEDGER_NAME= CL.LEDGER_NAME and CL.CREDIT_LIMIT_FROM_DATE>=" + Utility.cvtSQLDateString(strdate3) + " and CL.CREDIT_LIMIT_TO_DATE<" + Utility.cvtSQLDateString(strdate4) + " ";
                strSQL = strSQL + "AND (M.BRANCH_ID = '" + strBranchID + "')";
                strSQL = strSQL + "and l.LEDGER_STATUS =0 ";
                strSQL = strSQL + "GROUP BY l.LEDGER_NAME_MERZE, l.LEDGER_PARENT_GROUP,CL.CREDIT_LIMIT_AMOUNT,ACC_LEDGER_Z_D_A.DIVISION,ACC_LEDGER_Z_D_A.ZONE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO ACC_SAL_CR_LIMIT_TEMP ";
                strSQL = strSQL + "(LEDGER_NAME, AREA_NAME,CR_LIMIT_4,DIVISION_NAME,ZONE_NAME) ";
                strSQL = strSQL + "select l.LEDGER_NAME_MERZE,l.LEDGER_PARENT_GROUP,CL.CREDIT_LIMIT_AMOUNT ,ACC_LEDGER_Z_D_A.DIVISION, ";
                strSQL = strSQL + "ACC_LEDGER_Z_D_A.ZONE FROM  ACC_LEDGER_Z_D_A INNER JOIN ACC_LEDGER l ON ACC_LEDGER_Z_D_A.LEDGER_NAME = l.LEDGER_NAME RIGHT OUTER JOIN ";
                strSQL = strSQL + "SALES_CREDIT_LIMIT AS CL ON l.LEDGER_NAME = CL.LEDGER_NAME LEFT OUTER JOIN SALES_CREDIT_LIMIT_MASTER AS M ON CL.CREDIT_LIMIT_KEY = M.CREDIT_LIMIT_KEY ";
                strSQL = strSQL + "where l.LEDGER_NAME= CL.LEDGER_NAME and CL.CREDIT_LIMIT_FROM_DATE>=" + Utility.cvtSQLDateString(strdate4) + " and CL.CREDIT_LIMIT_TO_DATE<" + Utility.cvtSQLDateString(strlastdate) + " ";
                strSQL = strSQL + "AND (M.BRANCH_ID = '" + strBranchID + "')";
                strSQL = strSQL + "and l.LEDGER_STATUS =0 ";
                strSQL = strSQL + "GROUP BY l.LEDGER_NAME_MERZE, l.LEDGER_PARENT_GROUP, CL.CREDIT_LIMIT_AMOUNT,ACC_LEDGER_Z_D_A.DIVISION,ACC_LEDGER_Z_D_A.ZONE ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                cmdInsert.Transaction.Commit();


                strSQL = "SELECT LEDGER_NAME,DIVISION_NAME,ZONE_NAME, AREA_NAME, ISNULL(SUM(CR_LIMIT_1), 0) AS CL1, ISNULL(SUM(CLOSING_BAL_1),0) AS CLB1, ISNULL(SUM(CR_LIMIT_2), 0) AS CL2, ";
                strSQL = strSQL + "ISNULL(SUM(CLOSING_BAL_2),0) AS CLB2, ISNULL(SUM(CR_LIMIT_3), 0) AS CL3, ISNULL(SUM(CLOSING_BAL_3),0) AS CLB3, ISNULL(SUM(CR_LIMIT_4), 0) AS CL4,";
                strSQL = strSQL + "ISNULL(SUM(CLOSING_BAL_4), 0) AS CLB4 FROM  ACC_SAL_CR_LIMIT_TEMP ";
                strSQL = strSQL + " WHERE DIVISION_NAME in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + vstrUserName + "') ";
                //strSQL = strSQL + " where tb1.CL1+tb1.CL2+tb1.CL3+tb1.CL4>0 ";
                if (strstring != "")
                {
                    if (Intmode == 1)
                    {
                        strSQL = strSQL + "AND  LEDGER_NAME='" + Utility.gGetLedgerNameMerze(strDeComID, strstring) + "' ";
                    }
                    if (Intmode == 2)
                    {
                        if (strstring.Contains("ZONE") == true)
                        {
                            strSQL = strSQL + "AND ZONE_NAME='" + strstring + "'";
                        }
                        else if (strstring.Substring(0, 1).ToUpper() == "D")
                        {
                            strSQL = strSQL + "AND DIVISION_NAME='" + strstring + "'";
                        }
                        else if (strstring.Substring(0, 1).ToUpper() == "A")
                        {
                            strSQL = strSQL + "AND AREA_NAME='" + strstring + "'";
                        }
                    }
                }
                strSQL = strSQL + "group by LEDGER_NAME,DIVISION_NAME,ZONE_NAME, AREA_NAME ";
                strSQL = strSQL + "Order by AREA_NAME,LEDGER_NAME ";

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {

                    RCreditLimit oLedg = new RCreditLimit();
                    oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
                    oLedg.strDiviison = dr["DIVISION_NAME"].ToString();
                    oLedg.strZone = dr["ZONE_NAME"].ToString();
                    oLedg.strLedgerGroupParent = dr["AREA_NAME"].ToString();
                    oLedg.dblCriditLimit1 = Convert.ToDouble(dr["CL1"].ToString());
                    oLedg.dblClosingBalance1 = Math.Abs(Convert.ToDouble(dr["CLB1"].ToString()));
                    oLedg.dblCriditLimit2 = Convert.ToDouble(dr["CL2"].ToString());
                    oLedg.dblClosingBalance2 = Math.Abs(Convert.ToDouble(dr["CLB2"].ToString()));
                    oLedg.dblCriditLimit3 = Convert.ToDouble(dr["CL3"].ToString());
                    oLedg.dblClosingBalance3 = Math.Abs(Convert.ToDouble(dr["CLB3"].ToString()));
                    oLedg.dblCriditLimit4 = Convert.ToDouble(dr["CL4"].ToString());
                    oLedg.dblClosingBalance4 = Math.Abs(Convert.ToDouble(dr["CLB4"].ToString()));

                    oooSamplePrint.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RCreditLimit oLedg = new RCreditLimit();
                    oLedg.strLedgerName = "";
                    oLedg.strLedgerName = "";
                    oLedg.dblCriditLimit1 = 0;
                    oLedg.dblClosingBalance1 = 0;
                    oLedg.dblCriditLimit2 = 0;
                    oLedg.dblClosingBalance2 = 0;
                    oLedg.dblCriditLimit3 = 0;
                    oLedg.dblClosingBalance3 = 0;
                    oLedg.dblCriditLimit4 = 0;
                    oLedg.dblClosingBalance4 = 0;
                    oooSamplePrint.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return oooSamplePrint;
            }
        }

        #endregion


        #endregion
        #region "InsertGodows"
        public string mInsertGodowns(string strDeComID, string vstrLocation, string vstrUnder, string vstrBranch,
                                    string vstrAddress1, string vstrAddress2, string vstrCity,
                                    string vstrPhone, string vstrFax, int intsection)
        {

            string strSQL, strBranchId = "", strString = "";
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }

                try
                {
                    gcnMain.Open();
                    SqlDataReader dr;
                    strBranchId = Utility.gstrGetBranchID(strDeComID, vstrBranch);
                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;
                    strSQL = "INSERT INTO INV_GODOWNS(BRANCH_ID,GODOWNS_NAME,GODOWNS_PARENT_GROUP,";
                    strSQL = strSQL + "GODOWNS_ADDRESS1,GODOWNS_ADDRESS2,GODOWNS_CITY, ";
                    strSQL = strSQL + "GODOWNS_PHONE,GODOWNS_FAX,SECTION_STATUS) ";
                    strSQL = strSQL + "VALUES('" + strBranchId + "','" + vstrLocation + "','" + vstrUnder + "', ";
                    strSQL = strSQL + "'" + vstrAddress1.Replace("'", "''") + "', ";
                    strSQL = strSQL + "'" + vstrAddress2.Replace("'", "''") + "',";
                    strSQL = strSQL + "'" + vstrCity.Replace("'", "''") + "', ";
                    strSQL = strSQL + "'" + vstrPhone.Replace("'", "''") + "', ";
                    strSQL = strSQL + "'" + vstrFax.Replace("'", "''") + "' ";
                    strSQL = strSQL + "," + intsection + " ";
                    strSQL = strSQL + ")";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "SELECT STOCKITEM_NAME FROM INV_STOCKITEM ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        strString = strString + dr["STOCKITEM_NAME"].ToString() + "~" + vstrLocation + ";";
                    }
                    dr.Close();
                    string[] words = strString.Split(';');
                    foreach (string ooLoca in words)
                    {
                        string[] ooCost = ooLoca.Split('~');
                        if (ooCost[0] != "")
                        {
                            strSQL = "SELECT GODOWNS_NAME FROM INV_STOCKITEM_CLOSING ";
                            strSQL = strSQL + "WHERE STOCKITEM_NAME = '" + ooCost[0].Replace("'", "''") + "' ";
                            strSQL = strSQL + "AND GODOWNS_NAME = '" + ooCost[1].ToString() + "' ";
                            cmdInsert.CommandText = strSQL;
                            dr = cmdInsert.ExecuteReader();
                            if (!dr.Read())
                            {
                                dr.Close();
                                strSQL = "INSERT INTO INV_STOCKITEM_CLOSING(";
                                strSQL = strSQL + "STOCKITEM_NAME,GODOWNS_NAME ";
                                strSQL = strSQL + ")VALUES(";
                                strSQL = strSQL + "'" + ooCost[0].Replace("'", "''") + "',";
                                strSQL = strSQL + "'" + ooCost[1] + "')";
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                            }
                            dr.Close();
                        }
                    }

                    dr.Close();


                    cmdInsert.Transaction.Commit();
                    gcnMain.Close();
                    dr.Close();
                    return "Inseretd...";
                }
                catch (Exception ex)
                {
                    return (ex.ToString());
                }
                finally
                {
                    gcnMain.Close();
                }
            }
        }


        public string mUpdateGodown(string strDeComID, long vstrPrimaryKey, string vstrLocation, string vstrUnder, string vstrBranch,
                                    string vstrAddress1, string vstrAddress2, string vstrCity,
                                    string vstrPhone, string vstrFax, int intsection)
        {

            string strSQL, strBranchId = "", strString = "";
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }

                try
                {
                    gcnMain.Open();
                    SqlDataReader dr;
                    strBranchId = Utility.gstrGetBranchID(strDeComID, vstrBranch);
                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    strSQL = "UPDATE INV_GODOWNS SET GODOWNS_NAME = '" + vstrLocation + "',";
                    strSQL = strSQL + "BRANCH_ID = '" + strBranchId + "',";
                    strSQL = strSQL + "GODOWNS_PARENT_GROUP = '" + vstrUnder + "',";
                    strSQL = strSQL + "GODOWNS_ADDRESS1 = '" + vstrAddress1.Replace("'", "''") + "', ";
                    strSQL = strSQL + "GODOWNS_ADDRESS2 = '" + vstrAddress2.Replace("'", "''") + "',";
                    strSQL = strSQL + "GODOWNS_CITY = '" + vstrCity.Replace("'", "''") + "', ";
                    strSQL = strSQL + "GODOWNS_PHONE = '" + vstrPhone.Replace("'", "''") + "', ";
                    strSQL = strSQL + "GODOWNS_FAX = '" + vstrFax.Replace("'", "''") + "',";
                    strSQL = strSQL + "SECTION_STATUS = " + intsection + " ";
                    strSQL = strSQL + "WHERE GODOWNS_SERIAL = " + vstrPrimaryKey + " ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "SELECT STOCKITEM_NAME FROM INV_STOCKITEM ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        strString = strString + dr["STOCKITEM_NAME"].ToString() + "~" + vstrLocation + ";";
                    }
                    dr.Close();
                    string[] words = strString.Split(';');
                    foreach (string ooLoca in words)
                    {
                        string[] ooCost = ooLoca.Split('~');
                        if (ooCost[0] != "")
                        {
                            strSQL = "SELECT GODOWNS_NAME FROM INV_STOCKITEM_CLOSING ";
                            strSQL = strSQL + "WHERE STOCKITEM_NAME = '" + ooCost[0].Replace("'", "''") + "' ";
                            strSQL = strSQL + "AND GODOWNS_NAME = '" + ooCost[1].ToString() + "' ";
                            cmdInsert.CommandText = strSQL;
                            dr = cmdInsert.ExecuteReader();
                            if (!dr.Read())
                            {
                                dr.Close();
                                strSQL = "INSERT INTO INV_STOCKITEM_CLOSING(";
                                strSQL = strSQL + "STOCKITEM_NAME,GODOWNS_NAME ";
                                strSQL = strSQL + ")VALUES(";
                                strSQL = strSQL + "'" + ooCost[0].Replace("'", "''") + "',";
                                strSQL = strSQL + "'" + ooCost[1] + "')";
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                            }
                            dr.Close();
                        }
                    }

                    dr.Close();

                    cmdInsert.Transaction.Commit();
                    gcnMain.Close();
                    return "Updated...";
                }
                catch (Exception ex)
                {
                    return (ex.ToString());
                }
                finally
                {
                    gcnMain.Close();
                }
            }


        }
        #endregion
        #region "Update Online Order"
        public string gUpdateOnlineOrder(string strDeComID, string strCompRefNo,int appStatus)
        {
            {
                string strSQL;
                string conDb;
                conDb = Utility.SQLConnstringComSwitch(strDeComID);
                using (SqlConnection gcnMain = new SqlConnection(conDb))
                {
                    if (gcnMain.State == ConnectionState.Open)
                    {
                        gcnMain.Close();
                    }
                    gcnMain.Open();

                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    SqlDataReader dr;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;
                    strSQL = "SELECT LEDGER_NAME FROM ACC_COMPANY_VOUCHER WHERE COMP_REF_NO='" + strCompRefNo + "' ";
                    strSQL = strSQL + "AND LEDGER_NAME='New Doctor' ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        return "New Doctor Cannot be Approevd,First Create Doctor Information";
                    }
                    dr.Close();

                    strSQL = "UPDATE ACC_COMPANY_VOUCHER SET APP_STATUS =" + appStatus + " ";
                    strSQL = strSQL + ",APPS_NOTIFICATION =3 ";
                    if (appStatus==1)
                    {
                        strSQL = strSQL + ",APPS_CHANGE  =1 ";
                    }
                    strSQL = strSQL + "WHERE COMP_REF_NO='" + strCompRefNo + "' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();

                    gcnMain.Close();
                    gcnMain.Dispose();
                    return "1";
                }

            }
        }
        #endregion
        #region  "debtors Amount"
        public double gGetDebtorAmount(string strDeComID, string strFate, string strTDate,string strBranchID)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                cmdInsert.Connection = gcnMain;
                //Previous Dues
                double dbllcosing = 0,dblOpn=0,dblSales=0,dblSalesReturn=0,dbldebit=0,dblcredit=0,dblSP=0,dblCommitment=0,dblcash=0;

                strSQL = "SELECT  isnull(sum(l.LEDGER_OPENING_BALANCE),0) *-1 CLS   ";
                strSQL = strSQL + " from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND l.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1,2)";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblOpn = Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();
                //Current Month
                strSQL = "SELECT  ";
                strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0)) CLS   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND  C.COMP_VOUCHER_TYPE =16 ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblSales = dblOpn + Math.Round(Convert.ToDouble(dr["CLS"]), 2);
                }

                dr.Close();
                //Return
                strSQL = "SELECT ";
                strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0))*-1 CLS  ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND  C.COMP_VOUCHER_TYPE =13 ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblOpn = dblOpn + Math.Round(Convert.ToDouble(dr["CLS"]), 2);
                }

                dr.Close();
                //Debit Amount

                strSQL = "SELECT ";
                strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0)) CLS ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                strSQL = strSQL + " AND  C.DISABLE_VOUCHER =0 ";
                strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblOpn = dblOpn + Math.Round(Convert.ToDouble(dr["CLS"]), 2);
                }

                dr.Close();


                //Modified_24-11-19
                strSQL = "SELECT ";
                strSQL = strSQL + "abs(ISNULL(SUM(av.VOUCHER_DEBIT_AMOUNT-av.VOUCHER_CREDIT_AMOUNT),0)) CLS   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                strSQL = strSQL + " AND  C.DISABLE_VOUCHER =1 ";
                strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblOpn = dblOpn + Math.Round(Convert.ToDouble(dr["CLS"]), 2);
                }

                dr.Close();


                //Credit Amount
                strSQL = "SELECT ";
                strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0)) *-1 CLS   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Cr' AND aV.COMP_VOUCHER_TYPE =3 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblOpn = dblOpn + Math.Round(Convert.ToDouble(dr["CLS"]), 2);
                }

                dr.Close();
                //Cash

                strSQL = "SELECT ";
                strSQL = strSQL + " abs(ISNULL(SUM(av.VOUCHER_CREDIT_AMOUNT),0)) *-1 CLS ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av  ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO  ";
                strSQL = strSQL + "AND av.COMP_VOUCHER_TYPE=" + (int)Utility.VOUCHER_TYPE.vtRECEIPT_VOUCHER + " ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND l.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblOpn = dblOpn + Math.Round(Convert.ToDouble(dr["CLS"]), 2);
                }

                dr.Close();
                //SP Journal
                strSQL = "SELECT ";
                strSQL = strSQL + "ABS(ISNULL(SUM(aV.VOUCHER_CREDIT_AMOUNT-aV.VOUCHER_DEBIT_AMOUNT),0)) *-1 CLS ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.COMP_VOUCHER_TYPE =3 and c.SP_JOURNAL=1 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblOpn = dblOpn + Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();


                //*********opn
                //Current Month Sales
                strSQL = "SELECT ";
                strSQL = strSQL + "isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) CLS FROM ACC_LEDGER_Z_D_A ZDA ,ACC_VOUCHER v,ACC_LEDGER L ";
                strSQL = strSQL + "WHERE L.LEDGER_NAME =ZDA.LEDGER_NAME AND V.LEDGER_NAME =L.LEDGER_NAME  ";
                strSQL = strSQL + "AND (V.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ") ";
                strSQL = strSQL + "AND V.COMP_VOUCHER_TYPE=16 ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND L.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblSales =  Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();
                //Return
                strSQL = "SELECT ";
                strSQL = strSQL + "ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0) CLS ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                strSQL = strSQL + "AND  C.COMP_VOUCHER_TYPE =13 ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblSalesReturn = Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();
                //Debit Amount
                strSQL = "SELECT ";
                strSQL = strSQL + "ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0) CLS ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                strSQL = strSQL + " AND  C.DISABLE_VOUCHER =0 ";
                strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dbldebit  =  Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();
                //Modified_24-11-19
                strSQL = "SELECT ";
                strSQL = strSQL + "ISNULL(SUM(av.VOUCHER_DEBIT_AMOUNT-av.VOUCHER_CREDIT_AMOUNT),0) CLS ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                strSQL = strSQL + " AND  C.DISABLE_VOUCHER =1 ";
                strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dbldebit = dbldebit + Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();

                //Credit Amount
                strSQL = "SELECT isnull(SUM(v.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT),0) CLS ";
                strSQL = strSQL + "FROM ACC_LEDGER_Z_D_A ZDA ,ACC_VOUCHER v,ACC_LEDGER L,ACC_COMPANY_VOUCHER c  WHERE L.LEDGER_NAME =ZDA.LEDGER_NAME AND V.LEDGER_NAME =L.LEDGER_NAME  and c.COMP_REF_NO =v.COMP_REF_NO ";
                strSQL = strSQL + "AND (V.COMP_VOUCHER_DATE BETWEEN  ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                strSQL = strSQL + "AND V.COMP_VOUCHER_TYPE=3 ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND L.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "and c.SP_JOURNAL =0 ";
                strSQL = strSQL + "and v.VOUCHER_TOBY ='Cr' ";
                strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1) ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblcredit  =  Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();

                //Commitment
                strSQL = "SELECT ";
                strSQL = strSQL + " ISNULL(SUM(C.COLL_TARGET_COLL_AMT),0) CLS ";
                strSQL = strSQL + " from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,SALES_COLL_TARGET_MASTER m,SALES_COLL_TARGET_TRAN c ";
                strSQL = strSQL + " where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME  and m.COLL_TARGET_KEY=c.COLL_TARGET_KEY ";
                strSQL = strSQL + " AND C.COLL_TARGET_FROM_DATE >= " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND C.COLL_TARGET_TO_DATE <= " + Utility.cvtSQLDateString(strTDate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND m.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblCommitment =  Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();
                //Cash

                strSQL = "SELECT ";
                strSQL = strSQL + "ISNULL(SUM(AV.VOUCHER_CREDIT_AMOUNT),0) CLS  ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av  ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO  ";
                strSQL = strSQL + "AND av.COMP_VOUCHER_TYPE=" + (int)Utility.VOUCHER_TYPE.vtRECEIPT_VOUCHER + " ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND l.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblcash = dblcash + Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();

                //SP Journal
                strSQL = "SELECT ";
                strSQL = strSQL + "ISNULL(SUM(aV.VOUCHER_CREDIT_AMOUNT-aV.VOUCHER_DEBIT_AMOUNT),0) CLS   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.COMP_VOUCHER_TYPE =3 and c.SP_JOURNAL=1 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND l.LEDGER_STATUS in (0,1)";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblSP =  Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();
                //*******************Close Ledger

                //Previous Dues

                strSQL = "SELECT  isnull(sum(l.LEDGER_OPENING_BALANCE),0) *-1 CLS   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND l.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                strSQL = strSQL + " group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblOpn = dblOpn + Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();

                //Current Month

                strSQL = "SELECT ";
                strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0)) CLS   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND  C.COMP_VOUCHER_TYPE =16 ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                } 
                
                strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                //strSQL = strSQL + " group by g.GR_PARENT , g.GR_NAME , l.LEDGER_PARENT_GROUP,l.LEDGER_NAME_MERZE,l.TERITORRY_CODE,l.TERRITORRY_NAME,g.GR_PARENT_POSITION ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblSales = dblSales + Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();
                //Return

                strSQL = "SELECT ";
                strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0))*-1 CLS   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND  C.COMP_VOUCHER_TYPE =13 ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblSalesReturn = dblSalesReturn + Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();
                //Debit Amount


                strSQL = "SELECT ";
                strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0)) CLS  ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                strSQL = strSQL + " AND  C.DISABLE_VOUCHER =0 ";
                strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dbldebit = dbldebit + Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();

                //Modified_24_11_19
                strSQL = "SELECT ";
                strSQL = strSQL + "abs(ISNULL(SUM(av.VOUCHER_DEBIT_AMOUNT-av.VOUCHER_CREDIT_AMOUNT),0)) CLS    ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                strSQL = strSQL + " AND  C.DISABLE_VOUCHER =1 ";
                strSQL = strSQL + "AND l.LEDGER_STATUS =2 ";
                strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblOpn = dblOpn + Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();
                //Credit Amount
                strSQL = "SELECT isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) CLS ";
                strSQL = strSQL + "FROM ACC_LEDGER_Z_D_A ZDA ,ACC_VOUCHER v,ACC_LEDGER L,ACC_COMPANY_VOUCHER c  WHERE L.LEDGER_NAME =ZDA.LEDGER_NAME AND V.LEDGER_NAME =L.LEDGER_NAME  and c.COMP_REF_NO =v.COMP_REF_NO ";
                strSQL = strSQL + "AND (V.COMP_VOUCHER_DATE ";
                strSQL = strSQL + "< " + Utility.cvtSQLDateString(strFate) + " ) ";
                strSQL = strSQL + "AND V.COMP_VOUCHER_TYPE=3 ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND L.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "and c.SP_JOURNAL =0 ";
                strSQL = strSQL + "and v.VOUCHER_TOBY ='Cr' ";
                strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblcredit = dblcredit + Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();
                //Cash
                strSQL = "SELECT ";
                strSQL = strSQL + " abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0)) *-1 CLS ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av  ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO  ";
                strSQL = strSQL + "AND av.COMP_VOUCHER_TYPE=" + (int)Utility.VOUCHER_TYPE.vtRECEIPT_VOUCHER + " ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND l.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblcash = dblcash + Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();
                //SP Journal
                strSQL = "select ";
                strSQL = strSQL + "ABS(ISNULL(SUM(aV.VOUCHER_CREDIT_AMOUNT-aV.VOUCHER_DEBIT_AMOUNT),0)) *-1 CLS ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.COMP_VOUCHER_TYPE =3 and c.SP_JOURNAL=1 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblSP = dblSP + Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();


                //*********opn
                //Current Month Sales
                strSQL = "SELECT  ";
                strSQL = strSQL + "isnull(SUM(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT),0) CLS FROM ACC_LEDGER_Z_D_A ZDA ,ACC_VOUCHER v,ACC_LEDGER L ";
                strSQL = strSQL + "WHERE L.LEDGER_NAME =ZDA.LEDGER_NAME AND V.LEDGER_NAME =L.LEDGER_NAME  ";
                strSQL = strSQL + "AND (V.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ") ";
                strSQL = strSQL + "AND V.COMP_VOUCHER_TYPE=16 ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND L.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblSales = dblSales + Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();
                //Return

                strSQL = "select  ";
                strSQL = strSQL + "ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0) CLS   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                strSQL = strSQL + "AND  C.COMP_VOUCHER_TYPE =13 ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblSalesReturn = dblSalesReturn + Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();
                //Debit Amount

                strSQL = "select  ";
                strSQL = strSQL + "ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0) CLS ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                strSQL = strSQL + " AND  C.DISABLE_VOUCHER =0 ";
                strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dbldebit = dbldebit + Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();

                //Modified_24_11_19
                strSQL = "SELECT ";
                strSQL = strSQL + "ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0) CLS   ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                strSQL = strSQL + " AND  C.DISABLE_VOUCHER =1 ";
                strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dbldebit = dbldebit + Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();

                //Credit Amount
                strSQL = "select ";
                strSQL = strSQL + "ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0) CLS ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Cr' AND aV.COMP_VOUCHER_TYPE =3 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
                strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblcredit = dblcredit + Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();
                //Commitment
                strSQL = "select ";
                strSQL = strSQL + " ISNULL(SUM(C.COLL_TARGET_COLL_AMT),0) CLS ";
                strSQL = strSQL + " from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,SALES_COLL_TARGET_MASTER m,SALES_COLL_TARGET_TRAN c ";
                strSQL = strSQL + " where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME  and m.COLL_TARGET_KEY=c.COLL_TARGET_KEY ";
                strSQL = strSQL + " AND C.COLL_TARGET_FROM_DATE >= " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND C.COLL_TARGET_TO_DATE <= " + Utility.cvtSQLDateString(strTDate) + " ";
                if (strBranchID != "")
                {
                    strSQL = strSQL + " AND m.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblCommitment = dblCommitment + Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();
                //Cash
                strSQL = "select ";
                strSQL = strSQL + "ISNULL(SUM(AV.VOUCHER_CREDIT_AMOUNT),0) CLS ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av  ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO  ";
                strSQL = strSQL + "AND av.COMP_VOUCHER_TYPE=" + (int)Utility.VOUCHER_TYPE.vtRECEIPT_VOUCHER + " ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND l.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblcash = dblcash + Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();
                //SP Journal
                strSQL = "SELECT ";
                strSQL = strSQL + "ISNULL(SUM(aV.VOUCHER_CREDIT_AMOUNT-aV.VOUCHER_DEBIT_AMOUNT),0) CLS ";
                strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
                strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
                strSQL = strSQL + "AND aV.COMP_VOUCHER_TYPE =3 and c.SP_JOURNAL=1 ";
                strSQL = strSQL + "AND C.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate);
                if (strBranchID != "")
                {
                    strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
                }
                strSQL = strSQL + "AND l.LEDGER_STATUS =2";
                strSQL = strSQL + "AND l.CLOSE_DATE > " + Utility.cvtSQLDateString(strFate) + " ";
                strSQL = strSQL + "AND l.CLOSE_DATE  is not null ";

                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                if (dr.Read())
                {
                    dblSP = dblSP + Math.Round(Convert.ToDouble(dr["CLS"]),2);
                }

                dr.Close();

                ///****************

                gcnMain.Close();

                dbllcosing = Math.Round((dblOpn + dblSales + dbldebit) - (dblSalesReturn + dblcredit + dblSP + dblcash),2);

                return dbllcosing;



            }
        }
        #endregion
        #region "ProductSalesStatement12MonthQty"
        public List<RProductSales> mloadProduct(string strDeComID, int intmode)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                List<RProductSales> ooAccLedger = new List<RProductSales>();
                if (intmode == 0)
                {
                    strSQL = "select s.STOCKITEM_NAME,s.STOCKGROUP_NAME  from INV_STOCKITEM s ";
                }
                else
                {
                    strSQL = "select Distinct s.STOCKGROUP_NAME  from INV_STOCKITEM s ";
                }
                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RProductSales oLedg = new RProductSales();
                    if (intmode == 0)
                    {
                        oLedg.strStockItemName = dr["STOCKITEM_NAME"].ToString();
                    }
                    else
                    {
                        oLedg.strStockGroupName = dr["STOCKGROUP_NAME"].ToString();
                    }
                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RProductSales oLedg = new RProductSales();
                    oLedg.strStockItemName = "";
                    oLedg.strStockGroupName = "";

                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }
        public string mInsertTwelveproductMonthSalesRPT(string strDeComID, string vstrLedgername, string vstrStockItem, string vstrStockGroup, int intmode)
        {



            string strLedName = "", strSQL = "";

            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                try
                {
                    gcnMain.Open();

                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;
                    strSQL = "Delete TWELVE_MONTH_SALES_TEMP ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    if (vstrLedgername != "")
                    {
                        string[] words1 = vstrLedgername.Split('|');
                        foreach (string name in words1)
                        {
                            string[] ooCost = name.Split('|');
                            if (ooCost[0] != "")
                            {
                                strLedName = ooCost[0].ToString();
                                strSQL = "INSERT INTO TWELVE_MONTH_SALES_TEMP ";
                                strSQL = strSQL + "(LEDGER_NAME, STOCKITEM_NAME, STOCKITEM_GROUP,ITEM_CATEGORY ) ";
                                strSQL = strSQL + "Select  '" + strLedName + "',  S.STOCKITEM_NAME, s.STOCKGROUP_NAME,s.STOCKCATEGORY_NAME from INV_STOCKITEM s  ";
                                strSQL = strSQL + "where   s.STOCKGROUP_NAME <>'Sample Item' ";
                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                            }
                        }
                    }

                    cmdInsert.Transaction.Commit();
                    cmdInsert.Dispose();
                    return "1";
                }
                catch (Exception ex)
                {
                    return ex.ToString();
                }

            }
        }




        public List<RSalesPurchase> mGetProductSalesStatement12MonthQty(string strDeComID, int intMode, string strLedgerGroup,
                                                             string strProduct, string strFdate, string strTDate,
                                                             string strPType, int intsuppress,string vstrUserName)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;
                if (intMode == 4)
                {

                    strSQL = "alter view TwelveMonthView as SELECT  MONTH(B.COMP_VOUCHER_DATE) AS Expr1, B.STOCKITEM_NAME, L.ZONE, L.DIVISION, L.AREA, ";
                    strSQL = strSQL + "L.LEDGER_NAME_MERZE, S.STOCKGROUP_NAME, (CASE WHEN month(B.COMP_VOUCHER_DATE)  ";
                    strSQL = strSQL + "= 1 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Jan, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 2 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Feb, (CASE WHEN month(B.COMP_VOUCHER_DATE)  ";
                    strSQL = strSQL + "= 3 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Mar, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 4 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Apr, (CASE WHEN month(B.COMP_VOUCHER_DATE)  ";
                    strSQL = strSQL + "= 5 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS May, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 6 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Jun, (CASE WHEN month(B.COMP_VOUCHER_DATE)  ";
                    strSQL = strSQL + "= 7 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Jul, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 8 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Aug, (CASE WHEN month(B.COMP_VOUCHER_DATE)  ";
                    strSQL = strSQL + "= 9 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Sep, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 10 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Oct, (CASE WHEN month(B.COMP_VOUCHER_DATE)  ";
                    strSQL = strSQL + "= 11 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Nov, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 12 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Dec ";
                    strSQL = strSQL + "FROM ACC_BILL_TRAN AS B INNER JOIN ";
                    strSQL = strSQL + "ACC_VOUCHER AS V ON B.COMP_REF_NO = V.COMP_REF_NO INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM AS S ON B.STOCKITEM_NAME = S.STOCKITEM_NAME INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER_Z_D_A AS L ON V.LEDGER_NAME = L.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (B.BRANCH_ID = '0001') AND (B.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND " + Utility.cvtSQLDateString(strTDate) + ") ";
                    if (strPType == "P")
                    {
                        if (strProduct.Length < 1000)
                        {
                            strSQL = strSQL + "AND (S.STOCKITEM_NAME IN (" + strProduct + "))  ";
                        }
                    }
                    else
                    {
                        strSQL = strSQL + "AND (S.STOCKGROUP_NAME IN (" + strProduct + "))  ";
                    }
                    strSQL = strSQL + "AND  (L.LEDGER_NAME_MERZE IN (" + strLedgerGroup + ")) AND (V.COMP_VOUCHER_TYPE = 16) AND (V.BRANCH_ID = '0001') ";
                    //strSQL = strSQL + "and         (B.STOCKITEM_NAME = 'Avena Sativa - 100ml') ";
                    if (vstrUserName !="")
                    {
                        strSQL = strSQL + " AND  L.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + vstrUserName + "')";
                    }
                    strSQL = strSQL + "GROUP BY MONTH(B.COMP_VOUCHER_DATE), B.STOCKITEM_NAME, L.ZONE, L.DIVISION, L.AREA, L.LEDGER_NAME_MERZE, S.STOCKGROUP_NAME ";
                }

                if (intMode == 3)
                {
                    strSQL = "alter view TwelveMonthView as SELECT   MONTH(B.COMP_VOUCHER_DATE) AS Expr1, B.STOCKITEM_NAME, L.AREA, S.STOCKGROUP_NAME, (CASE WHEN month(B.COMP_VOUCHER_DATE)  ";
                    strSQL = strSQL + "= 1 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Jan, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 2 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Feb, (CASE WHEN month(B.COMP_VOUCHER_DATE)   ";
                    strSQL = strSQL + "= 3 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Mar, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 4 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Apr, (CASE WHEN month(B.COMP_VOUCHER_DATE)   ";
                    strSQL = strSQL + "= 5 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS May, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 6 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Jun, (CASE WHEN month(B.COMP_VOUCHER_DATE)   ";
                    strSQL = strSQL + "= 7 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Jul, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 8 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Aug, (CASE WHEN month(B.COMP_VOUCHER_DATE)   ";
                    strSQL = strSQL + "= 9 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Sep, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 10 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Oct, (CASE WHEN month(B.COMP_VOUCHER_DATE)  ";
                    strSQL = strSQL + "= 11 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Nov, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 12 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Dec  ";
                    strSQL = strSQL + "FROM    ACC_BILL_TRAN AS B INNER JOIN  ";
                    strSQL = strSQL + "ACC_VOUCHER AS V ON B.COMP_REF_NO = V.COMP_REF_NO INNER JOIN  ";
                    strSQL = strSQL + "INV_STOCKITEM AS S ON B.STOCKITEM_NAME = S.STOCKITEM_NAME INNER JOIN  ";
                    strSQL = strSQL + "ACC_LEDGER_Z_D_A AS L ON V.LEDGER_NAME = L.LEDGER_NAME  ";
                    strSQL = strSQL + "WHERE (B.BRANCH_ID = '0001') AND (B.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " AND  " + Utility.cvtSQLDateString(strTDate) + ")   ";
                    if (strPType == "P")
                    {
                        if (strProduct.Length < 1000)
                        {
                            strSQL = strSQL + "AND (S.STOCKITEM_NAME IN (" + strProduct + "))  ";
                        }
                    }
                    else
                    {
                        strSQL = strSQL + "AND (S.STOCKGROUP_NAME IN (" + strProduct + "))  ";
                    }

                    strSQL = strSQL + "AND  (L.AREA IN (" + strLedgerGroup + ")) AND (V.COMP_VOUCHER_TYPE = 16) AND (V.BRANCH_ID = '0001')  ";
                    if (vstrUserName != "")
                    {
                        strSQL = strSQL + " AND  L.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + vstrUserName + "')";
                    }

                    strSQL = strSQL + "GROUP BY MONTH(B.COMP_VOUCHER_DATE), B.STOCKITEM_NAME, L.ZONE, L.DIVISION, L.AREA, S.STOCKGROUP_NAME  ";



                }
                if (intMode == 2)
                {

                    strSQL = "alter view TwelveMonthView as  ";
                    strSQL = strSQL + "SELECT MONTH(B.COMP_VOUCHER_DATE) AS Expr1, B.STOCKITEM_NAME, L.DIVISION, S.STOCKGROUP_NAME, (CASE WHEN month(B.COMP_VOUCHER_DATE)  ";
                    strSQL = strSQL + "= 1 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Jan, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 2 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Feb, (CASE WHEN month(B.COMP_VOUCHER_DATE)  ";
                    strSQL = strSQL + "= 3 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Mar, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 4 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Apr, (CASE WHEN month(B.COMP_VOUCHER_DATE)  ";
                    strSQL = strSQL + "= 5 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS May, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 6 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Jun, (CASE WHEN month(B.COMP_VOUCHER_DATE)  ";
                    strSQL = strSQL + "= 7 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Jul, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 8 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Aug, (CASE WHEN month(B.COMP_VOUCHER_DATE)  ";
                    strSQL = strSQL + "= 9 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Sep, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 10 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Oct, (CASE WHEN month(B.COMP_VOUCHER_DATE)  ";
                    strSQL = strSQL + "= 11 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Nov, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 12 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Dec ";
                    strSQL = strSQL + "FROM  ACC_BILL_TRAN AS B INNER JOIN ";
                    strSQL = strSQL + "ACC_VOUCHER AS V ON B.COMP_REF_NO = V.COMP_REF_NO INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM AS S ON B.STOCKITEM_NAME = S.STOCKITEM_NAME INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER_Z_D_A AS L ON V.LEDGER_NAME = L.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (B.BRANCH_ID = '0001') ";
                    strSQL = strSQL + "AND (B.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND " + Utility.cvtSQLDateString(strTDate) + ") ";
                    if (strPType == "P")
                    {
                        if (strProduct.Length < 1000)
                        {
                            strSQL = strSQL + "AND (S.STOCKITEM_NAME IN (" + strProduct + "))  ";
                        }
                    }
                    else
                    {
                        strSQL = strSQL + "AND (S.STOCKGROUP_NAME IN (" + strProduct + "))  ";
                    }
                    strSQL = strSQL + "AND  (L.DIVISION IN (" + strLedgerGroup + "))  ";
                    strSQL = strSQL + "AND (V.COMP_VOUCHER_TYPE = 16) AND (V.BRANCH_ID = '0001') ";
                    if (vstrUserName != "")
                    {
                        strSQL = strSQL + " AND  L.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + vstrUserName + "')";
                    }
                    strSQL = strSQL + "GROUP BY MONTH(B.COMP_VOUCHER_DATE), B.STOCKITEM_NAME, L.ZONE, L.DIVISION, S.STOCKGROUP_NAME ";
                }
                if (intMode == 1)
                {


                    strSQL = "alter view TwelveMonthView as  ";
                    strSQL = strSQL + "SELECT MONTH(B.COMP_VOUCHER_DATE) AS Expr1, B.STOCKITEM_NAME, L.ZONE, S.STOCKGROUP_NAME, (CASE WHEN month(B.COMP_VOUCHER_DATE)  ";
                    strSQL = strSQL + "= 1 THEN SUM(B.BILL_QUANTITY ) ELSE 0 END) AS Jan, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 2 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Feb, (CASE WHEN month(B.COMP_VOUCHER_DATE)  ";
                    strSQL = strSQL + "= 3 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Mar, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 4 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Apr, (CASE WHEN month(B.COMP_VOUCHER_DATE)  ";
                    strSQL = strSQL + "= 5 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS May, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 6 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Jun, (CASE WHEN month(B.COMP_VOUCHER_DATE)  ";
                    strSQL = strSQL + "= 7 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Jul, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 8 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Aug, (CASE WHEN month(B.COMP_VOUCHER_DATE)  ";
                    strSQL = strSQL + "= 9 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Sep, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 10 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Oct, (CASE WHEN month(B.COMP_VOUCHER_DATE)  ";
                    strSQL = strSQL + "= 11 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Nov, (CASE WHEN month(B.COMP_VOUCHER_DATE) = 12 THEN SUM(B.BILL_QUANTITY) ELSE 0 END) AS Dec ";
                    strSQL = strSQL + "FROM ACC_BILL_TRAN AS B INNER JOIN ";
                    strSQL = strSQL + "ACC_VOUCHER AS V ON B.COMP_REF_NO = V.COMP_REF_NO INNER JOIN ";
                    strSQL = strSQL + "INV_STOCKITEM AS S ON B.STOCKITEM_NAME = S.STOCKITEM_NAME INNER JOIN ";
                    strSQL = strSQL + "ACC_LEDGER_Z_D_A AS L ON V.LEDGER_NAME = L.LEDGER_NAME ";
                    strSQL = strSQL + "WHERE (B.BRANCH_ID = '0001') ";
                    strSQL = strSQL + "AND (B.COMP_VOUCHER_DATE BETWEEN " + Utility.cvtSQLDateString(strFdate) + " AND " + Utility.cvtSQLDateString(strTDate) + ") ";
                    if (strPType == "P")
                    {
                        if (strProduct.Length < 1000)
                        {
                            strSQL = strSQL + "AND (S.STOCKITEM_NAME IN (" + strProduct + "))  ";
                        }
                    }
                    else
                    {
                        strSQL = strSQL + "AND (S.STOCKGROUP_NAME IN (" + strProduct + "))  ";
                    }
                    strSQL = strSQL + "AND  (L.ZONE IN (" + strLedgerGroup + "))  ";
                    strSQL = strSQL + "AND (V.COMP_VOUCHER_TYPE = 16) AND (V.BRANCH_ID = '0001') ";

                    if (vstrUserName != "")
                    {
                        strSQL = strSQL + " AND  L.Division in (SELECT  LEDGER_GROUP_NAME FROM  USER_PRIVILEGES_COLOR WHERE USER_LOGIN_NAME='" + vstrUserName + "')";
                    }
                    strSQL = strSQL + "GROUP BY MONTH(B.COMP_VOUCHER_DATE), B.STOCKITEM_NAME, L.ZONE, L.DIVISION, S.STOCKGROUP_NAME ";


                }

                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                cmdInsert.Transaction.Commit();




                List<RSalesPurchase> ooAccLedger = new List<RSalesPurchase>();
                if (intMode == 4)
                {
                    strSQL = "SELECT V1.STOCKITEM_NAME, V1.STOCKITEM_GROUP, ISNULL(SUM(TwelveMonthView.Jan),0) AS Jan, ISNULL(SUM(TwelveMonthView.Feb),0) AS Feb, ISNULL(SUM(TwelveMonthView.Mar),0) AS mar, ISNULL(SUM(TwelveMonthView.Apr),0) AS Apr, ISNULL(SUM(TwelveMonthView.May),0) ";
                    strSQL = strSQL + "AS May, ISNULL(SUM(TwelveMonthView.Jun),0) AS Jun, ISNULL(SUM(TwelveMonthView.Jul),0) AS Jul, ISNULL(SUM(TwelveMonthView.Aug),0) AS Aug, ISNULL(SUM(TwelveMonthView.Sep),0) AS Sep, ISNULL(SUM(TwelveMonthView.Oct),0) AS Oct, ISNULL(SUM(TwelveMonthView.Nov),0)  ";
                    strSQL = strSQL + "AS Nov, ISNULL(SUM(TwelveMonthView.Dec),0) AS Dec, V1.ITEM_CATEGORY, V1.LEDGER_NAME ";
                    strSQL = strSQL + "FROM TWELVE_MONTH_SALES_TEMP AS V1 LEFT OUTER JOIN ";
                    strSQL = strSQL + "TwelveMonthView ON V1.LEDGER_NAME = TwelveMonthView.LEDGER_NAME_MERZE AND V1.STOCKITEM_NAME = TwelveMonthView.STOCKITEM_NAME ";
                    //strSQL = strSQL + "WHERE        (V1.STOCKITEM_NAME = 'Avena Sativa - 100ml') ";
                    if (strPType == "P")
                    {
                        if (strProduct.Length < 1000)
                        {
                            strSQL = strSQL + "WHERE (V1.STOCKITEM_NAME IN (" + strProduct + "))  ";
                        }
                    }
                    else
                    {
                        strSQL = strSQL + "WHERE (V1.STOCKITEM_GROUP IN (" + strProduct + "))  ";
                    }
                    if (intsuppress > 0)
                    {
                        strSQL = strSQL + "AND (TwelveMonthView.Jan +TwelveMonthView.Feb +TwelveMonthView.mar +TwelveMonthView.Apr +TwelveMonthView.May +TwelveMonthView.Jun +TwelveMonthView.Jul +TwelveMonthView.Aug +TwelveMonthView.Sep +TwelveMonthView.Oct +TwelveMonthView.Nov +TwelveMonthView.Dec ) <> 0 ";
                    }
                   
                    strSQL = strSQL + "GROUP BY  V1.STOCKITEM_NAME, V1.STOCKITEM_GROUP, V1.ITEM_CATEGORY, V1.LEDGER_NAME ";
                    strSQL = strSQL + "ORDER BY V1.LEDGER_NAME ,V1.STOCKITEM_GROUP,V1.STOCKITEM_NAME ";

                }
                if (intMode == 3)
                {
                    strSQL = "SELECT V1.STOCKITEM_NAME, V1.STOCKITEM_GROUP, ISNULL(SUM(TwelveMonthView.Jan),0) AS Jan, ISNULL(SUM(TwelveMonthView.Feb),0) AS Feb, ISNULL(SUM(TwelveMonthView.Mar),0) AS mar, ISNULL(SUM(TwelveMonthView.Apr),0) AS Apr, ISNULL(SUM(TwelveMonthView.May),0) ";
                    strSQL = strSQL + "AS May, ISNULL(SUM(TwelveMonthView.Jun),0) AS Jun, ISNULL(SUM(TwelveMonthView.Jul),0) AS Jul, ISNULL(SUM(TwelveMonthView.Aug),0) AS Aug, ISNULL(SUM(TwelveMonthView.Sep),0) AS Sep, ISNULL(SUM(TwelveMonthView.Oct),0) AS Oct, ISNULL(SUM(TwelveMonthView.Nov),0)  ";
                    strSQL = strSQL + "AS Nov, ISNULL(SUM(TwelveMonthView.Dec),0) AS Dec, V1.ITEM_CATEGORY, V1.LEDGER_NAME ";
                    strSQL = strSQL + "FROM TWELVE_MONTH_SALES_TEMP AS V1 LEFT OUTER JOIN ";
                    strSQL = strSQL + "TwelveMonthView ON V1.LEDGER_NAME = TwelveMonthView.AREA AND V1.STOCKITEM_NAME = TwelveMonthView.STOCKITEM_NAME ";
                    if (strPType == "P")
                    {
                        if (strProduct.Length < 1000)
                        {
                            strSQL = strSQL + "WHERE (V1.STOCKITEM_NAME IN (" + strProduct + "))  ";
                        }
                    }
                    else
                    {
                        strSQL = strSQL + "WHERE (V1.STOCKITEM_GROUP IN (" + strProduct + "))  ";
                    }
                    if (intsuppress > 0)
                    {
                        strSQL = strSQL + "AND (TwelveMonthView.Jan +TwelveMonthView.Feb +TwelveMonthView.mar +TwelveMonthView.Apr +TwelveMonthView.May +TwelveMonthView.Jun +TwelveMonthView.Jul +TwelveMonthView.Aug +TwelveMonthView.Sep +TwelveMonthView.Oct +TwelveMonthView.Nov +TwelveMonthView.Dec ) <> 0 ";
                    }
                    
                    strSQL = strSQL + "GROUP BY V1.STOCKITEM_NAME, V1.STOCKITEM_GROUP, V1.ITEM_CATEGORY, V1.LEDGER_NAME ";
                    strSQL = strSQL + "ORDER BY V1.LEDGER_NAME ,V1.STOCKITEM_GROUP,V1.STOCKITEM_NAME ";

                }
                if (intMode == 2)
                {
                    strSQL = "SELECT V1.STOCKITEM_NAME, V1.STOCKITEM_GROUP, ISNULL(SUM(TwelveMonthView.Jan),0) AS Jan, ISNULL(SUM(TwelveMonthView.Feb),0) AS Feb, ISNULL(SUM(TwelveMonthView.Mar),0) AS mar, ISNULL(SUM(TwelveMonthView.Apr),0) AS Apr, ISNULL(SUM(TwelveMonthView.May),0) ";
                    strSQL = strSQL + "AS May, ISNULL(SUM(TwelveMonthView.Jun),0) AS Jun, ISNULL(SUM(TwelveMonthView.Jul),0) AS Jul, ISNULL(SUM(TwelveMonthView.Aug),0) AS Aug, ISNULL(SUM(TwelveMonthView.Sep),0) AS Sep, ISNULL(SUM(TwelveMonthView.Oct),0) AS Oct, ISNULL(SUM(TwelveMonthView.Nov),0)  ";
                    strSQL = strSQL + "AS Nov, ISNULL(SUM(TwelveMonthView.Dec),0) AS Dec, V1.ITEM_CATEGORY, V1.LEDGER_NAME ";
                    strSQL = strSQL + "FROM TWELVE_MONTH_SALES_TEMP AS V1 LEFT OUTER JOIN ";
                    strSQL = strSQL + "TwelveMonthView ON V1.LEDGER_NAME = TwelveMonthView.DIVISION AND V1.STOCKITEM_NAME = TwelveMonthView.STOCKITEM_NAME ";
                    if (strPType == "P")
                    {
                        if (strProduct.Length < 1000)
                        {
                            strSQL = strSQL + "WHERE (V1.STOCKITEM_NAME IN (" + strProduct + "))  ";
                        }
                    }
                    else
                    {
                        strSQL = strSQL + "WHERE (V1.STOCKITEM_GROUP IN (" + strProduct + "))  ";
                    }
                    if (intsuppress > 0)
                    {
                        strSQL = strSQL + "AND (TwelveMonthView.Jan +TwelveMonthView.Feb +TwelveMonthView.mar +TwelveMonthView.Apr +TwelveMonthView.May +TwelveMonthView.Jun +TwelveMonthView.Jul +TwelveMonthView.Aug +TwelveMonthView.Sep +TwelveMonthView.Oct +TwelveMonthView.Nov +TwelveMonthView.Dec ) <> 0 ";
                    }

                    strSQL = strSQL + "GROUP BY V1.STOCKITEM_NAME, V1.STOCKITEM_GROUP, V1.ITEM_CATEGORY, V1.LEDGER_NAME ";
                    strSQL = strSQL + "ORDER BY V1.LEDGER_NAME ,V1.STOCKITEM_GROUP,V1.STOCKITEM_NAME ";
                    
                }
                if (intMode == 1)
                {
                    strSQL = "SELECT V1.STOCKITEM_NAME, V1.STOCKITEM_GROUP, ISNULL(SUM(TwelveMonthView.Jan),0) AS Jan, ISNULL(SUM(TwelveMonthView.Feb),0) AS Feb, ISNULL(SUM(TwelveMonthView.Mar),0) AS mar, ISNULL(SUM(TwelveMonthView.Apr),0) AS Apr, ISNULL(SUM(TwelveMonthView.May),0) ";
                    strSQL = strSQL + "AS May, ISNULL(SUM(TwelveMonthView.Jun),0) AS Jun, ISNULL(SUM(TwelveMonthView.Jul),0) AS Jul, ISNULL(SUM(TwelveMonthView.Aug),0) AS Aug, ISNULL(SUM(TwelveMonthView.Sep),0) AS Sep, ISNULL(SUM(TwelveMonthView.Oct),0) AS Oct, ISNULL(SUM(TwelveMonthView.Nov),0)  ";
                    strSQL = strSQL + "AS Nov, ISNULL(SUM(TwelveMonthView.Dec),0) AS Dec, V1.ITEM_CATEGORY, V1.LEDGER_NAME ";
                    strSQL = strSQL + "FROM TWELVE_MONTH_SALES_TEMP AS V1 LEFT OUTER JOIN ";
                    strSQL = strSQL + "TwelveMonthView ON V1.LEDGER_NAME = TwelveMonthView.ZONE AND V1.STOCKITEM_NAME = TwelveMonthView.STOCKITEM_NAME ";
                    if (strPType == "P")
                    {
                        if (strProduct.Length < 1000)
                        {
                            strSQL = strSQL + "WHERE (V1.STOCKITEM_NAME IN (" + strProduct + "))  ";
                        }
                    }
                    else
                    {
                        strSQL = strSQL + "WHERE (V1.STOCKITEM_GROUP IN (" + strProduct + "))  ";
                    }
                    if (intsuppress > 0)
                    {
                        strSQL = strSQL + "AND (TwelveMonthView.Jan +TwelveMonthView.Feb +TwelveMonthView.mar +TwelveMonthView.Apr +TwelveMonthView.May +TwelveMonthView.Jun +TwelveMonthView.Jul +TwelveMonthView.Aug +TwelveMonthView.Sep +TwelveMonthView.Oct +TwelveMonthView.Nov +TwelveMonthView.Dec ) <> 0 ";
                    }
                    strSQL = strSQL + "GROUP BY V1.STOCKITEM_NAME, V1.STOCKITEM_GROUP, V1.ITEM_CATEGORY, V1.LEDGER_NAME ";
                    strSQL = strSQL + "ORDER BY V1.LEDGER_NAME ,V1.STOCKITEM_GROUP,V1.STOCKITEM_NAME ";
                }

                cmdInsert.CommandText = strSQL;
                cmdInsert.Connection = gcnMain;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {

                    RSalesPurchase oLedg = new RSalesPurchase();
                    oLedg.strStockGroupName = dr["STOCKITEM_GROUP"].ToString();
                    oLedg.strLedgerNameMerze = dr["LEDGER_NAME"].ToString();
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.strStockGroupPrimary = dr["ITEM_CATEGORY"].ToString();
                    if (dr["Jan"].ToString() != "")
                    {
                        oLedg.dblSalQty1 = Convert.ToDouble(dr["Jan"].ToString());
                    }
                    else
                    {
                        oLedg.dblSalQty1 = 0;
                    }
                    if (dr["Feb"].ToString() != "")
                    {
                        oLedg.dblSalQty2 = Convert.ToDouble(dr["Feb"].ToString());
                    }
                    else
                    {
                        oLedg.dblSalQty2 = 0;
                    }
                    if (dr["Mar"].ToString() != "")
                    {
                        oLedg.dblSalQty3 = Convert.ToDouble(dr["Mar"].ToString());
                    }
                    else
                    {
                        oLedg.dblSalQty3 = 0;
                    }
                    if (dr["Apr"].ToString() != "")
                    {
                        oLedg.dblSalQty4 = Convert.ToDouble(dr["Apr"].ToString());
                    }
                    else
                    {
                        oLedg.dblSalQty4 = 0;
                    }
                    if (dr["May"].ToString() != "")
                    {
                        oLedg.dblSalQty5 = Convert.ToDouble(dr["May"].ToString());
                    }
                    else
                    {
                        oLedg.dblSalQty5 = 0;
                    }
                    if (dr["Jun"].ToString() != "")
                    {
                        oLedg.dblSalQty6 = Convert.ToDouble(dr["Jun"].ToString());
                    }
                    else
                    {
                        oLedg.dblSalQty6 = 0;
                    }
                    if (dr["Jul"].ToString() != "")
                    {
                        oLedg.dblSalQty7 = Convert.ToDouble(dr["Jul"].ToString());
                    }
                    else
                    {
                        oLedg.dblSalQty7 = 0;
                    }
                    if (dr["Aug"].ToString() != "")
                    {
                        oLedg.dblSalQty8 = Convert.ToDouble(dr["Aug"].ToString());
                    }
                    else
                    {
                        oLedg.dblSalQty8 = 0;
                    }
                    if (dr["Sep"].ToString() != "")
                    {
                        oLedg.dblSalQty9 = Convert.ToDouble(dr["Sep"].ToString());
                    }
                    else
                    {
                        oLedg.dblSalQty9 = 0;
                    }
                    if (dr["Oct"].ToString() != "")
                    {
                        oLedg.dblSalQty10 = Convert.ToDouble(dr["Oct"].ToString());
                    }
                    else
                    {
                        oLedg.dblSalQty10 = 0;
                    }
                    if (dr["Nov"].ToString() != "")
                    {
                        oLedg.dblSalQty11 = Convert.ToDouble(dr["Nov"].ToString());
                    }
                    else
                    {
                        oLedg.dblSalQty11 = 0;
                    }
                    if (dr["Dec"].ToString() != "")
                    {
                        oLedg.dblSalQty12 = Convert.ToDouble(dr["Dec"].ToString());
                    }
                    else
                    {
                        oLedg.dblSalQty12 = 0;
                    }

                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RSalesPurchase oLedg = new RSalesPurchase();
                    oLedg.strLedgerGroupPrimary = "";
                    oLedg.strLedgerGroupParent = "";
                    oLedg.strGroupAMFM = "";
                    oLedg.strStockGroupName = "";
                    oLedg.strLedgerNameMerze = "";
                    oLedg.strItemName = "";
                    oLedg.strStockGroupPrimary = "";
                    oLedg.dblSalQty1 = 0;
                    oLedg.dblSalQty2 = 0;
                    oLedg.dblSalQty3 = 0;
                    oLedg.dblSalQty4 = 0;
                    oLedg.dblSalQty5 = 0;
                    oLedg.dblSalQty6 = 0;
                    oLedg.dblSalQty7 = 0;
                    oLedg.dblSalQty8 = 0;
                    oLedg.dblSalQty9 = 0;
                    oLedg.dblSalQty10 = 0;
                    oLedg.dblSalQty11 = 0;
                    oLedg.dblSalQty12 = 0;
                    ooAccLedger.Add(oLedg);
                }

                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }
        }


        #endregion
        #region "VaoucherSalesOrder"
        public List<RSalesPurchase> mGetVoucherSalesOrlder(string strDeComID, string strFDate, string strTDate, string strLedgername, string strBranchId, int intMode, int Selection)
        {
            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;

                List<RSalesPurchase> ooAccLedger = new List<RSalesPurchase>();

                if (Selection == 1)
                {
                    strSQL = "select V.ZONE,V.DIVISION,V.AREA,V.LEDGER_NAME,V.LEDGER_NAME_MERZE,CV.COMP_VOUCHER_DATE,CV.APP_STATUS, ";
                    strSQL = strSQL + "SUBSTRING(CV.COMP_REF_NO,7,30) SalesOrder,CV.APPS_CUSTOMER_MERZE,S.STOCKGROUP_NAME,B.STOCKITEM_NAME,B.BILL_QUANTITY, ";
                    strSQL = strSQL + "CV.COMP_VOUCHER_AMOUNT,B.ADD_LESS_AMOUNT,B.BILL_NET_AMOUNT ";
                    strSQL = strSQL + "from ACC_COMPANY_VOUCHER CV, ACC_LEDGER_Z_D_A V,ACC_BILL_TRAN_PROCESS B,INV_STOCKITEM S ";
                    strSQL = strSQL + "WHERE CV.LEDGER_NAME= V.LEDGER_NAME and CV.COMP_REF_NO= B.COMP_REF_NO and B.STOCKITEM_NAME=S.STOCKITEM_NAME  ";
                    strSQL = strSQL + "and (CV.COMP_VOUCHER_TYPE = 12) ";
                }
                else
                {
                    strSQL = "select V.ZONE,V.DIVISION,V.AREA,V.LEDGER_NAME,V.LEDGER_NAME_MERZE,CV.COMP_VOUCHER_DATE,CV.APP_STATUS, ";
                    strSQL = strSQL + "SUBSTRING(CV.COMP_REF_NO,7,30) SalesOrder,CV.APPS_CUSTOMER_MERZE,sum(B.BILL_QUANTITY) as BILL_QUANTITY, ";
                    strSQL = strSQL + "sum(CV.COMP_VOUCHER_AMOUNT) as COMP_VOUCHER_AMOUNT,sum(B.ADD_LESS_AMOUNT) as ADD_LESS_AMOUNT,sum(B.BILL_NET_AMOUNT)as BILL_NET_AMOUNT ";
                    strSQL = strSQL + "from ACC_COMPANY_VOUCHER CV, ACC_LEDGER_Z_D_A V,ACC_BILL_TRAN_PROCESS B,INV_STOCKITEM S ";
                    strSQL = strSQL + "WHERE CV.LEDGER_NAME= V.LEDGER_NAME and CV.COMP_REF_NO= B.COMP_REF_NO and B.STOCKITEM_NAME=S.STOCKITEM_NAME  and (CV.COMP_VOUCHER_TYPE = 12) ";

                }

                if (strFDate != "")
                {
                    strSQL = strSQL + "AND (B.COMP_VOUCHER_DATE >= (" + Utility.cvtSQLDateString(strFDate) + ")) ";
                }
                if (strTDate != "")
                {
                    strSQL = strSQL + " and(B.COMP_VOUCHER_DATE <= (" + Utility.cvtSQLDateString(strTDate) + ")) ";
                }

                if (intMode == 4)
                {
                    if (strLedgername != "")
                    {
                        strSQL = strSQL + "AND V.LEDGER_NAME_MERZE IN (" + strLedgername + ") ";
                    }

                }
                if (intMode == 3)
                {
                    if (strLedgername != "")
                    {
                        strSQL = strSQL + "AND V.AREA IN (" + strLedgername + ") ";
                    }

                }
                if (intMode == 2)
                {
                    if (strLedgername != "")
                    {
                        strSQL = strSQL + "AND V.DIVISION IN (" + strLedgername + ") ";
                    }

                }
                if (intMode == 1)
                {
                    if (strLedgername != "")
                    {
                        strSQL = strSQL + "AND V.ZONE IN (" + strLedgername + ") ";
                    }

                }
                if (Selection == 1)
                {
                    strSQL = strSQL + "ORDER BY B.COMP_VOUCHER_DATE, B.COMP_REF_NO, V.LEDGER_NAME_MERZE,B.STOCKITEM_NAME  ";
                }
                else
                {
                    strSQL = strSQL + "group by V.ZONE,V.DIVISION,V.AREA,V.LEDGER_NAME,V.LEDGER_NAME_MERZE,CV.COMP_VOUCHER_DATE, ";
                    strSQL = strSQL + "CV.COMP_REF_NO,CV.APPS_CUSTOMER_MERZE,CV.APP_STATUS ";
                    strSQL = strSQL + "ORDER BY CV.COMP_VOUCHER_DATE, SUBSTRING(CV.COMP_REF_NO,7,30), V.LEDGER_NAME_MERZE ";
                }


                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    RSalesPurchase oLedg = new RSalesPurchase();

                    oLedg.strZone = dr["ZONE"].ToString();
                    oLedg.strLedgerNameMerze = dr["LEDGER_NAME_MERZE"].ToString();
                    oLedg.strVDate = Convert.ToDateTime(dr["COMP_VOUCHER_DATE"]).ToString("dd-MMM-yyyy");
                    oLedg.strOrderNo = dr["SalesOrder"].ToString();
                    oLedg.strLedgerName = dr["APPS_CUSTOMER_MERZE"].ToString();
                    if (Selection == 1)
                    {
                        oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                        oLedg.strStockGroupName = dr["STOCKGROUP_NAME"].ToString();
                    }
                    oLedg.intRCount = Convert.ToInt32(dr["APP_STATUS"].ToString());
                    oLedg.dblBilQty = Convert.ToDouble(dr["BILL_QUANTITY"].ToString());
                    oLedg.dblBillAmount = Convert.ToDouble(dr["COMP_VOUCHER_AMOUNT"].ToString());
                    oLedg.dblAddLess = Convert.ToDouble(dr["ADD_LESS_AMOUNT"].ToString());
                    oLedg.dblNetBillAmount = Convert.ToDouble(dr["BILL_NET_AMOUNT"].ToString());


                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RSalesPurchase oLedg = new RSalesPurchase();
                    oLedg.intRCount = 0;
                    oLedg.strvouchearDate = "";
                    oLedg.strOrderNo = "";
                    oLedg.strVDate = "";
                    oLedg.strItemName = "";
                    oLedg.dblBilQty = 0;
                    oLedg.dblNetBillAmount = 0;
                    oLedg.strLedgerName = "";
                    oLedg.strPostal = "";
                    oLedg.strCity = "";
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();
                gcnMain.Close();
                cmd.Dispose();
                return ooAccLedger;
            }
        }
        #endregion
        #region "Update Production"
        public string gUpdateProductionOrder(string strDeComID, string strCompRefNo, int appStatus,string strtoGodowns)
        {
            {
                string strSQL, strInOutFlg = "",vsreRefNo="";
                string conDb;
                SqlDataReader dr;
                conDb = Utility.SQLConnstringComSwitch(strDeComID);
                using (SqlConnection gcnMain = new SqlConnection(conDb))
                {
                    if (gcnMain.State == ConnectionState.Open)
                    {
                        gcnMain.Close();
                    }
                    gcnMain.Open();

                   
                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    strSQL = "UPDATE INV_PRODUCTION_MASTER SET APP_STATUS =" + appStatus + " ";
                    strSQL = strSQL + "WHERE VOUCHER_NO='" + strCompRefNo + "' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    if (appStatus == 1)
                    {

                        strInOutFlg = "O";
                        strSQL = "INSERT INTO INV_MASTER(INV_REF_NO,INV_VOUCHER_TYPE,INV_DATE,INV_NARRATIONS,INV_LOG_NO,PROCESS_NAME,BRANCH_ID,AGNST_COMP_REF_NO) ";
                        strSQL = strSQL + "SELECT '" + strCompRefNo + "'," + (int)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION + ",VOUCHER_DATE,NARRATION,INV_LOG_NO,PROCESS_NAME,BRANCH_ID,'" + strCompRefNo + "' FROM INV_PRODUCTION_MASTER ";
                        strSQL = strSQL + "WHERE VOUCHER_NO = '" + strCompRefNo + "' ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();


                        strSQL = "INSERT INTO INV_TRAN(INV_TRAN_KEY,INV_TRAN_POSITION,INV_REF_NO,STOCKITEM_NAME,INV_VOUCHER_TYPE,INV_DATE,BRANCH_ID, ";
                        strSQL = strSQL + "INV_TRAN_QUANTITY,INV_TRAN_RATE,INV_TRAN_AMOUNT,GODOWNS_NAME,INV_LOG_NO,INV_INOUT_FLAG,OUTWARD_QUANTITY,OUTWARD_SALES_AMOUNT,";
                        strSQL = strSQL + "PROCESS_NAME ,INV_UOM ,INV_PER )";
                        strSQL = strSQL + "SELECT C.INV_KEY,C.INV_TRAN_POSITION,'" + strCompRefNo + "',C.STOCKITEM_NAME," + (long)Utility.VOUCHER_TYPE.vtSTOCK_MFG_CONSUMPTION + " ";
                        strSQL = strSQL + ",M.VOUCHER_DATE,M.BRANCH_ID,C.QNTY *-1,C.RATE,C.AMNT*-1,M.CONSUMPTION_GODWNS_NAME,M.INV_LOG_NO,'" + strInOutFlg + "',";
                        strSQL = strSQL + "C.QNTY *-1,C.AMNT*-1,M.PROCESS_NAME,C.STOCKITEM_BASEUNITS,C.STOCKITEM_BASEUNITS ";
                        strSQL = strSQL + "FROM INV_PRODUCTION_MASTER M,INV_PRODUCTION_CHILD C WHERE M.VOUCHER_NO =C.VOUCHER_NO  ";
                        strSQL = strSQL + "AND C.PROCESS_TYPE IN (1,2) AND M.VOUCHER_NO ='" + strCompRefNo + "' ";
                        strSQL = strSQL + "AND C.QNTY > 0 ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();


                        strSQL = "INSERT INTO INV_TRAN(INV_TRAN_KEY,INV_TRAN_POSITION,INV_REF_NO,STOCKITEM_NAME,INV_VOUCHER_TYPE,INV_DATE,BRANCH_ID, ";
                        strSQL = strSQL + "INV_TRAN_QUANTITY,INV_TRAN_RATE,INV_TRAN_AMOUNT,GODOWNS_NAME,INV_LOG_NO,INV_INOUT_FLAG,OUTWARD_QUANTITY,OUTWARD_SALES_AMOUNT,";
                        strSQL = strSQL + "PROCESS_NAME ,INV_UOM ,INV_PER )";
                        strSQL = strSQL + "SELECT C.INV_KEY,C.INV_TRAN_POSITION,'" + strCompRefNo + "',C.STOCKITEM_NAME," + (long)Utility.VOUCHER_TYPE.vtSTOCK_DAMAGE + " ";
                        strSQL = strSQL + ",M.VOUCHER_DATE,M.BRANCH_ID,C.QNTY *-1,C.RATE,C.AMNT*-1,M.CONSUMPTION_GODWNS_NAME,M.INV_LOG_NO,'" + strInOutFlg + "',";
                        strSQL = strSQL + "C.QNTY *-1,C.AMNT*-1,M.PROCESS_NAME,C.STOCKITEM_BASEUNITS,C.STOCKITEM_BASEUNITS ";
                        strSQL = strSQL + "FROM INV_PRODUCTION_MASTER M,INV_PRODUCTION_CHILD C WHERE M.VOUCHER_NO =C.VOUCHER_NO  ";
                        strSQL = strSQL + "AND C.PROCESS_TYPE IN (3,4) AND M.VOUCHER_NO ='" + strCompRefNo + "' ";
                        strSQL = strSQL + "AND C.QNTY > 0 ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                        strInOutFlg = "I";

                        strSQL = "INSERT INTO INV_TRAN(INV_TRAN_KEY,INV_TRAN_POSITION,INV_REF_NO,STOCKITEM_NAME,INV_VOUCHER_TYPE,INV_DATE,BRANCH_ID, ";
                        strSQL = strSQL + "INV_TRAN_QUANTITY,INV_TRAN_RATE,INV_TRAN_AMOUNT,GODOWNS_NAME,INV_LOG_NO,INV_INOUT_FLAG,INWARD_QUANTITY,";
                        strSQL = strSQL + "INWARD_AMOUNT,PROCESS_NAME ,INV_UOM ,INV_PER) ";
                        strSQL = strSQL + "SELECT C.INV_KEY,C.INV_TRAN_POSITION,'" + strCompRefNo + "',C.STOCKITEM_NAME," + (long)Utility.VOUCHER_TYPE.vtSTOCK_MFG_VOUCHER + " ";
                        strSQL = strSQL + ",M.VOUCHER_DATE,M.BRANCH_ID,C.QNTY ,C.RATE,C.AMNT,'" + strtoGodowns + "',M.INV_LOG_NO,'" + strInOutFlg + "',";
                        strSQL = strSQL + "C.QNTY ,C.AMNT,M.PROCESS_NAME,C.STOCKITEM_BASEUNITS,C.STOCKITEM_BASEUNITS ";
                        strSQL = strSQL + "FROM INV_PRODUCTION_MASTER M,INV_PRODUCTION_CHILD C WHERE M.VOUCHER_NO =C.VOUCHER_NO  ";
                        strSQL = strSQL + "AND C.PROCESS_TYPE IN (0) AND M.VOUCHER_NO ='" + strCompRefNo + "' ";
                        strSQL = strSQL + "AND C.QNTY > 0 ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    else
                    {
                        strSQL = "SELECT INV_REF_NO,AGNST_COMP_REF_NO FROM INV_MASTER WHERE AGNST_COMP_REF_NO='" + strCompRefNo + "' ";
                        cmdInsert.CommandText = strSQL;
                        dr = cmdInsert.ExecuteReader();
                        if (dr.Read())
                        {
                            vsreRefNo = dr["INV_REF_NO"].ToString();
                            dr.Close();
                            strSQL = "DELETE FROM INV_TRAN WHERE INV_REF_NO='" + vsreRefNo + "' ";
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();
                            strSQL = "DELETE FROM INV_MASTER WHERE INV_REF_NO='" + vsreRefNo + "' ";
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();
                        }
                        else
                        {
                            dr.Close();
                            strSQL = "DELETE FROM INV_TRAN WHERE INV_REF_NO='" + strCompRefNo + "' ";
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();
                            strSQL = "DELETE FROM INV_MASTER WHERE INV_REF_NO='" + strCompRefNo + "' ";
                            cmdInsert.CommandText = strSQL;
                            cmdInsert.ExecuteNonQuery();
                        }
                        dr.Close();
                    }
                  
                    cmdInsert.Transaction.Commit();

                    gcnMain.Close();
                    gcnMain.Dispose();
                    return "1";
                }

            }
        }
        #endregion
        #region "LedgerAutoJV"
        public List<AccountsLedger> mFillautoJVLedger(string strDeComID)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<AccountsLedger> ooLed = new List<AccountsLedger>();

            strSQL = "SELECT DISTINCT ACC_VOUCHER.REVERSE_LEDGER1 LEDGER_NAME,ACC_LEDGER.LEDGER_NAME_MERZE FROM ACC_VOUCHER,ACC_LEDGER  where ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.REVERSE_LEDGER1 AND ";
            strSQL = strSQL + "ACC_VOUCHER.AUTOJV=1 AND ACC_LEDGER.LEDGER_STATUS=0 AND (ACC_VOUCHER.REVERSE_LEDGER1 NOT LIKE '%HL%' AND ACC_VOUCHER.REVERSE_LEDGER1 NOT LIKE '%PF%') ";
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    AccountsLedger ogrp = new AccountsLedger();
                    ogrp.strLedgerName = drGetGroup["LEDGER_NAME"].ToString();
                    ogrp.strmerzeString = drGetGroup["LEDGER_NAME_MERZE"].ToString();
                    ooLed.Add(ogrp);

                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return ooLed;

            }
        }
        #endregion
        //#region "Product Top Sheet"
        //public List<RStockInformation> mGetProductTopSheetSalesPrice(string strDeComID, string strFdate, string strTDate)
        //{
        //    string strSQL = null;
        //    SqlDataReader dr;

        //    List<RStockInformation> ooAccLedger = new List<RStockInformation>();
        //    connstring = Utility.SQLConnstringComSwitch(strDeComID);
        //    using (SqlConnection gcnMain = new SqlConnection(connstring))
        //    {
        //        if (gcnMain.State == ConnectionState.Open)
        //        {
        //            gcnMain.Close();
        //        }
        //        gcnMain.Open();
        //        SqlCommand cmdInsert = new SqlCommand();


        //        string striItemName = "", strItemNameNew = "";
        //        SqlTransaction myTrans;
        //        myTrans = gcnMain.BeginTransaction();
        //        cmdInsert.Connection = gcnMain;
        //        cmdInsert.Transaction = myTrans;

        //        strSQL = "DELETE FROM INV_SALES_PRICE_RPT ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();
        //        strSQL = "DELETE FROM INV_FINISHED_ITEM_STATEMENT ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();

        //        //strSQL = "SELECT STOCKITEM_NAME FROM INV_STOCKITEM  ";
        //        //strSQL = strSQL + "WHERE STOCKITEM_PRIMARY_GROUP='Finished Goods' ";
        //        //cmdInsert.CommandText = strSQL;
        //        //dr = cmdInsert.ExecuteReader();
        //        //while (dr.Read())
        //        //{
        //        //    striItemName = striItemName + dr["STOCKITEM_NAME"].ToString().Replace("'", "''") + "|" + 0 + "~";
        //        //}
        //        //dr.Close();


        //        //string[] words = striItemName.Split('~');
        //        //foreach (string branch in words)
        //        //{
        //        //    string[] words1 = branch.Split('|');
        //        //    if (words1[0].ToString() != "")
        //        //    {
        //        //        strSQL = "SELECT STOCKITEM_NAME,SALES_PRICE_EFFECTIVE_DATE,SALES_PRICE_AMOUNT  from INV_SALES_PRICE ";
        //        //        strSQL = strSQL + " WHERE STOCKITEM_NAME ='" + words1[0] + "' ";
        //        //        strSQL = strSQL + "and SALES_PRICE_EFFECTIVE_DATE < " + Utility.cvtSQLDateString(strTDate) + " ";
        //        //        strSQL = strSQL + "AND SALES_PRICE_AMOUNT > 0 ";
        //        //        strSQL = strSQL + "ORDER by SALES_PRICE_EFFECTIVE_DATE DESC ";
        //        //        cmdInsert.CommandText = strSQL;
        //        //        dr = cmdInsert.ExecuteReader();
        //        //        if (dr.Read())
        //        //        {
        //        //            strItemNameNew = strItemNameNew + dr["STOCKITEM_NAME"].ToString().Replace("'", "''") + "|" + "" + "|" + dr["SALES_PRICE_AMOUNT"] + "|" + 0 + "~";
        //        //        }
        //        //        dr.Close();
        //        //    }
        //        //}

        //        //if (strItemNameNew != "")
        //        //{
        //        //    string[] wordsnew = strItemNameNew.Split('~');
        //        //    foreach (string branch in wordsnew)
        //        //    {
        //        //        string[] words1 = branch.Split('|');
        //        //        if (words1[0].ToString() != "")
        //        //        {
        //        //            strSQL = "INSERT INTO INV_SALES_PRICE_RPT(STOCKITEM_NAME,SALES_PRICE_EFFECTIVE_DATE,SALES_PRICE_AMOUNT)";
        //        //            strSQL = strSQL + "VALUES(";
        //        //            strSQL = strSQL + "'" + words1[0] + "' ";
        //        //            if (words1[1].ToString() != "")
        //        //            {
        //        //                strSQL = strSQL + "," + Utility.cvtSQLDateString(words1[1]) + "";
        //        //            }
        //        //            else
        //        //            {
        //        //                strSQL = strSQL + ",NULL";
        //        //            }
        //        //            if (words1[2].ToString() != "0")
        //        //            {
        //        //                strSQL = strSQL + "," + words1[2] + "";
        //        //            }
        //        //            else
        //        //            {
        //        //                strSQL = strSQL + "," + words1[3] + "";
        //        //            }
        //        //            strSQL = strSQL + ")";
        //        //            cmdInsert.CommandText = strSQL;
        //        //            cmdInsert.ExecuteNonQuery();
        //        //        }
        //        //    }
        //        //}


        //        //strSQL = "INSERT INTO INV_SALES_PRICE_RPT(STOCKITEM_NAME,SALES_PRICE_EFFECTIVE_DATE,SALES_PRICE_AMOUNT) ";
        //        //strSQL = strSQL + "SELECT STOCKITEM_NAME,SALES_PRICE_EFFECTIVE_DATE,SALES_PRICE_AMOUNT  FROM INV_SALES_PRICE ";
        //        //strSQL = strSQL + "WHERE SALES_PRICE_EFFECTIVE_DATE <= " + Utility.cvtSQLDateString(strTDate) + " ";
        //        //strSQL = strSQL + "ORDER BY SALES_PRICE_EFFECTIVE_DATE DESC ";
        //        //cmdInsert.CommandText = strSQL;
        //        //cmdInsert.ExecuteNonQuery();

                
        //        strSQL = "INSERT INTO INV_SALES_PRICE_RPT(STOCKITEM_NAME,SALES_PRICE_AMOUNT,SALES_PRICE_EFFECTIVE_DATE) ";
        //        strSQL = strSQL + "SELECT STOCKITEM_NAME, SALES_PRICE_AMOUNT,SALES_PRICE_EFFECTIVE_DATE ";
        //        strSQL = strSQL + "FROM (SELECT STOCKITEM_NAME,SALES_PRICE_EFFECTIVE_DATE, SALES_PRICE_AMOUNT, ";
        //        strSQL = strSQL + "ROW_NUMBER() OVER (PARTITION BY STOCKITEM_NAME ORDER BY SALES_PRICE_EFFECTIVE_DATE DESC) rank ";
        //        strSQL = strSQL + "FROM INV_SALES_PRICE) a ";
        //        strSQL = strSQL + "WHERE a.rank = 1  ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();

        //        //---OPening

        //        strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
        //        strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  isnull(sum(t.INV_TRAN_QUANTITY  * r.SALES_PRICE_AMOUNT),0) as opn  ";
        //        strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
        //        strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
        //        strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
        //        strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
        //        strSQL = strSQL + "AND t.INV_VOUCHER_TYPE=0 ";
        //        strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();
        //        strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
        //        strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  0 opn  ";
        //        strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
        //        strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
        //        strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
        //        strSQL = strSQL + "AND t.INV_VOUCHER_TYPE=0 ";
        //        strSQL = strSQL + "AND s.STOCKGROUP_NAME='Dilution' ";
        //        strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();
        //        strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
        //        strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  abs(isnull(sum(t.INV_TRAN_QUANTITY * r.SALES_PRICE_AMOUNT),0)) as opn  ";
        //        strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
        //        strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
        //        strSQL = strSQL + "AND t.INV_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
        //        strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
        //        strSQL = strSQL + "and t.INV_VOUCHER_TYPE in (27,29) ";
        //        strSQL = strSQL + "and t.INV_INOUT_FLAG='I' ";
        //        strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();

        //        strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
        //        strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs(isnull(sum(t.BILL_QUANTITY  * r.SALES_PRICE_AMOUNT),0)) *-1 as opn  ";
        //        strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t, INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
        //        strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
        //        strSQL = strSQL + "AND t.COMP_VOUCHER_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
        //        strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
        //        strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
        //        strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();


        //        strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
        //        strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  abs(isnull(sum(abs(BILL_ADD_LESS_AMOUNT)),0)) as opn  ";
        //        strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t  where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
        //        strSQL = strSQL + "AND t.COMP_VOUCHER_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
        //        strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
        //        strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
        //        strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();

        //        strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
        //        strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  abs(isnull(sum(abs(BILL_ADD_LESS_AMOUNT)),0))*-1 as opn  ";
        //        strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t  where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
        //        strSQL = strSQL + "AND t.COMP_VOUCHER_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
        //        strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
        //        strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
        //        strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();

        //        strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
        //        strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs( isnull(sum(t.INV_TRAN_QUANTITY * r.SALES_PRICE_AMOUNT),0))*-1 as opn  ";
        //        strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c,INV_STOCKGROUP g,INV_SALES_PRICE_RPT r  where s.STOCKITEM_NAME =t.STOCKITEM_NAME AND s.STOCKGROUP_NAME = g.STOCKGROUP_NAME ";
        //        strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
        //        strSQL = strSQL + " AND  c.COMP_REF_NO=t.INV_REF_NO AND t.INV_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
        //        strSQL = strSQL + " AND g.STOCKGROUP_PRIMARY_TYPE =3 and g.STOCKGROUP_SECONDARY_TYPE =0 ";
        //        strSQL = strSQL + " AND c.SAMPLE_STATUS=1 ";
        //        strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
        //        strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();

        //        strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
        //        strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs(isnull(sum(t.BILL_QUANTITY_BONUS  * r.SALES_PRICE_AMOUNT),0))*-1 as opn  ";
        //        strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t, INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
        //        strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
        //        strSQL = strSQL + "AND t.COMP_VOUCHER_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
        //        strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
        //        strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
        //        strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();

        //        strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE)  ";
        //        strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  (isnull(sum(t.INV_TRAN_QUANTITY * r.SALES_PRICE_AMOUNT),0)) *-1 as opn  ";
        //        strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t , INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
        //        strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
        //        strSQL = strSQL + "AND t.INV_DATE  <" + Utility.cvtSQLDateString(strFdate) + " ";
        //        strSQL = strSQL + "and t.INV_VOUCHER_TYPE =24  ";
        //        strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
        //        strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME  ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();
        //        //***********

        //        //--PRODUCTION_QTY
        //        strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,INWARD_VALUE) ";
        //        strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  abs(isnull(sum(t.INV_TRAN_QUANTITY * r.SALES_PRICE_AMOUNT),0)) as opn  ";
        //        strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
        //        strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
        //        strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
        //        strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
        //        strSQL = strSQL + "and t.INV_VOUCHER_TYPE in (27,29) ";
        //        strSQL = strSQL + "and t.INV_INOUT_FLAG='I' ";
        //        strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();
        //        //--SALES_QTY

        //        strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,SALES_VALUE) ";
        //        strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs(isnull(sum(t.BILL_QUANTITY  * r.SALES_PRICE_AMOUNT),0)) as opn  ";
        //        strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t, INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
        //        strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
        //        strSQL = strSQL + "AND t.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
        //        strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
        //        strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
        //        strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();


        //        strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,COMMISSION_VALUE) ";
        //        strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  abs(isnull(sum(abs(BILL_ADD_LESS_AMOUNT)),0)) as opn  ";
        //        strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t  where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
        //        strSQL = strSQL + "AND t.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
        //        strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
        //        strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
        //        strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();

        //        // --SAMPLE_QTY
        //        strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,SAMPLE_VALUE) ";
        //        strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs( isnull(sum(t.INV_TRAN_QUANTITY * r.SALES_PRICE_AMOUNT),0)) as opn  ";
        //        strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c,INV_STOCKGROUP g,INV_SALES_PRICE_RPT r  where s.STOCKITEM_NAME =t.STOCKITEM_NAME AND s.STOCKGROUP_NAME = g.STOCKGROUP_NAME ";
        //        strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
        //        strSQL = strSQL + " AND  c.COMP_REF_NO=t.INV_REF_NO AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
        //        strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
        //        strSQL = strSQL + " AND g.STOCKGROUP_PRIMARY_TYPE =3 and g.STOCKGROUP_SECONDARY_TYPE =0 ";
        //        strSQL = strSQL + " AND c.SAMPLE_STATUS=1 ";
        //        strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();

        //        //bonus value
        //        strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,BONUS_VALUE) ";
        //        strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs(isnull(sum(t.BILL_QUANTITY_BONUS  * r.SALES_PRICE_AMOUNT),0)) as opn  ";
        //        strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t, INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
        //        strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
        //        strSQL = strSQL + "AND t.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
        //        strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
        //        strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
        //        strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();


        //        //--BROKEN_QTY
        //        strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,BROKEN_VALUE)  ";
        //        strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  (isnull(sum(t.INV_TRAN_QUANTITY * r.SALES_PRICE_AMOUNT),0)) as opn  ";
        //        strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t , INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
        //        strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
        //        strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
        //        strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
        //        strSQL = strSQL + "and t.INV_VOUCHER_TYPE =24  ";
        //        strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME  ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();
        //        cmdInsert.Transaction.Commit();



        //        strSQL = "SELECT  STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE,INWARD_VALUE,SALES_VALUE,COMMISSION_VALUE,";
        //        strSQL = strSQL + "BONUS_VALUE,BROKEN_VALUE,STAFF_VALUE,STAFF_COMMISSION,SAMPLE_VALUE from INV_FINISHED_ITEM_STATEMENT_VIEW ";
        //        //strSQL = strSQL + " WHERE STOCKGROUP_NAME ='Dilution' ";
        //        cmdInsert.CommandText = strSQL;
        //        dr = cmdInsert.ExecuteReader();
        //        while (dr.Read())
        //        {
        //            RStockInformation oLedg = new RStockInformation();
        //            oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();
        //            oLedg.strItemName = dr["ITEM_NAME"].ToString();
        //            oLedg.dblOpnAmnt = Convert.ToDouble(dr["OPENING_VALUE"]);
        //            oLedg.dblInwAmount = Math.Abs(Convert.ToDouble(dr["INWARD_VALUE"]));
        //            oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["SALES_VALUE"]));
        //            oLedg.dblCommissionValue = (Convert.ToDouble(dr["COMMISSION_VALUE"]));
        //            oLedg.dblBonusValue = Math.Abs(Convert.ToDouble(dr["BONUS_VALUE"]));
        //            oLedg.dblBrokenValue = (Convert.ToDouble(dr["BROKEN_VALUE"]));
        //            oLedg.dblStaffvalue = Math.Abs(Convert.ToDouble(dr["STAFF_VALUE"]));
        //            //oLedg.dblCommissionValue = Math.Abs(Convert.ToDouble(dr["STAFF_COMMISSION"]));
        //            oLedg.dblSampleValue = Math.Abs(Convert.ToDouble(dr["SAMPLE_VALUE"]));


        //            ooAccLedger.Add(oLedg);
        //        }
        //        if (!dr.HasRows)
        //        {
        //            RStockInformation oLedg = new RStockInformation();
        //            oLedg.strGroupName = "";
        //            oLedg.strItemName = "";
        //            oLedg.dblOpnAmnt = 0;
        //            oLedg.dblInwAmount = 0;
        //            oLedg.dblOutwardAmnt = 0;
        //            oLedg.dblCommissionValue = 0;
        //            oLedg.dblBonusValue = 0;
        //            oLedg.dblBrokenValue = 0;
        //            oLedg.dblStaffvalue = 0;
        //            //oLedg.dblCommissionValue = Math.Abs(Convert.ToDouble(dr["STAFF_COMMISSION"]));
        //            oLedg.dblSampleValue = 0;
        //            ooAccLedger.Add(oLedg);
        //        }
        //        dr.Close();

        //        gcnMain.Close();
        //        return ooAccLedger;
        //    }
        //}
        //#endregion
        #region "Product Top Sheet"
        public List<RStockInformation> mGetProductTopSheetSalesPrice(string strDeComID, string strFdate, string strTDate)
        {
            string strSQL = null;
            SqlDataReader dr;

            List<RStockInformation> ooAccLedger = new List<RStockInformation>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlCommand cmdInsert = new SqlCommand();

               
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;

                strSQL = "DELETE FROM INV_SALES_PRICE_RPT ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "DELETE FROM INV_FINISHED_ITEM_STATEMENT ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "DELETE FROM SAL_PUR_DAILY_TEMP ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "DELETE FROM INV_PROFIT_REPORT ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();



                strSQL = "INSERT INTO SAL_PUR_DAILY_TEMP(STOCKITEM_NAME,RATE) ";
                strSQL = strSQL + "SELECT STOCKITEM_NAME, SALES_PRICE_AMOUNT ";
                strSQL = strSQL + "FROM (SELECT STOCKITEM_NAME,SALES_PRICE_AMOUNT, ";
                strSQL = strSQL + "ROW_NUMBER() OVER (PARTITION BY STOCKITEM_NAME ORDER BY SALES_PRICE_EFFECTIVE_DATE DESC) rank ";
                strSQL = strSQL + "FROM INV_SALES_PRICE) a ";
                strSQL = strSQL + "WHERE a.rank = 1  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO SAL_PUR_DAILY_TEMP(STOCKITEM_NAME,AMOUNT) ";
                strSQL = strSQL + "select  I.STOCKITEM_NAME ,max(T.GROUP_PERCENTAGES) as CommPrice from  ";
                strSQL = strSQL + "INV_GROUP_COMMISSION_MASTER M,INV_GROUP_COMMISSION_TRAN T,INV_STOCKGROUP G ,INV_STOCKITEM I ";
                strSQL = strSQL + "where M.GROUP_COMMISSION_KEY=T.GROUP_COMMISSION_KEY and M.STOCKGROUP_NAME= G.GR_NAME ";
                strSQL = strSQL + "and G.STOCKGROUP_NAME=I.STOCKGROUP_NAME ";
                strSQL = strSQL + "group by I.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO INV_PROFIT_REPORT(STOCKITEM_NAME,SALES_AMOUNT) ";
                strSQL = strSQL + "select STOCKITEM_NAME,sum(RATE)-((sum(RATE) *sum(AMOUNT))/100) as amt from SAL_PUR_DAILY_TEMP ";
                strSQL = strSQL + "group by STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();



                strSQL = "INSERT INTO INV_SALES_PRICE_RPT(STOCKITEM_NAME,SALES_PRICE_EFFECTIVE_DATE,SALES_PRICE_AMOUNT) ";
                strSQL = strSQL + "SELECT STOCKITEM_NAME,SALES_PRICE_EFFECTIVE_DATE,SALES_PRICE_AMOUNT  FROM INV_SALES_PRICE ";
                strSQL = strSQL + "WHERE SALES_PRICE_EFFECTIVE_DATE <= " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "ORDER BY SALES_PRICE_EFFECTIVE_DATE DESC ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                //---OPening

                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  isnull(sum(t.INV_TRAN_QUANTITY  * r.SALES_AMOUNT),0) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,INV_PROFIT_REPORT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
                strSQL = strSQL + "AND t.INV_VOUCHER_TYPE=0 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  0 opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,INV_PROFIT_REPORT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + "and t.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND t.INV_VOUCHER_TYPE=0 ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME='Dilution' ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  abs(isnull(sum(t.INV_TRAN_QUANTITY * r.SALES_AMOUNT),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,INV_PROFIT_REPORT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.INV_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
                strSQL = strSQL + "and t.INV_VOUCHER_TYPE in (27,29) ";
                strSQL = strSQL + "and t.INV_INOUT_FLAG='I' ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs(isnull(sum(t.BILL_QUANTITY  * r.SALES_AMOUNT),0)) *-1 as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t, INV_PROFIT_REPORT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.COMP_VOUCHER_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
                strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  abs(isnull(sum(abs(BILL_ADD_LESS_AMOUNT)),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t  where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.COMP_VOUCHER_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
                strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  abs(isnull(sum(abs(BILL_ADD_LESS_AMOUNT)),0))*-1 as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t  where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.COMP_VOUCHER_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs( isnull(sum(t.INV_TRAN_QUANTITY * r.SALES_AMOUNT),0))*-1 as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c,INV_STOCKGROUP g,INV_PROFIT_REPORT r  where s.STOCKITEM_NAME =t.STOCKITEM_NAME AND s.STOCKGROUP_NAME = g.STOCKGROUP_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + " AND  c.COMP_REF_NO=t.INV_REF_NO AND t.INV_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + " AND g.STOCKGROUP_PRIMARY_TYPE =3 and g.STOCKGROUP_SECONDARY_TYPE =0 ";
                strSQL = strSQL + " AND c.SAMPLE_STATUS=1 ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs(isnull(sum(t.BILL_QUANTITY_BONUS  * r.SALES_AMOUNT),0))*-1 as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t, INV_PROFIT_REPORT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.COMP_VOUCHER_DATE <  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE)  ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  (isnull(sum(t.INV_TRAN_QUANTITY * r.SALES_AMOUNT),0)) *-1 as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t , INV_PROFIT_REPORT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.INV_DATE  <" + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "and t.INV_VOUCHER_TYPE =24  ";
                strSQL = strSQL + "AND s.STOCKGROUP_NAME <> 'Dilution' ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //***********

                //--PRODUCTION_QTY
                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,INWARD_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  abs(isnull(sum(t.INV_TRAN_QUANTITY * r.SALES_AMOUNT),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,INV_PROFIT_REPORT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "and t.INV_VOUCHER_TYPE in (27,29) ";
                strSQL = strSQL + "and t.INV_INOUT_FLAG='I' ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                //--SALES_QTY

                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,SALES_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs(isnull(sum(t.BILL_QUANTITY  * r.SALES_PRICE_AMOUNT),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t, INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,COMMISSION_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  abs(isnull(sum(abs(BILL_ADD_LESS_AMOUNT)),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t  where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                // --SAMPLE_QTY
                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,SAMPLE_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs( isnull(sum(t.INV_TRAN_QUANTITY * r.SALES_PRICE_AMOUNT),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t,ACC_COMPANY_VOUCHER c,INV_STOCKGROUP g,INV_SALES_PRICE_RPT r  where s.STOCKITEM_NAME =t.STOCKITEM_NAME AND s.STOCKGROUP_NAME = g.STOCKGROUP_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + " AND  c.COMP_REF_NO=t.INV_REF_NO AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + " AND g.STOCKGROUP_PRIMARY_TYPE =3 and g.STOCKGROUP_SECONDARY_TYPE =0 ";
                strSQL = strSQL + " AND c.SAMPLE_STATUS=1 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME,s.STOCKITEM_ALIAS ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                //bonus value
                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,BONUS_VALUE) ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, abs(isnull(sum(t.BILL_QUANTITY_BONUS  * r.SALES_PRICE_AMOUNT),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t, INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "and t.COMP_VOUCHER_TYPE =16 ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();


                //--BROKEN_QTY
                strSQL = "INSERT INTO INV_FINISHED_ITEM_STATEMENT(STOCKGROUP_NAME,ITEM_NAME,BROKEN_VALUE)  ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME,  (isnull(sum(t.INV_TRAN_QUANTITY * r.SALES_PRICE_AMOUNT),0)) as opn  ";
                strSQL = strSQL + "from INV_STOCKITEM s,INV_TRAN t , INV_SALES_PRICE_RPT r where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + " AND s.STOCKITEM_NAME=r.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + "and t.INV_VOUCHER_TYPE =24  ";
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                cmdInsert.Transaction.Commit();



                strSQL = "SELECT  STOCKGROUP_NAME,ITEM_NAME,OPENING_VALUE,INWARD_VALUE,SALES_VALUE,COMMISSION_VALUE,";
                strSQL = strSQL + "BONUS_VALUE,BROKEN_VALUE,STAFF_VALUE,STAFF_COMMISSION,SAMPLE_VALUE from INV_FINISHED_ITEM_STATEMENT_VIEW ";
                //strSQL = strSQL + " WHERE STOCKGROUP_NAME ='Dilution' ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();
                    oLedg.strItemName = dr["ITEM_NAME"].ToString();
                    oLedg.dblOpnAmnt = Convert.ToDouble(dr["OPENING_VALUE"]);
                    oLedg.dblInwAmount = Math.Abs(Convert.ToDouble(dr["INWARD_VALUE"]));
                    oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["SALES_VALUE"]));
                    oLedg.dblCommissionValue = (Convert.ToDouble(dr["COMMISSION_VALUE"]));
                    oLedg.dblBonusValue = Math.Abs(Convert.ToDouble(dr["BONUS_VALUE"]));
                    oLedg.dblBrokenValue = (Convert.ToDouble(dr["BROKEN_VALUE"]));
                    oLedg.dblStaffvalue = Math.Abs(Convert.ToDouble(dr["STAFF_VALUE"]));
                    //oLedg.dblCommissionValue = Math.Abs(Convert.ToDouble(dr["STAFF_COMMISSION"]));
                    oLedg.dblSampleValue = Math.Abs(Convert.ToDouble(dr["SAMPLE_VALUE"]));


                    ooAccLedger.Add(oLedg);
                }
                if (!dr.HasRows)
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strGroupName = "";
                    oLedg.strItemName = "";
                    oLedg.dblOpnAmnt = 0;
                    oLedg.dblInwAmount = 0;
                    oLedg.dblOutwardAmnt = 0;
                    oLedg.dblCommissionValue = 0;
                    oLedg.dblBonusValue = 0;
                    oLedg.dblBrokenValue = 0;
                    oLedg.dblStaffvalue = 0;
                    //oLedg.dblCommissionValue = Math.Abs(Convert.ToDouble(dr["STAFF_COMMISSION"]));
                    oLedg.dblSampleValue = 0;
                    ooAccLedger.Add(oLedg);
                }
                dr.Close();

                gcnMain.Close();
                return ooAccLedger;
            }
        }
        #endregion
        #region "Yerly Payment Summ"

        public string minsertPaymentSummaryYearly(string strDeComID, string strYear1, int intmode, int intmodewithoutfactory)
        {

            string strSQL = "", strCompaniID = "", strFromYear = "", strToYear = "", strJV = "";

            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;

                List<RoPaymentSummaryearly> ooPaymentsummaryYear = new List<RoPaymentSummaryearly>();

                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;

                strCompaniID = strYear1.Substring(0, 4).ToUpper();

                strSQL = "SELECT * FROM SMART" + strCompaniID + ".dbo.ACC_COMPANY ";
                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    strFromYear = Convert.ToString(dr["COMPANY_FINICIAL_YEAR_FROM"].ToString().Substring(6, 4).ToUpper());
                    strToYear = Convert.ToString(dr["COMPANY_FINICIAL_YEAR_TO"].ToString().Substring(6, 4).ToUpper());
                }
                dr.Close();

                if (intmode == 0)
                {
                    strSQL = "DELETE FROM PAYMENT_SUMMARY_TEMP ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(Year1) ";
                    strSQL = strSQL + "values(" + strFromYear + ")";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(Year2) ";
                    strSQL = strSQL + "values(" + strToYear + ")";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    //************One
                    strSQL = "SELECT DISTINCT ACC_VOUCHER.COMP_REF_NO FROM ACC_VOUCHER,ACC_LEDGER WHERE ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_LEDGER.LEDGER_GROUP IN (100,101) AND COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_REVERSE_LEDGER = 'As per Details' AND  ACC_VOUCHER.AUTOJV=0  AND year(COMP_VOUCHER_DATE)=" + strFromYear + " ";
                    strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY='Cr' ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        strJV = strJV + "'" + dr["COMP_REF_NO"].ToString() + "'" + ",";
                    }
                    dr.Close();
                    if (strJV != "")
                    {
                        strJV = Utility.Mid(strJV, 0, strJV.Length - 1);
                    }
                    strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(LEDGER_NAME,Year1,Value1) ";
                    strSQL = strSQL + "SELECT VOUCHER_REVERSE_LEDGER," + strFromYear + ", sum(VOUCHER_CREDIT_AMOUNT) FROM SMART" + strCompaniID + ".dbo.ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                    strSQL = strSQL + "and year(COMP_VOUCHER_DATE)=" + strFromYear + " ";
                    strSQL = strSQL + " and AUTOJV=0 and VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                    strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    if (intmodewithoutfactory == 1)
                    {
                        strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                    }
                    strSQL = strSQL + "Group by VOUCHER_REVERSE_LEDGER ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(LEDGER_NAME,Year1,Value1) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,'" + strFromYear + "', sum(VOUCHER_DEBIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                    strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strFromYear + "' and VOUCHER_REVERSE_LEDGER = 'As per Details' ";
                    strSQL = strSQL + "AND AUTOJV=0 ";
                    strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    if (intmodewithoutfactory == 1)
                    {
                        strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                    }

                    strSQL = strSQL + "Group by LEDGER_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(LEDGER_NAME,Year1,Value1) ";
                    strSQL = strSQL + "select V.LEDGER_NAME," + strFromYear + ",ABS(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                    strSQL = strSQL + "and year(v.COMP_VOUCHER_DATE)=" + strFromYear + " ";
                    strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                    strSQL = strSQL + "group by V.LEDGER_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(LEDGER_NAME,Year1,Value1) ";
                    strSQL = strSQL + "select V.VOUCHER_REVERSE_LEDGER," + strFromYear + ",ABS(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME and l.LEDGER_GROUP <> 101  and v.COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "and l.LEDGER_GROUP =100 AND year(COMP_VOUCHER_DATE)='" + strFromYear + "' ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                    strSQL = strSQL + "AND V.AUTOJV=0 ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    strSQL = strSQL + " AND  V.VOUCHER_REVERSE_LEDGER IN (SELECT LEDGER_NAME FROM ACC_LEDGER WHERE LEDGER_GROUP =100) ";
                    if (intmodewithoutfactory == 1)
                    {
                        strSQL = strSQL + "and V.LEDGER_NAME ='Cash Of Head Office' ";
                    }

                    strSQL = strSQL + "group by V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    if (strJV != "")
                    {
                        strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(LEDGER_NAME,Year1,Value1) ";
                        strSQL = strSQL + "select V.LEDGER_NAME," + strFromYear + ",sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt ";
                        strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                        strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                        strSQL = strSQL + "AND year(COMP_VOUCHER_DATE)=" + strFromYear + " ";
                        strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase','Bkash Non Active' ) ";
                        strSQL = strSQL + " and v.COMP_REF_NO in (" + strJV + ")";
                        strSQL = strSQL + "AND V.AUTOJV=0 ";
                        strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                        strSQL = strSQL + "group by  V.LEDGER_NAME,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) > 0 ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }

                    //***********2
                    strJV = "";
                    strSQL = "SELECT DISTINCT ACC_VOUCHER.COMP_REF_NO FROM ACC_VOUCHER,ACC_LEDGER WHERE ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_LEDGER.LEDGER_GROUP IN (100,101) AND COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_REVERSE_LEDGER = 'As per Details' AND  ACC_VOUCHER.AUTOJV=0  AND year(COMP_VOUCHER_DATE)=" + strFromYear + " ";
                    strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY='Cr' ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        strJV = strJV + "'" + dr["COMP_REF_NO"].ToString() + "'" + ",";
                    }
                    dr.Close();
                    if (strJV != "")
                    {
                        strJV = Utility.Mid(strJV, 0, strJV.Length - 1);
                    }
                    strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(LEDGER_NAME,Year2,Value2) ";
                    strSQL = strSQL + "SELECT VOUCHER_REVERSE_LEDGER," + strToYear + ", sum(VOUCHER_CREDIT_AMOUNT) FROM SMART" + strCompaniID + ".dbo.ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                    strSQL = strSQL + "and year(COMP_VOUCHER_DATE)=" + strToYear + " ";
                    strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    strSQL = strSQL + " and AUTOJV=0 and VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                    if (intmodewithoutfactory == 1)
                    {
                        strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                    }
                    strSQL = strSQL + "Group by VOUCHER_REVERSE_LEDGER ";

                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(LEDGER_NAME,Year2,Value2) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,'" + strToYear + "', sum(VOUCHER_DEBIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                    strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strToYear + "' and VOUCHER_REVERSE_LEDGER = 'As per Details' ";
                    strSQL = strSQL + "AND AUTOJV=0 ";
                    strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    if (intmodewithoutfactory == 1)
                    {
                        strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                    }

                    strSQL = strSQL + "Group by LEDGER_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(LEDGER_NAME,Year2,Value2) ";
                    strSQL = strSQL + "select V.LEDGER_NAME," + strToYear + ",ABS(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                    strSQL = strSQL + "and year(v.COMP_VOUCHER_DATE)=" + strToYear + " ";
                    strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                    if (intmodewithoutfactory == 1)
                    {
                        strSQL = strSQL + "and V.LEDGER_NAME ='Cash Of Head Office' ";
                    }
                    strSQL = strSQL + "group by V.LEDGER_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(LEDGER_NAME,Year2,Value2) ";
                    strSQL = strSQL + "select V.VOUCHER_REVERSE_LEDGER," + strToYear + ",ABS(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME and l.LEDGER_GROUP <> 101  and v.COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "and l.LEDGER_GROUP =100 AND year(COMP_VOUCHER_DATE)='" + strToYear + "' ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                    strSQL = strSQL + "AND V.AUTOJV=0 ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    strSQL = strSQL + " AND  V.VOUCHER_REVERSE_LEDGER IN (SELECT LEDGER_NAME FROM ACC_LEDGER WHERE LEDGER_GROUP =100) ";
                    if (intmodewithoutfactory == 1)
                    {
                        strSQL = strSQL + "and V.LEDGER_NAME ='Cash Of Head Office' ";
                    }

                    strSQL = strSQL + "group by V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    if (strJV != "")
                    {
                        strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(LEDGER_NAME,Year2,Value2) ";
                        strSQL = strSQL + "select V.LEDGER_NAME," + strToYear + ",sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt ";
                        strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                        strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                        strSQL = strSQL + "AND year(COMP_VOUCHER_DATE)=" + strToYear + " ";
                        strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase','Bkash Non Active' ) ";
                        strSQL = strSQL + " and v.COMP_REF_NO in (" + strJV + ")";
                        strSQL = strSQL + "AND V.AUTOJV=0 ";
                        strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                        strSQL = strSQL + "group by  V.LEDGER_NAME,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) > 0 ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }

                    //******************
                }
                if (intmode == 1)
                {
                    strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(Year3) ";
                    strSQL = strSQL + "values(" + strFromYear + ")";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(Year4) ";
                    strSQL = strSQL + "values(" + strToYear + ")";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    //**************************3

                    strJV = "";
                    strSQL = "SELECT DISTINCT ACC_VOUCHER.COMP_REF_NO FROM ACC_VOUCHER,ACC_LEDGER WHERE ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_LEDGER.LEDGER_GROUP IN (100,101) AND COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_REVERSE_LEDGER = 'As per Details' AND  ACC_VOUCHER.AUTOJV=0  AND year(COMP_VOUCHER_DATE)=" + strFromYear + " ";
                    strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY='Cr' ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        strJV = strJV + "'" + dr["COMP_REF_NO"].ToString() + "'" + ",";
                    }
                    dr.Close();
                    if (strJV != "")
                    {
                        strJV = Utility.Mid(strJV, 0, strJV.Length - 1);
                    }
                    strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(LEDGER_NAME,Year3,Value3) ";
                    strSQL = strSQL + "SELECT VOUCHER_REVERSE_LEDGER," + strFromYear + ", sum(VOUCHER_CREDIT_AMOUNT) FROM SMART" + strCompaniID + ".dbo.ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                    strSQL = strSQL + "and year(COMP_VOUCHER_DATE)=" + strFromYear + " ";
                    strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' and VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                    strSQL = strSQL + " and AUTOJV=0 ";
                    if (intmodewithoutfactory == 1)
                    {
                        strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                    }


                    strSQL = strSQL + "Group by VOUCHER_REVERSE_LEDGER ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(LEDGER_NAME,Year3,Value3) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,'" + strFromYear + "', sum(VOUCHER_DEBIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                    strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strFromYear + "' and VOUCHER_REVERSE_LEDGER = 'As per Details' ";
                    strSQL = strSQL + "AND AUTOJV=0 ";
                    strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    if (intmodewithoutfactory == 1)
                    {
                        strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                    }

                    strSQL = strSQL + "Group by LEDGER_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(LEDGER_NAME,Year3,Value3) ";
                    strSQL = strSQL + "select V.LEDGER_NAME," + strFromYear + ",ABS(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                    strSQL = strSQL + "and year(v.COMP_VOUCHER_DATE)=" + strFromYear + " ";
                    strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                    if (intmodewithoutfactory == 1)
                    {
                        strSQL = strSQL + "and V.LEDGER_NAME ='Cash Of Head Office' ";
                    }
                    strSQL = strSQL + "group by V.LEDGER_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(LEDGER_NAME,Year3,Value3) ";
                    strSQL = strSQL + "select V.VOUCHER_REVERSE_LEDGER," + strFromYear + ",ABS(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME and l.LEDGER_GROUP <> 101  and v.COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "and l.LEDGER_GROUP =100 AND year(COMP_VOUCHER_DATE)='" + strFromYear + "' ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                    strSQL = strSQL + "AND V.AUTOJV=0 ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    strSQL = strSQL + " AND  V.VOUCHER_REVERSE_LEDGER IN (SELECT LEDGER_NAME FROM ACC_LEDGER WHERE LEDGER_GROUP =100) ";
                    if (intmodewithoutfactory == 1)
                    {
                        strSQL = strSQL + "and V.LEDGER_NAME ='Cash Of Head Office' ";
                    }
                    strSQL = strSQL + "group by V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    if (strJV != "")
                    {
                        strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(LEDGER_NAME,Year3,Value3) ";
                        strSQL = strSQL + "select V.LEDGER_NAME," + strFromYear + ",sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt ";
                        strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                        strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                        strSQL = strSQL + "AND year(COMP_VOUCHER_DATE)=" + strFromYear + " ";
                        strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase','Bkash Non Active' ) ";
                        strSQL = strSQL + " and v.COMP_REF_NO in (" + strJV + ")";
                        strSQL = strSQL + "AND V.AUTOJV=0 ";
                        strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                        strSQL = strSQL + "group by  V.LEDGER_NAME,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) > 0 ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }


                    //***********************4
                    strJV = "";
                    strSQL = "SELECT DISTINCT ACC_VOUCHER.COMP_REF_NO FROM ACC_VOUCHER,ACC_LEDGER WHERE ACC_LEDGER.LEDGER_NAME =ACC_VOUCHER.LEDGER_NAME  AND ACC_LEDGER.LEDGER_GROUP IN (100,101) AND COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_REVERSE_LEDGER = 'As per Details' AND  ACC_VOUCHER.AUTOJV=0  AND year(COMP_VOUCHER_DATE)=" + strToYear + " ";
                    strSQL = strSQL + "AND ACC_VOUCHER.VOUCHER_TOBY='Cr' ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    while (dr.Read())
                    {
                        strJV = strJV + "'" + dr["COMP_REF_NO"].ToString() + "'" + ",";
                    }
                    dr.Close();
                    if (strJV != "")
                    {
                        strJV = Utility.Mid(strJV, 0, strJV.Length - 1);
                    }
                    strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(LEDGER_NAME,Year4,Value4) ";
                    strSQL = strSQL + "SELECT VOUCHER_REVERSE_LEDGER," + strToYear + ", sum(VOUCHER_CREDIT_AMOUNT) FROM SMART" + strCompaniID + ".dbo.ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                    strSQL = strSQL + "and year(COMP_VOUCHER_DATE)=" + strToYear + " ";
                    strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' and VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                    strSQL = strSQL + " and AUTOJV=0 ";
                    if (intmodewithoutfactory == 1)
                    {
                        strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                    }


                    strSQL = strSQL + "Group by VOUCHER_REVERSE_LEDGER ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(LEDGER_NAME,Year4,Value4) ";
                    strSQL = strSQL + "SELECT LEDGER_NAME,'" + strToYear + "', sum(VOUCHER_DEBIT_AMOUNT) FROM ACC_VOUCHER where COMP_VOUCHER_TYPE=2 ";
                    strSQL = strSQL + "and year(COMP_VOUCHER_DATE)='" + strToYear + "' and VOUCHER_REVERSE_LEDGER = 'As per Details' ";
                    strSQL = strSQL + "AND AUTOJV=0 ";
                    strSQL = strSQL + "AND VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    if (intmodewithoutfactory == 1)
                    {
                        strSQL = strSQL + "and LEDGER_NAME ='Cash Of Head Office' ";
                    }

                    strSQL = strSQL + "Group by LEDGER_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(LEDGER_NAME,Year4,Value4) ";
                    strSQL = strSQL + "select V.LEDGER_NAME," + strToYear + ",ABS(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                    strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (1) ";
                    strSQL = strSQL + "and year(v.COMP_VOUCHER_DATE)=" + strToYear + " ";
                    strSQL = strSQL + "AND V.LEDGER_NAME  =  ('Bkash Charge (Exp.)' ) ";
                    if (intmodewithoutfactory == 1)
                    {
                        strSQL = strSQL + "and V.LEDGER_NAME ='Cash Of Head Office' ";
                    }
                    strSQL = strSQL + "group by V.LEDGER_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();


                    strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(LEDGER_NAME,Year4,Value4) ";
                    strSQL = strSQL + "select V.VOUCHER_REVERSE_LEDGER," + strToYear + ",ABS(sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT)) As Amnt ";
                    strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME and l.LEDGER_GROUP <> 101  and v.COMP_VOUCHER_TYPE in (3) ";
                    strSQL = strSQL + "and l.LEDGER_GROUP =100 AND year(COMP_VOUCHER_DATE)='" + strToYear + "' ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase' ) and V.VOUCHER_REVERSE_LEDGER != 'As per Details' ";
                    strSQL = strSQL + "AND V.AUTOJV=0 ";
                    strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                    strSQL = strSQL + " AND  V.VOUCHER_REVERSE_LEDGER IN (SELECT LEDGER_NAME FROM ACC_LEDGER WHERE LEDGER_GROUP =100) ";
                    if (intmodewithoutfactory == 1)
                    {
                        strSQL = strSQL + "and V.LEDGER_NAME ='Cash Of Head Office' ";
                    }

                    strSQL = strSQL + "group by V.VOUCHER_REVERSE_LEDGER,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) < 0  ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    if (strJV != "")
                    {
                        strSQL = "INSERT INTO PAYMENT_SUMMARY_TEMP(LEDGER_NAME,Year4,Value4) ";
                        strSQL = strSQL + "select V.LEDGER_NAME," + strToYear + ",sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) As Amnt ";
                        strSQL = strSQL + "from ACC_LEDGER l,ACC_VOUCHER v where l.LEDGER_NAME =v.LEDGER_NAME ";
                        strSQL = strSQL + " and v.COMP_VOUCHER_TYPE in (3) ";
                        strSQL = strSQL + "AND year(COMP_VOUCHER_DATE)=" + strToYear + " ";
                        strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT IN ('Bkash Charge (L)','Import Purchase','Bkash Non Active' ) ";
                        strSQL = strSQL + " and v.COMP_REF_NO in (" + strJV + ")";
                        strSQL = strSQL + "AND V.AUTOJV=0 ";
                        strSQL = strSQL + "AND V.VOUCHER_REVERSE_LEDGER NOT LIKE  'HL%' ";
                        strSQL = strSQL + "group by  V.LEDGER_NAME,l.LEDGER_NAME having sum(v.VOUCHER_DEBIT_AMOUNT-v.VOUCHER_CREDIT_AMOUNT) > 0 ";
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    //****************
                }

                cmdInsert.Transaction.Commit();



                return "";
            }
        }
        #endregion
        #region "Stock Stock Requisition"
        public string mCheckStockRequisition(string strDeComID, string strRefNo)
        {
            string strSQL;
            SqlCommand cmd = new SqlCommand();
            SqlDataReader dr;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }

                try
                {
                    gcnMain.Open();

                    strSQL = "SELECT AGNST_COMP_REF_NO from INV_MASTER WHERE AGNST_COMP_REF_NO  ='" + strRefNo + "' ";
                    cmd.CommandText = strSQL;
                    cmd.Connection = gcnMain;
                    dr = cmd.ExecuteReader();
                    if (dr.Read())
                    {
                        return "Transaction found Cannot Alter";
                    }
                    else
                    {
                        return "";
                    }
                    dr.Close();
                    gcnMain.Close();
                    

                }
                catch (Exception ex)
                {
                    return (ex.ToString());
                }
                finally
                {
                    gcnMain.Close();

                }
            }
        }
        public string mDeleteStockRequisition(string strDeComID, string strRefNo)
        {
            string strSQL;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }

                try
                {
                    gcnMain.Open();

                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    strSQL = "DELETE FROM INV_STOCK_REQUISITION_CHILD WHERE REQUISITION_NO='" + strRefNo + "' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    strSQL = "DELETE FROM INV_STOCK_REQUISITION_MASTER WHERE REQUISITION_NO='" + strRefNo + "' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    cmdInsert.Transaction.Commit();

                    gcnMain.Close();
                    return "Deleted...";

                }
                catch (Exception ex)
                {
                    return (ex.ToString());
                }
                finally
                {
                    gcnMain.Close();

                }
            }
        }
        public List<StockItem> mFillDisplayStockRequisition(string strDeComID, string vstrStockSerial)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<StockItem> oogrp = new List<StockItem>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            strSQL = "SELECT * FROM INV_STOCK_REQUISITION_CHILD ";
            strSQL = strSQL + "WHERE REQUISITION_NO = '" + vstrStockSerial.Replace("'", "''") + "' ";

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    StockItem ogrp = new StockItem();
                    ogrp.strItemName = drGetGroup["STOCKITEM_NAME"].ToString();
                    ogrp.dblOpnQty = Convert.ToDouble(drGetGroup["ITEM_QTY"]);
                    ogrp.dblOpnRate = Convert.ToDouble(drGetGroup["ITEM_RATE"].ToString());
                    ogrp.dblOpnValue = Convert.ToDouble(drGetGroup["ITEM_AMOUNT"].ToString());
                    if (drGetGroup["UNIT"].ToString() != "")
                    {
                        ogrp.strToUnit = drGetGroup["UNIT"].ToString();
                    }
                    else
                    {
                        ogrp.strToUnit = "";
                    }

                    oogrp.Add(ogrp);
                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return oogrp;

            }
        }
        public List<StockItem> mFillStockRequisitionList(string strDeComID, int mlngVType, string strFind, string strExpression, string strFdate, string strTodate)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<StockItem> oogrp = new List<StockItem>();




            if (strFind != "Stock Item")
            {
                strSQL = "SELECT M.REQUISITION_NO,M.BRANCH_ID,M.INVOICE_DATE,M.NET_TOTAL,M.NARRATIONS,M.GODOWNS_NAME,M.Process_name FROM INV_STOCK_REQUISITION_MASTER M  WHERE M.INV_VOUCHER_TYPE =" + mlngVType + "   ";
            }
            else
            {
                strSQL = "SELECT M.REQUISITION_NO,M.BRANCH_ID,M.INVOICE_DATE,M.NET_TOTAL,M.NARRATIONS,M.LOCATION_NAME,M.Process_name FROM INV_STOCK_REQUISITION_MASTER M  WHERE M.INV_REF_NO=T.INV_REF_NO   AND M.INV_VOUCHER_TYPE = " + mlngVType + "  ";
            }

            if (strFind == "Voucher Date")
            {
                strSQL = strSQL + "AND ";
                strSQL = strSQL + "M.INVOICE_DATE BETWEEN ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND ";
                strSQL = strSQL + "" + Utility.cvtSQLDateString(strTodate) + "";
            }
            else if (strFind == "Stock Item")
            {
                strSQL = strSQL + " AND M.STOCKITEM_NAME= '" + strExpression + "' ";
            }
            else if (strFind == "Voucher Number")
            {
                strSQL = strSQL + "AND ";
                strSQL = strSQL + "M.REQUISITION_NO like '%" + strExpression + "%'";
            }
            else
            {
                strSQL = strSQL + "AND ";
                strSQL = strSQL + "M.INVOICE_DATE BETWEEN ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strTodate) + " ";
                strSQL = strSQL + "AND ";
                strSQL = strSQL + "" + Utility.cvtSQLDateString(strTodate) + "";
            }
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    StockItem ogrp = new StockItem();
                    ogrp.strRefNo = drGetGroup["REQUISITION_NO"].ToString();
                    ogrp.strBranchName = Utility.gstrGetBranchName(strDeComID, drGetGroup["BRANCH_ID"].ToString());
                    ogrp.strDate = Convert.ToDateTime(drGetGroup["INVOICE_DATE"]).ToString("dd/MM/yyyy");
                    ogrp.dblBranchAmnout = Convert.ToDouble(drGetGroup["NET_TOTAL"].ToString());
                    if (drGetGroup["NARRATIONS"].ToString() != "")
                    {
                        ogrp.strNarration = drGetGroup["NARRATIONS"].ToString();
                    }
                    else
                    {
                        ogrp.strNarration = "";
                    }
                    if (drGetGroup["Process_name"].ToString() != "")
                    {
                        ogrp.strProcess = drGetGroup["Process_name"].ToString();
                    }
                    else
                    {
                        ogrp.strProcess = "";
                    }
                    if (drGetGroup["GODOWNS_NAME"].ToString() != "")
                    {
                        ogrp.strLocation = drGetGroup["GODOWNS_NAME"].ToString();
                    }
                    else
                    {
                        ogrp.strLocation = "";
                    }
                    oogrp.Add(ogrp);

                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return oogrp;

            }
        }

        //public List<RoPFHL> mGetMpoClosingValue(string strDeComID, string strFate, string strBranchID, string strPartyName)
        //{
        //    string strSQL = null, strSelection = "";
        //    connstring = Utility.SQLConnstringComSwitch(strDeComID);

        //    using (SqlConnection gcnMain = new SqlConnection(connstring))
        //    {
        //        if (gcnMain.State == ConnectionState.Open)
        //        {
        //            gcnMain.Close();
        //        }
        //        gcnMain.Open();
        //        SqlDataReader dr;
        //        SqlCommand cmdInsert = new SqlCommand();
        //        SqlTransaction myTrans;
        //        myTrans = gcnMain.BeginTransaction();
        //        cmdInsert.Connection = gcnMain;
        //        cmdInsert.Transaction = myTrans;
        //        strSQL = "DELETE FROM ACC_BANK_TEMP ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();

        //        ///// HL

        //        strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,DEBIT) ";
        //        strSQL = strSQL + "select l.LEDGER_NAME_MERZE,sum(VOUCHER_DEBIT_AMOUNT-VOUCHER_CREDIT_AMOUNT ) as CREDIT ";
        //        strSQL = strSQL + "From ACC_VOUCHER V,ACC_LEDGER L  where  V.LEDGER_NAME=L.HL_LEDGER_NAME  group by L.LEDGER_NAME_MERZE order by L.LEDGER_NAME_MERZE  ";
        //        if (strBranchID != "")
        //        {
        //            strSQL = strSQL + "AND V.BRANCH_ID ='" + strBranchID + "' ";
        //        }

        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();




        //        //strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,DEBIT) ";
        //        //strSQL = strSQL + "SELECT SUBSTRING(LEDGER_NAME,4,160) as dd,LEDGER_OPENING_BALANCE  FROM ACC_LEDGER WHERE LEDGER_NAME like 'HL%'  ";
        //        ////if (strBranchID != "")
        //        ////{
        //        ////    strSQL = strSQL + "AND BRANCH_ID ='" + strBranchID + "' ";
        //        ////}

        //        //cmdInsert.CommandText = strSQL;
        //        //cmdInsert.ExecuteNonQuery();

        //        ////PF


        //        //strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,CREDIT) ";

        //        //strSQL = strSQL + "select l.LEDGER_NAME_MERZE,sum(VOUCHER_DEBIT_AMOUNT-VOUCHER_CREDIT_AMOUNT ) as CREDIT ";
        //        //strSQL = strSQL + "From ACC_VOUCHER V,ACC_LEDGER L  where  V.LEDGER_NAME=L.PF_LEDGER_NAME  group by L.LEDGER_NAME_MERZE order by L.LEDGER_NAME_MERZE  ";
        //        //if (strBranchID != "")
        //        //{
        //        //    strSQL = strSQL + "AND V.BRANCH_ID ='" + strBranchID + "' ";
        //        //}

        //        //cmdInsert.CommandText = strSQL;
        //        //cmdInsert.ExecuteNonQuery();


        //        //strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,CREDIT) ";
        //        //strSQL = strSQL + "select ACC_LEDGER_Z_D_A.LEDGER_NAME_MERZE,VOUCHER_CREDIT_AMOUNT From ACC_VOUCHER,ACC_LEDGER_Z_D_A ";
        //        //strSQL = strSQL + "where  ACC_VOUCHER.REVERSE_LEDGER1= ACC_LEDGER_Z_D_A.LEDGER_NAME and ACC_VOUCHER.LEDGER_NAME like 'PF%'   ";
        //        //if (strBranchID != "")
        //        //{
        //        //    strSQL = strSQL + "AND ACC_VOUCHER.BRANCH_ID ='" + strBranchID + "' ";
        //        //}

        //        //cmdInsert.CommandText = strSQL;
        //        //cmdInsert.ExecuteNonQuery();


        //        //strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,CREDIT) ";
        //        //strSQL = strSQL + "SELECT SUBSTRING(LEDGER_NAME,4,160) as dd,LEDGER_OPENING_BALANCE  FROM ACC_LEDGER WHERE LEDGER_NAME like 'PF%'  ";
        //        //if (strBranchID != "")
        //        //{
        //        //    strSQL = strSQL + "AND BRANCH_ID ='" + strBranchID + "' ";
        //        //}

        //        //cmdInsert.CommandText = strSQL;
        //        //cmdInsert.ExecuteNonQuery();



        //        //Previous Dues
        //        strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,OPENING) ";
        //        strSQL = strSQL + "SELECT l.LEDGER_NAME_MERZE, isnull(sum(l.LEDGER_OPENING_BALANCE),0) *-1 PDUES   ";
        //        strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP ";
        //        if (strBranchID != "")
        //        {
        //            strSQL = strSQL + "AND l.BRANCH_ID ='" + strBranchID + "' ";
        //        }

        //        if (strPartyName != "")
        //        {
        //            strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
        //        }

        //        strSQL = strSQL + "group by l.LEDGER_NAME_MERZE ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();

        //        //Current Month
        //        strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,OPENING) ";
        //        strSQL = strSQL + "select l.LEDGER_NAME_MERZE, ";
        //        strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0)) SALES_CURRENT_MONTH   ";
        //        strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c ";
        //        strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME ";
        //        strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
        //        strSQL = strSQL + "AND  C.COMP_VOUCHER_TYPE =16 ";
        //        if (strBranchID != "")
        //        {
        //            strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
        //        }

        //        if (strPartyName != "")
        //        {
        //            strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
        //        }

        //        strSQL = strSQL + "group by l.LEDGER_NAME_MERZE";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();
        //        //Return
        //        strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,OPENING) ";
        //        strSQL = strSQL + "select l.LEDGER_NAME_MERZE, ";
        //        strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0))*-1 RETURN_AMOUNT ";
        //        strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c ";
        //        strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =c.LEDGER_NAME ";
        //        strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
        //        strSQL = strSQL + "AND  C.COMP_VOUCHER_TYPE =13 ";
        //        if (strBranchID != "")
        //        {
        //            strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
        //        }

        //        if (strPartyName != "")
        //        {
        //            strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
        //        }

        //        strSQL = strSQL + "group by l.LEDGER_NAME_MERZE ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();
        //        //Debit Amount

        //        strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,OPENING) ";
        //        strSQL = strSQL + "select l.LEDGER_NAME_MERZE, ";
        //        strSQL = strSQL + "abs(ISNULL(SUM(C.COMP_VOUCHER_NET_AMOUNT),0)) DEBIT_AMOUNT   ";
        //        strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
        //        strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
        //        strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
        //        strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
        //        if (strBranchID != "")
        //        {
        //            strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
        //        }
        //        strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
        //        strSQL = strSQL + " AND  C.AUTOJV =0 ";
        //        strSQL = strSQL + " AND  C.DISABLE_VOUCHER =0 ";
        //        if (strPartyName != "")
        //        {
        //            strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
        //        }

        //        strSQL = strSQL + "group by l.LEDGER_NAME_MERZE ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();
        //        //Modified_24-11-19
        //        strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,OPENING) ";
        //        strSQL = strSQL + "select l.LEDGER_NAME_MERZE, ";
        //        strSQL = strSQL + "abs(ISNULL(SUM(av.VOUCHER_DEBIT_AMOUNT-av.VOUCHER_CREDIT_AMOUNT),0)) DEBIT_AMOUNT  ";
        //        strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
        //        strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
        //        strSQL = strSQL + "AND aV.VOUCHER_TOBY ='Dr' AND aV.COMP_VOUCHER_TYPE =3 ";
        //        strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
        //        if (strBranchID != "")
        //        {
        //            strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
        //        }
        //        strSQL = strSQL + " AND  C.SP_JOURNAL =0 ";
        //        strSQL = strSQL + " AND  C.DISABLE_VOUCHER =1 ";
        //        strSQL = strSQL + " AND  C.AUTOJV =0 ";
        //        if (strPartyName != "")
        //        {
        //            strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
        //        }

        //        strSQL = strSQL + "group by l.LEDGER_NAME_MERZE ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();



        //        //Credit Amount
        //        strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,OPENING) ";
        //        strSQL = strSQL + "SELECT  l.LEDGER_NAME_MERZE, isnull(SUM(v.VOUCHER_CREDIT_AMOUNT-v.VOUCHER_DEBIT_AMOUNT),0) *-1 ";
        //        strSQL = strSQL + "FROM ACC_LEDGER_Z_D_A ZDA ,ACC_VOUCHER v,ACC_LEDGER L,ACC_COMPANY_VOUCHER c  WHERE L.LEDGER_NAME =ZDA.LEDGER_NAME AND V.LEDGER_NAME =L.LEDGER_NAME  and c.COMP_REF_NO =v.COMP_REF_NO ";
        //        strSQL = strSQL + "AND (V.COMP_VOUCHER_DATE <  ";
        //        strSQL = strSQL + " " + Utility.cvtSQLDateString(strFate) + ") ";
        //        strSQL = strSQL + "AND V.COMP_VOUCHER_TYPE=3 ";
        //        if (strBranchID != "")
        //        {
        //            strSQL = strSQL + " AND L.BRANCH_ID ='" + strBranchID + "' ";
        //        }
        //        strSQL = strSQL + "and c.SP_JOURNAL =0 ";
        //        strSQL = strSQL + "and v.VOUCHER_TOBY ='Cr' ";

        //        if (strPartyName != "")
        //        {
        //            strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
        //        }

        //        strSQL = strSQL + " GROUP BY l.LEDGER_NAME_MERZE";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();

        //        //Cash
        //        strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,OPENING) ";
        //        strSQL = strSQL + "select l.LEDGER_NAME_MERZE, ";
        //        strSQL = strSQL + " abs(ISNULL(SUM(av.VOUCHER_CREDIT_AMOUNT),0)) *-1 COLL_CASH_TT ";
        //        strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av  ";
        //        strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO  ";
        //        strSQL = strSQL + "AND av.COMP_VOUCHER_TYPE=" + (int)Utility.VOUCHER_TYPE.vtRECEIPT_VOUCHER + " ";
        //        strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
        //        ////strSQL = strSQL + "AND l.BRANCH_ID ='" + strBranchID + "' ";
        //        if (strBranchID != "")
        //        {
        //            strSQL = strSQL + "AND av.BRANCH_ID ='" + strBranchID + "' ";
        //        }
        //        if (strPartyName != "")
        //        {
        //            strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
        //        }

        //        strSQL = strSQL + "group by l.LEDGER_NAME_MERZE ";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();
        //        //SP Journal
        //        strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,OPENING) ";
        //        strSQL = strSQL + "select l.LEDGER_NAME_MERZE,";
        //        strSQL = strSQL + "ABS(ISNULL(SUM(aV.VOUCHER_CREDIT_AMOUNT-aV.VOUCHER_DEBIT_AMOUNT),0)) *-1 COLL_VOUCHER   ";
        //        strSQL = strSQL + "from ACC_LEDGERGROUP g,ACC_LEDGERGROUP_CATEGORY_VIEW v,ACC_LEDGER l,ACC_COMPANY_VOUCHER c,ACC_VOUCHER av ";
        //        strSQL = strSQL + "where g.GR_NAME=v.GR_PARENT  and v.GR_NAME=l.LEDGER_PARENT_GROUP and l.LEDGER_NAME =av.LEDGER_NAME  and c.COMP_REF_NO =av.COMP_REF_NO ";
        //        strSQL = strSQL + "AND aV.COMP_VOUCHER_TYPE =3 and c.SP_JOURNAL=1 ";
        //        strSQL = strSQL + "AND C.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
        //        if (strBranchID != "")
        //        {
        //            strSQL = strSQL + "AND C.BRANCH_ID ='" + strBranchID + "' ";
        //        }
        //        strSQL = strSQL + " AND  C.AUTOJV =0 ";
        //        if (strPartyName != "")
        //        {
        //            strSQL = strSQL + "AND l.LEDGER_NAME ='" + strPartyName + "' ";
        //        }

        //        strSQL = strSQL + "group by l.LEDGER_NAME_MERZE";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();

        //        //New minus pf HL 17_07_20

        //        strSQL = "INSERT INTO ACC_BANK_TEMP(LEDGER_NAME ,OPENING) ";
        //        strSQL = strSQL + "SELECT  Z.LEDGER_NAME_MERZE ,ISNULL(SUM(v.VOUCHER_DEBIT_AMOUNT-V.VOUCHER_CREDIT_AMOUNT),0) *-1 ";
        //        strSQL = strSQL + " FROM ACC_LEDGER_Z_D_A Z,ACC_VOUCHER V WHERE Z.LEDGER_NAME=V.REVERSE_LEDGER1  AND V.COMP_VOUCHER_TYPE=3 ";
        //        strSQL = strSQL + "AND V.COMP_VOUCHER_DATE < " + Utility.cvtSQLDateString(strFate) + " ";
        //        if (strBranchID != "")
        //        {
        //            strSQL = strSQL + "AND V.BRANCH_ID ='" + strBranchID + "' ";
        //        }
        //        strSQL = strSQL + " AND  V.AUTOJV=1";
        //        if (strPartyName != "")
        //        {
        //            strSQL = strSQL + "AND Z.LEDGER_NAME ='" + strPartyName + "' ";
        //        }

        //        strSQL = strSQL + "GROUP by  Z.LEDGER_NAME_MERZE";
        //        cmdInsert.CommandText = strSQL;
        //        cmdInsert.ExecuteNonQuery();
        //        cmdInsert.Transaction.Commit();


        //        List<RoPFHL> ooAccLedger = new List<RoPFHL>();
        //        strSQL = " select  LEDGER_NAME, sum(OPENING) as OPENING, sum(DEBIT)as DEBIT,sum(CREDIT)as CREDIT from ACC_BANK_TEMP ";
        //        if (strPartyName != "")
        //        {
        //            strSQL = strSQL + "where LEDGER_NAME ='" + strPartyName + "' ";
        //        }
        //        strSQL = strSQL + "group by LEDGER_NAME ";
        //        SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
        //        dr = cmd.ExecuteReader();
        //        while (dr.Read())
        //        {
        //            RoPFHL oLedg = new RoPFHL();

        //            if (dr["LEDGER_NAME"].ToString() != "")
        //            {
        //                oLedg.strLedgerName = dr["LEDGER_NAME"].ToString();
        //            }
        //            else
        //            {
        //                oLedg.strLedgerName = "";
        //            }

        //            if (dr["OPENING"].ToString() != "")
        //            {
        //                oLedg.dblopening = Convert.ToDouble(dr["OPENING"].ToString());
        //            }
        //            else
        //            {
        //                oLedg.dblopening = 0;
        //            }

        //            if (dr["DEBIT"].ToString() != "")
        //            {
        //                oLedg.dblHLAmount = Convert.ToDouble(dr["DEBIT"].ToString());
        //            }
        //            else
        //            {
        //                oLedg.dblHLAmount = 0;
        //            }
        //            if (dr["CREDIT"].ToString() != "")
        //            {
        //                oLedg.dblPFAmount = Convert.ToDouble(dr["CREDIT"].ToString());
        //            }
        //            else
        //            {
        //                oLedg.dblPFAmount = 0;
        //            }







        //            ooAccLedger.Add(oLedg);
        //        }
        //        if (!dr.HasRows)
        //        {
        //            RoPFHL oLedg = new RoPFHL();
        //            oLedg.strLedgerName = "";
        //            oLedg.dblopening = 0;
        //            oLedg.dblHLAmount = 0;
        //            oLedg.dblPFAmount = 0;
        //            ooAccLedger.Add(oLedg);
        //        }
        //        dr.Close();
        //        gcnMain.Close();
        //        return ooAccLedger;

        //    }
        //}

        #endregion
        #region "Stock Transfer Out"
    
        public string mSaveStockTransferOut(string strDeComID, string strRefNo, long mlngVType, string strDate,
                                        double dblNetAmount, string strNarrations, string strBranchID, string strToBranchID,
                                        string strFromBranchName, string strToBranchName, string DGSalesGrid, bool blngNumberMethod, string vstrProcess, string strAGNST_REF_NO)
        {


            string strSQL, strBillKey, strItemName = "", strUOm, strPer, strGodownName, strSection;
            double dblqty = 0, dblRate, dblTotalAmount;
            long lngloop = 1, lngCost = 0;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }

                try
                {
                    gcnMain.Open();

                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    if (vstrProcess == Utility.gcEND_OF_LIST)
                    {
                        vstrProcess = "";
                    }

                    strSQL = VoucherSW.gInsertmasterNew(strRefNo, strBranchID, mlngVType, strDate, dblNetAmount,
                                                    strNarrations, "", lngCost, vstrProcess, "0", 1, strAGNST_REF_NO);
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    if (DGSalesGrid != "")
                    {
                        string[] words = DGSalesGrid.Split('~');
                        foreach (string strSalesGrid in words)
                        {
                            string[] ooCost = strSalesGrid.Split('|');
                            if (ooCost[0] != "")
                            {
                                strBillKey = strRefNo + lngloop.ToString().PadLeft(4, '0');
                                strItemName = ooCost[0].ToString().Replace("'", "''");
                                dblqty = Utility.Val(ooCost[1].ToString());
                                strUOm = ooCost[2].ToString();
                                strPer = ooCost[2].ToString();
                                strGodownName = strFromBranchName;

                                dblRate = Utility.Val(ooCost[3].ToString());
                                dblTotalAmount = Utility.Val(ooCost[4].ToString());
                                strSection = "";


                                strSQL = VoucherSW.mInsertTranOutward(strBillKey, lngloop, strRefNo, strItemName, mlngVType,
                                                                     strDate, dblqty, dblRate, strGodownName, dblTotalAmount, "O",
                                                                     strBranchID, "", vstrProcess, strUOm, strPer, strSection);

                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                lngloop += 1;

                            }

                        }
                    }

                    strSQL = "UPDATE INV_STOCK_REQUISITION_MASTER SET REQ_STATUS=2 ";
                    strSQL = strSQL + "WHERE REQUISITION_NO='" + strAGNST_REF_NO + "' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();


                    if (blngNumberMethod == true)
                    {
                        strSQL = VoucherSW.gIncreaseVoucher((int)mlngVType);
                        cmdInsert.CommandText = strSQL;
                        cmdInsert.ExecuteNonQuery();
                    }
                    strSQL = "UPDATE INV_TRAN SET INV_TRAN_AMOUNT=INV_TRAN_QUANTITY * INV_TRAN_RATE ";
                    strSQL = strSQL + "WHERE INV_REF_NO='" + strRefNo + "' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();

                   

                    gcnMain.Close();
                    return "1";

                }
                catch (Exception ex)
                {
                    return (ex.ToString());
                }
                finally
                {
                    gcnMain.Close();

                }
            }
        }

      
        public string mUpdateStockTransferOut(string strDeComID, string strRefNo, long mlngVType, string strDate,
                                        double dblNetAmount, string strNarrations, string strBranchID, string strToBranchID,
                                        string strFromBranchName, string strToBranchName, string DGSalesGrid, bool blngNumberMethod, string vstrProcess, string strAGNST_REF_NO)
        {


            string strSQL, strBillKey, strItemName = "", strUOm, strPer, strGodownName, strSection;
            double dblqty = 0, dblRate, dblTotalAmount;
            long lngloop = 1, lngCost = 0;

            connstring = Utility.SQLConnstringComSwitch(strDeComID);



            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }

                try
                {
                    gcnMain.Open();
                    SqlDataReader dr;
                    SqlCommand cmdInsert = new SqlCommand();
                    SqlTransaction myTrans;
                    myTrans = gcnMain.BeginTransaction();
                    cmdInsert.Connection = gcnMain;
                    cmdInsert.Transaction = myTrans;

                    strSQL = "SELECT AGNST_COMP_REF_NO FROM INV_MASTER WHERE INV_REF_NO='" + strRefNo + "' ";
                    cmdInsert.CommandText = strSQL;
                    dr = cmdInsert.ExecuteReader();
                    if (dr.Read())
                    {
                        strAGNST_REF_NO = dr["AGNST_COMP_REF_NO"].ToString();
                    }
                    else
                    {
                        strAGNST_REF_NO = strAGNST_REF_NO;
                    }
                    dr.Close();
                    strSQL = "DELETE FROM INV_TRAN WHERE INV_REF_NO='" + strRefNo + "' ";
                    strSQL = strSQL + "AND INV_INOUT_FLAG='O' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();

                    //strSQL = "DELETE FROM INV_MASTER WHERE INV_REF_NO='" + strRefNo + "' ";
                    //cmdInsert.CommandText = strSQL;
                    //cmdInsert.ExecuteNonQuery();


                    //strSQL = VoucherSW.gInsertmasterNew(strRefNo, strBranchID, mlngVType, strDate, dblNetAmount,
                    //                                  strNarrations, "", lngCost, vstrProcess, "0", 1, strAGNST_REF_NO);
                    //cmdInsert.CommandText = strSQL;
                    //cmdInsert.ExecuteNonQuery();

                    if (DGSalesGrid != "")
                    {
                        string[] words = DGSalesGrid.Split('~');
                        foreach (string strSalesGrid in words)
                        {
                            string[] ooCost = strSalesGrid.Split('|');
                            if (ooCost[0] != "")
                            {
                                strBillKey = strRefNo + lngloop.ToString().PadLeft(4, '0');
                                strItemName = ooCost[0].ToString().Replace("'", "''");
                                dblqty = Utility.Val(ooCost[1].ToString());
                                strUOm = ooCost[2].ToString();
                                strPer = ooCost[2].ToString();
                                strGodownName = strFromBranchName;

                                dblRate = Utility.Val(ooCost[3].ToString());
                                dblTotalAmount = Utility.Val(ooCost[4].ToString());
                                strSection = "";


                                strSQL = VoucherSW.mInsertTranOutward(strBillKey, lngloop, strRefNo, strItemName, mlngVType,
                                                                     strDate, dblqty, dblRate, strGodownName, dblTotalAmount, "O",
                                                                     strBranchID, "", vstrProcess, strUOm, strPer, strSection);

                                cmdInsert.CommandText = strSQL;
                                cmdInsert.ExecuteNonQuery();
                                lngloop += 1;


                            }

                        }
                    }

                  
                    strSQL = "UPDATE INV_TRAN SET INV_TRAN_AMOUNT=INV_TRAN_QUANTITY * INV_TRAN_RATE ";
                    strSQL = strSQL + "WHERE INV_REF_NO='" + strRefNo + "' ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                    cmdInsert.Transaction.Commit();
                  

                    gcnMain.Close();
                    return "1";

                }
                catch (Exception ex)
                {
                    return (ex.ToString());
                }
                finally
                {
                    gcnMain.Close();

                }
            }
        }
        public string gstrGetFromLocation(string strDeComID, string vstrStockSerial)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

           
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                try
                {
                    gcnMain.Open();
                    
                    strSQL = "SELECT GODOWNS_NAME ";
                    strSQL = strSQL + " FROM INV_TRAN  ";
                    strSQL = strSQL + " WHERE INV_REF_NO = '" + vstrStockSerial.Replace("'", "''") + "' ";
                    SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                    cmd.CommandText = strSQL;
                    drGetGroup = cmd.ExecuteReader();
                    if (drGetGroup.Read())
                    {
                        return drGetGroup["GODOWNS_NAME"].ToString();

                    }
                    else
                    {
                        return "";
                    }
                  
                  
                }
                catch (Exception ex)
                {
                    return ex.ToString();
                }
                finally
                {
                    gcnMain.Dispose();
                }
              

            }
        }
        public List<StockItem> mFillDisplayStockTransferin(string strDeComID, string vstrStockSerial)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<StockItem> oogrp = new List<StockItem>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            strSQL = "SELECT M.AGNST_COMP_REF_NO,T.INV_INOUT_FLAG,T.STOCKITEM_NAME,T.GODOWNS_NAME,T.INV_TRAN_QUANTITY, ";
            strSQL = strSQL + "T.INV_TRAN_RATE,INV_TRAN_AMOUNT,T.INV_LOG_NO,M.PROCESS_NAME, ";
            strSQL = strSQL + "T.INV_TRAN_KEY,M.AGNST_COMP_REF_NO,T.GODOWNS_NAME ToGod, T.BRANCH_ID ";
            strSQL = strSQL + " FROM INV_MASTER M,INV_TRAN T WHERE M.INV_REF_NO=T.INV_REF_NO ";
            strSQL = strSQL + "AND T.INV_REF_NO = '" + vstrStockSerial.Replace("'", "''") + "' ";
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    StockItem ogrp = new StockItem();
                    //if (drGetGroup["AGNST_COMP_REF_NO"].ToString() != "")
                    //{
                    //    ogrp.strAgnstRefNo = drGetGroup["AGNST_COMP_REF_NO"].ToString();
                    //}
                    //else
                    //{
                    //    ogrp.strAgnstRefNo = "";
                    //}
                    ogrp.strBatch = drGetGroup["BRANCH_ID"].ToString();
                    ogrp.strInOUT = drGetGroup["INV_INOUT_FLAG"].ToString();
                    ogrp.strItemName = drGetGroup["STOCKITEM_NAME"].ToString();
                    ogrp.strFromLocation = drGetGroup["GODOWNS_NAME"].ToString();

                    if (drGetGroup["INV_TRAN_QUANTITY"].ToString() != "+" && drGetGroup["INV_TRAN_QUANTITY"].ToString() != "-")
                    {
                        ogrp.dblOpnQty = Convert.ToDouble(drGetGroup["INV_TRAN_QUANTITY"]);
                    }
                    else
                    {
                        ogrp.dblOpnQty = Convert.ToDouble(drGetGroup["INV_TRAN_QUANTITY"]);
                    }

                    ogrp.dblOpnRate = Convert.ToDouble(drGetGroup["INV_TRAN_RATE"].ToString());
                    ogrp.dblOpnValue = Convert.ToDouble(drGetGroup["INV_TRAN_AMOUNT"].ToString());
                    if (drGetGroup["INV_LOG_NO"].ToString() != "")
                    {
                        ogrp.strBatch = drGetGroup["INV_LOG_NO"].ToString();
                    }
                    else
                    {
                        ogrp.strBatch = "";
                    }
                    if (drGetGroup["PROCESS_NAME"].ToString() != "")
                    {
                        ogrp.strProcess = drGetGroup["PROCESS_NAME"].ToString();
                    }
                    else
                    {
                        ogrp.strProcess = "";
                    }
                    ogrp.strBillKey = drGetGroup["INV_TRAN_KEY"].ToString();

                    if (drGetGroup["AGNST_COMP_REF_NO"].ToString() != "")
                    {
                        ogrp.strItemCategory = drGetGroup["AGNST_COMP_REF_NO"].ToString();
                    }
                    else
                    {
                        ogrp.strItemCategory = "";
                    }

                    if (drGetGroup["ToGod"].ToString() != "")
                    {
                        ogrp.strToLocation = drGetGroup["ToGod"].ToString();
                    }
                    else
                    {
                        ogrp.strToLocation = "";
                    }


                    oogrp.Add(ogrp);

                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return oogrp;

            }
        }
        public List<StockItem> mFillDisplayStockTransferOut(string strDeComID, string vstrStockSerial)
        {
            string strSQL;
            SqlDataReader drGetGroup;
            List<StockItem> oogrp = new List<StockItem>();
            connstring = Utility.SQLConnstringComSwitch(strDeComID);



            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                //strSQL = "SELECT T.INV_INOUT_FLAG,T.STOCKITEM_NAME,T.GODOWNS_NAME,T.INV_TRAN_QUANTITY, ";
                //strSQL = strSQL + "T.INV_TRAN_QUANTITY,INV_TRAN_RATE,INV_TRAN_AMOUNT,T.INV_LOG_NO,M.PROCESS_NAME, ";
                //strSQL = strSQL + "T.INV_TRAN_KEY,M.AGNST_COMP_REF_NO,R.GODOWNS_NAME ToGod, T.BRANCH_ID ";
                ////strSQL = strSQL + "FROM INV_TRAN T,INV_MASTER M,INV_STOCK_REQUISITION_MASTER R ";
                //strSQL = strSQL + "FROM INV_TRAN AS T INNER JOIN ";
                //strSQL = strSQL + "INV_MASTER AS M ON T.BRANCH_ID = M.BRANCH_ID AND T.INV_REF_NO = M.INV_REF_NO LEFT OUTER JOIN ";
                //strSQL = strSQL + "INV_STOCK_REQUISITION_MASTER AS R ON M.AGNST_COMP_REF_NO = R.REQUISITION_NO ";
                //strSQL = strSQL + "WHERE   T.BRANCH_ID=m.BRANCH_ID and T.INV_REF_NO=M.INV_REF_NO  ";
                //strSQL = strSQL + "and M.AGNST_COMP_REF_NO =R.REQUISITION_NO ";
                //strSQL = strSQL + "and T.INV_REF_NO = '" + vstrStockSerial.Replace("'", "''") + "' ";
                //strSQL = strSQL + "and T.INV_INOUT_FLAG = 'O' ";


                strSQL = "SELECT T.INV_INOUT_FLAG, T.STOCKITEM_NAME, T.GODOWNS_NAME, T.INV_TRAN_QUANTITY, T.INV_TRAN_QUANTITY AS Expr1, T.INV_TRAN_RATE, T.INV_TRAN_AMOUNT, T.INV_LOG_NO, M.PROCESS_NAME, T.INV_TRAN_KEY, ";
                strSQL = strSQL + "M.AGNST_COMP_REF_NO, R.GODOWNS_NAME AS ToGod, T.BRANCH_ID ";
                strSQL = strSQL + "FROM INV_TRAN AS T INNER JOIN ";
                strSQL = strSQL + "INV_MASTER AS M ON T.BRANCH_ID = M.BRANCH_ID AND T.INV_REF_NO = M.INV_REF_NO LEFT OUTER JOIN ";
                strSQL = strSQL + "INV_STOCK_REQUISITION_MASTER AS R ON M.AGNST_COMP_REF_NO = R.REQUISITION_NO ";
                strSQL = strSQL + "WHERE T.INV_REF_NO = '" + vstrStockSerial.Replace("'", "''") + "' ";
                strSQL = strSQL + "and T.INV_INOUT_FLAG = 'O'  ";

                SqlCommand cmd = new SqlCommand(strSQL, gcnMain);
                drGetGroup = cmd.ExecuteReader();
                while (drGetGroup.Read())
                {
                    StockItem ogrp = new StockItem();

                    ogrp.strBatch = drGetGroup["BRANCH_ID"].ToString();
                    ogrp.strInOUT = drGetGroup["INV_INOUT_FLAG"].ToString();
                    ogrp.strItemName = drGetGroup["STOCKITEM_NAME"].ToString();
                    ogrp.strFromLocation = drGetGroup["GODOWNS_NAME"].ToString();

                    if (drGetGroup["INV_TRAN_QUANTITY"].ToString() != "+" && drGetGroup["INV_TRAN_QUANTITY"].ToString() != "-")
                    {
                        ogrp.dblOpnQty = Math.Abs(Convert.ToDouble(drGetGroup["INV_TRAN_QUANTITY"]));
                    }
                    else
                    {
                        ogrp.dblOpnQty = Math.Abs(Convert.ToDouble(drGetGroup["INV_TRAN_QUANTITY"]));
                    }

                    ogrp.dblOpnRate = Convert.ToDouble(drGetGroup["INV_TRAN_RATE"].ToString());
                    ogrp.dblOpnValue = Math.Abs(Convert.ToDouble(drGetGroup["INV_TRAN_AMOUNT"].ToString()));
                    if (drGetGroup["INV_LOG_NO"].ToString() != "")
                    {
                        ogrp.strBatch = drGetGroup["INV_LOG_NO"].ToString();
                    }
                    else
                    {
                        ogrp.strBatch = "";
                    }
                    if (drGetGroup["PROCESS_NAME"].ToString() != "")
                    {
                        ogrp.strProcess = drGetGroup["PROCESS_NAME"].ToString();
                    }
                    else
                    {
                        ogrp.strProcess = "";
                    }
                    ogrp.strBillKey = drGetGroup["INV_TRAN_KEY"].ToString();

                    if (drGetGroup["AGNST_COMP_REF_NO"].ToString() != "")
                    {
                        ogrp.strItemCategory = drGetGroup["AGNST_COMP_REF_NO"].ToString();
                    }
                    else
                    {
                        ogrp.strItemCategory = "";
                    }

                    if (drGetGroup["ToGod"].ToString() != "")
                    {
                        ogrp.strToLocation = drGetGroup["ToGod"].ToString();
                    }
                    else
                    {
                        ogrp.strToLocation = "";
                    }


                    oogrp.Add(ogrp);

                }
                drGetGroup.Close();
                gcnMain.Dispose();
                return oogrp;

            }
        }
        #endregion
        #region "Purchase Report"
        public List<RStockInformation> mItemMasterForvalueN(string strDeComID, string strFdate, string strTDate, string strString, string strSelction,
                                     int intZeroQntySuppress, string strBranchID, string strGroup)
        {
            string strSQL = null;
           
            connstring = Utility.SQLConnstringComSwitch(strDeComID);
            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Connection = gcnMain;
                cmdInsert.Transaction = myTrans;
                List<RStockInformation> ooAccLedger = new List<RStockInformation>();


                if (strGroup == "Finished Goods")
                {
                    strSQL = "ALTER VIEW INV_TRAN_PUR_INWARD_QRY AS ";
                    strSQL = strSQL + "SELECT STOCKITEM_NAME, ISNULL(SUM(INWARD_AMOUNT), 0) AS BILL_NET_AMOUNT, ISNULL(SUM(INWARD_QUANTITY), 0) AS BILL_QUANTITY ";
                    strSQL = strSQL + " ,Round(ISNULL(SUM(INWARD_AMOUNT), 0) /ISNULL(SUM(INWARD_QUANTITY), 0),2) AS BIL_RATE";
                    strSQL = strSQL + " FROM INV_TRAN ";
                    strSQL = strSQL + "WHERE  INV_DATE < ";
                    strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                    strSQL = strSQL + " AND (INV_VOUCHER_TYPE =33 )";
                    if (strBranchID != "")
                    {
                        strSQL = strSQL + " AND BRANCH_ID = '" + strBranchID + "' ";
                    }

                    strSQL = strSQL + "GROUP BY STOCKITEM_NAME ";
                    cmdInsert.CommandText = strSQL;
                    cmdInsert.ExecuteNonQuery();
                }

                strSQL = "ALTER VIEW INV_TRAN_QRY AS ";
                strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(INV_TRAN_QUANTITY) AS OPN_QUANTITY,";
                strSQL = strSQL + "SUM(INV_TRAN_AMOUNT) AS OPN_AMOUNT,0 AS INWARD_QUANTITY, 0 AS INWARD_AMOUNT,";
                strSQL = strSQL + "0 OUTWARD_QUANTITY,0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT  ";
                strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                strSQL = strSQL + "WHERE (INV_DATE < " + Utility.cvtSQLDateString(strFdate) + ")  ";
                strSQL = strSQL + "AND INV_VOUCHER_TYPE IN ('26','33','0')";
                strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                strSQL = strSQL + "Union All ";
                strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT, SUM(INV_TRAN_QUANTITY) AS INWARD_QUANTITY, SUM(INV_TRAN_AMOUNT) AS INWARD_AMOUNT, ";
                strSQL = strSQL + "0 OUTWARD_QUANTITY, 0 OUTWARD_SALES_AMOUNT, 0 AS OUTWARD_COST_AMOUNT ";
                strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                strSQL = strSQL + "AND INV_VOUCHER_TYPE IN ('33')";
                strSQL = strSQL + "AND INV_INOUT_FLAG='I' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                strSQL = strSQL + "Union All ";
                strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME, 0 OPN_QUANTITY,0 OPN_AMOUNT,0 INWARD_QUANTITY,0 INWARD_AMOUNT,";
                strSQL = strSQL + "SUM(INV_TRAN_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT ";
                strSQL = strSQL + "FROM INV_STOCKITEM_TRAN_QRY ";
                strSQL = strSQL + "WHERE (INV_DATE BETWEEN ";
                strSQL = strSQL + " " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + " AND " + Utility.cvtSQLDateString(strTDate) + ")";
                strSQL = strSQL + "AND INV_VOUCHER_TYPE IN ('26')";
                //strSQL = strSQL + "AND INV_VOUCHER_TYPE <> " + (int)Utility.VOUCHER_TYPE.vtSTOCK_PHYSICAL + " ";
                strSQL = strSQL + "AND INV_INOUT_FLAG='O' GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "ALTER VIEW INV_OPENING_TRAN_QRY AS ";
                strSQL = strSQL + "SELECT STOCKGROUP_NAME,STOCKITEM_NAME,SUM(OPN_QUANTITY) AS INV_TRAN_QUANTITY, SUM(OPN_AMOUNT) AS INV_TRAN_AMOUNT,";
                strSQL = strSQL + "SUM(INWARD_QUANTITY) AS INWARD_QUANTITY, SUM(INWARD_AMOUNT) AS INWARD_AMOUNT,";
                strSQL = strSQL + "SUM(OUTWARD_QUANTITY) AS OUTWARD_QUANTITY, SUM(OUTWARD_SALES_AMOUNT) AS OUTWARD_SALES_AMOUNT,";
                strSQL = strSQL + "SUM(OUTWARD_COST_AMOUNT) AS OUTWARD_COST_AMOUNT,SUM(OPN_QUANTITY+INWARD_QUANTITY+OUTWARD_QUANTITY) CLS , ";
                strSQL = strSQL + "SUM(OPN_AMOUNT+OUTWARD_COST_AMOUNT) CLSAMNT  ";
                strSQL = strSQL + "FROM INV_TRAN_QRY ";
                strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,STOCKITEM_NAME ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                cmdInsert.Transaction.Commit();

                if (strGroup != "Finished Goods")
                {
                    strSQL = "SELECT ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY, INV_OPENING_TRAN_QRY.INV_TRAN_AMOUNT, INV_OPENING_TRAN_QRY.INWARD_QUANTITY, INV_OPENING_TRAN_QRY.INWARD_AMOUNT, INV_OPENING_TRAN_QRY.INWARD_QUANTITY , INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY, ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.OUTWARD_SALES_AMOUNT, INV_OPENING_TRAN_QRY.OUTWARD_COST_AMOUNT,INV_OPENING_TRAN_QRY.CLS,INV_OPENING_TRAN_QRY.CLSAMNT , ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKITEM_NAME, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4, ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5, ";
                    strSQL = strSQL + "INV_STOCKITEM.STOCKITEM_BASEUNITS, ";
                    //strSQL = strSQL + "INV_TRAN_PUR_INWARD_QRY.BILL_NET_AMOUNT, INV_TRAN_PUR_INWARD_QRY.BILL_QUANTITY, ";
                    strSQL = strSQL + "INV_UNIT_MEASUREMENT.INV_UNIT_DECIMAL_NO ";
                    //,INV_TRAN_PUR_INWARD_QRY.BIL_RATE ";
                    strSQL = strSQL + "FROM ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY INV_OPENING_TRAN_QRY INNER JOIN INV_STOCKITEM INV_STOCKITEM ON INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM.STOCKITEM_NAME INNER JOIN INV_STOCKITEM_LEVEL INV_STOCKITEM_LEVEL ON ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_STOCKITEM_LEVEL.STOCKITEM_NAME LEFT JOIN INV_TRAN_PUR_INWARD_QRY INV_TRAN_PUR_INWARD_QRY ON ";
                    strSQL = strSQL + "INV_OPENING_TRAN_QRY.STOCKITEM_NAME = INV_TRAN_PUR_INWARD_QRY.STOCKITEM_NAME INNER JOIN INV_UNIT_MEASUREMENT INV_UNIT_MEASUREMENT ON INV_STOCKITEM.STOCKITEM_BASEUNITS = INV_UNIT_MEASUREMENT.UNIT_SYMBOL ";
                    //strSQL = strSQL + " WHERE INV_STOCKITEM_LEVEL.STOCKITEM_NAME='C.M' ";

                    if (strString != "")
                    {
                        strSQL = strSQL + "WHERE ";
                        strSQL = strSQL + "(INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1 IN (" + strString + ") OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2 IN (" + strString + ") ";
                        strSQL = strSQL + " OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3 IN (" + strString + ") OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4 IN (" + strString + ") ";
                        strSQL = strSQL + " OR INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5 IN (" + strString + ")) ";
                        // strSQL = strSQL + " WHERE INV_STOCKITEM.STOCKITEM_NAME IN(" + strString + ")";
                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }
                    else
                    {
                        if (intZeroQntySuppress > 0)
                        {
                            strSQL = strSQL + " AND (INV_OPENING_TRAN_QRY.INV_TRAN_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.INWARD_QUANTITY <> 0 OR INV_OPENING_TRAN_QRY.OUTWARD_QUANTITY <> 0 )";
                        }
                    }

                    strSQL = strSQL + "ORDER BY INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_1, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_2, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_3, ";
                    strSQL = strSQL + "INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_4, INV_STOCKITEM_LEVEL.STOCKGROUP_LEVEL_5,INV_STOCKITEM_LEVEL.STOCKITEM_NAME ASC";


                    cmdInsert.CommandText = strSQL;
                    cmdInsert.Connection = gcnMain;
                    dr = cmdInsert.ExecuteReader();

                    while (dr.Read())
                    {

                        RStockInformation oLedg = new RStockInformation();

                        oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                        //oLedg.strUnit = dr["STOCKITEM_NAME"].ToString();
                        oLedg.strGroupParent = dr["STOCKGROUP_LEVEL_1"].ToString();
                        oLedg.strGroupPrimary = dr["STOCKGROUP_LEVEL_2"].ToString();
                        oLedg.strAltUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                        oLedg.strGroupName = dr["STOCKGROUP_LEVEL_3"].ToString();

                        oLedg.dblOpnQty = Convert.ToDouble(dr["INV_TRAN_QUANTITY"].ToString());
                        oLedg.dblOpnAmnt = Convert.ToDouble(dr["INV_TRAN_AMOUNT"].ToString());
                        oLedg.dblInwQty = Convert.ToDouble(dr["INWARD_QUANTITY"].ToString());
                        if (Convert.ToDouble(dr["INWARD_AMOUNT"].ToString()) > 0)
                        {
                            oLedg.dblInwAmount = Convert.ToDouble(dr["INWARD_AMOUNT"].ToString());
                        }
                        else
                        {
                            oLedg.dblInwAmount = 0;
                        }
                        if (Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString()) > 0)
                        {
                            oLedg.dblOutWardQty = Convert.ToDouble(dr["OUTWARD_QUANTITY"].ToString());
                        }
                        else
                        {
                            oLedg.dblOutWardQty = 0;
                        }

                        oLedg.dblOutwardAmnt = Math.Abs(Convert.ToDouble(dr["OUTWARD_COST_AMOUNT"].ToString()));
                        oLedg.dblclsQty = Convert.ToDouble(dr["CLS"].ToString());
                        //oLedg.dblclsAmnt = (Convert.ToDouble(dr["CLSAMNT"].ToString()) + Convert.ToDouble(dr["BILL_NET_AMOUNT"].ToString())) * dblrate;
                        oLedg.dblclsAmnt = Convert.ToDouble(dr["CLSAMNT"].ToString());
                        ooAccLedger.Add(oLedg);
                    }

                    if (!dr.HasRows)
                    {
                        RStockInformation oLedg = new RStockInformation();
                        oLedg.strItemName = "";
                        oLedg.strGroupParent = "";
                        oLedg.strGroupPrimary = "";
                        oLedg.strAltUnit = "";
                        oLedg.strGroupName = "";
                        oLedg.dblOpnQty = 0;
                        oLedg.dblOpnAmnt = 0;
                        oLedg.dblInwQty = 0;
                        oLedg.dblInwAmount = 0;
                        oLedg.dblOutWardQty = 0;
                        oLedg.dblOutwardAmnt = 0;
                        oLedg.dblclsQty = 0;
                        oLedg.dblclsAmnt = 0;
                        ooAccLedger.Add(oLedg);
                    }
                    dr.Close();
                }


                gcnMain.Close();
                return ooAccLedger;
            }

        }
        #endregion
        #region "I Prices"
        public List<RStockInformation> GetrptIpriceNew(string strDeComID, string strFdate, string strTDate, string strGrid, string strBranchID, string strstring)
        {

            double dblOpenQty = 0, dblclsQty = 0, dblproduction = 0, dblsalesQty = 0, dblSalesPrice = 0, dblComm = 0, dblDisVal = 0, dblActualPrice = 0;



            string strSQL = null;
            connstring = Utility.SQLConnstringComSwitch(strDeComID);

            using (SqlConnection gcnMain = new SqlConnection(connstring))
            {
                if (gcnMain.State == ConnectionState.Open)
                {
                    gcnMain.Close();
                }
                gcnMain.Open();
                List<RStockInformation> ooAccLedger = new List<RStockInformation>();
                SqlDataReader dr;
                SqlCommand cmdInsert = new SqlCommand();
                SqlTransaction myTrans;
                cmdInsert.Connection = gcnMain;
                myTrans = gcnMain.BeginTransaction();
                cmdInsert.Transaction = myTrans;

                strSQL = "DELETE from INV_SALES_PRICE_RPT ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();



                strSQL = "INSERT INTO INV_SALES_PRICE_RPT(STOCKITEM_NAME,SALES_PRICE_AMOUNT,SALES_PRICE_EFFECTIVE_DATE) ";
                strSQL = strSQL + "SELECT STOCKITEM_NAME, SALES_PRICE_AMOUNT,SALES_PRICE_EFFECTIVE_DATE ";
                strSQL = strSQL + "FROM (SELECT STOCKITEM_NAME,SALES_PRICE_EFFECTIVE_DATE, SALES_PRICE_AMOUNT, ";
                strSQL = strSQL + "ROW_NUMBER() OVER (PARTITION BY STOCKITEM_NAME ORDER BY SALES_PRICE_EFFECTIVE_DATE DESC) rank ";
                strSQL = strSQL + "FROM INV_SALES_PRICE) a ";
                strSQL = strSQL + "WHERE a.rank = 1  ";
                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "INSERT INTO INV_SALES_PRICE_RPT(STOCKITEM_NAME,ACTUAL_DISCOUNT) ";
                strSQL = strSQL + "select  I.STOCKITEM_NAME ,max(T.GROUP_PERCENTAGES) as CommPrice from  ";
                strSQL = strSQL + "INV_GROUP_COMMISSION_MASTER M,INV_GROUP_COMMISSION_TRAN T,INV_STOCKGROUP G ,INV_STOCKITEM I ";
                strSQL = strSQL + "where M.GROUP_COMMISSION_KEY=T.GROUP_COMMISSION_KEY and M.STOCKGROUP_NAME= G.GR_NAME ";
                strSQL = strSQL + "and G.STOCKGROUP_NAME=I.STOCKGROUP_NAME ";
                strSQL = strSQL + "group by I.STOCKITEM_NAME ";

                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();

                strSQL = "ALTER VIEW INV_TRAN_QRY AS ";
                strSQL = strSQL + "SELECT  V.STOCKGROUP_NAME, V.STOCKITEM_NAME, SUM(DISTINCT V.INV_TRAN_QUANTITY) AS OPN_QUANTITY, 0 AS Production, 0 AS SalesQTy,0 SalesPrice,0 Discount ";
                strSQL = strSQL + "FROM  INV_STOCKITEM_TRAN_QRY AS V INNER JOIN ";
                strSQL = strSQL + "INV_SALES_PRICE AS P ON V.STOCKITEM_NAME = P.STOCKITEM_NAME ";
                strSQL = strSQL + "WHERE (V.INV_DATE < " + Utility.cvtSQLDateString(strFdate) + " ) AND (V.BRANCH_ID = '" + strBranchID + "') ";
                if (strstring != "")
                {
                    strSQL = strSQL + "AND V.STOCKGROUP_NAME in (" + strstring + ") ";
                }
                strSQL = strSQL + "GROUP BY V.STOCKGROUP_NAME, V.STOCKITEM_NAME ";

                strSQL = strSQL + "Union All ";
                strSQL = strSQL + "SELECT STOCKGROUP_NAME,T.STOCKITEM_NAME, 0 OPN_QUANTITY, SUM(DISTINCT INV_TRAN_QUANTITY) AS Production, 0 SalesQTy,0 SalesPrice,0 Discount ";
                strSQL = strSQL + "FROM INV_TRAN T,INV_STOCKITEM I,INV_SALES_PRICE P ";
                strSQL = strSQL + "WHERE T.STOCKITEM_NAME=I.STOCKITEM_NAME  and T.STOCKITEM_NAME=P.STOCKITEM_NAME  and ";
                strSQL = strSQL + "(INV_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + "  AND " + Utility.cvtSQLDateString(strTDate) + ")  ";
                strSQL = strSQL + "AND BRANCH_ID = '" + strBranchID + "' AND INV_INOUT_FLAG='I'  and T.INV_VOUCHER_TYPE=27 ";
                if (strstring != "")
                {
                    strSQL = strSQL + "AND STOCKGROUP_NAME in (" + strstring + ") ";
                }
                strSQL = strSQL + "GROUP BY STOCKGROUP_NAME,T.STOCKITEM_NAME  ";

                strSQL = strSQL + "Union All ";
                strSQL = strSQL + "select s.STOCKGROUP_NAME,s.STOCKITEM_NAME, 0 OPN_QUANTITY, 0 AS Production,  abs(isnull(sum(t.BILL_QUANTITY+t.BILL_QUANTITY_BONUS ),0)) as opn ,0 SalesPrice,0 Discount  ";
                strSQL = strSQL + "from INV_STOCKITEM s,ACC_BILL_TRAN t where s.STOCKITEM_NAME =t.STOCKITEM_NAME ";
                strSQL = strSQL + "AND t.COMP_VOUCHER_DATE BETWEEN  " + Utility.cvtSQLDateString(strFdate) + " ";
                strSQL = strSQL + "AND  " + Utility.cvtSQLDateString(strTDate) + " ";
                strSQL = strSQL + " and t.COMP_VOUCHER_TYPE = " + (int)Utility.VOUCHER_TYPE.vtSALES_INVOICE + " ";
                strSQL = strSQL + "AND t.BRANCH_ID='" + strBranchID + "' ";
                if (strstring != "")
                {
                    strSQL = strSQL + "AND s.STOCKGROUP_NAME in (" + strstring + ") ";
                }
                if (strBranchID == "0001")
                {
                    strSQL = strSQL + "AND t.GODOWNS_NAME='Main Location' ";
                }
                strSQL = strSQL + "group by s.STOCKGROUP_NAME,s.STOCKITEM_NAME ";


                strSQL = strSQL + "Union All ";
                strSQL = strSQL + "select  I.STOCKGROUP_NAME,T.STOCKITEM_NAME, 0 AS OPN_QUANTITY, 0 AS Production, 0 AS SalesQTy,sum(T.SALES_PRICE_AMOUNT)as SalesPrice,0 Discount ";
                strSQL = strSQL + "from INV_SALES_PRICE_RPT T,INV_STOCKITEM I  ";
                strSQL = strSQL + "where T.STOCKITEM_NAME= I.STOCKITEM_NAME  ";
                if (strstring != "")
                {
                    strSQL = strSQL + "AND I.STOCKGROUP_NAME in (" + strstring + ") ";
                }
                strSQL = strSQL + "group by T.STOCKITEM_NAME,I.STOCKGROUP_NAME ";

                strSQL = strSQL + "Union All ";
                strSQL = strSQL + "select  I.STOCKGROUP_NAME,T.STOCKITEM_NAME, 0 AS OPN_QUANTITY, 0 AS Production, 0 AS SalesQTy,0 SalesPrice,sum(T.ACTUAL_DISCOUNT)as Discount ";
                strSQL = strSQL + "from INV_SALES_PRICE_RPT T,INV_STOCKITEM I  ";
                strSQL = strSQL + "where T.STOCKITEM_NAME= I.STOCKITEM_NAME  ";
                if (strstring != "")
                {
                    strSQL = strSQL + "AND I.STOCKGROUP_NAME in (" + strstring + ") ";
                }
                strSQL = strSQL + "group by T.STOCKITEM_NAME,I.STOCKGROUP_NAME ";

                cmdInsert.CommandText = strSQL;
                cmdInsert.ExecuteNonQuery();
                cmdInsert.Transaction.Commit();



                strSQL = "SELECT T.STOCKGROUP_NAME, T.STOCKITEM_NAME,I.STOCKITEM_BASEUNITS, SUM(T.OPN_QUANTITY) AS OPQty, SUM(T.Production) AS Production, ";
                strSQL = strSQL + "SUM(T.SalesQTy) AS SalesQTy, SUM(T.SalesPrice) AS SalesPrice, SUM(T.Discount)  ";
                strSQL = strSQL + "AS Discount, G.STOCKGROUP_PARENT, G.STOCKGROUP_PRIMARY ";
                strSQL = strSQL + "FROM  INV_TRAN_QRY AS T INNER JOIN ";
                strSQL = strSQL + "INV_STOCKITEM AS I ON T.STOCKGROUP_NAME = I.STOCKGROUP_NAME AND T.STOCKITEM_NAME = I.STOCKITEM_NAME INNER JOIN ";
                strSQL = strSQL + "INV_STOCKGROUP AS G ON I.STOCKGROUP_NAME = G.STOCKGROUP_NAME ";
                //strSQL = strSQL + "where T.STOCKITEM_NAME='Globules - 20' ";
                strSQL = strSQL + "GROUP BY T.STOCKGROUP_NAME, T.STOCKITEM_NAME,I.STOCKITEM_BASEUNITS, G.STOCKGROUP_PARENT, G.STOCKGROUP_PRIMARY ";
                strSQL = strSQL + "ORDER BY G.STOCKGROUP_PRIMARY, G.STOCKGROUP_PARENT, T.STOCKGROUP_NAME, T.STOCKITEM_NAME ";

                cmdInsert.CommandText = strSQL;
                dr = cmdInsert.ExecuteReader();
                while (dr.Read())
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strItemName = dr["STOCKITEM_NAME"].ToString();
                    oLedg.strGroupParent = dr["STOCKGROUP_PARENT"].ToString();
                    oLedg.strGroupPrimary = dr["STOCKGROUP_PRIMARY"].ToString();
                    oLedg.strAltUnit = dr["STOCKITEM_BASEUNITS"].ToString();
                    oLedg.strGroupName = dr["STOCKGROUP_NAME"].ToString();
                    dblOpenQty = Convert.ToDouble(dr["OPQty"].ToString());
                    oLedg.dblOpnQty = dblOpenQty;
                    dblproduction = Convert.ToDouble(dr["Production"].ToString());
                    oLedg.dblInwQty = dblproduction;
                    dblsalesQty = Math.Abs(Convert.ToDouble(dr["SalesQTy"].ToString()));
                    oLedg.dblOutWardQty = dblsalesQty;
                    if (dr["SalesPrice"].ToString() != "")
                    {
                        dblSalesPrice = Convert.ToDouble(dr["SalesPrice"].ToString());
                    }
                    else
                    {
                        dblSalesPrice = 0;
                    }
                    if (dr["Discount"].ToString() != "")
                    {
                        dblComm = Convert.ToDouble(dr["Discount"].ToString());
                    }
                    else
                    {
                        dblComm = 0;
                    }

                    dblDisVal = ((dblSalesPrice * dblComm) / 100);
                    dblActualPrice = dblSalesPrice - dblDisVal;

                    oLedg.dblInwRate = dblActualPrice;
                    dblclsQty = Math.Round(((dblOpenQty + dblproduction) - Math.Abs(dblsalesQty)), 3);
                    oLedg.dblclsQty = dblclsQty;
                    oLedg.dblOpnAmnt = dblOpenQty * dblActualPrice;
                    oLedg.dblInwAmount = dblproduction * dblActualPrice;
                    oLedg.dblOutwardAmnt = dblsalesQty * dblActualPrice;
                    oLedg.dblclsAmnt = dblclsQty * dblActualPrice;
                    ooAccLedger.Add(oLedg);
                }

                if (!dr.HasRows)
                {
                    RStockInformation oLedg = new RStockInformation();
                    oLedg.strItemName = "";
                    oLedg.strGroupParent = "";
                    oLedg.strGroupPrimary = "";
                    oLedg.strAltUnit = "";
                    oLedg.strGroupName = "";
                    oLedg.dblOpnQty = 0;
                    oLedg.dblOpnAmnt = 0;
                    oLedg.dblInwQty = 0;
                    oLedg.dblInwAmount = 0;
                    oLedg.dblOutWardQty = 0;
                    oLedg.dblOutwardAmnt = 0;
                    oLedg.dblclsQty = 0;
                    oLedg.dblclsAmnt = 0;
                    ooAccLedger.Add(oLedg);
                }


                dr.Close();
                gcnMain.Close();
                return ooAccLedger;

            }


        }
        #endregion
    }
}
